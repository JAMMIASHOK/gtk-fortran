atk;atk_action_do_action;atk-auto.f90;/usr/include/atk-1.0/atk/atkaction.h;" gboolean atk_action_do_action (AtkAction *action, gint i);"
atk;atk_action_get_description;atk-auto.f90;/usr/include/atk-1.0/atk/atkaction.h;" const gchar* atk_action_get_description (AtkAction *action, gint i);"
atk;atk_action_get_keybinding;atk-auto.f90;/usr/include/atk-1.0/atk/atkaction.h;" const gchar* atk_action_get_keybinding (AtkAction *action, gint i);"
atk;atk_action_get_localized_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkaction.h;" const gchar* atk_action_get_localized_name (AtkAction *action, gint i);"
atk;atk_action_get_n_actions;atk-auto.f90;/usr/include/atk-1.0/atk/atkaction.h;" gint atk_action_get_n_actions (AtkAction *action);"
atk;atk_action_get_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkaction.h;" const gchar* atk_action_get_name (AtkAction *action, gint i);"
atk;atk_action_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkaction.h;"  GType atk_action_get_type (void);"
atk;atk_action_set_description;atk-auto.f90;/usr/include/atk-1.0/atk/atkaction.h;" gboolean atk_action_set_description (AtkAction *action, gint i, const gchar *desc);"
atk;atk_add_focus_tracker;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" guint atk_add_focus_tracker (AtkEventListener focus_tracker);"
atk;atk_add_global_event_listener;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" guint atk_add_global_event_listener (GSignalEmissionHook listener, const gchar *event_type);"
atk;atk_add_key_event_listener;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" guint atk_add_key_event_listener (AtkKeySnoopFunc listener, gpointer data);"
atk;atk_attribute_set_free;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" void atk_attribute_set_free (AtkAttributeSet *attrib_set);"
atk;atk_component_add_focus_handler;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" guint atk_component_add_focus_handler (AtkComponent *component, AtkFocusHandler handler);"
atk;atk_component_contains;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" gboolean atk_component_contains (AtkComponent *component, gint x, gint y, AtkCoordType coord_type);"
atk;atk_component_get_alpha;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" gdouble atk_component_get_alpha (AtkComponent *component);"
atk;atk_component_get_extents;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" void atk_component_get_extents (AtkComponent *component, gint *x, gint *y, gint *width, gint *height, AtkCoordType coord_type);"
atk;atk_component_get_layer;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" AtkLayer atk_component_get_layer (AtkComponent *component);"
atk;atk_component_get_mdi_zorder;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" gint atk_component_get_mdi_zorder (AtkComponent *component);"
atk;atk_component_get_position;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" void atk_component_get_position (AtkComponent *component, gint *x, gint *y, AtkCoordType coord_type);"
atk;atk_component_get_size;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" void atk_component_get_size (AtkComponent *component, gint *width, gint *height);"
atk;atk_component_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" GType atk_component_get_type (void);"
atk;atk_component_grab_focus;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" gboolean atk_component_grab_focus (AtkComponent *component);"
atk;atk_component_ref_accessible_at_point;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" AtkObject* atk_component_ref_accessible_at_point(AtkComponent *component, gint x, gint y, AtkCoordType coord_type);"
atk;atk_component_remove_focus_handler;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" void atk_component_remove_focus_handler (AtkComponent *component, guint handler_id);"
atk;atk_component_set_extents;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" gboolean atk_component_set_extents (AtkComponent *component, gint x, gint y, gint width, gint height, AtkCoordType coord_type);"
atk;atk_component_set_position;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" gboolean atk_component_set_position (AtkComponent *component, gint x, gint y, AtkCoordType coord_type);"
atk;atk_component_set_size;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;" gboolean atk_component_set_size (AtkComponent *component, gint width, gint height);"
atk;atk_coord_type_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atk-enum-types.h;" GType atk_coord_type_get_type (void);"
atk;atk_document_get_attribute_value;atk-auto.f90;/usr/include/atk-1.0/atk/atkdocument.h;" const gchar* atk_document_get_attribute_value (AtkDocument *document, const gchar *attribute_name);"
atk;atk_document_get_attributes;atk-auto.f90;/usr/include/atk-1.0/atk/atkdocument.h;" AtkAttributeSet* atk_document_get_attributes (AtkDocument *document);"
atk;atk_document_get_current_page_number;atk-auto.f90;/usr/include/atk-1.0/atk/atkdocument.h;" gint atk_document_get_current_page_number (AtkDocument *document);"
atk;atk_document_get_document;atk-auto.f90;/usr/include/atk-1.0/atk/atkdocument.h;" gpointer atk_document_get_document (AtkDocument *document);"
atk;atk_document_get_document_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkdocument.h;" const gchar* atk_document_get_document_type (AtkDocument *document);"
atk;atk_document_get_locale;atk-auto.f90;/usr/include/atk-1.0/atk/atkdocument.h;" const gchar* atk_document_get_locale (AtkDocument *document);"
atk;atk_document_get_page_count;atk-auto.f90;/usr/include/atk-1.0/atk/atkdocument.h;" gint atk_document_get_page_count (AtkDocument *document);"
atk;atk_document_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkdocument.h;"  GType atk_document_get_type (void);"
atk;atk_document_set_attribute_value;atk-auto.f90;/usr/include/atk-1.0/atk/atkdocument.h;" gboolean atk_document_set_attribute_value (AtkDocument *document, const gchar *attribute_name, const gchar *attribute_value);"
atk;atk_editable_text_copy_text;atk-auto.f90;/usr/include/atk-1.0/atk/atkeditabletext.h;" void atk_editable_text_copy_text (AtkEditableText *text, gint start_pos, gint end_pos);"
atk;atk_editable_text_cut_text;atk-auto.f90;/usr/include/atk-1.0/atk/atkeditabletext.h;" void atk_editable_text_cut_text (AtkEditableText *text, gint start_pos, gint end_pos);"
atk;atk_editable_text_delete_text;atk-auto.f90;/usr/include/atk-1.0/atk/atkeditabletext.h;" void atk_editable_text_delete_text (AtkEditableText *text, gint start_pos, gint end_pos);"
atk;atk_editable_text_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkeditabletext.h;"  GType atk_editable_text_get_type (void);"
atk;atk_editable_text_insert_text;atk-auto.f90;/usr/include/atk-1.0/atk/atkeditabletext.h;" void atk_editable_text_insert_text (AtkEditableText *text, const gchar *string, gint length, gint *position);"
atk;atk_editable_text_paste_text;atk-auto.f90;/usr/include/atk-1.0/atk/atkeditabletext.h;" void atk_editable_text_paste_text (AtkEditableText *text, gint position);"
atk;atk_editable_text_set_run_attributes;atk-auto.f90;/usr/include/atk-1.0/atk/atkeditabletext.h;" gboolean atk_editable_text_set_run_attributes (AtkEditableText *text, AtkAttributeSet *attrib_set, gint start_offset, gint end_offset);"
atk;atk_editable_text_set_text_contents;atk-auto.f90;/usr/include/atk-1.0/atk/atkeditabletext.h;" void atk_editable_text_set_text_contents (AtkEditableText *text, const gchar *string);"
atk;atk_focus_tracker_init;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" void atk_focus_tracker_init (AtkEventListenerInit init);"
atk;atk_focus_tracker_notify;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" void atk_focus_tracker_notify (AtkObject *object);"
atk;atk_get_binary_age;atk-auto.f90;/usr/include/atk-1.0/atk/atkversion.h;" guint atk_get_binary_age (void) G_GNUC_CONST;"
atk;atk_get_default_registry;atk-auto.f90;/usr/include/atk-1.0/atk/atkregistry.h;" AtkRegistry* atk_get_default_registry (void);"
atk;atk_get_focus_object;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" AtkObject* atk_get_focus_object (void);"
atk;atk_get_interface_age;atk-auto.f90;/usr/include/atk-1.0/atk/atkversion.h;" guint atk_get_interface_age (void) G_GNUC_CONST;"
atk;atk_get_major_version;atk-auto.f90;/usr/include/atk-1.0/atk/atkversion.h;"  guint atk_get_major_version (void) G_GNUC_CONST;"
atk;atk_get_micro_version;atk-auto.f90;/usr/include/atk-1.0/atk/atkversion.h;" guint atk_get_micro_version (void) G_GNUC_CONST;"
atk;atk_get_minor_version;atk-auto.f90;/usr/include/atk-1.0/atk/atkversion.h;" guint atk_get_minor_version (void) G_GNUC_CONST;"
atk;atk_get_root;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" AtkObject* atk_get_root(void);"
atk;atk_get_toolkit_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" const gchar *atk_get_toolkit_name (void);"
atk;atk_get_toolkit_version;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" const gchar *atk_get_toolkit_version (void);"
atk;atk_get_version;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" const gchar *atk_get_version (void);"
atk;atk_gobject_accessible_for_object;atk-auto.f90;/usr/include/atk-1.0/atk/atkgobjectaccessible.h;" AtkObject *atk_gobject_accessible_for_object (GObject *obj);"
atk;atk_gobject_accessible_get_object;atk-auto.f90;/usr/include/atk-1.0/atk/atkgobjectaccessible.h;" GObject *atk_gobject_accessible_get_object (AtkGObjectAccessible *obj);"
atk;atk_gobject_accessible_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkgobjectaccessible.h;"  GType atk_gobject_accessible_get_type (void);"
atk;atk_hyperlink_get_end_index;atk-auto.f90;/usr/include/atk-1.0/atk/atkhyperlink.h;" gint atk_hyperlink_get_end_index (AtkHyperlink *link_);"
atk;atk_hyperlink_get_n_anchors;atk-auto.f90;/usr/include/atk-1.0/atk/atkhyperlink.h;" gint atk_hyperlink_get_n_anchors (AtkHyperlink *link_);"
atk;atk_hyperlink_get_object;atk-auto.f90;/usr/include/atk-1.0/atk/atkhyperlink.h;" AtkObject* atk_hyperlink_get_object (AtkHyperlink *link_, gint i);"
atk;atk_hyperlink_get_start_index;atk-auto.f90;/usr/include/atk-1.0/atk/atkhyperlink.h;" gint atk_hyperlink_get_start_index (AtkHyperlink *link_);"
atk;atk_hyperlink_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkhyperlink.h;"    GType atk_hyperlink_get_type (void);"
atk;atk_hyperlink_get_uri;atk-auto.f90;/usr/include/atk-1.0/atk/atkhyperlink.h;" gchar* atk_hyperlink_get_uri (AtkHyperlink *link_, gint i);"
atk;atk_hyperlink_impl_get_hyperlink;atk-auto.f90;/usr/include/atk-1.0/atk/atkhyperlinkimpl.h;" AtkHyperlink *atk_hyperlink_impl_get_hyperlink (AtkHyperlinkImpl *impl);"
atk;atk_hyperlink_impl_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkhyperlinkimpl.h;"  GType atk_hyperlink_impl_get_type (void);"
atk;atk_hyperlink_is_inline;atk-auto.f90;/usr/include/atk-1.0/atk/atkhyperlink.h;" gboolean atk_hyperlink_is_inline (AtkHyperlink *link_);"
atk;atk_hyperlink_is_selected_link;atk-auto.f90;/usr/include/atk-1.0/atk/atkhyperlink.h;" gboolean atk_hyperlink_is_selected_link (AtkHyperlink *link_);"
atk;atk_hyperlink_is_valid;atk-auto.f90;/usr/include/atk-1.0/atk/atkhyperlink.h;" gboolean atk_hyperlink_is_valid (AtkHyperlink *link_);"
atk;atk_hyperlink_state_flags_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atk-enum-types.h;"  GType atk_hyperlink_state_flags_get_type (void);"
atk;atk_hypertext_get_link;atk-auto.f90;/usr/include/atk-1.0/atk/atkhypertext.h;" AtkHyperlink* atk_hypertext_get_link (AtkHypertext *hypertext, gint link_index);"
atk;atk_hypertext_get_link_index;atk-auto.f90;/usr/include/atk-1.0/atk/atkhypertext.h;" gint atk_hypertext_get_link_index (AtkHypertext *hypertext, gint char_index);"
atk;atk_hypertext_get_n_links;atk-auto.f90;/usr/include/atk-1.0/atk/atkhypertext.h;" gint atk_hypertext_get_n_links (AtkHypertext *hypertext);"
atk;atk_hypertext_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkhypertext.h;"  GType atk_hypertext_get_type (void);"
atk;atk_image_get_image_description;atk-auto.f90;/usr/include/atk-1.0/atk/atkimage.h;" const gchar* atk_image_get_image_description (AtkImage *image);"
atk;atk_image_get_image_locale;atk-auto.f90;/usr/include/atk-1.0/atk/atkimage.h;" const gchar* atk_image_get_image_locale (AtkImage *image);"
atk;atk_image_get_image_position;atk-auto.f90;/usr/include/atk-1.0/atk/atkimage.h;" void atk_image_get_image_position (AtkImage *image, gint *x, gint *y, AtkCoordType coord_type);"
atk;atk_image_get_image_size;atk-auto.f90;/usr/include/atk-1.0/atk/atkimage.h;" void atk_image_get_image_size (AtkImage *image, gint *width, gint *height);"
atk;atk_image_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkimage.h;"  GType atk_image_get_type (void);"
atk;atk_image_set_image_description;atk-auto.f90;/usr/include/atk-1.0/atk/atkimage.h;" gboolean atk_image_set_image_description (AtkImage *image, const gchar *description);"
atk;atk_implementor_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" GType atk_implementor_get_type (void);"
atk;atk_implementor_ref_accessible;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" AtkObject* atk_implementor_ref_accessible (AtkImplementor *implementor);"
atk;atk_key_event_type_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atk-enum-types.h;" GType atk_key_event_type_get_type (void);"
atk;atk_layer_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atk-enum-types.h;" GType atk_layer_get_type (void);"
atk;atk_misc_get_instance;atk-auto.f90;/usr/include/atk-1.0/atk/atkmisc.h;" const AtkMisc *atk_misc_get_instance (void);"
atk;atk_misc_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkmisc.h;" GType atk_misc_get_type (void);"
atk;atk_misc_threads_enter;atk-auto.f90;/usr/include/atk-1.0/atk/atkmisc.h;" void atk_misc_threads_enter (AtkMisc *misc);"
atk;atk_misc_threads_leave;atk-auto.f90;/usr/include/atk-1.0/atk/atkmisc.h;" void atk_misc_threads_leave (AtkMisc *misc);"
atk;atk_no_op_object_factory_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atknoopobjectfactory.h;"  GType atk_no_op_object_factory_get_type(void);"
atk;atk_no_op_object_factory_new;atk-auto.f90;/usr/include/atk-1.0/atk/atknoopobjectfactory.h;" AtkObjectFactory *atk_no_op_object_factory_new(void);"
atk;atk_no_op_object_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atknoopobject.h;"  GType atk_no_op_object_get_type (void);"
atk;atk_no_op_object_new;atk-auto.f90;/usr/include/atk-1.0/atk/atknoopobject.h;" AtkObject *atk_no_op_object_new (GObject *obj);"
atk;atk_object_add_relationship;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" gboolean atk_object_add_relationship (AtkObject *object, AtkRelationType relationship, AtkObject *target);"
atk;atk_object_connect_property_change_handler;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" guint atk_object_connect_property_change_handler (AtkObject *accessible, AtkPropertyChangeHandler *handler);"
atk;atk_object_factory_create_accessible;atk-auto.f90;/usr/include/atk-1.0/atk/atkobjectfactory.h;" AtkObject* atk_object_factory_create_accessible (AtkObjectFactory *factory, GObject *obj);"
atk;atk_object_factory_get_accessible_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkobjectfactory.h;" GType atk_object_factory_get_accessible_type (AtkObjectFactory *factory);"
atk;atk_object_factory_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkobjectfactory.h;"  GType atk_object_factory_get_type(void);"
atk;atk_object_factory_invalidate;atk-auto.f90;/usr/include/atk-1.0/atk/atkobjectfactory.h;" void atk_object_factory_invalidate (AtkObjectFactory *factory);"
atk;atk_object_get_attributes;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" AtkAttributeSet* atk_object_get_attributes (AtkObject *accessible);"
atk;atk_object_get_description;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" const gchar* atk_object_get_description (AtkObject *accessible);"
atk;atk_object_get_index_in_parent;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" gint atk_object_get_index_in_parent (AtkObject *accessible);"
atk;atk_object_get_layer;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" AtkLayer atk_object_get_layer (AtkObject *accessible);"
atk;atk_object_get_mdi_zorder;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" gint atk_object_get_mdi_zorder (AtkObject *accessible);"
atk;atk_object_get_n_accessible_children;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" gint atk_object_get_n_accessible_children (AtkObject *accessible);"
atk;atk_object_get_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" const gchar* atk_object_get_name (AtkObject *accessible);"
atk;atk_object_get_object_locale;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" const gchar* atk_object_get_object_locale (AtkObject *accessible);"
atk;atk_object_get_parent;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" AtkObject* atk_object_get_parent (AtkObject *accessible);"
atk;atk_object_get_role;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" AtkRole atk_object_get_role (AtkObject *accessible);"
atk;atk_object_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;"  GType atk_object_get_type (void);"
atk;atk_object_initialize;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" void atk_object_initialize (AtkObject *accessible, gpointer data);"
atk;atk_object_notify_state_change;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" void atk_object_notify_state_change (AtkObject *accessible, AtkState state, gboolean value);"
atk;atk_object_peek_parent;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" AtkObject* atk_object_peek_parent (AtkObject *accessible);"
atk;atk_object_ref_accessible_child;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" AtkObject* atk_object_ref_accessible_child (AtkObject *accessible, gint i);"
atk;atk_object_ref_relation_set;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" AtkRelationSet* atk_object_ref_relation_set (AtkObject *accessible);"
atk;atk_object_ref_state_set;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" AtkStateSet* atk_object_ref_state_set (AtkObject *accessible);"
atk;atk_object_remove_property_change_handler;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" void atk_object_remove_property_change_handler (AtkObject *accessible, guint handler_id);"
atk;atk_object_remove_relationship;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" gboolean atk_object_remove_relationship (AtkObject *object, AtkRelationType relationship, AtkObject *target);"
atk;atk_object_set_description;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" void atk_object_set_description (AtkObject *accessible, const gchar *description);"
atk;atk_object_set_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" void atk_object_set_name (AtkObject *accessible, const gchar *name);"
atk;atk_object_set_parent;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" void atk_object_set_parent (AtkObject *accessible, AtkObject *parent);"
atk;atk_object_set_role;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" void atk_object_set_role (AtkObject *accessible, AtkRole role);"
atk;atk_plug_get_id;atk-auto.f90;/usr/include/atk-1.0/atk/atkplug.h;" gchar* atk_plug_get_id (AtkPlug* plug);"
atk;atk_plug_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkplug.h;"  GType atk_plug_get_type (void);"
atk;atk_plug_new;atk-auto.f90;/usr/include/atk-1.0/atk/atkplug.h;" AtkObject* atk_plug_new (void);"
atk;atk_range_copy;atk-auto.f90;/usr/include/atk-1.0/atk/atkrange.h;" AtkRange* atk_range_copy (AtkRange *src);"
atk;atk_range_free;atk-auto.f90;/usr/include/atk-1.0/atk/atkrange.h;" void atk_range_free (AtkRange *range);"
atk;atk_range_get_description;atk-auto.f90;/usr/include/atk-1.0/atk/atkrange.h;" const gchar* atk_range_get_description (AtkRange *range);"
atk;atk_range_get_lower_limit;atk-auto.f90;/usr/include/atk-1.0/atk/atkrange.h;" gdouble atk_range_get_lower_limit (AtkRange *range);"
atk;atk_range_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkrange.h;"  GType atk_range_get_type (void);"
atk;atk_range_get_upper_limit;atk-auto.f90;/usr/include/atk-1.0/atk/atkrange.h;" gdouble atk_range_get_upper_limit (AtkRange *range);"
atk;atk_range_new;atk-auto.f90;/usr/include/atk-1.0/atk/atkrange.h;" AtkRange* atk_range_new (gdouble lower_limit, gdouble upper_limit, const gchar *description);"
atk;atk_rectangle_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkcomponent.h;"  GType atk_rectangle_get_type (void);"
atk;atk_registry_get_factory;atk-auto.f90;/usr/include/atk-1.0/atk/atkregistry.h;" AtkObjectFactory* atk_registry_get_factory (AtkRegistry *registry, GType type);"
atk;atk_registry_get_factory_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkregistry.h;" GType atk_registry_get_factory_type (AtkRegistry *registry, GType type);"
atk;atk_registry_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkregistry.h;"  GType atk_registry_get_type (void);"
atk;atk_registry_set_factory_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkregistry.h;" void atk_registry_set_factory_type (AtkRegistry *registry, GType type, GType factory_type);"
atk;atk_relation_add_target;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelation.h;" void atk_relation_add_target (AtkRelation *relation, AtkObject *target);"
atk;atk_relation_get_relation_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelation.h;" AtkRelationType atk_relation_get_relation_type (AtkRelation *relation);"
atk;atk_relation_get_target;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelation.h;" GPtrArray* atk_relation_get_target (AtkRelation *relation);"
atk;atk_relation_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelation.h;"  GType atk_relation_get_type (void);"
atk;atk_relation_new;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelation.h;" AtkRelation* atk_relation_new (AtkObject **targets, gint n_targets, AtkRelationType relationship);"
atk;atk_relation_remove_target;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelation.h;" gboolean atk_relation_remove_target (AtkRelation *relation, AtkObject *target);"
atk;atk_relation_set_add;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelationset.h;" void atk_relation_set_add (AtkRelationSet *set, AtkRelation *relation);"
atk;atk_relation_set_add_relation_by_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelationset.h;" void atk_relation_set_add_relation_by_type (AtkRelationSet *set, AtkRelationType relationship, AtkObject *target);"
atk;atk_relation_set_contains;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelationset.h;" gboolean atk_relation_set_contains (AtkRelationSet *set, AtkRelationType relationship);"
atk;atk_relation_set_contains_target;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelationset.h;" gboolean atk_relation_set_contains_target (AtkRelationSet *set, AtkRelationType relationship, AtkObject *target);"
atk;atk_relation_set_get_n_relations;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelationset.h;" gint atk_relation_set_get_n_relations (AtkRelationSet *set);"
atk;atk_relation_set_get_relation;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelationset.h;" AtkRelation* atk_relation_set_get_relation (AtkRelationSet *set, gint i);"
atk;atk_relation_set_get_relation_by_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelationset.h;" AtkRelation* atk_relation_set_get_relation_by_type (AtkRelationSet *set, AtkRelationType relationship);"
atk;atk_relation_set_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelationset.h;"  GType atk_relation_set_get_type (void);"
atk;atk_relation_set_new;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelationset.h;" AtkRelationSet* atk_relation_set_new (void);"
atk;atk_relation_set_remove;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelationset.h;" void atk_relation_set_remove (AtkRelationSet *set, AtkRelation *relation);"
atk;atk_relation_type_for_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelation.h;" AtkRelationType atk_relation_type_for_name (const gchar *name);"
atk;atk_relation_type_get_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelation.h;" const gchar* atk_relation_type_get_name (AtkRelationType type);"
atk;atk_relation_type_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atk-enum-types.h;" GType atk_relation_type_get_type (void);"
atk;atk_relation_type_register;atk-auto.f90;/usr/include/atk-1.0/atk/atkrelation.h;" AtkRelationType atk_relation_type_register (const gchar *name);"
atk;atk_remove_focus_tracker;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" void atk_remove_focus_tracker (guint tracker_id);"
atk;atk_remove_global_event_listener;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" void atk_remove_global_event_listener (guint listener_id);"
atk;atk_remove_key_event_listener;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;" void atk_remove_key_event_listener (guint listener_id);"
atk;atk_role_for_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" AtkRole atk_role_for_name (const gchar *name);"
atk;atk_role_get_localized_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" const gchar* atk_role_get_localized_name (AtkRole role);"
atk;atk_role_get_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" const gchar* atk_role_get_name (AtkRole role);"
atk;atk_role_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atk-enum-types.h;" GType atk_role_get_type (void);"
atk;atk_role_register;atk-auto.f90;/usr/include/atk-1.0/atk/atkobject.h;" AtkRole atk_role_register (const gchar *name);"
atk;atk_selection_add_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atkselection.h;" gboolean atk_selection_add_selection (AtkSelection *selection, gint i);"
atk;atk_selection_clear_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atkselection.h;" gboolean atk_selection_clear_selection (AtkSelection *selection);"
atk;atk_selection_get_selection_count;atk-auto.f90;/usr/include/atk-1.0/atk/atkselection.h;" gint atk_selection_get_selection_count (AtkSelection *selection);"
atk;atk_selection_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkselection.h;"  GType atk_selection_get_type (void);"
atk;atk_selection_is_child_selected;atk-auto.f90;/usr/include/atk-1.0/atk/atkselection.h;" gboolean atk_selection_is_child_selected (AtkSelection *selection, gint i);"
atk;atk_selection_ref_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atkselection.h;" AtkObject* atk_selection_ref_selection (AtkSelection *selection, gint i);"
atk;atk_selection_remove_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atkselection.h;" gboolean atk_selection_remove_selection (AtkSelection *selection, gint i);"
atk;atk_selection_select_all_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atkselection.h;" gboolean atk_selection_select_all_selection (AtkSelection *selection);"
atk;atk_socket_embed;atk-auto.f90;/usr/include/atk-1.0/atk/atksocket.h;" void atk_socket_embed (AtkSocket* obj, gchar* plug_id);"
atk;atk_socket_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atksocket.h;"  GType atk_socket_get_type (void);"
atk;atk_socket_is_occupied;atk-auto.f90;/usr/include/atk-1.0/atk/atksocket.h;" gboolean atk_socket_is_occupied (AtkSocket* obj);"
atk;atk_socket_new;atk-auto.f90;/usr/include/atk-1.0/atk/atksocket.h;" AtkObject* atk_socket_new (void);"
atk;atk_state_set_add_state;atk-auto.f90;/usr/include/atk-1.0/atk/atkstateset.h;" gboolean atk_state_set_add_state (AtkStateSet *set, AtkStateType type);"
atk;atk_state_set_add_states;atk-auto.f90;/usr/include/atk-1.0/atk/atkstateset.h;" void atk_state_set_add_states (AtkStateSet *set, AtkStateType *types, gint n_types);"
atk;atk_state_set_and_sets;atk-auto.f90;/usr/include/atk-1.0/atk/atkstateset.h;" AtkStateSet* atk_state_set_and_sets (AtkStateSet *set, AtkStateSet *compare_set);"
atk;atk_state_set_clear_states;atk-auto.f90;/usr/include/atk-1.0/atk/atkstateset.h;" void atk_state_set_clear_states (AtkStateSet *set);"
atk;atk_state_set_contains_state;atk-auto.f90;/usr/include/atk-1.0/atk/atkstateset.h;" gboolean atk_state_set_contains_state (AtkStateSet *set, AtkStateType type);"
atk;atk_state_set_contains_states;atk-auto.f90;/usr/include/atk-1.0/atk/atkstateset.h;" gboolean atk_state_set_contains_states (AtkStateSet *set, AtkStateType *types, gint n_types);"
atk;atk_state_set_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkstateset.h;"  GType atk_state_set_get_type (void);"
atk;atk_state_set_is_empty;atk-auto.f90;/usr/include/atk-1.0/atk/atkstateset.h;" gboolean atk_state_set_is_empty (AtkStateSet *set);"
atk;atk_state_set_new;atk-auto.f90;/usr/include/atk-1.0/atk/atkstateset.h;" AtkStateSet* atk_state_set_new (void);"
atk;atk_state_set_or_sets;atk-auto.f90;/usr/include/atk-1.0/atk/atkstateset.h;" AtkStateSet* atk_state_set_or_sets (AtkStateSet *set, AtkStateSet *compare_set);"
atk;atk_state_set_remove_state;atk-auto.f90;/usr/include/atk-1.0/atk/atkstateset.h;" gboolean atk_state_set_remove_state (AtkStateSet *set, AtkStateType type);"
atk;atk_state_set_xor_sets;atk-auto.f90;/usr/include/atk-1.0/atk/atkstateset.h;" AtkStateSet* atk_state_set_xor_sets (AtkStateSet *set, AtkStateSet *compare_set);"
atk;atk_state_type_for_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkstate.h;" AtkStateType atk_state_type_for_name (const gchar *name);"
atk;atk_state_type_get_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkstate.h;" const gchar* atk_state_type_get_name (AtkStateType type);"
atk;atk_state_type_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atk-enum-types.h;" GType atk_state_type_get_type (void);"
atk;atk_state_type_register;atk-auto.f90;/usr/include/atk-1.0/atk/atkstate.h;"  AtkStateType atk_state_type_register (const gchar *name);"
atk;atk_streamable_content_get_mime_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkstreamablecontent.h;" const gchar* atk_streamable_content_get_mime_type (AtkStreamableContent *streamable, gint i);"
atk;atk_streamable_content_get_n_mime_types;atk-auto.f90;/usr/include/atk-1.0/atk/atkstreamablecontent.h;" gint atk_streamable_content_get_n_mime_types (AtkStreamableContent *streamable);"
atk;atk_streamable_content_get_stream;atk-auto.f90;/usr/include/atk-1.0/atk/atkstreamablecontent.h;" GIOChannel* atk_streamable_content_get_stream (AtkStreamableContent *streamable, const gchar *mime_type);"
atk;atk_streamable_content_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkstreamablecontent.h;"  GType atk_streamable_content_get_type (void);"
atk;atk_streamable_content_get_uri;atk-auto.f90;/usr/include/atk-1.0/atk/atkstreamablecontent.h;" const gchar* atk_streamable_content_get_uri (AtkStreamableContent *streamable, const gchar *mime_type);"
atk;atk_table_add_column_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gboolean atk_table_add_column_selection (AtkTable *table, gint column);"
atk;atk_table_add_row_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gboolean atk_table_add_row_selection (AtkTable *table, gint row);"
atk;atk_table_cell_get_column_header_cells;atk-auto.f90;/usr/include/atk-1.0/atk/atktablecell.h;" GPtrArray * atk_table_cell_get_column_header_cells (AtkTableCell *cell);"
atk;atk_table_cell_get_column_span;atk-auto.f90;/usr/include/atk-1.0/atk/atktablecell.h;" gint atk_table_cell_get_column_span (AtkTableCell *cell);"
atk;atk_table_cell_get_position;atk-auto.f90;/usr/include/atk-1.0/atk/atktablecell.h;" gboolean atk_table_cell_get_position (AtkTableCell *cell, gint *row, gint *column);"
atk;atk_table_cell_get_row_column_span;atk-auto.f90;/usr/include/atk-1.0/atk/atktablecell.h;" gboolean atk_table_cell_get_row_column_span (AtkTableCell *cell, gint *row, gint *column, gint *row_span, gint *column_span);"
atk;atk_table_cell_get_row_header_cells;atk-auto.f90;/usr/include/atk-1.0/atk/atktablecell.h;" GPtrArray * atk_table_cell_get_row_header_cells (AtkTableCell *cell);"
atk;atk_table_cell_get_row_span;atk-auto.f90;/usr/include/atk-1.0/atk/atktablecell.h;" gint atk_table_cell_get_row_span (AtkTableCell *cell);"
atk;atk_table_cell_get_table;atk-auto.f90;/usr/include/atk-1.0/atk/atktablecell.h;" AtkObject * atk_table_cell_get_table (AtkTableCell *cell);"
atk;atk_table_cell_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atktablecell.h;"  GType atk_table_cell_get_type (void);"
atk;atk_table_get_caption;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" AtkObject* atk_table_get_caption (AtkTable *table);"
atk;atk_table_get_column_at_index;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gint atk_table_get_column_at_index (AtkTable *table, gint index_);"
atk;atk_table_get_column_description;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" const gchar* atk_table_get_column_description (AtkTable *table, gint column);"
atk;atk_table_get_column_extent_at;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gint atk_table_get_column_extent_at (AtkTable *table, gint row, gint column);"
atk;atk_table_get_column_header;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" AtkObject* atk_table_get_column_header (AtkTable *table, gint column);"
atk;atk_table_get_index_at;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gint atk_table_get_index_at (AtkTable *table, gint row, gint column);"
atk;atk_table_get_n_columns;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gint atk_table_get_n_columns (AtkTable *table);"
atk;atk_table_get_n_rows;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gint atk_table_get_n_rows (AtkTable *table);"
atk;atk_table_get_row_at_index;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gint atk_table_get_row_at_index (AtkTable *table, gint index_);"
atk;atk_table_get_row_description;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" const gchar* atk_table_get_row_description (AtkTable *table, gint row);"
atk;atk_table_get_row_extent_at;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gint atk_table_get_row_extent_at (AtkTable *table, gint row, gint column);"
atk;atk_table_get_row_header;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" AtkObject* atk_table_get_row_header (AtkTable *table, gint row);"
atk;atk_table_get_selected_columns;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gint atk_table_get_selected_columns (AtkTable *table, gint **selected);"
atk;atk_table_get_selected_rows;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gint atk_table_get_selected_rows (AtkTable *table, gint **selected);"
atk;atk_table_get_summary;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" AtkObject* atk_table_get_summary (AtkTable *table);"
atk;atk_table_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;"  GType atk_table_get_type (void);"
atk;atk_table_is_column_selected;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gboolean atk_table_is_column_selected (AtkTable *table, gint column);"
atk;atk_table_is_row_selected;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gboolean atk_table_is_row_selected (AtkTable *table, gint row);"
atk;atk_table_is_selected;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gboolean atk_table_is_selected (AtkTable *table, gint row, gint column);"
atk;atk_table_ref_at;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" AtkObject* atk_table_ref_at (AtkTable *table, gint row, gint column);"
atk;atk_table_remove_column_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gboolean atk_table_remove_column_selection (AtkTable *table, gint column);"
atk;atk_table_remove_row_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" gboolean atk_table_remove_row_selection (AtkTable *table, gint row);"
atk;atk_table_set_caption;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" void atk_table_set_caption (AtkTable *table, AtkObject *caption);"
atk;atk_table_set_column_description;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" void atk_table_set_column_description (AtkTable *table, gint column, const gchar *description);"
atk;atk_table_set_column_header;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" void atk_table_set_column_header (AtkTable *table, gint column, AtkObject *header);"
atk;atk_table_set_row_description;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" void atk_table_set_row_description (AtkTable *table, gint row, const gchar *description);"
atk;atk_table_set_row_header;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" void atk_table_set_row_header (AtkTable *table, gint row, AtkObject *header);"
atk;atk_table_set_summary;atk-auto.f90;/usr/include/atk-1.0/atk/atktable.h;" void atk_table_set_summary (AtkTable *table, AtkObject *accessible);"
atk;atk_text_add_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gboolean atk_text_add_selection (AtkText *text, gint start_offset, gint end_offset);"
atk;atk_text_attribute_for_name;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" AtkTextAttribute atk_text_attribute_for_name (const gchar *name);"
atk;atk_text_attribute_get_name;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" const gchar* atk_text_attribute_get_name (AtkTextAttribute attr);"
atk;atk_text_attribute_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atk-enum-types.h;" GType atk_text_attribute_get_type (void);"
atk;atk_text_attribute_get_value;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" const gchar* atk_text_attribute_get_value (AtkTextAttribute attr, gint index_);"
atk;atk_text_attribute_register;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;"  AtkTextAttribute atk_text_attribute_register (const gchar *name);"
atk;atk_text_boundary_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atk-enum-types.h;" GType atk_text_boundary_get_type (void);"
atk;atk_text_clip_type_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atk-enum-types.h;" GType atk_text_clip_type_get_type (void);"
atk;atk_text_free_ranges;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" void atk_text_free_ranges (AtkTextRange **ranges);"
atk;atk_text_get_bounded_ranges;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" AtkTextRange** atk_text_get_bounded_ranges (AtkText *text, AtkTextRectangle *rect, AtkCoordType coord_type, AtkTextClipType x_clip_type, AtkTextClipType y_clip_type);"
atk;atk_text_get_caret_offset;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gint atk_text_get_caret_offset (AtkText *text);"
atk;atk_text_get_character_at_offset;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gunichar atk_text_get_character_at_offset (AtkText *text, gint offset);"
atk;atk_text_get_character_count;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gint atk_text_get_character_count (AtkText *text);"
atk;atk_text_get_character_extents;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" void atk_text_get_character_extents (AtkText *text, gint offset, gint *x, gint *y, gint *width, gint *height, AtkCoordType coords);"
atk;atk_text_get_default_attributes;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" AtkAttributeSet* atk_text_get_default_attributes (AtkText *text);"
atk;atk_text_get_n_selections;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gint atk_text_get_n_selections (AtkText *text);"
atk;atk_text_get_offset_at_point;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gint atk_text_get_offset_at_point (AtkText *text, gint x, gint y, AtkCoordType coords);"
atk;atk_text_get_range_extents;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" void atk_text_get_range_extents (AtkText *text,  gint start_offset, gint end_offset, AtkCoordType coord_type, AtkTextRectangle *rect);"
atk;atk_text_get_run_attributes;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" AtkAttributeSet* atk_text_get_run_attributes (AtkText *text, gint offset, gint *start_offset, gint *end_offset);"
atk;atk_text_get_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gchar* atk_text_get_selection (AtkText *text, gint selection_num, gint *start_offset, gint *end_offset);"
atk;atk_text_get_string_at_offset;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gchar* atk_text_get_string_at_offset (AtkText *text, gint offset, AtkTextGranularity granularity, gint *start_offset, gint *end_offset);"
atk;atk_text_get_text;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gchar* atk_text_get_text (AtkText *text, gint start_offset, gint end_offset);"
atk;atk_text_get_text_after_offset;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gchar* atk_text_get_text_after_offset (AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset);"
atk;atk_text_get_text_at_offset;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gchar* atk_text_get_text_at_offset (AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset);"
atk;atk_text_get_text_before_offset;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gchar* atk_text_get_text_before_offset (AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset);"
atk;atk_text_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" GType atk_text_get_type (void);"
atk;atk_text_granularity_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atk-enum-types.h;" GType atk_text_granularity_get_type (void);"
atk;atk_text_range_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" GType atk_text_range_get_type (void);"
atk;atk_text_remove_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gboolean atk_text_remove_selection (AtkText *text, gint selection_num);"
atk;atk_text_set_caret_offset;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gboolean atk_text_set_caret_offset (AtkText *text, gint offset);"
atk;atk_text_set_selection;atk-auto.f90;/usr/include/atk-1.0/atk/atktext.h;" gboolean atk_text_set_selection (AtkText *text, gint selection_num, gint start_offset, gint end_offset);"
atk;atk_util_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkutil.h;"  GType atk_util_get_type (void);"
atk;atk_value_get_current_value;atk-auto.f90;/usr/include/atk-1.0/atk/atkvalue.h;" void atk_value_get_current_value (AtkValue *obj, GValue *value);"
atk;atk_value_get_increment;atk-auto.f90;/usr/include/atk-1.0/atk/atkvalue.h;" gdouble atk_value_get_increment (AtkValue *obj);"
atk;atk_value_get_maximum_value;atk-auto.f90;/usr/include/atk-1.0/atk/atkvalue.h;" void atk_value_get_maximum_value (AtkValue *obj, GValue *value);"
atk;atk_value_get_minimum_increment;atk-auto.f90;/usr/include/atk-1.0/atk/atkvalue.h;" void atk_value_get_minimum_increment (AtkValue *obj, GValue *value);"
atk;atk_value_get_minimum_value;atk-auto.f90;/usr/include/atk-1.0/atk/atkvalue.h;" void atk_value_get_minimum_value (AtkValue *obj, GValue *value);"
atk;atk_value_get_range;atk-auto.f90;/usr/include/atk-1.0/atk/atkvalue.h;" AtkRange* atk_value_get_range (AtkValue *obj);"
atk;atk_value_get_sub_ranges;atk-auto.f90;/usr/include/atk-1.0/atk/atkvalue.h;" GSList* atk_value_get_sub_ranges (AtkValue *obj);"
atk;atk_value_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkvalue.h;"  GType atk_value_get_type (void);"
atk;atk_value_get_value_and_text;atk-auto.f90;/usr/include/atk-1.0/atk/atkvalue.h;" void atk_value_get_value_and_text (AtkValue *obj, gdouble *value, gchar **text);"
atk;atk_value_set_current_value;atk-auto.f90;/usr/include/atk-1.0/atk/atkvalue.h;" gboolean atk_value_set_current_value (AtkValue *obj, const GValue *value);"
atk;atk_value_type_get_localized_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkvalue.h;" const gchar* atk_value_type_get_localized_name (AtkValueType value_type);"
atk;atk_value_type_get_name;atk-auto.f90;/usr/include/atk-1.0/atk/atkvalue.h;" const gchar* atk_value_type_get_name (AtkValueType value_type);"
atk;atk_value_type_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atk-enum-types.h;" GType atk_value_type_get_type (void);"
atk;atk_window_get_type;atk-auto.f90;/usr/include/atk-1.0/atk/atkwindow.h;"  GType atk_window_get_type (void);"
cairo;cairo_append_path;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_append_path (cairo_t *cr, const cairo_path_t *path);"
cairo;cairo_arc;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_arc (cairo_t *cr, double xc, double yc, double radius, double angle1, double angle2);"
cairo;cairo_arc_negative;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_arc_negative (cairo_t *cr, double xc, double yc, double radius, double angle1, double angle2);"
cairo;cairo_clip;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_clip (cairo_t *cr);"
cairo;cairo_clip_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_clip_extents (cairo_t *cr, double *x1, double *y1, double *x2, double *y2);"
cairo;cairo_clip_preserve;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_clip_preserve (cairo_t *cr);"
cairo;cairo_close_path;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_close_path (cairo_t *cr);"
cairo;cairo_copy_clip_rectangle_list;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_rectangle_list_t * cairo_copy_clip_rectangle_list (cairo_t *cr);"
cairo;cairo_copy_page;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_copy_page (cairo_t *cr);"
cairo;cairo_copy_path;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_path_t * cairo_copy_path (cairo_t *cr);"
cairo;cairo_copy_path_flat;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_path_t * cairo_copy_path_flat (cairo_t *cr);"
cairo;cairo_create;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_t * cairo_create (cairo_surface_t *target);"
cairo;cairo_curve_to;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_curve_to (cairo_t *cr, double x1, double y1, double x2, double y2, double x3, double y3);"
cairo;cairo_debug_reset_static_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_debug_reset_static_data (void);"
cairo;cairo_destroy;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_destroy (cairo_t *cr);"
cairo;cairo_device_acquire;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_device_acquire (cairo_device_t *device);"
cairo;cairo_device_destroy;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_device_destroy (cairo_device_t *device);"
cairo;cairo_device_finish;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_device_finish (cairo_device_t *device);"
cairo;cairo_device_flush;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_device_flush (cairo_device_t *device);"
cairo;cairo_device_get_reference_count;cairo-auto.f90;/usr/include/cairo/cairo.h;" unsigned int cairo_device_get_reference_count (cairo_device_t *device);"
cairo;cairo_device_get_type;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_device_type_t cairo_device_get_type (cairo_device_t *device);"
cairo;cairo_device_get_user_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" void * cairo_device_get_user_data (cairo_device_t *device, const cairo_user_data_key_t *key);"
cairo;cairo_device_observer_elapsed;cairo-auto.f90;/usr/include/cairo/cairo.h;" double cairo_device_observer_elapsed (cairo_device_t *device);"
cairo;cairo_device_observer_fill_elapsed;cairo-auto.f90;/usr/include/cairo/cairo.h;" double cairo_device_observer_fill_elapsed (cairo_device_t *device);"
cairo;cairo_device_observer_glyphs_elapsed;cairo-auto.f90;/usr/include/cairo/cairo.h;" double cairo_device_observer_glyphs_elapsed (cairo_device_t *device);"
cairo;cairo_device_observer_mask_elapsed;cairo-auto.f90;/usr/include/cairo/cairo.h;" double cairo_device_observer_mask_elapsed (cairo_device_t *device);"
cairo;cairo_device_observer_paint_elapsed;cairo-auto.f90;/usr/include/cairo/cairo.h;" double cairo_device_observer_paint_elapsed (cairo_device_t *device);"
cairo;cairo_device_observer_print;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_device_observer_print (cairo_device_t *device, cairo_write_func_t write_func, void *closure);"
cairo;cairo_device_observer_stroke_elapsed;cairo-auto.f90;/usr/include/cairo/cairo.h;" double cairo_device_observer_stroke_elapsed (cairo_device_t *device);"
cairo;cairo_device_reference;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_device_t * cairo_device_reference (cairo_device_t *device);"
cairo;cairo_device_release;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_device_release (cairo_device_t *device);"
cairo;cairo_device_set_user_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_device_set_user_data (cairo_device_t *device, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy);"
cairo;cairo_device_status;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_device_status (cairo_device_t *device);"
cairo;cairo_device_to_user;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_device_to_user (cairo_t *cr, double *x, double *y);"
cairo;cairo_device_to_user_distance;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_device_to_user_distance (cairo_t *cr, double *dx, double *dy);"
cairo;cairo_fill;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_fill (cairo_t *cr);"
cairo;cairo_fill_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_fill_extents (cairo_t *cr, double *x1, double *y1, double *x2, double *y2);"
cairo;cairo_fill_preserve;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_fill_preserve (cairo_t *cr);"
cairo;cairo_font_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_font_extents (cairo_t *cr, cairo_font_extents_t *extents);"
cairo;cairo_font_face_destroy;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_font_face_destroy (cairo_font_face_t *font_face);"
cairo;cairo_font_face_get_reference_count;cairo-auto.f90;/usr/include/cairo/cairo.h;" unsigned int cairo_font_face_get_reference_count (cairo_font_face_t *font_face);"
cairo;cairo_font_face_get_type;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_font_type_t cairo_font_face_get_type (cairo_font_face_t *font_face);"
cairo;cairo_font_face_get_user_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" void * cairo_font_face_get_user_data (cairo_font_face_t *font_face, const cairo_user_data_key_t *key);"
cairo;cairo_font_face_reference;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_font_face_t * cairo_font_face_reference (cairo_font_face_t *font_face);"
cairo;cairo_font_face_set_user_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_font_face_set_user_data (cairo_font_face_t *font_face, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy);"
cairo;cairo_font_face_status;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_font_face_status (cairo_font_face_t *font_face);"
cairo;cairo_font_options_copy;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_font_options_t * cairo_font_options_copy (const cairo_font_options_t *original);"
cairo;cairo_font_options_create;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_font_options_t * cairo_font_options_create (void);"
cairo;cairo_font_options_destroy;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_font_options_destroy (cairo_font_options_t *options);"
cairo;cairo_font_options_equal;cairo-auto.f90;/usr/include/cairo/cairo.h;"cairo_bool_t cairo_font_options_equal (const cairo_font_options_t *options, const cairo_font_options_t *other);"
cairo;cairo_font_options_get_antialias;cairo-auto.f90;/usr/include/cairo/cairo.h;"cairo_antialias_t cairo_font_options_get_antialias (const cairo_font_options_t *options);"
cairo;cairo_font_options_get_hint_metrics;cairo-auto.f90;/usr/include/cairo/cairo.h;"cairo_hint_metrics_t cairo_font_options_get_hint_metrics (const cairo_font_options_t *options);"
cairo;cairo_font_options_get_hint_style;cairo-auto.f90;/usr/include/cairo/cairo.h;"cairo_hint_style_t cairo_font_options_get_hint_style (const cairo_font_options_t *options);"
cairo;cairo_font_options_get_subpixel_order;cairo-auto.f90;/usr/include/cairo/cairo.h;"cairo_subpixel_order_t cairo_font_options_get_subpixel_order (const cairo_font_options_t *options);"
cairo;cairo_font_options_hash;cairo-auto.f90;/usr/include/cairo/cairo.h;" unsigned long cairo_font_options_hash (const cairo_font_options_t *options);"
cairo;cairo_font_options_merge;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_font_options_merge (cairo_font_options_t *options, const cairo_font_options_t *other);"
cairo;cairo_font_options_set_antialias;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_font_options_set_antialias (cairo_font_options_t *options, cairo_antialias_t antialias);"
cairo;cairo_font_options_set_hint_metrics;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_font_options_set_hint_metrics (cairo_font_options_t *options, cairo_hint_metrics_t hint_metrics);"
cairo;cairo_font_options_set_hint_style;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_font_options_set_hint_style (cairo_font_options_t *options, cairo_hint_style_t hint_style);"
cairo;cairo_font_options_set_subpixel_order;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_font_options_set_subpixel_order (cairo_font_options_t *options, cairo_subpixel_order_t subpixel_order);"
cairo;cairo_font_options_status;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_font_options_status (cairo_font_options_t *options);"
cairo;cairo_format_stride_for_width;cairo-auto.f90;/usr/include/cairo/cairo.h;" int cairo_format_stride_for_width (cairo_format_t format, int width);"
cairo;cairo_ft_font_face_create_for_ft_face;cairo-auto.f90;/usr/include/cairo/cairo-ft.h;"  cairo_font_face_t * cairo_ft_font_face_create_for_ft_face (FT_Face face, int load_flags);"
cairo;cairo_ft_font_face_create_for_pattern;cairo-auto.f90;/usr/include/cairo/cairo-ft.h;" cairo_font_face_t * cairo_ft_font_face_create_for_pattern (FcPattern *pattern);"
cairo;cairo_ft_font_face_get_synthesize;cairo-auto.f90;/usr/include/cairo/cairo-ft.h;" unsigned int cairo_ft_font_face_get_synthesize (cairo_font_face_t *font_face);"
cairo;cairo_ft_font_face_set_synthesize;cairo-auto.f90;/usr/include/cairo/cairo-ft.h;" void cairo_ft_font_face_set_synthesize (cairo_font_face_t *font_face, unsigned int synth_flags);"
cairo;cairo_ft_font_face_unset_synthesize;cairo-auto.f90;/usr/include/cairo/cairo-ft.h;" void cairo_ft_font_face_unset_synthesize (cairo_font_face_t *font_face, unsigned int synth_flags);"
cairo;cairo_ft_font_options_substitute;cairo-auto.f90;/usr/include/cairo/cairo-ft.h;" void cairo_ft_font_options_substitute (const cairo_font_options_t *options, FcPattern *pattern);"
cairo;cairo_ft_scaled_font_lock_face;cairo-auto.f90;/usr/include/cairo/cairo-ft.h;" FT_Face cairo_ft_scaled_font_lock_face (cairo_scaled_font_t *scaled_font);"
cairo;cairo_ft_scaled_font_unlock_face;cairo-auto.f90;/usr/include/cairo/cairo-ft.h;" void cairo_ft_scaled_font_unlock_face (cairo_scaled_font_t *scaled_font);"
cairo;cairo_get_antialias;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_antialias_t cairo_get_antialias (cairo_t *cr);"
cairo;cairo_get_current_point;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_get_current_point (cairo_t *cr, double *x, double *y);"
cairo;cairo_get_dash;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_get_dash (cairo_t *cr, double *dashes, double *offset);"
cairo;cairo_get_dash_count;cairo-auto.f90;/usr/include/cairo/cairo.h;" int cairo_get_dash_count (cairo_t *cr);"
cairo;cairo_get_fill_rule;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_fill_rule_t cairo_get_fill_rule (cairo_t *cr);"
cairo;cairo_get_font_face;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_font_face_t * cairo_get_font_face (cairo_t *cr);"
cairo;cairo_get_font_matrix;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_get_font_matrix (cairo_t *cr, cairo_matrix_t *matrix);"
cairo;cairo_get_font_options;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_get_font_options (cairo_t *cr, cairo_font_options_t *options);"
cairo;cairo_get_group_target;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_get_group_target (cairo_t *cr);"
cairo;cairo_get_line_cap;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_line_cap_t cairo_get_line_cap (cairo_t *cr);"
cairo;cairo_get_line_join;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_line_join_t cairo_get_line_join (cairo_t *cr);"
cairo;cairo_get_line_width;cairo-auto.f90;/usr/include/cairo/cairo.h;" double cairo_get_line_width (cairo_t *cr);"
cairo;cairo_get_matrix;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_get_matrix (cairo_t *cr, cairo_matrix_t *matrix);"
cairo;cairo_get_miter_limit;cairo-auto.f90;/usr/include/cairo/cairo.h;" double cairo_get_miter_limit (cairo_t *cr);"
cairo;cairo_get_operator;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_operator_t cairo_get_operator (cairo_t *cr);"
cairo;cairo_get_reference_count;cairo-auto.f90;/usr/include/cairo/cairo.h;" unsigned int cairo_get_reference_count (cairo_t *cr);"
cairo;cairo_get_scaled_font;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_scaled_font_t * cairo_get_scaled_font (cairo_t *cr);"
cairo;cairo_get_source;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_pattern_t * cairo_get_source (cairo_t *cr);"
cairo;cairo_get_target;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_get_target (cairo_t *cr);"
cairo;cairo_get_tolerance;cairo-auto.f90;/usr/include/cairo/cairo.h;" double cairo_get_tolerance (cairo_t *cr);"
cairo;cairo_get_user_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" void * cairo_get_user_data (cairo_t *cr, const cairo_user_data_key_t *key);"
cairo;cairo_glyph_allocate;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_glyph_t * cairo_glyph_allocate (int num_glyphs);"
cairo;cairo_glyph_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_glyph_extents (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs, cairo_text_extents_t *extents);"
cairo;cairo_glyph_free;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_glyph_free (cairo_glyph_t *glyphs);"
cairo;cairo_glyph_path;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_glyph_path (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);"
cairo;cairo_gobject_antialias_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_antialias_get_type (void);"
cairo;cairo_gobject_content_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_content_get_type (void);"
cairo;cairo_gobject_context_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;"  GType cairo_gobject_context_get_type (void);"
cairo;cairo_gobject_device_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_device_get_type (void);"
cairo;cairo_gobject_device_type_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_device_type_get_type (void);"
cairo;cairo_gobject_extend_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_extend_get_type (void);"
cairo;cairo_gobject_fill_rule_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_fill_rule_get_type (void);"
cairo;cairo_gobject_filter_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_filter_get_type (void);"
cairo;cairo_gobject_font_face_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_font_face_get_type (void);"
cairo;cairo_gobject_font_options_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_font_options_get_type (void);"
cairo;cairo_gobject_font_slant_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_font_slant_get_type (void);"
cairo;cairo_gobject_font_type_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_font_type_get_type (void);"
cairo;cairo_gobject_font_weight_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_font_weight_get_type (void);"
cairo;cairo_gobject_format_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_format_get_type (void);"
cairo;cairo_gobject_hint_metrics_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_hint_metrics_get_type (void);"
cairo;cairo_gobject_hint_style_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_hint_style_get_type (void);"
cairo;cairo_gobject_line_cap_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_line_cap_get_type (void);"
cairo;cairo_gobject_line_join_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_line_join_get_type (void);"
cairo;cairo_gobject_matrix_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_matrix_get_type (void);"
cairo;cairo_gobject_operator_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_operator_get_type (void);"
cairo;cairo_gobject_path_data_type_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_path_data_type_get_type (void);"
cairo;cairo_gobject_pattern_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_pattern_get_type (void);"
cairo;cairo_gobject_pattern_type_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_pattern_type_get_type (void);"
cairo;cairo_gobject_rectangle_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_rectangle_get_type (void);"
cairo;cairo_gobject_rectangle_int_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_rectangle_int_get_type (void);"
cairo;cairo_gobject_region_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_region_get_type (void);"
cairo;cairo_gobject_region_overlap_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_region_overlap_get_type (void);"
cairo;cairo_gobject_scaled_font_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_scaled_font_get_type (void);"
cairo;cairo_gobject_status_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_status_get_type (void);"
cairo;cairo_gobject_subpixel_order_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_subpixel_order_get_type (void);"
cairo;cairo_gobject_surface_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_surface_get_type (void);"
cairo;cairo_gobject_surface_type_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_surface_type_get_type (void);"
cairo;cairo_gobject_text_cluster_flags_get_type;cairo-auto.f90;/usr/include/cairo/cairo-gobject.h;" GType cairo_gobject_text_cluster_flags_get_type (void);"
cairo;cairo_has_current_point;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_bool_t cairo_has_current_point (cairo_t *cr);"
cairo;cairo_identity_matrix;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_identity_matrix (cairo_t *cr);"
cairo;cairo_image_surface_create;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_image_surface_create (cairo_format_t format, int width, int height);"
cairo;cairo_image_surface_create_for_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_image_surface_create_for_data (unsigned char *data, cairo_format_t format, int width, int height, int stride);"
cairo;cairo_image_surface_create_from_png;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_image_surface_create_from_png (const char *filename);"
cairo;cairo_image_surface_create_from_png_stream;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_image_surface_create_from_png_stream (cairo_read_func_t read_func, void *closure);"
cairo;cairo_image_surface_get_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" unsigned char * cairo_image_surface_get_data (cairo_surface_t *surface);"
cairo;cairo_image_surface_get_format;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_format_t cairo_image_surface_get_format (cairo_surface_t *surface);"
cairo;cairo_image_surface_get_height;cairo-auto.f90;/usr/include/cairo/cairo.h;" int cairo_image_surface_get_height (cairo_surface_t *surface);"
cairo;cairo_image_surface_get_stride;cairo-auto.f90;/usr/include/cairo/cairo.h;" int cairo_image_surface_get_stride (cairo_surface_t *surface);"
cairo;cairo_image_surface_get_width;cairo-auto.f90;/usr/include/cairo/cairo.h;" int cairo_image_surface_get_width (cairo_surface_t *surface);"
cairo;cairo_in_clip;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_bool_t cairo_in_clip (cairo_t *cr, double x, double y);"
cairo;cairo_in_fill;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_bool_t cairo_in_fill (cairo_t *cr, double x, double y);"
cairo;cairo_in_stroke;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_bool_t cairo_in_stroke (cairo_t *cr, double x, double y);"
cairo;cairo_line_to;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_line_to (cairo_t *cr, double x, double y);"
cairo;cairo_mask;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_mask (cairo_t *cr, cairo_pattern_t *pattern);"
cairo;cairo_mask_surface;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_mask_surface (cairo_t *cr, cairo_surface_t *surface, double surface_x, double surface_y);"
cairo;cairo_matrix_init;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_matrix_init (cairo_matrix_t *matrix, double xx, double yx, double xy, double yy, double x0, double y0);"
cairo;cairo_matrix_init_identity;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_matrix_init_identity (cairo_matrix_t *matrix);"
cairo;cairo_matrix_init_rotate;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_matrix_init_rotate (cairo_matrix_t *matrix, double radians);"
cairo;cairo_matrix_init_scale;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_matrix_init_scale (cairo_matrix_t *matrix, double sx, double sy);"
cairo;cairo_matrix_init_translate;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_matrix_init_translate (cairo_matrix_t *matrix, double tx, double ty);"
cairo;cairo_matrix_invert;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_matrix_invert (cairo_matrix_t *matrix);"
cairo;cairo_matrix_multiply;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_matrix_multiply (cairo_matrix_t *result, const cairo_matrix_t *a, const cairo_matrix_t *b);"
cairo;cairo_matrix_rotate;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_matrix_rotate (cairo_matrix_t *matrix, double radians);"
cairo;cairo_matrix_scale;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_matrix_scale (cairo_matrix_t *matrix, double sx, double sy);"
cairo;cairo_matrix_transform_distance;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_matrix_transform_distance (const cairo_matrix_t *matrix, double *dx, double *dy);"
cairo;cairo_matrix_transform_point;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_matrix_transform_point (const cairo_matrix_t *matrix, double *x, double *y);"
cairo;cairo_matrix_translate;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_matrix_translate (cairo_matrix_t *matrix, double tx, double ty);"
cairo;cairo_mesh_pattern_begin_patch;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_mesh_pattern_begin_patch (cairo_pattern_t *pattern);"
cairo;cairo_mesh_pattern_curve_to;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_mesh_pattern_curve_to (cairo_pattern_t *pattern, double x1, double y1, double x2, double y2, double x3, double y3);"
cairo;cairo_mesh_pattern_end_patch;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_mesh_pattern_end_patch (cairo_pattern_t *pattern);"
cairo;cairo_mesh_pattern_get_control_point;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_mesh_pattern_get_control_point (cairo_pattern_t *pattern, unsigned int patch_num, unsigned int point_num, double *x, double *y);"
cairo;cairo_mesh_pattern_get_corner_color_rgba;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_mesh_pattern_get_corner_color_rgba (cairo_pattern_t *pattern, unsigned int patch_num, unsigned int corner_num, double *red, double *green, double *blue, double *alpha);"
cairo;cairo_mesh_pattern_get_patch_count;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_mesh_pattern_get_patch_count (cairo_pattern_t *pattern, unsigned int *count);"
cairo;cairo_mesh_pattern_get_path;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_path_t * cairo_mesh_pattern_get_path (cairo_pattern_t *pattern, unsigned int patch_num);"
cairo;cairo_mesh_pattern_line_to;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_mesh_pattern_line_to (cairo_pattern_t *pattern, double x, double y);"
cairo;cairo_mesh_pattern_move_to;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_mesh_pattern_move_to (cairo_pattern_t *pattern, double x, double y);"
cairo;cairo_mesh_pattern_set_control_point;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_mesh_pattern_set_control_point (cairo_pattern_t *pattern, unsigned int point_num, double x, double y);"
cairo;cairo_mesh_pattern_set_corner_color_rgb;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_mesh_pattern_set_corner_color_rgb (cairo_pattern_t *pattern, unsigned int corner_num, double red, double green, double blue);"
cairo;cairo_mesh_pattern_set_corner_color_rgba;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_mesh_pattern_set_corner_color_rgba (cairo_pattern_t *pattern, unsigned int corner_num, double red, double green, double blue, double alpha);"
cairo;cairo_move_to;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_move_to (cairo_t *cr, double x, double y);"
cairo;cairo_new_path;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_new_path (cairo_t *cr);"
cairo;cairo_new_sub_path;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_new_sub_path (cairo_t *cr);"
cairo;cairo_paint;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_paint (cairo_t *cr);"
cairo;cairo_paint_with_alpha;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_paint_with_alpha (cairo_t *cr, double alpha);"
cairo;cairo_path_destroy;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_path_destroy (cairo_path_t *path);"
cairo;cairo_path_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_path_extents (cairo_t *cr, double *x1, double *y1, double *x2, double *y2);"
cairo;cairo_pattern_add_color_stop_rgb;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_pattern_add_color_stop_rgb (cairo_pattern_t *pattern, double offset, double red, double green, double blue);"
cairo;cairo_pattern_add_color_stop_rgba;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_pattern_add_color_stop_rgba (cairo_pattern_t *pattern, double offset, double red, double green, double blue, double alpha);"
cairo;cairo_pattern_create_for_surface;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_pattern_t * cairo_pattern_create_for_surface (cairo_surface_t *surface);"
cairo;cairo_pattern_create_linear;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_pattern_t * cairo_pattern_create_linear (double x0, double y0, double x1, double y1);"
cairo;cairo_pattern_create_mesh;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_pattern_t * cairo_pattern_create_mesh (void);"
cairo;cairo_pattern_create_radial;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_pattern_t * cairo_pattern_create_radial (double cx0, double cy0, double radius0, double cx1, double cy1, double radius1);"
cairo;cairo_pattern_create_raster_source;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_pattern_t * cairo_pattern_create_raster_source (void *user_data, cairo_content_t content, int width, int height);"
cairo;cairo_pattern_create_rgb;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_pattern_t * cairo_pattern_create_rgb (double red, double green, double blue);"
cairo;cairo_pattern_create_rgba;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_pattern_t * cairo_pattern_create_rgba (double red, double green, double blue, double alpha);"
cairo;cairo_pattern_destroy;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_pattern_destroy (cairo_pattern_t *pattern);"
cairo;cairo_pattern_get_color_stop_count;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_pattern_get_color_stop_count (cairo_pattern_t *pattern, int *count);"
cairo;cairo_pattern_get_color_stop_rgba;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_pattern_get_color_stop_rgba (cairo_pattern_t *pattern, int index, double *offset, double *red, double *green, double *blue, double *alpha);"
cairo;cairo_pattern_get_extend;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_extend_t cairo_pattern_get_extend (cairo_pattern_t *pattern);"
cairo;cairo_pattern_get_filter;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_filter_t cairo_pattern_get_filter (cairo_pattern_t *pattern);"
cairo;cairo_pattern_get_linear_points;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_pattern_get_linear_points (cairo_pattern_t *pattern, double *x0, double *y0, double *x1, double *y1);"
cairo;cairo_pattern_get_matrix;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_pattern_get_matrix (cairo_pattern_t *pattern, cairo_matrix_t *matrix);"
cairo;cairo_pattern_get_radial_circles;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_pattern_get_radial_circles (cairo_pattern_t *pattern, double *x0, double *y0, double *r0, double *x1, double *y1, double *r1);"
cairo;cairo_pattern_get_reference_count;cairo-auto.f90;/usr/include/cairo/cairo.h;" unsigned int cairo_pattern_get_reference_count (cairo_pattern_t *pattern);"
cairo;cairo_pattern_get_rgba;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_pattern_get_rgba (cairo_pattern_t *pattern, double *red, double *green, double *blue, double *alpha);"
cairo;cairo_pattern_get_surface;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_pattern_get_surface (cairo_pattern_t *pattern, cairo_surface_t **surface);"
cairo;cairo_pattern_get_type;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_pattern_type_t cairo_pattern_get_type (cairo_pattern_t *pattern);"
cairo;cairo_pattern_get_user_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" void * cairo_pattern_get_user_data (cairo_pattern_t *pattern, const cairo_user_data_key_t *key);"
cairo;cairo_pattern_reference;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_pattern_t * cairo_pattern_reference (cairo_pattern_t *pattern);"
cairo;cairo_pattern_set_extend;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_pattern_set_extend (cairo_pattern_t *pattern, cairo_extend_t extend);"
cairo;cairo_pattern_set_filter;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_pattern_set_filter (cairo_pattern_t *pattern, cairo_filter_t filter);"
cairo;cairo_pattern_set_matrix;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_pattern_set_matrix (cairo_pattern_t *pattern, const cairo_matrix_t *matrix);"
cairo;cairo_pattern_set_user_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_pattern_set_user_data (cairo_pattern_t *pattern, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy);"
cairo;cairo_pattern_status;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_pattern_status (cairo_pattern_t *pattern);"
cairo;cairo_pdf_get_versions;cairo-auto.f90;/usr/include/cairo/cairo-pdf.h;" void cairo_pdf_get_versions (cairo_pdf_version_t const **versions, int *num_versions);"
cairo;cairo_pdf_surface_create;cairo-auto.f90;/usr/include/cairo/cairo-pdf.h;"  cairo_surface_t * cairo_pdf_surface_create (const char *filename, double width_in_points, double height_in_points);"
cairo;cairo_pdf_surface_create_for_stream;cairo-auto.f90;/usr/include/cairo/cairo-pdf.h;" cairo_surface_t * cairo_pdf_surface_create_for_stream (cairo_write_func_t write_func, void *closure, double width_in_points, double height_in_points);"
cairo;cairo_pdf_surface_restrict_to_version;cairo-auto.f90;/usr/include/cairo/cairo-pdf.h;" void cairo_pdf_surface_restrict_to_version (cairo_surface_t *surface, cairo_pdf_version_t version);"
cairo;cairo_pdf_surface_set_size;cairo-auto.f90;/usr/include/cairo/cairo-pdf.h;" void cairo_pdf_surface_set_size (cairo_surface_t *surface, double width_in_points, double height_in_points);"
cairo;cairo_pdf_version_to_string;cairo-auto.f90;/usr/include/cairo/cairo-pdf.h;" const char * cairo_pdf_version_to_string (cairo_pdf_version_t version);"
cairo;cairo_pop_group;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_pattern_t * cairo_pop_group (cairo_t *cr);"
cairo;cairo_pop_group_to_source;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_pop_group_to_source (cairo_t *cr);"
cairo;cairo_ps_get_levels;cairo-auto.f90;/usr/include/cairo/cairo-ps.h;" void cairo_ps_get_levels (cairo_ps_level_t const **levels, int *num_levels);"
cairo;cairo_ps_level_to_string;cairo-auto.f90;/usr/include/cairo/cairo-ps.h;" const char * cairo_ps_level_to_string (cairo_ps_level_t level);"
cairo;cairo_ps_surface_create;cairo-auto.f90;/usr/include/cairo/cairo-ps.h;"  cairo_surface_t * cairo_ps_surface_create (const char *filename, double width_in_points, double height_in_points);"
cairo;cairo_ps_surface_create_for_stream;cairo-auto.f90;/usr/include/cairo/cairo-ps.h;" cairo_surface_t * cairo_ps_surface_create_for_stream (cairo_write_func_t write_func, void *closure, double width_in_points, double height_in_points);"
cairo;cairo_ps_surface_dsc_begin_page_setup;cairo-auto.f90;/usr/include/cairo/cairo-ps.h;" void cairo_ps_surface_dsc_begin_page_setup (cairo_surface_t *surface);"
cairo;cairo_ps_surface_dsc_begin_setup;cairo-auto.f90;/usr/include/cairo/cairo-ps.h;" void cairo_ps_surface_dsc_begin_setup (cairo_surface_t *surface);"
cairo;cairo_ps_surface_dsc_comment;cairo-auto.f90;/usr/include/cairo/cairo-ps.h;" void cairo_ps_surface_dsc_comment (cairo_surface_t *surface, const char *comment);"
cairo;cairo_ps_surface_get_eps;cairo-auto.f90;/usr/include/cairo/cairo-ps.h;" cairo_bool_t cairo_ps_surface_get_eps (cairo_surface_t *surface);"
cairo;cairo_ps_surface_restrict_to_level;cairo-auto.f90;/usr/include/cairo/cairo-ps.h;" void cairo_ps_surface_restrict_to_level (cairo_surface_t *surface, cairo_ps_level_t level);"
cairo;cairo_ps_surface_set_eps;cairo-auto.f90;/usr/include/cairo/cairo-ps.h;" void cairo_ps_surface_set_eps (cairo_surface_t *surface, cairo_bool_t eps);"
cairo;cairo_ps_surface_set_size;cairo-auto.f90;/usr/include/cairo/cairo-ps.h;" void cairo_ps_surface_set_size (cairo_surface_t *surface, double width_in_points, double height_in_points);"
cairo;cairo_push_group;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_push_group (cairo_t *cr);"
cairo;cairo_push_group_with_content;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_push_group_with_content (cairo_t *cr, cairo_content_t content);"
cairo;cairo_raster_source_pattern_get_acquire;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_raster_source_pattern_get_acquire (cairo_pattern_t *pattern, cairo_raster_source_acquire_func_t *acquire, cairo_raster_source_release_func_t *release);"
cairo;cairo_raster_source_pattern_get_callback_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" void * cairo_raster_source_pattern_get_callback_data (cairo_pattern_t *pattern);"
cairo;cairo_raster_source_pattern_get_copy;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_raster_source_copy_func_t cairo_raster_source_pattern_get_copy (cairo_pattern_t *pattern);"
cairo;cairo_raster_source_pattern_get_finish;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_raster_source_finish_func_t cairo_raster_source_pattern_get_finish (cairo_pattern_t *pattern);"
cairo;cairo_raster_source_pattern_get_snapshot;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_raster_source_snapshot_func_t cairo_raster_source_pattern_get_snapshot (cairo_pattern_t *pattern);"
cairo;cairo_raster_source_pattern_set_acquire;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_raster_source_pattern_set_acquire (cairo_pattern_t *pattern, cairo_raster_source_acquire_func_t acquire, cairo_raster_source_release_func_t release);"
cairo;cairo_raster_source_pattern_set_callback_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_raster_source_pattern_set_callback_data (cairo_pattern_t *pattern, void *data);"
cairo;cairo_raster_source_pattern_set_copy;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_raster_source_pattern_set_copy (cairo_pattern_t *pattern, cairo_raster_source_copy_func_t copy);"
cairo;cairo_raster_source_pattern_set_finish;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_raster_source_pattern_set_finish (cairo_pattern_t *pattern, cairo_raster_source_finish_func_t finish);"
cairo;cairo_raster_source_pattern_set_snapshot;cairo-auto.f90;/usr/include/cairo/cairo.h;"void cairo_raster_source_pattern_set_snapshot (cairo_pattern_t *pattern, cairo_raster_source_snapshot_func_t snapshot);"
cairo;cairo_recording_surface_create;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_recording_surface_create (cairo_content_t content, const cairo_rectangle_t *extents);"
cairo;cairo_recording_surface_get_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_bool_t cairo_recording_surface_get_extents (cairo_surface_t *surface, cairo_rectangle_t *extents);"
cairo;cairo_recording_surface_ink_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_recording_surface_ink_extents (cairo_surface_t *surface, double *x0, double *y0, double *width, double *height);"
cairo;cairo_rectangle;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_rectangle (cairo_t *cr, double x, double y, double width, double height);"
cairo;cairo_rectangle_list_destroy;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_rectangle_list_destroy (cairo_rectangle_list_t *rectangle_list);"
cairo;cairo_reference;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_t * cairo_reference (cairo_t *cr);"
cairo;cairo_region_contains_point;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_bool_t cairo_region_contains_point (const cairo_region_t *region, int x, int y);"
cairo;cairo_region_contains_rectangle;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_region_overlap_t cairo_region_contains_rectangle (const cairo_region_t *region, const cairo_rectangle_int_t *rectangle);"
cairo;cairo_region_copy;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_region_t * cairo_region_copy (const cairo_region_t *original);"
cairo;cairo_region_create;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_region_t * cairo_region_create (void);"
cairo;cairo_region_create_rectangle;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_region_t * cairo_region_create_rectangle (const cairo_rectangle_int_t *rectangle);"
cairo;cairo_region_create_rectangles;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_region_t * cairo_region_create_rectangles (const cairo_rectangle_int_t *rects, int count);"
cairo;cairo_region_destroy;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_region_destroy (cairo_region_t *region);"
cairo;cairo_region_equal;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_bool_t cairo_region_equal (const cairo_region_t *a, const cairo_region_t *b);"
cairo;cairo_region_get_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_region_get_extents (const cairo_region_t *region, cairo_rectangle_int_t *extents);"
cairo;cairo_region_get_rectangle;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_region_get_rectangle (const cairo_region_t *region, int nth, cairo_rectangle_int_t *rectangle);"
cairo;cairo_region_intersect;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_region_intersect (cairo_region_t *dst, const cairo_region_t *other);"
cairo;cairo_region_intersect_rectangle;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_region_intersect_rectangle (cairo_region_t *dst, const cairo_rectangle_int_t *rectangle);"
cairo;cairo_region_is_empty;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_bool_t cairo_region_is_empty (const cairo_region_t *region);"
cairo;cairo_region_num_rectangles;cairo-auto.f90;/usr/include/cairo/cairo.h;" int cairo_region_num_rectangles (const cairo_region_t *region);"
cairo;cairo_region_reference;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_region_t * cairo_region_reference (cairo_region_t *region);"
cairo;cairo_region_status;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_region_status (const cairo_region_t *region);"
cairo;cairo_region_subtract;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_region_subtract (cairo_region_t *dst, const cairo_region_t *other);"
cairo;cairo_region_subtract_rectangle;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_region_subtract_rectangle (cairo_region_t *dst, const cairo_rectangle_int_t *rectangle);"
cairo;cairo_region_translate;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_region_translate (cairo_region_t *region, int dx, int dy);"
cairo;cairo_region_union;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_region_union (cairo_region_t *dst, const cairo_region_t *other);"
cairo;cairo_region_union_rectangle;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_region_union_rectangle (cairo_region_t *dst, const cairo_rectangle_int_t *rectangle);"
cairo;cairo_region_xor;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_region_xor (cairo_region_t *dst, const cairo_region_t *other);"
cairo;cairo_region_xor_rectangle;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_region_xor_rectangle (cairo_region_t *dst, const cairo_rectangle_int_t *rectangle);"
cairo;cairo_rel_curve_to;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_rel_curve_to (cairo_t *cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3);"
cairo;cairo_rel_line_to;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_rel_line_to (cairo_t *cr, double dx, double dy);"
cairo;cairo_rel_move_to;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_rel_move_to (cairo_t *cr, double dx, double dy);"
cairo;cairo_reset_clip;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_reset_clip (cairo_t *cr);"
cairo;cairo_restore;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_restore (cairo_t *cr);"
cairo;cairo_rotate;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_rotate (cairo_t *cr, double angle);"
cairo;cairo_save;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_save (cairo_t *cr);"
cairo;cairo_scale;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_scale (cairo_t *cr, double sx, double sy);"
cairo;cairo_scaled_font_create;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_scaled_font_t * cairo_scaled_font_create (cairo_font_face_t *font_face, const cairo_matrix_t *font_matrix, const cairo_matrix_t *ctm, const cairo_font_options_t *options);"
cairo;cairo_scaled_font_destroy;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_scaled_font_destroy (cairo_scaled_font_t *scaled_font);"
cairo;cairo_scaled_font_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_scaled_font_extents (cairo_scaled_font_t *scaled_font, cairo_font_extents_t *extents);"
cairo;cairo_scaled_font_get_ctm;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_scaled_font_get_ctm (cairo_scaled_font_t *scaled_font, cairo_matrix_t *ctm);"
cairo;cairo_scaled_font_get_font_face;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_font_face_t * cairo_scaled_font_get_font_face (cairo_scaled_font_t *scaled_font);"
cairo;cairo_scaled_font_get_font_matrix;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_scaled_font_get_font_matrix (cairo_scaled_font_t *scaled_font, cairo_matrix_t *font_matrix);"
cairo;cairo_scaled_font_get_font_options;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_scaled_font_get_font_options (cairo_scaled_font_t *scaled_font, cairo_font_options_t *options);"
cairo;cairo_scaled_font_get_reference_count;cairo-auto.f90;/usr/include/cairo/cairo.h;" unsigned int cairo_scaled_font_get_reference_count (cairo_scaled_font_t *scaled_font);"
cairo;cairo_scaled_font_get_scale_matrix;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_scaled_font_get_scale_matrix (cairo_scaled_font_t *scaled_font, cairo_matrix_t *scale_matrix);"
cairo;cairo_scaled_font_get_type;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_font_type_t cairo_scaled_font_get_type (cairo_scaled_font_t *scaled_font);"
cairo;cairo_scaled_font_get_user_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" void * cairo_scaled_font_get_user_data (cairo_scaled_font_t *scaled_font, const cairo_user_data_key_t *key);"
cairo;cairo_scaled_font_glyph_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_scaled_font_glyph_extents (cairo_scaled_font_t *scaled_font, const cairo_glyph_t *glyphs, int num_glyphs, cairo_text_extents_t *extents);"
cairo;cairo_scaled_font_reference;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_scaled_font_t * cairo_scaled_font_reference (cairo_scaled_font_t *scaled_font);"
cairo;cairo_scaled_font_set_user_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_scaled_font_set_user_data (cairo_scaled_font_t *scaled_font, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy);"
cairo;cairo_scaled_font_status;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_scaled_font_status (cairo_scaled_font_t *scaled_font);"
cairo;cairo_scaled_font_text_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_scaled_font_text_extents (cairo_scaled_font_t *scaled_font, const char *utf8, cairo_text_extents_t *extents);"
cairo;cairo_scaled_font_text_to_glyphs;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_scaled_font_text_to_glyphs (cairo_scaled_font_t *scaled_font, double x, double y, const char *utf8, int utf8_len, cairo_glyph_t **glyphs, int *num_glyphs, cairo_text_cluster_t **clusters, int *num_clusters, cairo_text_cluster_flags_t *cluster_flags);"
cairo;cairo_script_create;cairo-auto.f90;/usr/include/cairo/cairo-script.h;"  cairo_device_t * cairo_script_create (const char *filename);"
cairo;cairo_script_create_for_stream;cairo-auto.f90;/usr/include/cairo/cairo-script.h;" cairo_device_t * cairo_script_create_for_stream (cairo_write_func_t write_func, void *closure);"
cairo;cairo_script_from_recording_surface;cairo-auto.f90;/usr/include/cairo/cairo-script.h;" cairo_status_t cairo_script_from_recording_surface (cairo_device_t *script, cairo_surface_t *recording_surface);"
cairo;cairo_script_get_mode;cairo-auto.f90;/usr/include/cairo/cairo-script.h;" cairo_script_mode_t cairo_script_get_mode (cairo_device_t *script);"
cairo;cairo_script_interpreter_create;cairo-auto.f90;/usr/include/cairo/cairo-script-interpreter.h;" cairo_script_interpreter_t * cairo_script_interpreter_create (void);"
cairo;cairo_script_interpreter_destroy;cairo-auto.f90;/usr/include/cairo/cairo-script-interpreter.h;" cairo_status_t cairo_script_interpreter_destroy (cairo_script_interpreter_t *ctx);"
cairo;cairo_script_interpreter_feed_stream;cairo-auto.f90;/usr/include/cairo/cairo-script-interpreter.h;" cairo_status_t cairo_script_interpreter_feed_stream (cairo_script_interpreter_t *ctx, FILE *stream);"
cairo;cairo_script_interpreter_feed_string;cairo-auto.f90;/usr/include/cairo/cairo-script-interpreter.h;" cairo_status_t cairo_script_interpreter_feed_string (cairo_script_interpreter_t *ctx, const char *line, int len);"
cairo;cairo_script_interpreter_finish;cairo-auto.f90;/usr/include/cairo/cairo-script-interpreter.h;" cairo_status_t cairo_script_interpreter_finish (cairo_script_interpreter_t *ctx);"
cairo;cairo_script_interpreter_get_line_number;cairo-auto.f90;/usr/include/cairo/cairo-script-interpreter.h;" unsigned int cairo_script_interpreter_get_line_number (cairo_script_interpreter_t *ctx);"
cairo;cairo_script_interpreter_install_hooks;cairo-auto.f90;/usr/include/cairo/cairo-script-interpreter.h;" void cairo_script_interpreter_install_hooks (cairo_script_interpreter_t *ctx, const cairo_script_interpreter_hooks_t *hooks);"
cairo;cairo_script_interpreter_reference;cairo-auto.f90;/usr/include/cairo/cairo-script-interpreter.h;" cairo_script_interpreter_t * cairo_script_interpreter_reference (cairo_script_interpreter_t *ctx);"
cairo;cairo_script_interpreter_run;cairo-auto.f90;/usr/include/cairo/cairo-script-interpreter.h;" cairo_status_t cairo_script_interpreter_run (cairo_script_interpreter_t *ctx, const char *filename);"
cairo;cairo_script_interpreter_translate_stream;cairo-auto.f90;/usr/include/cairo/cairo-script-interpreter.h;" cairo_status_t cairo_script_interpreter_translate_stream (FILE *stream, cairo_write_func_t write_func, void *closure);"
cairo;cairo_script_set_mode;cairo-auto.f90;/usr/include/cairo/cairo-script.h;" void cairo_script_set_mode (cairo_device_t *script, cairo_script_mode_t mode);"
cairo;cairo_script_surface_create;cairo-auto.f90;/usr/include/cairo/cairo-script.h;" cairo_surface_t * cairo_script_surface_create (cairo_device_t *script, cairo_content_t content, double width, double height);"
cairo;cairo_script_surface_create_for_target;cairo-auto.f90;/usr/include/cairo/cairo-script.h;" cairo_surface_t * cairo_script_surface_create_for_target (cairo_device_t *script, cairo_surface_t *target);"
cairo;cairo_script_write_comment;cairo-auto.f90;/usr/include/cairo/cairo-script.h;" void cairo_script_write_comment (cairo_device_t *script, const char *comment, int len);"
cairo;cairo_select_font_face;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_select_font_face (cairo_t *cr, const char *family, cairo_font_slant_t slant, cairo_font_weight_t weight);"
cairo;cairo_set_antialias;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_antialias (cairo_t *cr, cairo_antialias_t antialias);"
cairo;cairo_set_dash;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_dash (cairo_t *cr, const double *dashes, int num_dashes, double offset);"
cairo;cairo_set_fill_rule;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_fill_rule (cairo_t *cr, cairo_fill_rule_t fill_rule);"
cairo;cairo_set_font_face;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_font_face (cairo_t *cr, cairo_font_face_t *font_face);"
cairo;cairo_set_font_matrix;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_font_matrix (cairo_t *cr, const cairo_matrix_t *matrix);"
cairo;cairo_set_font_options;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_font_options (cairo_t *cr, const cairo_font_options_t *options);"
cairo;cairo_set_font_size;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_font_size (cairo_t *cr, double size);"
cairo;cairo_set_line_cap;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_line_cap (cairo_t *cr, cairo_line_cap_t line_cap);"
cairo;cairo_set_line_join;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_line_join (cairo_t *cr, cairo_line_join_t line_join);"
cairo;cairo_set_line_width;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_line_width (cairo_t *cr, double width);"
cairo;cairo_set_matrix;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_matrix (cairo_t *cr, const cairo_matrix_t *matrix);"
cairo;cairo_set_miter_limit;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_miter_limit (cairo_t *cr, double limit);"
cairo;cairo_set_operator;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_operator (cairo_t *cr, cairo_operator_t op);"
cairo;cairo_set_scaled_font;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_scaled_font (cairo_t *cr, const cairo_scaled_font_t *scaled_font);"
cairo;cairo_set_source;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_source (cairo_t *cr, cairo_pattern_t *source);"
cairo;cairo_set_source_rgb;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_source_rgb (cairo_t *cr, double red, double green, double blue);"
cairo;cairo_set_source_rgba;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_source_rgba (cairo_t *cr, double red, double green, double blue, double alpha);"
cairo;cairo_set_source_surface;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_source_surface (cairo_t *cr, cairo_surface_t *surface, double x, double y);"
cairo;cairo_set_tolerance;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_set_tolerance (cairo_t *cr, double tolerance);"
cairo;cairo_set_user_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_set_user_data (cairo_t *cr, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy);"
cairo;cairo_show_glyphs;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_show_glyphs (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);"
cairo;cairo_show_page;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_show_page (cairo_t *cr);"
cairo;cairo_show_text;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_show_text (cairo_t *cr, const char *utf8);"
cairo;cairo_show_text_glyphs;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_show_text_glyphs (cairo_t *cr, const char *utf8, int utf8_len, const cairo_glyph_t *glyphs, int num_glyphs, const cairo_text_cluster_t *clusters, int num_clusters, cairo_text_cluster_flags_t cluster_flags);"
cairo;cairo_status;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_status (cairo_t *cr);"
cairo;cairo_status_to_string;cairo-auto.f90;/usr/include/cairo/cairo.h;" const char * cairo_status_to_string (cairo_status_t status);"
cairo;cairo_stroke;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_stroke (cairo_t *cr);"
cairo;cairo_stroke_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_stroke_extents (cairo_t *cr, double *x1, double *y1, double *x2, double *y2);"
cairo;cairo_stroke_preserve;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_stroke_preserve (cairo_t *cr);"
cairo;cairo_surface_copy_page;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_copy_page (cairo_surface_t *surface);"
cairo;cairo_surface_create_for_rectangle;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_surface_create_for_rectangle (cairo_surface_t *target, double x, double y, double width, double height);"
cairo;cairo_surface_create_observer;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_surface_create_observer (cairo_surface_t *target, cairo_surface_observer_mode_t mode);"
cairo;cairo_surface_create_similar;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_surface_create_similar (cairo_surface_t *other, cairo_content_t content, int width, int height);"
cairo;cairo_surface_create_similar_image;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_surface_create_similar_image (cairo_surface_t *other, cairo_format_t format, int width, int height);"
cairo;cairo_surface_destroy;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_destroy (cairo_surface_t *surface);"
cairo;cairo_surface_finish;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_finish (cairo_surface_t *surface);"
cairo;cairo_surface_flush;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_flush (cairo_surface_t *surface);"
cairo;cairo_surface_get_content;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_content_t cairo_surface_get_content (cairo_surface_t *surface);"
cairo;cairo_surface_get_device;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_device_t * cairo_surface_get_device (cairo_surface_t *surface);"
cairo;cairo_surface_get_device_offset;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_get_device_offset (cairo_surface_t *surface, double *x_offset, double *y_offset);"
cairo;cairo_surface_get_device_scale;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_get_device_scale (cairo_surface_t *surface, double *x_scale, double *y_scale);"
cairo;cairo_surface_get_fallback_resolution;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_get_fallback_resolution (cairo_surface_t *surface, double *x_pixels_per_inch, double *y_pixels_per_inch);"
cairo;cairo_surface_get_font_options;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_get_font_options (cairo_surface_t *surface, cairo_font_options_t *options);"
cairo;cairo_surface_get_mime_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_get_mime_data (cairo_surface_t *surface, const char *mime_type, const unsigned char **data, unsigned long *length);"
cairo;cairo_surface_get_reference_count;cairo-auto.f90;/usr/include/cairo/cairo.h;" unsigned int cairo_surface_get_reference_count (cairo_surface_t *surface);"
cairo;cairo_surface_get_type;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_type_t cairo_surface_get_type (cairo_surface_t *surface);"
cairo;cairo_surface_get_user_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" void * cairo_surface_get_user_data (cairo_surface_t *surface, const cairo_user_data_key_t *key);"
cairo;cairo_surface_has_show_text_glyphs;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_bool_t cairo_surface_has_show_text_glyphs (cairo_surface_t *surface);"
cairo;cairo_surface_map_to_image;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_surface_map_to_image (cairo_surface_t *surface, const cairo_rectangle_int_t *extents);"
cairo;cairo_surface_mark_dirty;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_mark_dirty (cairo_surface_t *surface);"
cairo;cairo_surface_mark_dirty_rectangle;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_mark_dirty_rectangle (cairo_surface_t *surface, int x, int y, int width, int height);"
cairo;cairo_surface_observer_add_fill_callback;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_observer_add_fill_callback (cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data);"
cairo;cairo_surface_observer_add_finish_callback;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_observer_add_finish_callback (cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data);"
cairo;cairo_surface_observer_add_flush_callback;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_observer_add_flush_callback (cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data);"
cairo;cairo_surface_observer_add_glyphs_callback;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_observer_add_glyphs_callback (cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data);"
cairo;cairo_surface_observer_add_mask_callback;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_observer_add_mask_callback (cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data);"
cairo;cairo_surface_observer_add_paint_callback;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_observer_add_paint_callback (cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data);"
cairo;cairo_surface_observer_add_stroke_callback;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_observer_add_stroke_callback (cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data);"
cairo;cairo_surface_observer_elapsed;cairo-auto.f90;/usr/include/cairo/cairo.h;"double cairo_surface_observer_elapsed (cairo_surface_t *surface);"
cairo;cairo_surface_observer_print;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_observer_print (cairo_surface_t *surface, cairo_write_func_t write_func, void *closure);"
cairo;cairo_surface_reference;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_surface_t * cairo_surface_reference (cairo_surface_t *surface);"
cairo;cairo_surface_set_device_offset;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_set_device_offset (cairo_surface_t *surface, double x_offset, double y_offset);"
cairo;cairo_surface_set_device_scale;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_set_device_scale (cairo_surface_t *surface, double x_scale, double y_scale);"
cairo;cairo_surface_set_fallback_resolution;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_set_fallback_resolution (cairo_surface_t *surface, double x_pixels_per_inch, double y_pixels_per_inch);"
cairo;cairo_surface_set_mime_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_set_mime_data (cairo_surface_t *surface, const char *mime_type, const unsigned char *data, unsigned long length, cairo_destroy_func_t destroy, void *closure);"
cairo;cairo_surface_set_user_data;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_set_user_data (cairo_surface_t *surface, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy);"
cairo;cairo_surface_show_page;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_show_page (cairo_surface_t *surface);"
cairo;cairo_surface_status;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_status (cairo_surface_t *surface);"
cairo;cairo_surface_supports_mime_type;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_bool_t cairo_surface_supports_mime_type (cairo_surface_t *surface, const char *mime_type);"
cairo;cairo_surface_unmap_image;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_surface_unmap_image (cairo_surface_t *surface, cairo_surface_t *image);"
cairo;cairo_surface_write_to_png;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_write_to_png (cairo_surface_t *surface, const char *filename);"
cairo;cairo_surface_write_to_png_stream;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_status_t cairo_surface_write_to_png_stream (cairo_surface_t *surface, cairo_write_func_t write_func, void *closure);"
cairo;cairo_svg_get_versions;cairo-auto.f90;/usr/include/cairo/cairo-svg.h;" void cairo_svg_get_versions (cairo_svg_version_t const **versions, int *num_versions);"
cairo;cairo_svg_surface_create;cairo-auto.f90;/usr/include/cairo/cairo-svg.h;"  cairo_surface_t * cairo_svg_surface_create (const char *filename, double width_in_points, double height_in_points);"
cairo;cairo_svg_surface_create_for_stream;cairo-auto.f90;/usr/include/cairo/cairo-svg.h;" cairo_surface_t * cairo_svg_surface_create_for_stream (cairo_write_func_t write_func, void *closure, double width_in_points, double height_in_points);"
cairo;cairo_svg_surface_restrict_to_version;cairo-auto.f90;/usr/include/cairo/cairo-svg.h;" void cairo_svg_surface_restrict_to_version (cairo_surface_t *surface, cairo_svg_version_t version);"
cairo;cairo_svg_version_to_string;cairo-auto.f90;/usr/include/cairo/cairo-svg.h;" const char * cairo_svg_version_to_string (cairo_svg_version_t version);"
cairo;cairo_tee_surface_add;cairo-auto.f90;/usr/include/cairo/cairo-tee.h;" void cairo_tee_surface_add (cairo_surface_t *surface, cairo_surface_t *target);"
cairo;cairo_tee_surface_create;cairo-auto.f90;/usr/include/cairo/cairo-tee.h;"  cairo_surface_t * cairo_tee_surface_create (cairo_surface_t *master);"
cairo;cairo_tee_surface_index;cairo-auto.f90;/usr/include/cairo/cairo-tee.h;" cairo_surface_t * cairo_tee_surface_index (cairo_surface_t *surface, unsigned int index);"
cairo;cairo_tee_surface_remove;cairo-auto.f90;/usr/include/cairo/cairo-tee.h;" void cairo_tee_surface_remove (cairo_surface_t *surface, cairo_surface_t *target);"
cairo;cairo_text_cluster_allocate;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_text_cluster_t * cairo_text_cluster_allocate (int num_clusters);"
cairo;cairo_text_cluster_free;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_text_cluster_free (cairo_text_cluster_t *clusters);"
cairo;cairo_text_extents;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_text_extents (cairo_t *cr, const char *utf8, cairo_text_extents_t *extents);"
cairo;cairo_text_path;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_text_path (cairo_t *cr, const char *utf8);"
cairo;cairo_toy_font_face_create;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_font_face_t * cairo_toy_font_face_create (const char *family, cairo_font_slant_t slant, cairo_font_weight_t weight);"
cairo;cairo_toy_font_face_get_family;cairo-auto.f90;/usr/include/cairo/cairo.h;" const char * cairo_toy_font_face_get_family (cairo_font_face_t *font_face);"
cairo;cairo_toy_font_face_get_slant;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_font_slant_t cairo_toy_font_face_get_slant (cairo_font_face_t *font_face);"
cairo;cairo_toy_font_face_get_weight;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_font_weight_t cairo_toy_font_face_get_weight (cairo_font_face_t *font_face);"
cairo;cairo_transform;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_transform (cairo_t *cr, const cairo_matrix_t *matrix);"
cairo;cairo_translate;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_translate (cairo_t *cr, double tx, double ty);"
cairo;cairo_user_font_face_create;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_font_face_t * cairo_user_font_face_create (void);"
cairo;cairo_user_font_face_get_init_func;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_user_scaled_font_init_func_t cairo_user_font_face_get_init_func (cairo_font_face_t *font_face);"
cairo;cairo_user_font_face_get_render_glyph_func;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_user_scaled_font_render_glyph_func_t cairo_user_font_face_get_render_glyph_func (cairo_font_face_t *font_face);"
cairo;cairo_user_font_face_get_text_to_glyphs_func;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_user_scaled_font_text_to_glyphs_func_t cairo_user_font_face_get_text_to_glyphs_func (cairo_font_face_t *font_face);"
cairo;cairo_user_font_face_get_unicode_to_glyph_func;cairo-auto.f90;/usr/include/cairo/cairo.h;" cairo_user_scaled_font_unicode_to_glyph_func_t cairo_user_font_face_get_unicode_to_glyph_func (cairo_font_face_t *font_face);"
cairo;cairo_user_font_face_set_init_func;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_user_font_face_set_init_func (cairo_font_face_t *font_face, cairo_user_scaled_font_init_func_t init_func);"
cairo;cairo_user_font_face_set_render_glyph_func;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_user_font_face_set_render_glyph_func (cairo_font_face_t *font_face, cairo_user_scaled_font_render_glyph_func_t render_glyph_func);"
cairo;cairo_user_font_face_set_text_to_glyphs_func;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_user_font_face_set_text_to_glyphs_func (cairo_font_face_t *font_face, cairo_user_scaled_font_text_to_glyphs_func_t text_to_glyphs_func);"
cairo;cairo_user_font_face_set_unicode_to_glyph_func;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_user_font_face_set_unicode_to_glyph_func (cairo_font_face_t *font_face, cairo_user_scaled_font_unicode_to_glyph_func_t unicode_to_glyph_func);"
cairo;cairo_user_to_device;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_user_to_device (cairo_t *cr, double *x, double *y);"
cairo;cairo_user_to_device_distance;cairo-auto.f90;/usr/include/cairo/cairo.h;" void cairo_user_to_device_distance (cairo_t *cr, double *dx, double *dy);"
cairo;cairo_version;cairo-auto.f90;/usr/include/cairo/cairo.h;"  int cairo_version (void);"
cairo;cairo_version_string;cairo-auto.f90;/usr/include/cairo/cairo.h;" const char* cairo_version_string (void);"
cairo;cairo_xcb_device_debug_cap_xrender_version;cairo-auto.f90;/usr/include/cairo/cairo-xcb.h;" void cairo_xcb_device_debug_cap_xrender_version (cairo_device_t *device, int major_version, int minor_version);"
cairo;cairo_xcb_device_debug_cap_xshm_version;cairo-auto.f90;/usr/include/cairo/cairo-xcb.h;" void cairo_xcb_device_debug_cap_xshm_version (cairo_device_t *device, int major_version, int minor_version);"
cairo;cairo_xcb_device_debug_get_precision;cairo-auto.f90;/usr/include/cairo/cairo-xcb.h;" int cairo_xcb_device_debug_get_precision (cairo_device_t *device);"
cairo;cairo_xcb_device_debug_set_precision;cairo-auto.f90;/usr/include/cairo/cairo-xcb.h;" void cairo_xcb_device_debug_set_precision (cairo_device_t *device, int precision);"
cairo;cairo_xcb_device_get_connection;cairo-auto.f90;/usr/include/cairo/cairo-xcb.h;" xcb_connection_t * cairo_xcb_device_get_connection (cairo_device_t *device);"
cairo;cairo_xcb_surface_create;cairo-auto.f90;/usr/include/cairo/cairo-xcb.h;"  cairo_surface_t * cairo_xcb_surface_create (xcb_connection_t *connection, xcb_drawable_t drawable, xcb_visualtype_t *visual, int width, int height);"
cairo;cairo_xcb_surface_create_for_bitmap;cairo-auto.f90;/usr/include/cairo/cairo-xcb.h;" cairo_surface_t * cairo_xcb_surface_create_for_bitmap (xcb_connection_t *connection, xcb_screen_t *screen, xcb_pixmap_t bitmap, int width, int height);"
cairo;cairo_xcb_surface_create_with_xrender_format;cairo-auto.f90;/usr/include/cairo/cairo-xcb.h;" cairo_surface_t * cairo_xcb_surface_create_with_xrender_format (xcb_connection_t *connection, xcb_screen_t *screen, xcb_drawable_t drawable, xcb_render_pictforminfo_t *format, int width, int height);"
cairo;cairo_xcb_surface_set_drawable;cairo-auto.f90;/usr/include/cairo/cairo-xcb.h;" void cairo_xcb_surface_set_drawable (cairo_surface_t *surface, xcb_drawable_t drawable, int width, int height);"
cairo;cairo_xcb_surface_set_size;cairo-auto.f90;/usr/include/cairo/cairo-xcb.h;" void cairo_xcb_surface_set_size (cairo_surface_t *surface, int width, int height);"
cairo;cairo_xlib_device_debug_cap_xrender_version;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" void cairo_xlib_device_debug_cap_xrender_version (cairo_device_t *device, int major_version, int minor_version);"
cairo;cairo_xlib_device_debug_get_precision;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" int cairo_xlib_device_debug_get_precision (cairo_device_t *device);"
cairo;cairo_xlib_device_debug_set_precision;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" void cairo_xlib_device_debug_set_precision (cairo_device_t *device, int precision);"
cairo;cairo_xlib_surface_create;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;"  cairo_surface_t * cairo_xlib_surface_create (Display *dpy, Drawable drawable, Visual *visual, int width, int height);"
cairo;cairo_xlib_surface_create_for_bitmap;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" cairo_surface_t * cairo_xlib_surface_create_for_bitmap (Display *dpy, Pixmap bitmap, Screen *screen, int width, int height);"
cairo;cairo_xlib_surface_create_with_xrender_format;cairo-auto.f90;/usr/include/cairo/cairo-xlib-xrender.h;"  cairo_surface_t * cairo_xlib_surface_create_with_xrender_format (Display *dpy, Drawable drawable, Screen *screen, XRenderPictFormat *format, int width, int height);"
cairo;cairo_xlib_surface_get_depth;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" int cairo_xlib_surface_get_depth (cairo_surface_t *surface);"
cairo;cairo_xlib_surface_get_display;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" Display * cairo_xlib_surface_get_display (cairo_surface_t *surface);"
cairo;cairo_xlib_surface_get_drawable;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" Drawable cairo_xlib_surface_get_drawable (cairo_surface_t *surface);"
cairo;cairo_xlib_surface_get_height;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" int cairo_xlib_surface_get_height (cairo_surface_t *surface);"
cairo;cairo_xlib_surface_get_screen;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" Screen * cairo_xlib_surface_get_screen (cairo_surface_t *surface);"
cairo;cairo_xlib_surface_get_visual;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" Visual * cairo_xlib_surface_get_visual (cairo_surface_t *surface);"
cairo;cairo_xlib_surface_get_width;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" int cairo_xlib_surface_get_width (cairo_surface_t *surface);"
cairo;cairo_xlib_surface_get_xrender_format;cairo-auto.f90;/usr/include/cairo/cairo-xlib-xrender.h;" XRenderPictFormat * cairo_xlib_surface_get_xrender_format (cairo_surface_t *surface);"
cairo;cairo_xlib_surface_set_drawable;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" void cairo_xlib_surface_set_drawable (cairo_surface_t *surface, Drawable drawable, int width, int height);"
cairo;cairo_xlib_surface_set_size;cairo-auto.f90;/usr/include/cairo/cairo-xlib.h;" void cairo_xlib_surface_set_size (cairo_surface_t *surface, int width, int height);"
g;alloca;glib-auto.f90;/usr/include/glib-2.0/glib/galloca.h;"    char *alloca ();"
g;atexit;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" int atexit (void (*)(void));"
g;g_action_activate;glib-auto.f90;/usr/include/glib-2.0/gio/gaction.h;" void g_action_activate (GAction *action, GVariant *parameter);"
g;g_action_change_state;glib-auto.f90;/usr/include/glib-2.0/gio/gaction.h;" void g_action_change_state (GAction *action, GVariant *value);"
g;g_action_get_enabled;glib-auto.f90;/usr/include/glib-2.0/gio/gaction.h;" gboolean g_action_get_enabled (GAction *action);"
g;g_action_get_name;glib-auto.f90;/usr/include/glib-2.0/gio/gaction.h;" const gchar * g_action_get_name (GAction *action);"
g;g_action_get_parameter_type;glib-auto.f90;/usr/include/glib-2.0/gio/gaction.h;" const GVariantType * g_action_get_parameter_type (GAction *action);"
g;g_action_get_state;glib-auto.f90;/usr/include/glib-2.0/gio/gaction.h;" GVariant * g_action_get_state (GAction *action);"
g;g_action_get_state_hint;glib-auto.f90;/usr/include/glib-2.0/gio/gaction.h;" GVariant * g_action_get_state_hint (GAction *action);"
g;g_action_get_state_type;glib-auto.f90;/usr/include/glib-2.0/gio/gaction.h;" const GVariantType * g_action_get_state_type (GAction *action);"
g;g_action_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gaction.h;"  GType g_action_get_type (void) G_GNUC_CONST;"
g;g_action_group_action_added;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" void g_action_group_action_added (GActionGroup *action_group, const gchar *action_name);"
g;g_action_group_action_enabled_changed;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" void g_action_group_action_enabled_changed (GActionGroup *action_group, const gchar *action_name, gboolean enabled);"
g;g_action_group_action_removed;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" void g_action_group_action_removed (GActionGroup *action_group, const gchar *action_name);"
g;g_action_group_action_state_changed;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" void g_action_group_action_state_changed (GActionGroup *action_group, const gchar *action_name, GVariant *state);"
g;g_action_group_activate_action;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" void g_action_group_activate_action (GActionGroup *action_group, const gchar *action_name, GVariant *parameter);"
g;g_action_group_change_action_state;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" void g_action_group_change_action_state (GActionGroup *action_group, const gchar *action_name, GVariant *value);"
g;g_action_group_get_action_enabled;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" gboolean g_action_group_get_action_enabled (GActionGroup *action_group, const gchar *action_name);"
g;g_action_group_get_action_parameter_type;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" const GVariantType * g_action_group_get_action_parameter_type (GActionGroup *action_group, const gchar *action_name);"
g;g_action_group_get_action_state;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" GVariant * g_action_group_get_action_state (GActionGroup *action_group, const gchar *action_name);"
g;g_action_group_get_action_state_hint;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" GVariant * g_action_group_get_action_state_hint (GActionGroup *action_group, const gchar *action_name);"
g;g_action_group_get_action_state_type;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" const GVariantType * g_action_group_get_action_state_type (GActionGroup *action_group, const gchar *action_name);"
g;g_action_group_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;"  GType g_action_group_get_type (void) G_GNUC_CONST;"
g;g_action_group_has_action;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" gboolean g_action_group_has_action (GActionGroup *action_group, const gchar *action_name);"
g;g_action_group_list_actions;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" gchar ** g_action_group_list_actions (GActionGroup *action_group);"
g;g_action_group_query_action;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroup.h;" gboolean g_action_group_query_action (GActionGroup *action_group, const gchar *action_name, gboolean *enabled, const GVariantType **parameter_type, const GVariantType **state_type, GVariant **state_hint, GVariant **state);"
g;g_action_map_add_action;glib-auto.f90;/usr/include/glib-2.0/gio/gactionmap.h;" void g_action_map_add_action (GActionMap *action_map, GAction *action);"
g;g_action_map_add_action_entries;glib-auto.f90;/usr/include/glib-2.0/gio/gactionmap.h;" void g_action_map_add_action_entries (GActionMap *action_map, const GActionEntry *entries, gint n_entries, gpointer user_data);"
g;g_action_map_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gactionmap.h;"  GType g_action_map_get_type (void) G_GNUC_CONST;"
g;g_action_map_lookup_action;glib-auto.f90;/usr/include/glib-2.0/gio/gactionmap.h;" GAction * g_action_map_lookup_action (GActionMap *action_map, const gchar *action_name);"
g;g_action_map_remove_action;glib-auto.f90;/usr/include/glib-2.0/gio/gactionmap.h;" void g_action_map_remove_action (GActionMap *action_map, const gchar *action_name);"
g;g_action_name_is_valid;glib-auto.f90;/usr/include/glib-2.0/gio/gaction.h;" gboolean g_action_name_is_valid (const gchar *action_name);"
g;g_action_parse_detailed_name;glib-auto.f90;/usr/include/glib-2.0/gio/gaction.h;" gboolean g_action_parse_detailed_name (const gchar *detailed_name, gchar **action_name, GVariant **target_value, GError **error);"
g;g_action_print_detailed_name;glib-auto.f90;/usr/include/glib-2.0/gio/gaction.h;" gchar * g_action_print_detailed_name (const gchar *action_name, GVariant *target_value);"
g;g_allocator_free;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_allocator_free (GAllocator *allocator);"
g;g_allocator_new;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" GAllocator * g_allocator_new (const gchar *name, guint n_preallocs);"
g;g_app_info_add_supports_type;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_add_supports_type (GAppInfo *appinfo, const char *content_type, GError **error);"
g;g_app_info_can_delete;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_can_delete (GAppInfo *appinfo);"
g;g_app_info_can_remove_supports_type;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_can_remove_supports_type (GAppInfo *appinfo);"
g;g_app_info_create_from_commandline;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GAppInfo * g_app_info_create_from_commandline (const char *commandline, const char *application_name, GAppInfoCreateFlags flags, GError **error);"
g;g_app_info_delete;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_delete (GAppInfo *appinfo);"
g;g_app_info_dup;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GAppInfo * g_app_info_dup (GAppInfo *appinfo);"
g;g_app_info_equal;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_equal (GAppInfo *appinfo1, GAppInfo *appinfo2);"
g;g_app_info_get_all;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GList * g_app_info_get_all (void);"
g;g_app_info_get_all_for_type;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GList * g_app_info_get_all_for_type (const char *content_type);"
g;g_app_info_get_commandline;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" const char *g_app_info_get_commandline (GAppInfo *appinfo);"
g;g_app_info_get_default_for_type;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GAppInfo *g_app_info_get_default_for_type (const char *content_type, gboolean must_support_uris);"
g;g_app_info_get_default_for_uri_scheme;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GAppInfo *g_app_info_get_default_for_uri_scheme (const char *uri_scheme);"
g;g_app_info_get_description;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" const char *g_app_info_get_description (GAppInfo *appinfo);"
g;g_app_info_get_display_name;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" const char *g_app_info_get_display_name (GAppInfo *appinfo);"
g;g_app_info_get_executable;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" const char *g_app_info_get_executable (GAppInfo *appinfo);"
g;g_app_info_get_fallback_for_type;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GList * g_app_info_get_fallback_for_type (const gchar *content_type);"
g;g_app_info_get_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GIcon * g_app_info_get_icon (GAppInfo *appinfo);"
g;g_app_info_get_id;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" const char *g_app_info_get_id (GAppInfo *appinfo);"
g;g_app_info_get_name;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" const char *g_app_info_get_name (GAppInfo *appinfo);"
g;g_app_info_get_recommended_for_type;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GList * g_app_info_get_recommended_for_type (const gchar *content_type);"
g;g_app_info_get_supported_types;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" const char **g_app_info_get_supported_types (GAppInfo *appinfo);"
g;g_app_info_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;"  GType g_app_info_get_type (void) G_GNUC_CONST;"
g;g_app_info_launch;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_launch (GAppInfo *appinfo, GList *files, GAppLaunchContext *launch_context, GError **error);"
g;g_app_info_launch_default_for_uri;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_launch_default_for_uri (const char *uri, GAppLaunchContext *launch_context, GError **error);"
g;g_app_info_launch_uris;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_launch_uris (GAppInfo *appinfo, GList *uris, GAppLaunchContext *launch_context, GError **error);"
g;g_app_info_monitor_get;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GAppInfoMonitor * g_app_info_monitor_get (void);"
g;g_app_info_monitor_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GType g_app_info_monitor_get_type (void);"
g;g_app_info_remove_supports_type;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_remove_supports_type (GAppInfo *appinfo, const char *content_type, GError **error);"
g;g_app_info_reset_type_associations;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" void g_app_info_reset_type_associations (const char *content_type);"
g;g_app_info_set_as_default_for_extension;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_set_as_default_for_extension (GAppInfo *appinfo, const char *extension, GError **error);"
g;g_app_info_set_as_default_for_type;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_set_as_default_for_type (GAppInfo *appinfo, const char *content_type, GError **error);"
g;g_app_info_set_as_last_used_for_type;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_set_as_last_used_for_type (GAppInfo *appinfo, const char *content_type, GError **error);"
g;g_app_info_should_show;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_should_show (GAppInfo *appinfo);"
g;g_app_info_supports_files;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_supports_files (GAppInfo *appinfo);"
g;g_app_info_supports_uris;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" gboolean g_app_info_supports_uris (GAppInfo *appinfo);"
g;g_app_launch_context_get_display;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" char * g_app_launch_context_get_display (GAppLaunchContext *context, GAppInfo *info, GList *files);"
g;g_app_launch_context_get_environment;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" char ** g_app_launch_context_get_environment (GAppLaunchContext *context);"
g;g_app_launch_context_get_startup_notify_id;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" char * g_app_launch_context_get_startup_notify_id (GAppLaunchContext *context, GAppInfo *info, GList *files);"
g;g_app_launch_context_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GType g_app_launch_context_get_type (void) G_GNUC_CONST;"
g;g_app_launch_context_launch_failed;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" void g_app_launch_context_launch_failed (GAppLaunchContext *context, const char * startup_notify_id);"
g;g_app_launch_context_new;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" GAppLaunchContext *g_app_launch_context_new (void);"
g;g_app_launch_context_setenv;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" void g_app_launch_context_setenv (GAppLaunchContext *context, const char *variable, const char *value);"
g;g_app_launch_context_unsetenv;glib-auto.f90;/usr/include/glib-2.0/gio/gappinfo.h;" void g_app_launch_context_unsetenv (GAppLaunchContext *context, const char *variable);"
g;g_application_activate;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_activate (GApplication *application);"
g;g_application_add_main_option_entries;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_add_main_option_entries (GApplication *application, const GOptionEntry *entries);"
g;g_application_add_option_group;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_add_option_group (GApplication *application, GOptionGroup *group);"
g;g_application_bind_busy_property;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_bind_busy_property (GApplication *application, gpointer object, const gchar *property);"
g;g_application_command_line_create_file_for_arg;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" GFile * g_application_command_line_create_file_for_arg (GApplicationCommandLine *cmdline, const gchar *arg);"
g;g_application_command_line_get_arguments;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" gchar ** g_application_command_line_get_arguments (GApplicationCommandLine *cmdline, int *argc);"
g;g_application_command_line_get_cwd;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" const gchar * g_application_command_line_get_cwd (GApplicationCommandLine *cmdline);"
g;g_application_command_line_get_environ;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" const gchar * const * g_application_command_line_get_environ (GApplicationCommandLine *cmdline);"
g;g_application_command_line_get_exit_status;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" int g_application_command_line_get_exit_status (GApplicationCommandLine *cmdline);"
g;g_application_command_line_get_is_remote;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" gboolean g_application_command_line_get_is_remote (GApplicationCommandLine *cmdline);"
g;g_application_command_line_get_options_dict;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" GVariantDict * g_application_command_line_get_options_dict (GApplicationCommandLine *cmdline);"
g;g_application_command_line_get_platform_data;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" GVariant * g_application_command_line_get_platform_data (GApplicationCommandLine *cmdline);"
g;g_application_command_line_get_stdin;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" GInputStream * g_application_command_line_get_stdin (GApplicationCommandLine *cmdline);"
g;g_application_command_line_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;"  GType g_application_command_line_get_type (void) G_GNUC_CONST;"
g;g_application_command_line_getenv;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" const gchar * g_application_command_line_getenv (GApplicationCommandLine *cmdline, const gchar *name);"
g;g_application_command_line_print;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" void g_application_command_line_print (GApplicationCommandLine *cmdline, const gchar *format, ...) G_GNUC_PRINTF(2, 3);"
g;g_application_command_line_printerr;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" void g_application_command_line_printerr (GApplicationCommandLine *cmdline, const gchar *format, ...) G_GNUC_PRINTF(2, 3);"
g;g_application_command_line_set_exit_status;glib-auto.f90;/usr/include/glib-2.0/gio/gapplicationcommandline.h;" void g_application_command_line_set_exit_status (GApplicationCommandLine *cmdline, int exit_status);"
g;g_application_get_application_id;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" const gchar * g_application_get_application_id (GApplication *application);"
g;g_application_get_dbus_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" GDBusConnection * g_application_get_dbus_connection (GApplication *application);"
g;g_application_get_dbus_object_path;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" const gchar * g_application_get_dbus_object_path (GApplication *application);"
g;g_application_get_default;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" GApplication * g_application_get_default (void);"
g;g_application_get_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" GApplicationFlags g_application_get_flags (GApplication *application);"
g;g_application_get_inactivity_timeout;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" guint g_application_get_inactivity_timeout (GApplication *application);"
g;g_application_get_is_busy;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" gboolean g_application_get_is_busy (GApplication *application);"
g;g_application_get_is_registered;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" gboolean g_application_get_is_registered (GApplication *application);"
g;g_application_get_is_remote;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" gboolean g_application_get_is_remote (GApplication *application);"
g;g_application_get_resource_base_path;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" const gchar * g_application_get_resource_base_path (GApplication *application);"
g;g_application_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;"  GType g_application_get_type (void) G_GNUC_CONST;"
g;g_application_hold;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_hold (GApplication *application);"
g;g_application_id_is_valid;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" gboolean g_application_id_is_valid (const gchar *application_id);"
g;g_application_mark_busy;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_mark_busy (GApplication *application);"
g;g_application_new;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" GApplication * g_application_new (const gchar *application_id, GApplicationFlags flags);"
g;g_application_open;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_open (GApplication *application, GFile **files, gint n_files, const gchar *hint);"
g;g_application_quit;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_quit (GApplication *application);"
g;g_application_register;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" gboolean g_application_register (GApplication *application, GCancellable *cancellable, GError **error);"
g;g_application_release;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_release (GApplication *application);"
g;g_application_run;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" int g_application_run (GApplication *application, int argc, char **argv);"
g;g_application_send_notification;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_send_notification (GApplication *application, const gchar *id, GNotification *notification);"
g;g_application_set_action_group;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_set_action_group (GApplication *application, GActionGroup *action_group);"
g;g_application_set_application_id;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_set_application_id (GApplication *application, const gchar *application_id);"
g;g_application_set_default;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_set_default (GApplication *application);"
g;g_application_set_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_set_flags (GApplication *application, GApplicationFlags flags);"
g;g_application_set_inactivity_timeout;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_set_inactivity_timeout (GApplication *application, guint inactivity_timeout);"
g;g_application_set_resource_base_path;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_set_resource_base_path (GApplication *application, const gchar *resource_path);"
g;g_application_unbind_busy_property;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_unbind_busy_property (GApplication *application, gpointer object, const gchar *property);"
g;g_application_unmark_busy;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_unmark_busy (GApplication *application);"
g;g_application_withdraw_notification;glib-auto.f90;/usr/include/glib-2.0/gio/gapplication.h;" void g_application_withdraw_notification (GApplication *application, const gchar *id);"
g;g_array_append_vals;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GArray* g_array_append_vals (GArray *array, gconstpointer data, guint len);"
g;g_array_free;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" gchar* g_array_free (GArray *array, gboolean free_segment);"
g;g_array_get_element_size;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" guint g_array_get_element_size (GArray *array);"
g;g_array_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_array_get_type (void) G_GNUC_CONST;"
g;g_array_insert_vals;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GArray* g_array_insert_vals (GArray *array, guint index_, gconstpointer data, guint len);"
g;g_array_new;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;"  GArray* g_array_new (gboolean zero_terminated, gboolean clear_, guint element_size);"
g;g_array_prepend_vals;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GArray* g_array_prepend_vals (GArray *array, gconstpointer data, guint len);"
g;g_array_ref;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GArray *g_array_ref (GArray *array);"
g;g_array_remove_index;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GArray* g_array_remove_index (GArray *array, guint index_);"
g;g_array_remove_index_fast;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GArray* g_array_remove_index_fast (GArray *array, guint index_);"
g;g_array_remove_range;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GArray* g_array_remove_range (GArray *array, guint index_, guint length);"
g;g_array_set_clear_func;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_array_set_clear_func (GArray *array, GDestroyNotify clear_func);"
g;g_array_set_size;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GArray* g_array_set_size (GArray *array, guint length);"
g;g_array_sized_new;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GArray* g_array_sized_new (gboolean zero_terminated, gboolean clear_, guint element_size, guint reserved_size);"
g;g_array_sort;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_array_sort (GArray *array, GCompareFunc compare_func);"
g;g_array_sort_with_data;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_array_sort_with_data (GArray *array, GCompareDataFunc compare_func, gpointer user_data);"
g;g_array_unref;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_array_unref (GArray *array);"
g;g_ascii_digit_value;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gint g_ascii_digit_value (gchar c) G_GNUC_CONST;"
g;g_ascii_dtostr;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar * g_ascii_dtostr (gchar *buffer, gint buf_len, gdouble d);"
g;g_ascii_formatd;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar * g_ascii_formatd (gchar *buffer, gint buf_len, const gchar *format, gdouble d);"
g;g_ascii_strcasecmp;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gint g_ascii_strcasecmp (const gchar *s1, const gchar *s2);"
g;g_ascii_strdown;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_ascii_strdown (const gchar *str, gssize len) G_GNUC_MALLOC;"
g;g_ascii_strncasecmp;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gint g_ascii_strncasecmp (const gchar *s1, const gchar *s2, gsize n);"
g;g_ascii_strtod;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gdouble g_ascii_strtod (const gchar *nptr, gchar **endptr);"
g;g_ascii_strtoll;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gint64 g_ascii_strtoll (const gchar *nptr, gchar **endptr, guint base);"
g;g_ascii_strtoull;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" guint64 g_ascii_strtoull (const gchar *nptr, gchar **endptr, guint base);"
g;g_ascii_strup;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_ascii_strup (const gchar *str, gssize len) G_GNUC_MALLOC;"
g;g_ascii_tolower;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar g_ascii_tolower (gchar c) G_GNUC_CONST;"
g;g_ascii_toupper;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar g_ascii_toupper (gchar c) G_GNUC_CONST;"
g;g_ascii_xdigit_value;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gint g_ascii_xdigit_value (gchar c) G_GNUC_CONST;"
g;g_assertion_message;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_assertion_message (const char *domain, const char *file, int line, const char *func, const char *message);"
g;g_assertion_message_cmpstr;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_assertion_message_cmpstr (const char *domain, const char *file, int line, const char *func, const char *expr, const char *arg1, const char *cmp, const char *arg2);"
g;g_assertion_message_error;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_assertion_message_error (const char *domain, const char *file, int line, const char *func, const char *expr, const GError *error, GQuark error_domain, int error_code);"
g;g_assertion_message_expr;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_assertion_message_expr (const char *domain, const char *file, int line, const char *func, const char *expr) G_GNUC_NORETURN;"
g;g_async_initable_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gasyncinitable.h;"  GType g_async_initable_get_type (void) G_GNUC_CONST;"
g;g_async_initable_init_async;glib-auto.f90;/usr/include/glib-2.0/gio/gasyncinitable.h;" void g_async_initable_init_async (GAsyncInitable *initable, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_async_initable_init_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gasyncinitable.h;" gboolean g_async_initable_init_finish (GAsyncInitable *initable, GAsyncResult *res, GError **error);"
g;g_async_initable_new_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gasyncinitable.h;" GObject *g_async_initable_new_finish (GAsyncInitable *initable, GAsyncResult *res, GError **error);"
g;g_async_initable_new_valist_async;glib-auto.f90;/usr/include/glib-2.0/gio/gasyncinitable.h;" void g_async_initable_new_valist_async (GType object_type, const gchar *first_property_name, va_list var_args, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_async_initable_newv_async;glib-auto.f90;/usr/include/glib-2.0/gio/gasyncinitable.h;" void g_async_initable_newv_async (GType object_type, guint n_parameters, GParameter *parameters, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_async_queue_length;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" gint g_async_queue_length (GAsyncQueue *queue);"
g;g_async_queue_length_unlocked;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" gint g_async_queue_length_unlocked (GAsyncQueue *queue);"
g;g_async_queue_lock;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_lock (GAsyncQueue *queue);"
g;g_async_queue_new;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;"  GAsyncQueue *g_async_queue_new (void);"
g;g_async_queue_new_full;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" GAsyncQueue *g_async_queue_new_full (GDestroyNotify item_free_func);"
g;g_async_queue_pop;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" gpointer g_async_queue_pop (GAsyncQueue *queue);"
g;g_async_queue_pop_unlocked;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" gpointer g_async_queue_pop_unlocked (GAsyncQueue *queue);"
g;g_async_queue_push;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_push (GAsyncQueue *queue, gpointer data);"
g;g_async_queue_push_front;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_push_front (GAsyncQueue *queue, gpointer item);"
g;g_async_queue_push_front_unlocked;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_push_front_unlocked (GAsyncQueue *queue, gpointer item);"
g;g_async_queue_push_sorted;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_push_sorted (GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data);"
g;g_async_queue_push_sorted_unlocked;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_push_sorted_unlocked (GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data);"
g;g_async_queue_push_unlocked;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_push_unlocked (GAsyncQueue *queue, gpointer data);"
g;g_async_queue_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" GAsyncQueue *g_async_queue_ref (GAsyncQueue *queue);"
g;g_async_queue_ref_unlocked;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_ref_unlocked (GAsyncQueue *queue);"
g;g_async_queue_remove;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" gboolean g_async_queue_remove (GAsyncQueue *queue, gpointer item);"
g;g_async_queue_remove_unlocked;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" gboolean g_async_queue_remove_unlocked (GAsyncQueue *queue, gpointer item);"
g;g_async_queue_sort;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_sort (GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data);"
g;g_async_queue_sort_unlocked;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_sort_unlocked (GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data);"
g;g_async_queue_timed_pop;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" gpointer g_async_queue_timed_pop (GAsyncQueue *queue, GTimeVal *end_time);"
g;g_async_queue_timed_pop_unlocked;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" gpointer g_async_queue_timed_pop_unlocked (GAsyncQueue *queue, GTimeVal *end_time);"
g;g_async_queue_timeout_pop;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" gpointer g_async_queue_timeout_pop (GAsyncQueue *queue, guint64 timeout);"
g;g_async_queue_timeout_pop_unlocked;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" gpointer g_async_queue_timeout_pop_unlocked (GAsyncQueue *queue, guint64 timeout);"
g;g_async_queue_try_pop;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" gpointer g_async_queue_try_pop (GAsyncQueue *queue);"
g;g_async_queue_try_pop_unlocked;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" gpointer g_async_queue_try_pop_unlocked (GAsyncQueue *queue);"
g;g_async_queue_unlock;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_unlock (GAsyncQueue *queue);"
g;g_async_queue_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_unref (GAsyncQueue *queue);"
g;g_async_queue_unref_and_unlock;glib-auto.f90;/usr/include/glib-2.0/glib/gasyncqueue.h;" void g_async_queue_unref_and_unlock (GAsyncQueue *queue);"
g;g_async_result_get_source_object;glib-auto.f90;/usr/include/glib-2.0/gio/gasyncresult.h;" GObject *g_async_result_get_source_object (GAsyncResult *res);"
g;g_async_result_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gasyncresult.h;"  GType g_async_result_get_type (void) G_GNUC_CONST;"
g;g_async_result_get_user_data;glib-auto.f90;/usr/include/glib-2.0/gio/gasyncresult.h;" gpointer g_async_result_get_user_data (GAsyncResult *res);"
g;g_async_result_is_tagged;glib-auto.f90;/usr/include/glib-2.0/gio/gasyncresult.h;" gboolean g_async_result_is_tagged (GAsyncResult *res, gpointer source_tag);"
g;g_async_result_legacy_propagate_error;glib-auto.f90;/usr/include/glib-2.0/gio/gasyncresult.h;" gboolean g_async_result_legacy_propagate_error (GAsyncResult *res, GError **error);"
g;g_atexit;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" void g_atexit (GVoidFunc func);"
g;g_atomic_int_add;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" gint g_atomic_int_add (volatile gint *atomic, gint val);"
g;g_atomic_int_and;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" guint g_atomic_int_and (volatile guint *atomic, guint val);"
g;g_atomic_int_compare_and_exchange;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" gboolean g_atomic_int_compare_and_exchange (volatile gint *atomic, gint oldval, gint newval);"
g;g_atomic_int_dec_and_test;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" gboolean g_atomic_int_dec_and_test (volatile gint *atomic);"
g;g_atomic_int_exchange_and_add;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" gint g_atomic_int_exchange_and_add (volatile gint *atomic, gint val);"
g;g_atomic_int_get;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;"  gint g_atomic_int_get (const volatile gint *atomic);"
g;g_atomic_int_inc;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" void g_atomic_int_inc (volatile gint *atomic);"
g;g_atomic_int_or;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" guint g_atomic_int_or (volatile guint *atomic, guint val);"
g;g_atomic_int_set;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" void g_atomic_int_set (volatile gint *atomic, gint newval);"
g;g_atomic_int_xor;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" guint g_atomic_int_xor (volatile guint *atomic, guint val);"
g;g_atomic_pointer_add;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" gssize g_atomic_pointer_add (volatile void *atomic, gssize val);"
g;g_atomic_pointer_and;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" gsize g_atomic_pointer_and (volatile void *atomic, gsize val);"
g;g_atomic_pointer_compare_and_exchange;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" gboolean g_atomic_pointer_compare_and_exchange (volatile void *atomic, gpointer oldval, gpointer newval);"
g;g_atomic_pointer_get;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" gpointer g_atomic_pointer_get (const volatile void *atomic);"
g;g_atomic_pointer_or;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" gsize g_atomic_pointer_or (volatile void *atomic, gsize val);"
g;g_atomic_pointer_set;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" void g_atomic_pointer_set (volatile void *atomic, gpointer newval);"
g;g_atomic_pointer_xor;glib-auto.f90;/usr/include/glib-2.0/glib/gatomic.h;" gsize g_atomic_pointer_xor (volatile void *atomic, gsize val);"
g;g_base64_decode;glib-auto.f90;/usr/include/glib-2.0/glib/gbase64.h;" guchar *g_base64_decode (const gchar *text, gsize *out_len) G_GNUC_MALLOC;"
g;g_base64_decode_inplace;glib-auto.f90;/usr/include/glib-2.0/glib/gbase64.h;" guchar *g_base64_decode_inplace (gchar *text, gsize *out_len);"
g;g_base64_decode_step;glib-auto.f90;/usr/include/glib-2.0/glib/gbase64.h;" gsize g_base64_decode_step (const gchar *in, gsize len, guchar *out, gint *state, guint *save);"
g;g_base64_encode;glib-auto.f90;/usr/include/glib-2.0/glib/gbase64.h;" gchar* g_base64_encode (const guchar *data, gsize len) G_GNUC_MALLOC;"
g;g_base64_encode_close;glib-auto.f90;/usr/include/glib-2.0/glib/gbase64.h;" gsize g_base64_encode_close (gboolean break_lines, gchar *out, gint *state, gint *save);"
g;g_base64_encode_step;glib-auto.f90;/usr/include/glib-2.0/glib/gbase64.h;"  gsize g_base64_encode_step (const guchar *in, gsize len, gboolean break_lines, gchar *out, gint *state, gint *save);"
g;g_basename;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" const gchar *g_basename (const gchar *file_name);"
g;g_binding_flags_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/gbinding.h;"  GType g_binding_flags_get_type (void) G_GNUC_CONST;"
g;g_binding_get_flags;glib-auto.f90;/usr/include/glib-2.0/gobject/gbinding.h;" GBindingFlags g_binding_get_flags (GBinding *binding);"
g;g_binding_get_source;glib-auto.f90;/usr/include/glib-2.0/gobject/gbinding.h;" GObject * g_binding_get_source (GBinding *binding);"
g;g_binding_get_source_property;glib-auto.f90;/usr/include/glib-2.0/gobject/gbinding.h;" const gchar * g_binding_get_source_property (GBinding *binding);"
g;g_binding_get_target;glib-auto.f90;/usr/include/glib-2.0/gobject/gbinding.h;" GObject * g_binding_get_target (GBinding *binding);"
g;g_binding_get_target_property;glib-auto.f90;/usr/include/glib-2.0/gobject/gbinding.h;" const gchar * g_binding_get_target_property (GBinding *binding);"
g;g_binding_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/gbinding.h;" GType g_binding_get_type (void) G_GNUC_CONST;"
g;g_binding_unbind;glib-auto.f90;/usr/include/glib-2.0/gobject/gbinding.h;" void g_binding_unbind (GBinding *binding);"
g;g_bit_lock;glib-auto.f90;/usr/include/glib-2.0/glib/gbitlock.h;"  void g_bit_lock (volatile gint *address, gint lock_bit);"
g;g_bit_nth_msf;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" gint g_bit_nth_msf (gulong mask, gint nth_bit);"
g;g_bit_storage;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" guint g_bit_storage (gulong number);"
g;g_bit_trylock;glib-auto.f90;/usr/include/glib-2.0/glib/gbitlock.h;" gboolean g_bit_trylock (volatile gint *address, gint lock_bit);"
g;g_bit_unlock;glib-auto.f90;/usr/include/glib-2.0/glib/gbitlock.h;" void g_bit_unlock (volatile gint *address, gint lock_bit);"
g;g_blow_chunks;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_blow_chunks (void);"
g;g_bookmark_file_add_application;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" void g_bookmark_file_add_application (GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec);"
g;g_bookmark_file_add_group;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" void g_bookmark_file_add_group (GBookmarkFile *bookmark, const gchar *uri, const gchar *group);"
g;g_bookmark_file_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;"  GQuark g_bookmark_file_error_quark (void);"
g;g_bookmark_file_free;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" void g_bookmark_file_free (GBookmarkFile *bookmark);"
g;g_bookmark_file_get_added;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" time_t g_bookmark_file_get_added (GBookmarkFile *bookmark, const gchar *uri, GError **error);"
g;g_bookmark_file_get_app_info;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_get_app_info (GBookmarkFile *bookmark, const gchar *uri, const gchar *name, gchar **exec, guint *count, time_t *stamp, GError **error);"
g;g_bookmark_file_get_applications;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gchar ** g_bookmark_file_get_applications (GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error) G_GNUC_MALLOC;"
g;g_bookmark_file_get_description;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gchar * g_bookmark_file_get_description (GBookmarkFile *bookmark, const gchar *uri, GError **error) G_GNUC_MALLOC;"
g;g_bookmark_file_get_groups;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gchar ** g_bookmark_file_get_groups (GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error) G_GNUC_MALLOC;"
g;g_bookmark_file_get_icon;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_get_icon (GBookmarkFile *bookmark, const gchar *uri, gchar **href, gchar **mime_type, GError **error);"
g;g_bookmark_file_get_is_private;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_get_is_private (GBookmarkFile *bookmark, const gchar *uri, GError **error);"
g;g_bookmark_file_get_mime_type;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gchar * g_bookmark_file_get_mime_type (GBookmarkFile *bookmark, const gchar *uri, GError **error) G_GNUC_MALLOC;"
g;g_bookmark_file_get_modified;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" time_t g_bookmark_file_get_modified (GBookmarkFile *bookmark, const gchar *uri, GError **error);"
g;g_bookmark_file_get_size;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gint g_bookmark_file_get_size (GBookmarkFile *bookmark);"
g;g_bookmark_file_get_title;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gchar * g_bookmark_file_get_title (GBookmarkFile *bookmark, const gchar *uri, GError **error) G_GNUC_MALLOC;"
g;g_bookmark_file_get_uris;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gchar ** g_bookmark_file_get_uris (GBookmarkFile *bookmark, gsize *length) G_GNUC_MALLOC;"
g;g_bookmark_file_get_visited;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" time_t g_bookmark_file_get_visited (GBookmarkFile *bookmark, const gchar *uri, GError **error);"
g;g_bookmark_file_has_application;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_has_application (GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error);"
g;g_bookmark_file_has_group;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_has_group (GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error);"
g;g_bookmark_file_has_item;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_has_item (GBookmarkFile *bookmark, const gchar *uri);"
g;g_bookmark_file_load_from_data;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_load_from_data (GBookmarkFile *bookmark, const gchar *data, gsize length, GError **error);"
g;g_bookmark_file_load_from_data_dirs;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_load_from_data_dirs (GBookmarkFile *bookmark, const gchar *file, gchar **full_path, GError **error);"
g;g_bookmark_file_load_from_file;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_load_from_file (GBookmarkFile *bookmark, const gchar *filename, GError **error);"
g;g_bookmark_file_move_item;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_move_item (GBookmarkFile *bookmark, const gchar *old_uri, const gchar *new_uri, GError **error);"
g;g_bookmark_file_new;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" GBookmarkFile *g_bookmark_file_new (void);"
g;g_bookmark_file_remove_application;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_remove_application (GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error);"
g;g_bookmark_file_remove_group;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_remove_group (GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error);"
g;g_bookmark_file_remove_item;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_remove_item (GBookmarkFile *bookmark, const gchar *uri, GError **error);"
g;g_bookmark_file_set_added;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" void g_bookmark_file_set_added (GBookmarkFile *bookmark, const gchar *uri, time_t added);"
g;g_bookmark_file_set_app_info;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_set_app_info (GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec, gint count, time_t stamp, GError **error);"
g;g_bookmark_file_set_description;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" void g_bookmark_file_set_description (GBookmarkFile *bookmark, const gchar *uri, const gchar *description);"
g;g_bookmark_file_set_groups;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" void g_bookmark_file_set_groups (GBookmarkFile *bookmark, const gchar *uri, const gchar **groups, gsize length);"
g;g_bookmark_file_set_icon;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" void g_bookmark_file_set_icon (GBookmarkFile *bookmark, const gchar *uri, const gchar *href, const gchar *mime_type);"
g;g_bookmark_file_set_is_private;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" void g_bookmark_file_set_is_private (GBookmarkFile *bookmark, const gchar *uri, gboolean is_private);"
g;g_bookmark_file_set_mime_type;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" void g_bookmark_file_set_mime_type (GBookmarkFile *bookmark, const gchar *uri, const gchar *mime_type);"
g;g_bookmark_file_set_modified;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" void g_bookmark_file_set_modified (GBookmarkFile *bookmark, const gchar *uri, time_t modified);"
g;g_bookmark_file_set_title;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" void g_bookmark_file_set_title (GBookmarkFile *bookmark, const gchar *uri, const gchar *title);"
g;g_bookmark_file_set_visited;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" void g_bookmark_file_set_visited (GBookmarkFile *bookmark, const gchar *uri, time_t visited);"
g;g_bookmark_file_to_data;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gchar * g_bookmark_file_to_data (GBookmarkFile *bookmark, gsize *length, GError **error) G_GNUC_MALLOC;"
g;g_bookmark_file_to_file;glib-auto.f90;/usr/include/glib-2.0/glib/gbookmarkfile.h;" gboolean g_bookmark_file_to_file (GBookmarkFile *bookmark, const gchar *filename, GError **error);"
g;g_boxed_copy;glib-auto.f90;/usr/include/glib-2.0/gobject/gboxed.h;"  gpointer g_boxed_copy (GType boxed_type, gconstpointer src_boxed);"
g;g_boxed_free;glib-auto.f90;/usr/include/glib-2.0/gobject/gboxed.h;" void g_boxed_free (GType boxed_type, gpointer boxed);"
g;g_boxed_type_register_static;glib-auto.f90;/usr/include/glib-2.0/gobject/gboxed.h;" GType g_boxed_type_register_static (const gchar *name, GBoxedCopyFunc boxed_copy, GBoxedFreeFunc boxed_free);"
g;g_buffered_input_stream_fill;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedinputstream.h;" gssize g_buffered_input_stream_fill (GBufferedInputStream *stream, gssize count, GCancellable *cancellable, GError **error);"
g;g_buffered_input_stream_fill_async;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedinputstream.h;" void g_buffered_input_stream_fill_async (GBufferedInputStream *stream, gssize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_buffered_input_stream_fill_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedinputstream.h;" gssize g_buffered_input_stream_fill_finish (GBufferedInputStream *stream, GAsyncResult *result, GError **error);"
g;g_buffered_input_stream_get_available;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedinputstream.h;" gsize g_buffered_input_stream_get_available (GBufferedInputStream *stream);"
g;g_buffered_input_stream_get_buffer_size;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedinputstream.h;" gsize g_buffered_input_stream_get_buffer_size (GBufferedInputStream *stream);"
g;g_buffered_input_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedinputstream.h;"  GType g_buffered_input_stream_get_type (void) G_GNUC_CONST;"
g;g_buffered_input_stream_new;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedinputstream.h;" GInputStream* g_buffered_input_stream_new (GInputStream *base_stream);"
g;g_buffered_input_stream_new_sized;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedinputstream.h;" GInputStream* g_buffered_input_stream_new_sized (GInputStream *base_stream, gsize size);"
g;g_buffered_input_stream_peek;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedinputstream.h;" gsize g_buffered_input_stream_peek (GBufferedInputStream *stream, void *buffer, gsize offset, gsize count);"
g;g_buffered_input_stream_peek_buffer;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedinputstream.h;" const void* g_buffered_input_stream_peek_buffer (GBufferedInputStream *stream, gsize *count);"
g;g_buffered_input_stream_read_byte;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedinputstream.h;" int g_buffered_input_stream_read_byte (GBufferedInputStream *stream, GCancellable *cancellable, GError **error);"
g;g_buffered_input_stream_set_buffer_size;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedinputstream.h;" void g_buffered_input_stream_set_buffer_size (GBufferedInputStream *stream, gsize size);"
g;g_buffered_output_stream_get_auto_grow;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedoutputstream.h;" gboolean g_buffered_output_stream_get_auto_grow (GBufferedOutputStream *stream);"
g;g_buffered_output_stream_get_buffer_size;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedoutputstream.h;" gsize g_buffered_output_stream_get_buffer_size (GBufferedOutputStream *stream);"
g;g_buffered_output_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedoutputstream.h;"  GType g_buffered_output_stream_get_type (void) G_GNUC_CONST;"
g;g_buffered_output_stream_new;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedoutputstream.h;" GOutputStream* g_buffered_output_stream_new (GOutputStream *base_stream);"
g;g_buffered_output_stream_new_sized;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedoutputstream.h;" GOutputStream* g_buffered_output_stream_new_sized (GOutputStream *base_stream, gsize size);"
g;g_buffered_output_stream_set_auto_grow;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedoutputstream.h;" void g_buffered_output_stream_set_auto_grow (GBufferedOutputStream *stream, gboolean auto_grow);"
g;g_buffered_output_stream_set_buffer_size;glib-auto.f90;/usr/include/glib-2.0/gio/gbufferedoutputstream.h;" void g_buffered_output_stream_set_buffer_size (GBufferedOutputStream *stream, gsize size);"
g;g_build_filenamev;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gchar *g_build_filenamev (gchar **args) G_GNUC_MALLOC;"
g;g_build_pathv;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gchar *g_build_pathv (const gchar *separator, gchar **args) G_GNUC_MALLOC;"
g;g_bus_get;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" void g_bus_get (GBusType bus_type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_bus_get_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GDBusConnection *g_bus_get_finish (GAsyncResult *res, GError **error);"
g;g_bus_get_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GDBusConnection *g_bus_get_sync (GBusType bus_type, GCancellable *cancellable, GError **error);"
g;g_bus_own_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusnameowning.h;"  guint g_bus_own_name (GBusType bus_type, const gchar *name, GBusNameOwnerFlags flags, GBusAcquiredCallback bus_acquired_handler, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func);"
g;g_bus_own_name_on_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusnameowning.h;" guint g_bus_own_name_on_connection (GDBusConnection *connection, const gchar *name, GBusNameOwnerFlags flags, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func);"
g;g_bus_own_name_on_connection_with_closures;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusnameowning.h;" guint g_bus_own_name_on_connection_with_closures ( GDBusConnection *connection, const gchar *name, GBusNameOwnerFlags flags, GClosure *name_acquired_closure, GClosure *name_lost_closure);"
g;g_bus_own_name_with_closures;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusnameowning.h;" guint g_bus_own_name_with_closures (GBusType bus_type, const gchar *name, GBusNameOwnerFlags flags, GClosure *bus_acquired_closure, GClosure *name_acquired_closure, GClosure *name_lost_closure);"
g;g_bus_unown_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusnameowning.h;" void g_bus_unown_name (guint owner_id);"
g;g_bus_unwatch_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusnamewatching.h;" void g_bus_unwatch_name (guint watcher_id);"
g;g_bus_watch_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusnamewatching.h;"  guint g_bus_watch_name (GBusType bus_type, const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func);"
g;g_bus_watch_name_on_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusnamewatching.h;" guint g_bus_watch_name_on_connection (GDBusConnection *connection, const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func);"
g;g_bus_watch_name_on_connection_with_closures;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusnamewatching.h;" guint g_bus_watch_name_on_connection_with_closures ( GDBusConnection *connection, const gchar *name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, GClosure *name_vanished_closure);"
g;g_bus_watch_name_with_closures;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusnamewatching.h;" guint g_bus_watch_name_with_closures (GBusType bus_type, const gchar *name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, GClosure *name_vanished_closure);"
g;g_byte_array_append;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GByteArray* g_byte_array_append (GByteArray *array, const guint8 *data, guint len);"
g;g_byte_array_free;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" guint8* g_byte_array_free (GByteArray *array, gboolean free_segment);"
g;g_byte_array_free_to_bytes;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GBytes* g_byte_array_free_to_bytes (GByteArray *array);"
g;g_byte_array_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_byte_array_get_type (void) G_GNUC_CONST;"
g;g_byte_array_new;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GByteArray* g_byte_array_new (void);"
g;g_byte_array_new_take;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GByteArray* g_byte_array_new_take (guint8 *data, gsize len);"
g;g_byte_array_prepend;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GByteArray* g_byte_array_prepend (GByteArray *array, const guint8 *data, guint len);"
g;g_byte_array_ref;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GByteArray *g_byte_array_ref (GByteArray *array);"
g;g_byte_array_remove_index;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GByteArray* g_byte_array_remove_index (GByteArray *array, guint index_);"
g;g_byte_array_remove_index_fast;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GByteArray* g_byte_array_remove_index_fast (GByteArray *array, guint index_);"
g;g_byte_array_remove_range;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GByteArray* g_byte_array_remove_range (GByteArray *array, guint index_, guint length);"
g;g_byte_array_set_size;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GByteArray* g_byte_array_set_size (GByteArray *array, guint length);"
g;g_byte_array_sized_new;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GByteArray* g_byte_array_sized_new (guint reserved_size);"
g;g_byte_array_sort;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_byte_array_sort (GByteArray *array, GCompareFunc compare_func);"
g;g_byte_array_sort_with_data;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_byte_array_sort_with_data (GByteArray *array, GCompareDataFunc compare_func, gpointer user_data);"
g;g_byte_array_unref;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_byte_array_unref (GByteArray *array);"
g;g_bytes_compare;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" gint g_bytes_compare (gconstpointer bytes1, gconstpointer bytes2);"
g;g_bytes_equal;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" gboolean g_bytes_equal (gconstpointer bytes1, gconstpointer bytes2);"
g;g_bytes_get_data;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" gconstpointer g_bytes_get_data (GBytes *bytes, gsize *size);"
g;g_bytes_get_size;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" gsize g_bytes_get_size (GBytes *bytes);"
g;g_bytes_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_bytes_get_type (void) G_GNUC_CONST;"
g;g_bytes_hash;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" guint g_bytes_hash (gconstpointer bytes);"
g;g_bytes_icon_get_bytes;glib-auto.f90;/usr/include/glib-2.0/gio/gbytesicon.h;" GBytes * g_bytes_icon_get_bytes (GBytesIcon *icon);"
g;g_bytes_icon_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gbytesicon.h;"  GType g_bytes_icon_get_type (void) G_GNUC_CONST;"
g;g_bytes_icon_new;glib-auto.f90;/usr/include/glib-2.0/gio/gbytesicon.h;" GIcon * g_bytes_icon_new (GBytes *bytes);"
g;g_bytes_new;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;"  GBytes * g_bytes_new (gconstpointer data, gsize size);"
g;g_bytes_new_from_bytes;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" GBytes * g_bytes_new_from_bytes (GBytes *bytes, gsize offset, gsize length);"
g;g_bytes_new_static;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" GBytes * g_bytes_new_static (gconstpointer data, gsize size);"
g;g_bytes_new_take;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" GBytes * g_bytes_new_take (gpointer data, gsize size);"
g;g_bytes_new_with_free_func;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" GBytes * g_bytes_new_with_free_func (gconstpointer data, gsize size, GDestroyNotify free_func, gpointer user_data);"
g;g_bytes_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" GBytes * g_bytes_ref (GBytes *bytes);"
g;g_bytes_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" void g_bytes_unref (GBytes *bytes);"
g;g_bytes_unref_to_array;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" GByteArray * g_bytes_unref_to_array (GBytes *bytes);"
g;g_bytes_unref_to_data;glib-auto.f90;/usr/include/glib-2.0/glib/gbytes.h;" gpointer g_bytes_unref_to_data (GBytes *bytes, gsize *size);"
g;g_cache_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcache.h;" void g_cache_destroy (GCache *cache);"
g;g_cache_insert;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcache.h;" gpointer g_cache_insert (GCache *cache, gpointer key);"
g;g_cache_key_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcache.h;" void g_cache_key_foreach (GCache *cache, GHFunc func, gpointer user_data);"
g;g_cache_new;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcache.h;"  GCache* g_cache_new (GCacheNewFunc value_new_func, GCacheDestroyFunc value_destroy_func, GCacheDupFunc key_dup_func, GCacheDestroyFunc key_destroy_func, GHashFunc hash_key_func, GHashFunc hash_value_func, GEqualFunc key_equal_func);"
g;g_cache_remove;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcache.h;" void g_cache_remove (GCache *cache, gconstpointer value);"
g;g_cache_value_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcache.h;" void g_cache_value_foreach (GCache *cache, GHFunc func, gpointer user_data);"
g;g_cancellable_cancel;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" void g_cancellable_cancel (GCancellable *cancellable);"
g;g_cancellable_connect;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" gulong g_cancellable_connect (GCancellable *cancellable, GCallback callback, gpointer data, GDestroyNotify data_destroy_func);"
g;g_cancellable_disconnect;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" void g_cancellable_disconnect (GCancellable *cancellable, gulong handler_id);"
g;g_cancellable_get_current;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" GCancellable *g_cancellable_get_current (void);"
g;g_cancellable_get_fd;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" int g_cancellable_get_fd (GCancellable *cancellable);"
g;g_cancellable_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;"  GType g_cancellable_get_type (void) G_GNUC_CONST;"
g;g_cancellable_is_cancelled;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" gboolean g_cancellable_is_cancelled (GCancellable *cancellable);"
g;g_cancellable_make_pollfd;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" gboolean g_cancellable_make_pollfd (GCancellable *cancellable, GPollFD *pollfd);"
g;g_cancellable_new;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" GCancellable *g_cancellable_new (void);"
g;g_cancellable_pop_current;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" void g_cancellable_pop_current (GCancellable *cancellable);"
g;g_cancellable_push_current;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" void g_cancellable_push_current (GCancellable *cancellable);"
g;g_cancellable_release_fd;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" void g_cancellable_release_fd (GCancellable *cancellable);"
g;g_cancellable_reset;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" void g_cancellable_reset (GCancellable *cancellable);"
g;g_cancellable_set_error_if_cancelled;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" gboolean g_cancellable_set_error_if_cancelled (GCancellable *cancellable, GError **error);"
g;g_cancellable_source_new;glib-auto.f90;/usr/include/glib-2.0/gio/gcancellable.h;" GSource * g_cancellable_source_new (GCancellable *cancellable);"
g;g_cclosure_marshal_BOOLEAN__BOXED_BOXED;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_BOOLEAN__BOXED_BOXED (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_BOOLEAN__FLAGS;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_BOOLEAN__FLAGS (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_BOOLEAN__FLAGSv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_BOOLEAN__FLAGSv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_STRING__OBJECT_POINTER;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_STRING__OBJECT_POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_STRING__OBJECT_POINTERv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_STRING__OBJECT_POINTERv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__BOOLEAN;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__BOOLEAN (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__BOOLEANv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__BOOLEANv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__BOXED;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__BOXED (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__BOXEDv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__BOXEDv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__CHAR;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__CHAR (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__CHARv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__CHARv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__DOUBLE;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__DOUBLE (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__DOUBLEv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__DOUBLEv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__ENUM;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__ENUM (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__ENUMv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__ENUMv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__FLAGS;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__FLAGS (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__FLAGSv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__FLAGSv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__FLOAT;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__FLOAT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__FLOATv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__FLOATv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__INT;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__INT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__INTv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__INTv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__LONG;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__LONG (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__LONGv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__LONGv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__OBJECT;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__OBJECT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__OBJECTv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__OBJECTv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__PARAM;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__PARAM (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__PARAMv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__PARAMv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__POINTER;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__POINTERv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__POINTERv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__STRING;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__STRING (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__STRINGv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__STRINGv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__UCHAR;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__UCHAR (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__UCHARv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__UCHARv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__UINT;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__UINT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__UINT_POINTER;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__UINT_POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__UINT_POINTERv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__UINT_POINTERv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__UINTv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__UINTv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__ULONG;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__ULONG (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__ULONGv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__ULONGv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__VARIANT;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__VARIANT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__VARIANTv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__VARIANTv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_VOID__VOID;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;"  void g_cclosure_marshal_VOID__VOID (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_VOID__VOIDv;glib-auto.f90;/usr/include/glib-2.0/gobject/gmarshal.h;" void g_cclosure_marshal_VOID__VOIDv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_marshal_generic;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_cclosure_marshal_generic (GClosure *closure, GValue *return_gvalue, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
g;g_cclosure_marshal_generic_va;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_cclosure_marshal_generic_va (GClosure *closure, GValue *return_value, gpointer instance, va_list args_list, gpointer marshal_data, int n_params, GType *param_types);"
g;g_cclosure_new;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;"  GClosure* g_cclosure_new (GCallback callback_func, gpointer user_data, GClosureNotify destroy_data);"
g;g_cclosure_new_object;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" GClosure* g_cclosure_new_object (GCallback callback_func, GObject *object);"
g;g_cclosure_new_object_swap;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" GClosure* g_cclosure_new_object_swap (GCallback callback_func, GObject *object);"
g;g_cclosure_new_swap;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" GClosure* g_cclosure_new_swap (GCallback callback_func, gpointer user_data, GClosureNotify destroy_data);"
g;g_charset_converter_get_num_fallbacks;glib-auto.f90;/usr/include/glib-2.0/gio/gcharsetconverter.h;" guint g_charset_converter_get_num_fallbacks (GCharsetConverter *converter);"
g;g_charset_converter_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gcharsetconverter.h;"  GType g_charset_converter_get_type (void) G_GNUC_CONST;"
g;g_charset_converter_get_use_fallback;glib-auto.f90;/usr/include/glib-2.0/gio/gcharsetconverter.h;" gboolean g_charset_converter_get_use_fallback (GCharsetConverter *converter);"
g;g_charset_converter_new;glib-auto.f90;/usr/include/glib-2.0/gio/gcharsetconverter.h;" GCharsetConverter *g_charset_converter_new (const gchar *to_charset, const gchar *from_charset, GError **error);"
g;g_charset_converter_set_use_fallback;glib-auto.f90;/usr/include/glib-2.0/gio/gcharsetconverter.h;" void g_charset_converter_set_use_fallback (GCharsetConverter *converter, gboolean use_fallback);"
g;g_checksum_copy;glib-auto.f90;/usr/include/glib-2.0/glib/gchecksum.h;" GChecksum * g_checksum_copy (const GChecksum *checksum);"
g;g_checksum_free;glib-auto.f90;/usr/include/glib-2.0/glib/gchecksum.h;" void g_checksum_free (GChecksum *checksum);"
g;g_checksum_get_digest;glib-auto.f90;/usr/include/glib-2.0/glib/gchecksum.h;" void g_checksum_get_digest (GChecksum *checksum, guint8 *buffer, gsize *digest_len);"
g;g_checksum_get_string;glib-auto.f90;/usr/include/glib-2.0/glib/gchecksum.h;" const gchar * g_checksum_get_string (GChecksum *checksum);"
g;g_checksum_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_checksum_get_type (void) G_GNUC_CONST;"
g;g_checksum_new;glib-auto.f90;/usr/include/glib-2.0/glib/gchecksum.h;" GChecksum * g_checksum_new (GChecksumType checksum_type);"
g;g_checksum_reset;glib-auto.f90;/usr/include/glib-2.0/glib/gchecksum.h;" void g_checksum_reset (GChecksum *checksum);"
g;g_checksum_type_get_length;glib-auto.f90;/usr/include/glib-2.0/glib/gchecksum.h;"  gssize g_checksum_type_get_length (GChecksumType checksum_type);"
g;g_checksum_update;glib-auto.f90;/usr/include/glib-2.0/glib/gchecksum.h;" void g_checksum_update (GChecksum *checksum, const guchar *data, gssize length);"
g;g_child_watch_add;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" guint g_child_watch_add (GPid pid, GChildWatchFunc function, gpointer data);"
g;g_child_watch_add_full;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" guint g_child_watch_add_full (gint priority, GPid pid, GChildWatchFunc function, gpointer data, GDestroyNotify notify);"
g;g_child_watch_source_new;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GSource *g_child_watch_source_new (GPid pid);"
g;g_clear_error;glib-auto.f90;/usr/include/glib-2.0/glib/gerror.h;" void g_clear_error (GError **err);"
g;g_clear_object;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_clear_object (volatile GObject **object_ptr);"
g;g_clear_pointer;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" void g_clear_pointer (gpointer *pp, GDestroyNotify destroy);"
g;g_closure_add_finalize_notifier;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_closure_add_finalize_notifier (GClosure *closure, gpointer notify_data, GClosureNotify notify_func);"
g;g_closure_add_invalidate_notifier;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_closure_add_invalidate_notifier (GClosure *closure, gpointer notify_data, GClosureNotify notify_func);"
g;g_closure_add_marshal_guards;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_closure_add_marshal_guards (GClosure *closure, gpointer pre_marshal_data, GClosureNotify pre_marshal_notify, gpointer post_marshal_data, GClosureNotify post_marshal_notify);"
g;g_closure_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/gboxed.h;" GType g_closure_get_type (void) G_GNUC_CONST;"
g;g_closure_invalidate;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_closure_invalidate (GClosure *closure);"
g;g_closure_invoke;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_closure_invoke (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint);"
g;g_closure_new_object;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" GClosure* g_closure_new_object (guint sizeof_closure, GObject *object);"
g;g_closure_new_simple;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" GClosure* g_closure_new_simple (guint sizeof_closure, gpointer data);"
g;g_closure_ref;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" GClosure* g_closure_ref (GClosure *closure);"
g;g_closure_remove_finalize_notifier;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_closure_remove_finalize_notifier (GClosure *closure, gpointer notify_data, GClosureNotify notify_func);"
g;g_closure_remove_invalidate_notifier;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_closure_remove_invalidate_notifier (GClosure *closure, gpointer notify_data, GClosureNotify notify_func);"
g;g_closure_set_marshal;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_closure_set_marshal (GClosure *closure, GClosureMarshal marshal);"
g;g_closure_set_meta_marshal;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_closure_set_meta_marshal (GClosure *closure, gpointer marshal_data, GClosureMarshal meta_marshal);"
g;g_closure_sink;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_closure_sink (GClosure *closure);"
g;g_closure_unref;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" void g_closure_unref (GClosure *closure);"
g;g_completion_add_items;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcompletion.h;" void g_completion_add_items (GCompletion* cmp, GList* items);"
g;g_completion_clear_items;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcompletion.h;" void g_completion_clear_items (GCompletion* cmp);"
g;g_completion_complete;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcompletion.h;" GList* g_completion_complete (GCompletion* cmp, const gchar* prefix, gchar** new_prefix);"
g;g_completion_complete_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcompletion.h;" GList* g_completion_complete_utf8 (GCompletion *cmp, const gchar* prefix, gchar** new_prefix);"
g;g_completion_free;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcompletion.h;" void g_completion_free (GCompletion* cmp);"
g;g_completion_new;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcompletion.h;"  GCompletion* g_completion_new (GCompletionFunc func);"
g;g_completion_remove_items;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcompletion.h;" void g_completion_remove_items (GCompletion* cmp, GList* items);"
g;g_completion_set_compare;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gcompletion.h;" void g_completion_set_compare (GCompletion *cmp, GCompletionStrncmpFunc strncmp_func);"
g;g_compute_checksum_for_bytes;glib-auto.f90;/usr/include/glib-2.0/glib/gchecksum.h;" gchar *g_compute_checksum_for_bytes (GChecksumType checksum_type, GBytes *data);"
g;g_compute_checksum_for_data;glib-auto.f90;/usr/include/glib-2.0/glib/gchecksum.h;" gchar *g_compute_checksum_for_data (GChecksumType checksum_type, const guchar *data, gsize length);"
g;g_compute_checksum_for_string;glib-auto.f90;/usr/include/glib-2.0/glib/gchecksum.h;" gchar *g_compute_checksum_for_string (GChecksumType checksum_type, const gchar *str, gssize length);"
g;g_compute_hmac_for_data;glib-auto.f90;/usr/include/glib-2.0/glib/ghmac.h;" gchar *g_compute_hmac_for_data (GChecksumType digest_type, const guchar *key, gsize key_len, const guchar *data, gsize length);"
g;g_compute_hmac_for_string;glib-auto.f90;/usr/include/glib-2.0/glib/ghmac.h;" gchar *g_compute_hmac_for_string (GChecksumType digest_type, const guchar *key, gsize key_len, const gchar *str, gssize length);"
g;g_cond_broadcast;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_cond_broadcast (GCond *cond);"
g;g_cond_clear;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_cond_clear (GCond *cond);"
g;g_cond_free;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_cond_free (GCond *cond);"
g;g_cond_init;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_cond_init (GCond *cond);"
g;g_cond_new;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" GCond * g_cond_new (void);"
g;g_cond_signal;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_cond_signal (GCond *cond);"
g;g_cond_timed_wait;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" gboolean g_cond_timed_wait (GCond *cond, GMutex *mutex, GTimeVal *timeval);"
g;g_cond_wait;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_cond_wait (GCond *cond, GMutex *mutex);"
g;g_cond_wait_until;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" gboolean g_cond_wait_until (GCond *cond, GMutex *mutex, gint64 end_time);"
g;g_content_type_can_be_executable;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;" gboolean g_content_type_can_be_executable (const gchar *type);"
g;g_content_type_equals;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;"  gboolean g_content_type_equals (const gchar *type1, const gchar *type2);"
g;g_content_type_from_mime_type;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;" gchar * g_content_type_from_mime_type (const gchar *mime_type);"
g;g_content_type_get_description;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;" gchar * g_content_type_get_description (const gchar *type);"
g;g_content_type_get_generic_icon_name;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;" gchar * g_content_type_get_generic_icon_name (const gchar *type);"
g;g_content_type_get_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;" GIcon * g_content_type_get_icon (const gchar *type);"
g;g_content_type_get_mime_type;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;" gchar * g_content_type_get_mime_type (const gchar *type);"
g;g_content_type_get_symbolic_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;" GIcon * g_content_type_get_symbolic_icon (const gchar *type);"
g;g_content_type_guess;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;" gchar * g_content_type_guess (const gchar *filename, const guchar *data, gsize data_size, gboolean *result_uncertain);"
g;g_content_type_guess_for_tree;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;" gchar ** g_content_type_guess_for_tree (GFile *root);"
g;g_content_type_is_a;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;" gboolean g_content_type_is_a (const gchar *type, const gchar *supertype);"
g;g_content_type_is_unknown;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;" gboolean g_content_type_is_unknown (const gchar *type);"
g;g_content_types_get_registered;glib-auto.f90;/usr/include/glib-2.0/gio/gcontenttype.h;" GList * g_content_types_get_registered (void);"
g;g_convert;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar* g_convert (const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, gsize *bytes_read, gsize *bytes_written, GError **error) G_GNUC_MALLOC;"
g;g_convert_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;"  GQuark g_convert_error_quark (void);"
g;g_convert_with_fallback;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar* g_convert_with_fallback (const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, const gchar *fallback, gsize *bytes_read, gsize *bytes_written, GError **error) G_GNUC_MALLOC;"
g;g_convert_with_iconv;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar* g_convert_with_iconv (const gchar *str, gssize len, GIConv converter, gsize *bytes_read, gsize *bytes_written, GError **error) G_GNUC_MALLOC;"
g;g_converter_convert;glib-auto.f90;/usr/include/glib-2.0/gio/gconverter.h;" GConverterResult g_converter_convert (GConverter *converter, const void *inbuf, gsize inbuf_size, void *outbuf, gsize outbuf_size, GConverterFlags flags, gsize *bytes_read, gsize *bytes_written, GError **error);"
g;g_converter_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gconverter.h;"  GType g_converter_get_type (void) G_GNUC_CONST;"
g;g_converter_input_stream_get_converter;glib-auto.f90;/usr/include/glib-2.0/gio/gconverterinputstream.h;" GConverter *g_converter_input_stream_get_converter (GConverterInputStream *converter_stream);"
g;g_converter_input_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gconverterinputstream.h;"  GType g_converter_input_stream_get_type (void) G_GNUC_CONST;"
g;g_converter_input_stream_new;glib-auto.f90;/usr/include/glib-2.0/gio/gconverterinputstream.h;" GInputStream *g_converter_input_stream_new (GInputStream *base_stream, GConverter *converter);"
g;g_converter_output_stream_get_converter;glib-auto.f90;/usr/include/glib-2.0/gio/gconverteroutputstream.h;" GConverter *g_converter_output_stream_get_converter (GConverterOutputStream *converter_stream);"
g;g_converter_output_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gconverteroutputstream.h;"  GType g_converter_output_stream_get_type (void) G_GNUC_CONST;"
g;g_converter_output_stream_new;glib-auto.f90;/usr/include/glib-2.0/gio/gconverteroutputstream.h;" GOutputStream *g_converter_output_stream_new (GOutputStream *base_stream, GConverter *converter);"
g;g_converter_reset;glib-auto.f90;/usr/include/glib-2.0/gio/gconverter.h;" void g_converter_reset (GConverter *converter);"
g;g_credentials_get_native;glib-auto.f90;/usr/include/glib-2.0/gio/gcredentials.h;" gpointer g_credentials_get_native (GCredentials *credentials, GCredentialsType native_type);"
g;g_credentials_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gcredentials.h;"  GType g_credentials_get_type (void) G_GNUC_CONST;"
g;g_credentials_get_unix_user;glib-auto.f90;/usr/include/glib-2.0/gio/gcredentials.h;" uid_t g_credentials_get_unix_user (GCredentials *credentials, GError **error);"
g;g_credentials_is_same_user;glib-auto.f90;/usr/include/glib-2.0/gio/gcredentials.h;" gboolean g_credentials_is_same_user (GCredentials *credentials, GCredentials *other_credentials, GError **error);"
g;g_credentials_new;glib-auto.f90;/usr/include/glib-2.0/gio/gcredentials.h;" GCredentials *g_credentials_new (void);"
g;g_credentials_set_native;glib-auto.f90;/usr/include/glib-2.0/gio/gcredentials.h;" void g_credentials_set_native (GCredentials *credentials, GCredentialsType native_type, gpointer native);"
g;g_credentials_set_unix_user;glib-auto.f90;/usr/include/glib-2.0/gio/gcredentials.h;" gboolean g_credentials_set_unix_user (GCredentials *credentials, uid_t uid, GError **error);"
g;g_credentials_to_string;glib-auto.f90;/usr/include/glib-2.0/gio/gcredentials.h;" gchar *g_credentials_to_string (GCredentials *credentials);"
g;g_data_input_stream_get_byte_order;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" GDataStreamByteOrder g_data_input_stream_get_byte_order (GDataInputStream *stream);"
g;g_data_input_stream_get_newline_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" GDataStreamNewlineType g_data_input_stream_get_newline_type (GDataInputStream *stream);"
g;g_data_input_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;"  GType g_data_input_stream_get_type (void) G_GNUC_CONST;"
g;g_data_input_stream_new;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" GDataInputStream * g_data_input_stream_new (GInputStream *base_stream);"
g;g_data_input_stream_read_byte;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" guchar g_data_input_stream_read_byte (GDataInputStream *stream, GCancellable *cancellable, GError **error);"
g;g_data_input_stream_read_int16;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" gint16 g_data_input_stream_read_int16 (GDataInputStream *stream, GCancellable *cancellable, GError **error);"
g;g_data_input_stream_read_int32;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" gint32 g_data_input_stream_read_int32 (GDataInputStream *stream, GCancellable *cancellable, GError **error);"
g;g_data_input_stream_read_int64;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" gint64 g_data_input_stream_read_int64 (GDataInputStream *stream, GCancellable *cancellable, GError **error);"
g;g_data_input_stream_read_line;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" char * g_data_input_stream_read_line (GDataInputStream *stream, gsize *length, GCancellable *cancellable, GError **error);"
g;g_data_input_stream_read_line_async;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" void g_data_input_stream_read_line_async (GDataInputStream *stream, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_data_input_stream_read_line_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" char * g_data_input_stream_read_line_finish (GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error);"
g;g_data_input_stream_read_line_finish_utf8;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" char * g_data_input_stream_read_line_finish_utf8(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error);"
g;g_data_input_stream_read_line_utf8;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" char * g_data_input_stream_read_line_utf8 (GDataInputStream *stream, gsize *length, GCancellable *cancellable, GError **error);"
g;g_data_input_stream_read_uint16;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" guint16 g_data_input_stream_read_uint16 (GDataInputStream *stream, GCancellable *cancellable, GError **error);"
g;g_data_input_stream_read_uint32;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" guint32 g_data_input_stream_read_uint32 (GDataInputStream *stream, GCancellable *cancellable, GError **error);"
g;g_data_input_stream_read_uint64;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" guint64 g_data_input_stream_read_uint64 (GDataInputStream *stream, GCancellable *cancellable, GError **error);"
g;g_data_input_stream_read_until;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" char * g_data_input_stream_read_until (GDataInputStream *stream, const gchar *stop_chars, gsize *length, GCancellable *cancellable, GError **error);"
g;g_data_input_stream_read_until_async;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" void g_data_input_stream_read_until_async (GDataInputStream *stream, const gchar *stop_chars, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_data_input_stream_read_until_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" char * g_data_input_stream_read_until_finish (GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error);"
g;g_data_input_stream_read_upto;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" char * g_data_input_stream_read_upto (GDataInputStream *stream, const gchar *stop_chars, gssize stop_chars_len, gsize *length, GCancellable *cancellable, GError **error);"
g;g_data_input_stream_read_upto_async;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" void g_data_input_stream_read_upto_async (GDataInputStream *stream, const gchar *stop_chars, gssize stop_chars_len, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_data_input_stream_read_upto_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" char * g_data_input_stream_read_upto_finish (GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error);"
g;g_data_input_stream_set_byte_order;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" void g_data_input_stream_set_byte_order (GDataInputStream *stream, GDataStreamByteOrder order);"
g;g_data_input_stream_set_newline_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdatainputstream.h;" void g_data_input_stream_set_newline_type (GDataInputStream *stream, GDataStreamNewlineType type);"
g;g_data_output_stream_get_byte_order;glib-auto.f90;/usr/include/glib-2.0/gio/gdataoutputstream.h;" GDataStreamByteOrder g_data_output_stream_get_byte_order (GDataOutputStream *stream);"
g;g_data_output_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdataoutputstream.h;"  GType g_data_output_stream_get_type (void) G_GNUC_CONST;"
g;g_data_output_stream_new;glib-auto.f90;/usr/include/glib-2.0/gio/gdataoutputstream.h;" GDataOutputStream * g_data_output_stream_new (GOutputStream *base_stream);"
g;g_data_output_stream_put_byte;glib-auto.f90;/usr/include/glib-2.0/gio/gdataoutputstream.h;" gboolean g_data_output_stream_put_byte (GDataOutputStream *stream, guchar data, GCancellable *cancellable, GError **error);"
g;g_data_output_stream_put_int16;glib-auto.f90;/usr/include/glib-2.0/gio/gdataoutputstream.h;" gboolean g_data_output_stream_put_int16 (GDataOutputStream *stream, gint16 data, GCancellable *cancellable, GError **error);"
g;g_data_output_stream_put_int32;glib-auto.f90;/usr/include/glib-2.0/gio/gdataoutputstream.h;" gboolean g_data_output_stream_put_int32 (GDataOutputStream *stream, gint32 data, GCancellable *cancellable, GError **error);"
g;g_data_output_stream_put_int64;glib-auto.f90;/usr/include/glib-2.0/gio/gdataoutputstream.h;" gboolean g_data_output_stream_put_int64 (GDataOutputStream *stream, gint64 data, GCancellable *cancellable, GError **error);"
g;g_data_output_stream_put_string;glib-auto.f90;/usr/include/glib-2.0/gio/gdataoutputstream.h;" gboolean g_data_output_stream_put_string (GDataOutputStream *stream, const char *str, GCancellable *cancellable, GError **error);"
g;g_data_output_stream_put_uint16;glib-auto.f90;/usr/include/glib-2.0/gio/gdataoutputstream.h;" gboolean g_data_output_stream_put_uint16 (GDataOutputStream *stream, guint16 data, GCancellable *cancellable, GError **error);"
g;g_data_output_stream_put_uint32;glib-auto.f90;/usr/include/glib-2.0/gio/gdataoutputstream.h;" gboolean g_data_output_stream_put_uint32 (GDataOutputStream *stream, guint32 data, GCancellable *cancellable, GError **error);"
g;g_data_output_stream_put_uint64;glib-auto.f90;/usr/include/glib-2.0/gio/gdataoutputstream.h;" gboolean g_data_output_stream_put_uint64 (GDataOutputStream *stream, guint64 data, GCancellable *cancellable, GError **error);"
g;g_data_output_stream_set_byte_order;glib-auto.f90;/usr/include/glib-2.0/gio/gdataoutputstream.h;" void g_data_output_stream_set_byte_order (GDataOutputStream *stream, GDataStreamByteOrder order);"
g;g_datagram_based_condition_check;glib-auto.f90;/usr/include/glib-2.0/gio/gdatagrambased.h;" GIOCondition g_datagram_based_condition_check (GDatagramBased *datagram_based, GIOCondition condition);"
g;g_datagram_based_condition_wait;glib-auto.f90;/usr/include/glib-2.0/gio/gdatagrambased.h;" gboolean g_datagram_based_condition_wait (GDatagramBased *datagram_based, GIOCondition condition, gint64 timeout, GCancellable *cancellable, GError **error);"
g;g_datagram_based_create_source;glib-auto.f90;/usr/include/glib-2.0/gio/gdatagrambased.h;" GSource * g_datagram_based_create_source (GDatagramBased *datagram_based, GIOCondition condition, GCancellable *cancellable);"
g;g_datagram_based_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdatagrambased.h;"  GType g_datagram_based_get_type (void);"
g;g_datagram_based_receive_messages;glib-auto.f90;/usr/include/glib-2.0/gio/gdatagrambased.h;" gint g_datagram_based_receive_messages (GDatagramBased *datagram_based, GInputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error);"
g;g_datagram_based_send_messages;glib-auto.f90;/usr/include/glib-2.0/gio/gdatagrambased.h;" gint g_datagram_based_send_messages (GDatagramBased *datagram_based, GOutputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error);"
g;g_datalist_clear;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" void g_datalist_clear (GData **datalist);"
g;g_datalist_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" void g_datalist_foreach (GData **datalist, GDataForeachFunc func, gpointer user_data);"
g;g_datalist_get_data;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" gpointer g_datalist_get_data (GData **datalist, const gchar *key);"
g;g_datalist_get_flags;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" guint g_datalist_get_flags (GData **datalist);"
g;g_datalist_id_dup_data;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" gpointer g_datalist_id_dup_data (GData **datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data);"
g;g_datalist_id_get_data;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" gpointer g_datalist_id_get_data (GData **datalist, GQuark key_id);"
g;g_datalist_id_remove_no_notify;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" gpointer g_datalist_id_remove_no_notify (GData **datalist, GQuark key_id);"
g;g_datalist_id_replace_data;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" gboolean g_datalist_id_replace_data (GData **datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy);"
g;g_datalist_id_set_data_full;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" void g_datalist_id_set_data_full (GData **datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func);"
g;g_datalist_init;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;"  void g_datalist_init (GData **datalist);"
g;g_datalist_set_flags;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" void g_datalist_set_flags (GData **datalist, guint flags);"
g;g_datalist_unset_flags;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" void g_datalist_unset_flags (GData **datalist, guint flags);"
g;g_dataset_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" void g_dataset_destroy (gconstpointer dataset_location);"
g;g_dataset_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" void g_dataset_foreach (gconstpointer dataset_location, GDataForeachFunc func, gpointer user_data);"
g;g_dataset_id_get_data;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" gpointer g_dataset_id_get_data (gconstpointer dataset_location, GQuark key_id);"
g;g_dataset_id_remove_no_notify;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" gpointer g_dataset_id_remove_no_notify (gconstpointer dataset_location, GQuark key_id);"
g;g_dataset_id_set_data_full;glib-auto.f90;/usr/include/glib-2.0/glib/gdataset.h;" void g_dataset_id_set_data_full (gconstpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func);"
g;g_date_add_days;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_add_days (GDate *date, guint n_days);"
g;g_date_add_months;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_add_months (GDate *date, guint n_months);"
g;g_date_add_years;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_add_years (GDate *date, guint n_years);"
g;g_date_clamp;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_clamp (GDate *date, const GDate *min_date, const GDate *max_date);"
g;g_date_clear;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_clear (GDate *date, guint n_dates);"
g;g_date_compare;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gint g_date_compare (const GDate *lhs, const GDate *rhs);"
g;g_date_days_between;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gint g_date_days_between (const GDate *date1, const GDate *date2);"
g;g_date_free;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_free (GDate *date);"
g;g_date_get_day;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" GDateDay g_date_get_day (const GDate *date);"
g;g_date_get_day_of_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" guint g_date_get_day_of_year (const GDate *date);"
g;g_date_get_days_in_month;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" guint8 g_date_get_days_in_month (GDateMonth month, GDateYear year) G_GNUC_CONST;"
g;g_date_get_iso8601_week_of_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" guint g_date_get_iso8601_week_of_year (const GDate *date);"
g;g_date_get_julian;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" guint32 g_date_get_julian (const GDate *date);"
g;g_date_get_monday_week_of_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" guint g_date_get_monday_week_of_year (const GDate *date);"
g;g_date_get_monday_weeks_in_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" guint8 g_date_get_monday_weeks_in_year (GDateYear year) G_GNUC_CONST;"
g;g_date_get_month;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" GDateMonth g_date_get_month (const GDate *date);"
g;g_date_get_sunday_week_of_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" guint g_date_get_sunday_week_of_year (const GDate *date);"
g;g_date_get_sunday_weeks_in_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" guint8 g_date_get_sunday_weeks_in_year (GDateYear year) G_GNUC_CONST;"
g;g_date_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;"  GType g_date_get_type (void) G_GNUC_CONST;"
g;g_date_get_weekday;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" GDateWeekday g_date_get_weekday (const GDate *date);"
g;g_date_get_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" GDateYear g_date_get_year (const GDate *date);"
g;g_date_is_first_of_month;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gboolean g_date_is_first_of_month (const GDate *date);"
g;g_date_is_last_of_month;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gboolean g_date_is_last_of_month (const GDate *date);"
g;g_date_is_leap_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gboolean g_date_is_leap_year (GDateYear year) G_GNUC_CONST;"
g;g_date_new;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;"  GDate* g_date_new (void);"
g;g_date_new_dmy;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" GDate* g_date_new_dmy (GDateDay day, GDateMonth month, GDateYear year);"
g;g_date_new_julian;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" GDate* g_date_new_julian (guint32 julian_day);"
g;g_date_order;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_order (GDate *date1, GDate *date2);"
g;g_date_set_day;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_set_day (GDate *date, GDateDay day);"
g;g_date_set_dmy;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_set_dmy (GDate *date, GDateDay day, GDateMonth month, GDateYear y);"
g;g_date_set_julian;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_set_julian (GDate *date, guint32 julian_date);"
g;g_date_set_month;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_set_month (GDate *date, GDateMonth month);"
g;g_date_set_parse;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_set_parse (GDate *date, const gchar *str);"
g;g_date_set_time;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_set_time (GDate *date, GTime time_);"
g;g_date_set_time_t;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_set_time_t (GDate *date, time_t timet);"
g;g_date_set_time_val;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_set_time_val (GDate *date, GTimeVal *timeval);"
g;g_date_set_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_set_year (GDate *date, GDateYear year);"
g;g_date_strftime;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gsize g_date_strftime (gchar *s, gsize slen, const gchar *format, const GDate *date);"
g;g_date_subtract_days;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_subtract_days (GDate *date, guint n_days);"
g;g_date_subtract_months;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_subtract_months (GDate *date, guint n_months);"
g;g_date_subtract_years;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_subtract_years (GDate *date, guint n_years);"
g;g_date_time_add;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" G_GNUC_WARN_UNUSED_RESULT GDateTime * g_date_time_add (GDateTime *datetime, GTimeSpan timespan);"
g;g_date_time_add_days;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" G_GNUC_WARN_UNUSED_RESULT GDateTime * g_date_time_add_days (GDateTime *datetime, gint days);"
g;g_date_time_add_full;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" G_GNUC_WARN_UNUSED_RESULT GDateTime * g_date_time_add_full (GDateTime *datetime, gint years, gint months, gint days, gint hours, gint minutes, gdouble seconds);"
g;g_date_time_add_hours;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" G_GNUC_WARN_UNUSED_RESULT GDateTime * g_date_time_add_hours (GDateTime *datetime, gint hours);"
g;g_date_time_add_minutes;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" G_GNUC_WARN_UNUSED_RESULT GDateTime * g_date_time_add_minutes (GDateTime *datetime, gint minutes);"
g;g_date_time_add_months;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" G_GNUC_WARN_UNUSED_RESULT GDateTime * g_date_time_add_months (GDateTime *datetime, gint months);"
g;g_date_time_add_seconds;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" G_GNUC_WARN_UNUSED_RESULT GDateTime * g_date_time_add_seconds (GDateTime *datetime, gdouble seconds);"
g;g_date_time_add_weeks;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" G_GNUC_WARN_UNUSED_RESULT GDateTime * g_date_time_add_weeks (GDateTime *datetime, gint weeks);"
g;g_date_time_add_years;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" G_GNUC_WARN_UNUSED_RESULT GDateTime * g_date_time_add_years (GDateTime *datetime, gint years);"
g;g_date_time_compare;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint g_date_time_compare (gconstpointer dt1, gconstpointer dt2);"
g;g_date_time_difference;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GTimeSpan g_date_time_difference (GDateTime *end, GDateTime *begin);"
g;g_date_time_equal;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gboolean g_date_time_equal (gconstpointer dt1, gconstpointer dt2);"
g;g_date_time_format;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gchar * g_date_time_format (GDateTime *datetime, const gchar *format) G_GNUC_MALLOC;"
g;g_date_time_get_day_of_month;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint g_date_time_get_day_of_month (GDateTime *datetime);"
g;g_date_time_get_day_of_week;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint g_date_time_get_day_of_week (GDateTime *datetime);"
g;g_date_time_get_day_of_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint g_date_time_get_day_of_year (GDateTime *datetime);"
g;g_date_time_get_hour;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint g_date_time_get_hour (GDateTime *datetime);"
g;g_date_time_get_microsecond;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint g_date_time_get_microsecond (GDateTime *datetime);"
g;g_date_time_get_minute;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint g_date_time_get_minute (GDateTime *datetime);"
g;g_date_time_get_month;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint g_date_time_get_month (GDateTime *datetime);"
g;g_date_time_get_second;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint g_date_time_get_second (GDateTime *datetime);"
g;g_date_time_get_seconds;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gdouble g_date_time_get_seconds (GDateTime *datetime);"
g;g_date_time_get_timezone_abbreviation;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" const gchar * g_date_time_get_timezone_abbreviation (GDateTime *datetime);"
g;g_date_time_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_date_time_get_type (void) G_GNUC_CONST;"
g;g_date_time_get_utc_offset;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GTimeSpan g_date_time_get_utc_offset (GDateTime *datetime);"
g;g_date_time_get_week_numbering_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint g_date_time_get_week_numbering_year (GDateTime *datetime);"
g;g_date_time_get_week_of_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint g_date_time_get_week_of_year (GDateTime *datetime);"
g;g_date_time_get_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint g_date_time_get_year (GDateTime *datetime);"
g;g_date_time_get_ymd;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" void g_date_time_get_ymd (GDateTime *datetime, gint *year, gint *month, gint *day);"
g;g_date_time_hash;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" guint g_date_time_hash (gconstpointer datetime);"
g;g_date_time_is_daylight_savings;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gboolean g_date_time_is_daylight_savings (GDateTime *datetime);"
g;g_date_time_new;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_new (GTimeZone *tz, gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);"
g;g_date_time_new_from_timeval_local;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_new_from_timeval_local (const GTimeVal *tv);"
g;g_date_time_new_from_timeval_utc;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_new_from_timeval_utc (const GTimeVal *tv);"
g;g_date_time_new_from_unix_local;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_new_from_unix_local (gint64 t);"
g;g_date_time_new_from_unix_utc;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_new_from_unix_utc (gint64 t);"
g;g_date_time_new_local;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_new_local (gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);"
g;g_date_time_new_now;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_new_now (GTimeZone *tz);"
g;g_date_time_new_now_local;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_new_now_local (void);"
g;g_date_time_new_now_utc;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_new_now_utc (void);"
g;g_date_time_new_utc;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_new_utc (gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);"
g;g_date_time_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_ref (GDateTime *datetime);"
g;g_date_time_to_local;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_to_local (GDateTime *datetime);"
g;g_date_time_to_timeval;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gboolean g_date_time_to_timeval (GDateTime *datetime, GTimeVal *tv);"
g;g_date_time_to_timezone;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_to_timezone (GDateTime *datetime, GTimeZone *tz);"
g;g_date_time_to_unix;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" gint64 g_date_time_to_unix (GDateTime *datetime);"
g;g_date_time_to_utc;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;" GDateTime * g_date_time_to_utc (GDateTime *datetime);"
g;g_date_time_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gdatetime.h;"  void g_date_time_unref (GDateTime *datetime);"
g;g_date_to_struct_tm;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" void g_date_to_struct_tm (const GDate *date, struct tm *tm);"
g;g_date_valid;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gboolean g_date_valid (const GDate *date);"
g;g_date_valid_day;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gboolean g_date_valid_day (GDateDay day) G_GNUC_CONST;"
g;g_date_valid_dmy;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gboolean g_date_valid_dmy (GDateDay day, GDateMonth month, GDateYear year) G_GNUC_CONST;"
g;g_date_valid_julian;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gboolean g_date_valid_julian (guint32 julian_date) G_GNUC_CONST;"
g;g_date_valid_month;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gboolean g_date_valid_month (GDateMonth month) G_GNUC_CONST;"
g;g_date_valid_weekday;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gboolean g_date_valid_weekday (GDateWeekday weekday) G_GNUC_CONST;"
g;g_date_valid_year;glib-auto.f90;/usr/include/glib-2.0/glib/gdate.h;" gboolean g_date_valid_year (GDateYear year) G_GNUC_CONST;"
g;g_dbus_action_group_get;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusactiongroup.h;" GDBusActionGroup * g_dbus_action_group_get (GDBusConnection *connection, const gchar *bus_name, const gchar *object_path);"
g;g_dbus_action_group_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusactiongroup.h;"  GType g_dbus_action_group_get_type (void) G_GNUC_CONST;"
g;g_dbus_address_escape_value;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusaddress.h;"  gchar *g_dbus_address_escape_value (const gchar *string);"
g;g_dbus_address_get_for_bus_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusaddress.h;" gchar *g_dbus_address_get_for_bus_sync (GBusType bus_type, GCancellable *cancellable, GError **error);"
g;g_dbus_address_get_stream;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusaddress.h;" void g_dbus_address_get_stream (const gchar *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_address_get_stream_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusaddress.h;" GIOStream *g_dbus_address_get_stream_finish (GAsyncResult *res, gchar **out_guid, GError **error);"
g;g_dbus_address_get_stream_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusaddress.h;" GIOStream *g_dbus_address_get_stream_sync (const gchar *address, gchar **out_guid, GCancellable *cancellable, GError **error);"
g;g_dbus_annotation_info_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GType g_dbus_annotation_info_get_type (void) G_GNUC_CONST;"
g;g_dbus_annotation_info_lookup;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;"  const gchar *g_dbus_annotation_info_lookup (GDBusAnnotationInfo **annotations, const gchar *name);"
g;g_dbus_annotation_info_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GDBusAnnotationInfo *g_dbus_annotation_info_ref (GDBusAnnotationInfo *info);"
g;g_dbus_annotation_info_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" void g_dbus_annotation_info_unref (GDBusAnnotationInfo *info);"
g;g_dbus_arg_info_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GType g_dbus_arg_info_get_type (void) G_GNUC_CONST;"
g;g_dbus_arg_info_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GDBusArgInfo *g_dbus_arg_info_ref (GDBusArgInfo *info);"
g;g_dbus_arg_info_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" void g_dbus_arg_info_unref (GDBusArgInfo *info);"
g;g_dbus_auth_observer_allow_mechanism;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusauthobserver.h;" gboolean g_dbus_auth_observer_allow_mechanism (GDBusAuthObserver *observer, const gchar *mechanism);"
g;g_dbus_auth_observer_authorize_authenticated_peer;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusauthobserver.h;" gboolean g_dbus_auth_observer_authorize_authenticated_peer (GDBusAuthObserver *observer, GIOStream *stream, GCredentials *credentials);"
g;g_dbus_auth_observer_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusauthobserver.h;"  GType g_dbus_auth_observer_get_type (void) G_GNUC_CONST;"
g;g_dbus_auth_observer_new;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusauthobserver.h;" GDBusAuthObserver *g_dbus_auth_observer_new (void);"
g;g_dbus_connection_add_filter;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" guint g_dbus_connection_add_filter (GDBusConnection *connection, GDBusMessageFilterFunction filter_function, gpointer user_data, GDestroyNotify user_data_free_func);"
g;g_dbus_connection_call;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" void g_dbus_connection_call (GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_connection_call_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GVariant *g_dbus_connection_call_finish (GDBusConnection *connection, GAsyncResult *res, GError **error);"
g;g_dbus_connection_call_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GVariant *g_dbus_connection_call_sync (GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GError **error);"
g;g_dbus_connection_call_with_unix_fd_list;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" void g_dbus_connection_call_with_unix_fd_list (GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_connection_call_with_unix_fd_list_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GVariant *g_dbus_connection_call_with_unix_fd_list_finish (GDBusConnection *connection, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error);"
g;g_dbus_connection_call_with_unix_fd_list_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GVariant *g_dbus_connection_call_with_unix_fd_list_sync (GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, GCancellable *cancellable, GError **error);"
g;g_dbus_connection_close;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" void g_dbus_connection_close (GDBusConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_connection_close_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" gboolean g_dbus_connection_close_finish (GDBusConnection *connection, GAsyncResult *res, GError **error);"
g;g_dbus_connection_close_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" gboolean g_dbus_connection_close_sync (GDBusConnection *connection, GCancellable *cancellable, GError **error);"
g;g_dbus_connection_emit_signal;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" gboolean g_dbus_connection_emit_signal (GDBusConnection *connection, const gchar *destination_bus_name, const gchar *object_path, const gchar *interface_name, const gchar *signal_name, GVariant *parameters, GError **error);"
g;g_dbus_connection_export_action_group;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroupexporter.h;"  guint g_dbus_connection_export_action_group (GDBusConnection *connection, const gchar *object_path, GActionGroup *action_group, GError **error);"
g;g_dbus_connection_export_menu_model;glib-auto.f90;/usr/include/glib-2.0/gio/gmenuexporter.h;"  guint g_dbus_connection_export_menu_model (GDBusConnection *connection, const gchar *object_path, GMenuModel *menu, GError **error);"
g;g_dbus_connection_flush;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" void g_dbus_connection_flush (GDBusConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_connection_flush_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" gboolean g_dbus_connection_flush_finish (GDBusConnection *connection, GAsyncResult *res, GError **error);"
g;g_dbus_connection_flush_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" gboolean g_dbus_connection_flush_sync (GDBusConnection *connection, GCancellable *cancellable, GError **error);"
g;g_dbus_connection_get_capabilities;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GDBusCapabilityFlags g_dbus_connection_get_capabilities (GDBusConnection *connection);"
g;g_dbus_connection_get_exit_on_close;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" gboolean g_dbus_connection_get_exit_on_close (GDBusConnection *connection);"
g;g_dbus_connection_get_guid;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" const gchar *g_dbus_connection_get_guid (GDBusConnection *connection);"
g;g_dbus_connection_get_last_serial;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" guint32 g_dbus_connection_get_last_serial (GDBusConnection *connection);"
g;g_dbus_connection_get_peer_credentials;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GCredentials *g_dbus_connection_get_peer_credentials (GDBusConnection *connection);"
g;g_dbus_connection_get_stream;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GIOStream *g_dbus_connection_get_stream (GDBusConnection *connection);"
g;g_dbus_connection_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;"  GType g_dbus_connection_get_type (void) G_GNUC_CONST;"
g;g_dbus_connection_get_unique_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" const gchar *g_dbus_connection_get_unique_name (GDBusConnection *connection);"
g;g_dbus_connection_is_closed;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" gboolean g_dbus_connection_is_closed (GDBusConnection *connection);"
g;g_dbus_connection_new;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" void g_dbus_connection_new (GIOStream *stream, const gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_connection_new_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GDBusConnection *g_dbus_connection_new_finish (GAsyncResult *res, GError **error);"
g;g_dbus_connection_new_for_address;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" void g_dbus_connection_new_for_address (const gchar *address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_connection_new_for_address_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GDBusConnection *g_dbus_connection_new_for_address_finish (GAsyncResult *res, GError **error);"
g;g_dbus_connection_new_for_address_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GDBusConnection *g_dbus_connection_new_for_address_sync (const gchar *address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error);"
g;g_dbus_connection_new_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GDBusConnection *g_dbus_connection_new_sync (GIOStream *stream, const gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error);"
g;g_dbus_connection_register_object;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" guint g_dbus_connection_register_object (GDBusConnection *connection, const gchar *object_path, GDBusInterfaceInfo *interface_info, const GDBusInterfaceVTable *vtable, gpointer user_data, GDestroyNotify user_data_free_func, GError **error);"
g;g_dbus_connection_register_object_with_closures;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" guint g_dbus_connection_register_object_with_closures (GDBusConnection *connection, const gchar *object_path, GDBusInterfaceInfo *interface_info, GClosure *method_call_closure, GClosure *get_property_closure, GClosure *set_property_closure, GError **error);"
g;g_dbus_connection_register_subtree;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" guint g_dbus_connection_register_subtree (GDBusConnection *connection, const gchar *object_path, const GDBusSubtreeVTable *vtable, GDBusSubtreeFlags flags, gpointer user_data, GDestroyNotify user_data_free_func, GError **error);"
g;g_dbus_connection_remove_filter;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" void g_dbus_connection_remove_filter (GDBusConnection *connection, guint filter_id);"
g;g_dbus_connection_send_message;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" gboolean g_dbus_connection_send_message (GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, volatile guint32 *out_serial, GError **error);"
g;g_dbus_connection_send_message_with_reply;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" void g_dbus_connection_send_message_with_reply (GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_connection_send_message_with_reply_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GDBusMessage *g_dbus_connection_send_message_with_reply_finish (GDBusConnection *connection, GAsyncResult *res, GError **error);"
g;g_dbus_connection_send_message_with_reply_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" GDBusMessage *g_dbus_connection_send_message_with_reply_sync (GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, GError **error);"
g;g_dbus_connection_set_exit_on_close;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" void g_dbus_connection_set_exit_on_close (GDBusConnection *connection, gboolean exit_on_close);"
g;g_dbus_connection_signal_subscribe;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" guint g_dbus_connection_signal_subscribe (GDBusConnection *connection, const gchar *sender, const gchar *interface_name, const gchar *member, const gchar *object_path, const gchar *arg0, GDBusSignalFlags flags, GDBusSignalCallback callback, gpointer user_data, GDestroyNotify user_data_free_func);"
g;g_dbus_connection_signal_unsubscribe;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" void g_dbus_connection_signal_unsubscribe (GDBusConnection *connection, guint subscription_id);"
g;g_dbus_connection_start_message_processing;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" void g_dbus_connection_start_message_processing (GDBusConnection *connection);"
g;g_dbus_connection_unexport_action_group;glib-auto.f90;/usr/include/glib-2.0/gio/gactiongroupexporter.h;" void g_dbus_connection_unexport_action_group (GDBusConnection *connection, guint export_id);"
g;g_dbus_connection_unexport_menu_model;glib-auto.f90;/usr/include/glib-2.0/gio/gmenuexporter.h;" void g_dbus_connection_unexport_menu_model (GDBusConnection *connection, guint export_id);"
g;g_dbus_connection_unregister_object;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" gboolean g_dbus_connection_unregister_object (GDBusConnection *connection, guint registration_id);"
g;g_dbus_connection_unregister_subtree;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusconnection.h;" gboolean g_dbus_connection_unregister_subtree (GDBusConnection *connection, guint registration_id);"
g;g_dbus_error_encode_gerror;glib-auto.f90;/usr/include/glib-2.0/gio/gdbuserror.h;" gchar *g_dbus_error_encode_gerror (const GError *error);"
g;g_dbus_error_get_remote_error;glib-auto.f90;/usr/include/glib-2.0/gio/gdbuserror.h;" gchar *g_dbus_error_get_remote_error (const GError *error);"
g;g_dbus_error_is_remote_error;glib-auto.f90;/usr/include/glib-2.0/gio/gdbuserror.h;" gboolean g_dbus_error_is_remote_error (const GError *error);"
g;g_dbus_error_new_for_dbus_error;glib-auto.f90;/usr/include/glib-2.0/gio/gdbuserror.h;" GError *g_dbus_error_new_for_dbus_error (const gchar *dbus_error_name, const gchar *dbus_error_message);"
g;g_dbus_error_quark;glib-auto.f90;/usr/include/glib-2.0/gio/gdbuserror.h;"  GQuark g_dbus_error_quark (void);"
g;g_dbus_error_register_error;glib-auto.f90;/usr/include/glib-2.0/gio/gdbuserror.h;" gboolean g_dbus_error_register_error (GQuark error_domain, gint error_code, const gchar *dbus_error_name);"
g;g_dbus_error_register_error_domain;glib-auto.f90;/usr/include/glib-2.0/gio/gdbuserror.h;" void g_dbus_error_register_error_domain (const gchar *error_domain_quark_name, volatile gsize *quark_volatile, const GDBusErrorEntry *entries, guint num_entries);"
g;g_dbus_error_set_dbus_error;glib-auto.f90;/usr/include/glib-2.0/gio/gdbuserror.h;" void g_dbus_error_set_dbus_error (GError **error, const gchar *dbus_error_name, const gchar *dbus_error_message, const gchar *format, ...) G_GNUC_PRINTF(4, 5);"
g;g_dbus_error_set_dbus_error_valist;glib-auto.f90;/usr/include/glib-2.0/gio/gdbuserror.h;" void g_dbus_error_set_dbus_error_valist (GError **error, const gchar *dbus_error_name, const gchar *dbus_error_message, const gchar *format, va_list var_args) G_GNUC_PRINTF(4, 0);"
g;g_dbus_error_strip_remote_error;glib-auto.f90;/usr/include/glib-2.0/gio/gdbuserror.h;" gboolean g_dbus_error_strip_remote_error (GError *error);"
g;g_dbus_error_unregister_error;glib-auto.f90;/usr/include/glib-2.0/gio/gdbuserror.h;" gboolean g_dbus_error_unregister_error (GQuark error_domain, gint error_code, const gchar *dbus_error_name);"
g;g_dbus_generate_guid;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusutils.h;" gchar *g_dbus_generate_guid (void);"
g;g_dbus_gvalue_to_gvariant;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusutils.h;" GVariant *g_dbus_gvalue_to_gvariant (const GValue *gvalue, const GVariantType *type);"
g;g_dbus_gvariant_to_gvalue;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusutils.h;" void g_dbus_gvariant_to_gvalue (GVariant *value, GValue *out_gvalue);"
g;g_dbus_interface_dup_object;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterface.h;" GDBusObject *g_dbus_interface_dup_object (GDBusInterface *interface_);"
g;g_dbus_interface_get_info;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterface.h;" GDBusInterfaceInfo *g_dbus_interface_get_info (GDBusInterface *interface_);"
g;g_dbus_interface_get_object;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterface.h;" GDBusObject *g_dbus_interface_get_object (GDBusInterface *interface_);"
g;g_dbus_interface_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterface.h;"  GType g_dbus_interface_get_type (void) G_GNUC_CONST;"
g;g_dbus_interface_info_cache_build;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" void g_dbus_interface_info_cache_build (GDBusInterfaceInfo *info);"
g;g_dbus_interface_info_cache_release;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" void g_dbus_interface_info_cache_release (GDBusInterfaceInfo *info);"
g;g_dbus_interface_info_generate_xml;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" void g_dbus_interface_info_generate_xml (GDBusInterfaceInfo *info, guint indent, GString *string_builder);"
g;g_dbus_interface_info_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GType g_dbus_interface_info_get_type (void) G_GNUC_CONST;"
g;g_dbus_interface_info_lookup_method;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GDBusMethodInfo *g_dbus_interface_info_lookup_method (GDBusInterfaceInfo *info, const gchar *name);"
g;g_dbus_interface_info_lookup_property;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GDBusPropertyInfo *g_dbus_interface_info_lookup_property (GDBusInterfaceInfo *info, const gchar *name);"
g;g_dbus_interface_info_lookup_signal;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GDBusSignalInfo *g_dbus_interface_info_lookup_signal (GDBusInterfaceInfo *info, const gchar *name);"
g;g_dbus_interface_info_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GDBusInterfaceInfo *g_dbus_interface_info_ref (GDBusInterfaceInfo *info);"
g;g_dbus_interface_info_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" void g_dbus_interface_info_unref (GDBusInterfaceInfo *info);"
g;g_dbus_interface_set_object;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterface.h;" void g_dbus_interface_set_object (GDBusInterface *interface_, GDBusObject *object);"
g;g_dbus_interface_skeleton_export;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" gboolean g_dbus_interface_skeleton_export (GDBusInterfaceSkeleton *interface_, GDBusConnection *connection, const gchar *object_path, GError **error);"
g;g_dbus_interface_skeleton_flush;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" void g_dbus_interface_skeleton_flush (GDBusInterfaceSkeleton *interface_);"
g;g_dbus_interface_skeleton_get_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" GDBusConnection *g_dbus_interface_skeleton_get_connection (GDBusInterfaceSkeleton *interface_);"
g;g_dbus_interface_skeleton_get_connections;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" GList *g_dbus_interface_skeleton_get_connections (GDBusInterfaceSkeleton *interface_);"
g;g_dbus_interface_skeleton_get_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags (GDBusInterfaceSkeleton *interface_);"
g;g_dbus_interface_skeleton_get_info;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" GDBusInterfaceInfo *g_dbus_interface_skeleton_get_info (GDBusInterfaceSkeleton *interface_);"
g;g_dbus_interface_skeleton_get_object_path;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" const gchar *g_dbus_interface_skeleton_get_object_path (GDBusInterfaceSkeleton *interface_);"
g;g_dbus_interface_skeleton_get_properties;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" GVariant *g_dbus_interface_skeleton_get_properties (GDBusInterfaceSkeleton *interface_);"
g;g_dbus_interface_skeleton_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;"  GType g_dbus_interface_skeleton_get_type (void) G_GNUC_CONST;"
g;g_dbus_interface_skeleton_get_vtable;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" GDBusInterfaceVTable *g_dbus_interface_skeleton_get_vtable (GDBusInterfaceSkeleton *interface_);"
g;g_dbus_interface_skeleton_has_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" gboolean g_dbus_interface_skeleton_has_connection (GDBusInterfaceSkeleton *interface_, GDBusConnection *connection);"
g;g_dbus_interface_skeleton_set_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" void g_dbus_interface_skeleton_set_flags (GDBusInterfaceSkeleton *interface_, GDBusInterfaceSkeletonFlags flags);"
g;g_dbus_interface_skeleton_unexport;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" void g_dbus_interface_skeleton_unexport (GDBusInterfaceSkeleton *interface_);"
g;g_dbus_interface_skeleton_unexport_from_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h;" void g_dbus_interface_skeleton_unexport_from_connection (GDBusInterfaceSkeleton *interface_, GDBusConnection *connection);"
g;g_dbus_is_address;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusaddress.h;" gboolean g_dbus_is_address (const gchar *string);"
g;g_dbus_is_guid;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusutils.h;"  gboolean g_dbus_is_guid (const gchar *string);"
g;g_dbus_is_interface_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusutils.h;" gboolean g_dbus_is_interface_name (const gchar *string);"
g;g_dbus_is_member_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusutils.h;" gboolean g_dbus_is_member_name (const gchar *string);"
g;g_dbus_is_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusutils.h;" gboolean g_dbus_is_name (const gchar *string);"
g;g_dbus_is_supported_address;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusaddress.h;" gboolean g_dbus_is_supported_address (const gchar *string, GError **error);"
g;g_dbus_is_unique_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusutils.h;" gboolean g_dbus_is_unique_name (const gchar *string);"
g;g_dbus_menu_model_get;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmenumodel.h;" GDBusMenuModel * g_dbus_menu_model_get (GDBusConnection *connection, const gchar *bus_name, const gchar *object_path);"
g;g_dbus_menu_model_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmenumodel.h;"  GType g_dbus_menu_model_get_type (void) G_GNUC_CONST;"
g;g_dbus_message_bytes_needed;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" gssize g_dbus_message_bytes_needed (guchar *blob, gsize blob_len, GError **error);"
g;g_dbus_message_copy;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GDBusMessage *g_dbus_message_copy (GDBusMessage *message, GError **error);"
g;g_dbus_message_get_arg0;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" const gchar *g_dbus_message_get_arg0 (GDBusMessage *message);"
g;g_dbus_message_get_body;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GVariant *g_dbus_message_get_body (GDBusMessage *message);"
g;g_dbus_message_get_byte_order;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GDBusMessageByteOrder g_dbus_message_get_byte_order (GDBusMessage *message);"
g;g_dbus_message_get_destination;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" const gchar *g_dbus_message_get_destination (GDBusMessage *message);"
g;g_dbus_message_get_error_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" const gchar *g_dbus_message_get_error_name (GDBusMessage *message);"
g;g_dbus_message_get_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GDBusMessageFlags g_dbus_message_get_flags (GDBusMessage *message);"
g;g_dbus_message_get_header;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GVariant *g_dbus_message_get_header (GDBusMessage *message, GDBusMessageHeaderField header_field);"
g;g_dbus_message_get_header_fields;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" guchar *g_dbus_message_get_header_fields (GDBusMessage *message);"
g;g_dbus_message_get_interface;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" const gchar *g_dbus_message_get_interface (GDBusMessage *message);"
g;g_dbus_message_get_locked;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" gboolean g_dbus_message_get_locked (GDBusMessage *message);"
g;g_dbus_message_get_member;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" const gchar *g_dbus_message_get_member (GDBusMessage *message);"
g;g_dbus_message_get_message_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GDBusMessageType g_dbus_message_get_message_type (GDBusMessage *message);"
g;g_dbus_message_get_num_unix_fds;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" guint32 g_dbus_message_get_num_unix_fds (GDBusMessage *message);"
g;g_dbus_message_get_path;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" const gchar *g_dbus_message_get_path (GDBusMessage *message);"
g;g_dbus_message_get_reply_serial;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" guint32 g_dbus_message_get_reply_serial (GDBusMessage *message);"
g;g_dbus_message_get_sender;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" const gchar *g_dbus_message_get_sender (GDBusMessage *message);"
g;g_dbus_message_get_serial;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" guint32 g_dbus_message_get_serial (GDBusMessage *message);"
g;g_dbus_message_get_signature;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" const gchar *g_dbus_message_get_signature (GDBusMessage *message);"
g;g_dbus_message_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;"  GType g_dbus_message_get_type (void) G_GNUC_CONST;"
g;g_dbus_message_get_unix_fd_list;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GUnixFDList *g_dbus_message_get_unix_fd_list (GDBusMessage *message);"
g;g_dbus_message_lock;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_lock (GDBusMessage *message);"
g;g_dbus_message_new;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GDBusMessage *g_dbus_message_new (void);"
g;g_dbus_message_new_from_blob;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GDBusMessage *g_dbus_message_new_from_blob (guchar *blob, gsize blob_len, GDBusCapabilityFlags capabilities, GError **error);"
g;g_dbus_message_new_method_call;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GDBusMessage *g_dbus_message_new_method_call (const gchar *name, const gchar *path, const gchar *interface_, const gchar *method);"
g;g_dbus_message_new_method_error_literal;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GDBusMessage *g_dbus_message_new_method_error_literal (GDBusMessage *method_call_message, const gchar *error_name, const gchar *error_message);"
g;g_dbus_message_new_method_error_valist;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GDBusMessage *g_dbus_message_new_method_error_valist (GDBusMessage *method_call_message, const gchar *error_name, const gchar *error_message_format, va_list var_args);"
g;g_dbus_message_new_method_reply;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GDBusMessage *g_dbus_message_new_method_reply (GDBusMessage *method_call_message);"
g;g_dbus_message_new_signal;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" GDBusMessage *g_dbus_message_new_signal (const gchar *path, const gchar *interface_, const gchar *signal);"
g;g_dbus_message_print;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" gchar *g_dbus_message_print (GDBusMessage *message, guint indent);"
g;g_dbus_message_set_body;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_body (GDBusMessage *message, GVariant *body);"
g;g_dbus_message_set_byte_order;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_byte_order (GDBusMessage *message, GDBusMessageByteOrder byte_order);"
g;g_dbus_message_set_destination;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_destination (GDBusMessage *message, const gchar *value);"
g;g_dbus_message_set_error_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_error_name (GDBusMessage *message, const gchar *value);"
g;g_dbus_message_set_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_flags (GDBusMessage *message, GDBusMessageFlags flags);"
g;g_dbus_message_set_header;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_header (GDBusMessage *message, GDBusMessageHeaderField header_field, GVariant *value);"
g;g_dbus_message_set_interface;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_interface (GDBusMessage *message, const gchar *value);"
g;g_dbus_message_set_member;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_member (GDBusMessage *message, const gchar *value);"
g;g_dbus_message_set_message_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_message_type (GDBusMessage *message, GDBusMessageType type);"
g;g_dbus_message_set_num_unix_fds;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_num_unix_fds (GDBusMessage *message, guint32 value);"
g;g_dbus_message_set_path;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_path (GDBusMessage *message, const gchar *value);"
g;g_dbus_message_set_reply_serial;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_reply_serial (GDBusMessage *message, guint32 value);"
g;g_dbus_message_set_sender;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_sender (GDBusMessage *message, const gchar *value);"
g;g_dbus_message_set_serial;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_serial (GDBusMessage *message, guint32 serial);"
g;g_dbus_message_set_signature;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_signature (GDBusMessage *message, const gchar *value);"
g;g_dbus_message_set_unix_fd_list;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" void g_dbus_message_set_unix_fd_list (GDBusMessage *message, GUnixFDList *fd_list);"
g;g_dbus_message_to_blob;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" guchar *g_dbus_message_to_blob (GDBusMessage *message, gsize *out_size, GDBusCapabilityFlags capabilities, GError **error);"
g;g_dbus_message_to_gerror;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmessage.h;" gboolean g_dbus_message_to_gerror (GDBusMessage *message, GError **error);"
g;g_dbus_method_info_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GType g_dbus_method_info_get_type (void) G_GNUC_CONST;"
g;g_dbus_method_info_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GDBusMethodInfo *g_dbus_method_info_ref (GDBusMethodInfo *info);"
g;g_dbus_method_info_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" void g_dbus_method_info_unref (GDBusMethodInfo *info);"
g;g_dbus_method_invocation_get_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" GDBusConnection *g_dbus_method_invocation_get_connection (GDBusMethodInvocation *invocation);"
g;g_dbus_method_invocation_get_interface_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" const gchar *g_dbus_method_invocation_get_interface_name (GDBusMethodInvocation *invocation);"
g;g_dbus_method_invocation_get_message;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" GDBusMessage *g_dbus_method_invocation_get_message (GDBusMethodInvocation *invocation);"
g;g_dbus_method_invocation_get_method_info;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" const GDBusMethodInfo *g_dbus_method_invocation_get_method_info (GDBusMethodInvocation *invocation);"
g;g_dbus_method_invocation_get_method_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" const gchar *g_dbus_method_invocation_get_method_name (GDBusMethodInvocation *invocation);"
g;g_dbus_method_invocation_get_object_path;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" const gchar *g_dbus_method_invocation_get_object_path (GDBusMethodInvocation *invocation);"
g;g_dbus_method_invocation_get_parameters;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" GVariant *g_dbus_method_invocation_get_parameters (GDBusMethodInvocation *invocation);"
g;g_dbus_method_invocation_get_property_info;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" const GDBusPropertyInfo *g_dbus_method_invocation_get_property_info (GDBusMethodInvocation *invocation);"
g;g_dbus_method_invocation_get_sender;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" const gchar *g_dbus_method_invocation_get_sender (GDBusMethodInvocation *invocation);"
g;g_dbus_method_invocation_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;"  GType g_dbus_method_invocation_get_type (void) G_GNUC_CONST;"
g;g_dbus_method_invocation_get_user_data;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" gpointer g_dbus_method_invocation_get_user_data (GDBusMethodInvocation *invocation);"
g;g_dbus_method_invocation_return_dbus_error;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" void g_dbus_method_invocation_return_dbus_error (GDBusMethodInvocation *invocation, const gchar *error_name, const gchar *error_message);"
g;g_dbus_method_invocation_return_error;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" void g_dbus_method_invocation_return_error (GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *format, ...) G_GNUC_PRINTF(4, 5);"
g;g_dbus_method_invocation_return_error_literal;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" void g_dbus_method_invocation_return_error_literal (GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *message);"
g;g_dbus_method_invocation_return_error_valist;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" void g_dbus_method_invocation_return_error_valist (GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *format, va_list var_args) G_GNUC_PRINTF(4, 0);"
g;g_dbus_method_invocation_return_gerror;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" void g_dbus_method_invocation_return_gerror (GDBusMethodInvocation *invocation, const GError *error);"
g;g_dbus_method_invocation_return_value;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" void g_dbus_method_invocation_return_value (GDBusMethodInvocation *invocation, GVariant *parameters);"
g;g_dbus_method_invocation_return_value_with_unix_fd_list;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" void g_dbus_method_invocation_return_value_with_unix_fd_list (GDBusMethodInvocation *invocation, GVariant *parameters, GUnixFDList *fd_list);"
g;g_dbus_method_invocation_take_error;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusmethodinvocation.h;" void g_dbus_method_invocation_take_error (GDBusMethodInvocation *invocation, GError *error);"
g;g_dbus_node_info_generate_xml;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" void g_dbus_node_info_generate_xml (GDBusNodeInfo *info, guint indent, GString *string_builder);"
g;g_dbus_node_info_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GType g_dbus_node_info_get_type (void) G_GNUC_CONST;"
g;g_dbus_node_info_lookup_interface;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GDBusInterfaceInfo *g_dbus_node_info_lookup_interface (GDBusNodeInfo *info, const gchar *name);"
g;g_dbus_node_info_new_for_xml;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GDBusNodeInfo *g_dbus_node_info_new_for_xml (const gchar *xml_data, GError **error);"
g;g_dbus_node_info_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GDBusNodeInfo *g_dbus_node_info_ref (GDBusNodeInfo *info);"
g;g_dbus_node_info_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" void g_dbus_node_info_unref (GDBusNodeInfo *info);"
g;g_dbus_object_get_interface;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobject.h;" GDBusInterface *g_dbus_object_get_interface (GDBusObject *object, const gchar *interface_name);"
g;g_dbus_object_get_interfaces;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobject.h;" GList *g_dbus_object_get_interfaces (GDBusObject *object);"
g;g_dbus_object_get_object_path;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobject.h;" const gchar *g_dbus_object_get_object_path (GDBusObject *object);"
g;g_dbus_object_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobject.h;"  GType g_dbus_object_get_type (void) G_GNUC_CONST;"
g;g_dbus_object_manager_client_get_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h;" GDBusConnection *g_dbus_object_manager_client_get_connection (GDBusObjectManagerClient *manager);"
g;g_dbus_object_manager_client_get_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h;" GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags (GDBusObjectManagerClient *manager);"
g;g_dbus_object_manager_client_get_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h;" const gchar *g_dbus_object_manager_client_get_name (GDBusObjectManagerClient *manager);"
g;g_dbus_object_manager_client_get_name_owner;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h;" gchar *g_dbus_object_manager_client_get_name_owner (GDBusObjectManagerClient *manager);"
g;g_dbus_object_manager_client_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h;"  GType g_dbus_object_manager_client_get_type (void) G_GNUC_CONST;"
g;g_dbus_object_manager_client_new;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h;" void g_dbus_object_manager_client_new (GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_object_manager_client_new_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h;" GDBusObjectManager *g_dbus_object_manager_client_new_finish (GAsyncResult *res, GError **error);"
g;g_dbus_object_manager_client_new_for_bus;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h;" void g_dbus_object_manager_client_new_for_bus (GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_object_manager_client_new_for_bus_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h;" GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_finish (GAsyncResult *res, GError **error);"
g;g_dbus_object_manager_client_new_for_bus_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h;" GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_sync (GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error);"
g;g_dbus_object_manager_client_new_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h;" GDBusObjectManager *g_dbus_object_manager_client_new_sync (GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error);"
g;g_dbus_object_manager_get_interface;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanager.h;" GDBusInterface *g_dbus_object_manager_get_interface (GDBusObjectManager *manager, const gchar *object_path, const gchar *interface_name);"
g;g_dbus_object_manager_get_object;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanager.h;" GDBusObject *g_dbus_object_manager_get_object (GDBusObjectManager *manager, const gchar *object_path);"
g;g_dbus_object_manager_get_object_path;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanager.h;" const gchar *g_dbus_object_manager_get_object_path (GDBusObjectManager *manager);"
g;g_dbus_object_manager_get_objects;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanager.h;" GList *g_dbus_object_manager_get_objects (GDBusObjectManager *manager);"
g;g_dbus_object_manager_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanager.h;"  GType g_dbus_object_manager_get_type (void) G_GNUC_CONST;"
g;g_dbus_object_manager_server_export;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h;" void g_dbus_object_manager_server_export (GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object);"
g;g_dbus_object_manager_server_export_uniquely;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h;" void g_dbus_object_manager_server_export_uniquely (GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object);"
g;g_dbus_object_manager_server_get_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h;" GDBusConnection *g_dbus_object_manager_server_get_connection (GDBusObjectManagerServer *manager);"
g;g_dbus_object_manager_server_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h;"  GType g_dbus_object_manager_server_get_type (void) G_GNUC_CONST;"
g;g_dbus_object_manager_server_is_exported;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h;" gboolean g_dbus_object_manager_server_is_exported (GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object);"
g;g_dbus_object_manager_server_new;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h;" GDBusObjectManagerServer *g_dbus_object_manager_server_new (const gchar *object_path);"
g;g_dbus_object_manager_server_set_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h;" void g_dbus_object_manager_server_set_connection (GDBusObjectManagerServer *manager, GDBusConnection *connection);"
g;g_dbus_object_manager_server_unexport;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h;" gboolean g_dbus_object_manager_server_unexport (GDBusObjectManagerServer *manager, const gchar *object_path);"
g;g_dbus_object_proxy_get_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectproxy.h;" GDBusConnection *g_dbus_object_proxy_get_connection (GDBusObjectProxy *proxy);"
g;g_dbus_object_proxy_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectproxy.h;"  GType g_dbus_object_proxy_get_type (void) G_GNUC_CONST;"
g;g_dbus_object_proxy_new;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectproxy.h;" GDBusObjectProxy *g_dbus_object_proxy_new (GDBusConnection *connection, const gchar *object_path);"
g;g_dbus_object_skeleton_add_interface;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectskeleton.h;" void g_dbus_object_skeleton_add_interface (GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_);"
g;g_dbus_object_skeleton_flush;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectskeleton.h;" void g_dbus_object_skeleton_flush (GDBusObjectSkeleton *object);"
g;g_dbus_object_skeleton_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectskeleton.h;"  GType g_dbus_object_skeleton_get_type (void) G_GNUC_CONST;"
g;g_dbus_object_skeleton_new;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectskeleton.h;" GDBusObjectSkeleton *g_dbus_object_skeleton_new (const gchar *object_path);"
g;g_dbus_object_skeleton_remove_interface;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectskeleton.h;" void g_dbus_object_skeleton_remove_interface (GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_);"
g;g_dbus_object_skeleton_remove_interface_by_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectskeleton.h;" void g_dbus_object_skeleton_remove_interface_by_name (GDBusObjectSkeleton *object, const gchar *interface_name);"
g;g_dbus_object_skeleton_set_object_path;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusobjectskeleton.h;" void g_dbus_object_skeleton_set_object_path (GDBusObjectSkeleton *object, const gchar *object_path);"
g;g_dbus_property_info_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GType g_dbus_property_info_get_type (void) G_GNUC_CONST;"
g;g_dbus_property_info_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GDBusPropertyInfo *g_dbus_property_info_ref (GDBusPropertyInfo *info);"
g;g_dbus_property_info_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" void g_dbus_property_info_unref (GDBusPropertyInfo *info);"
g;g_dbus_proxy_call;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" void g_dbus_proxy_call (GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_proxy_call_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" GVariant *g_dbus_proxy_call_finish (GDBusProxy *proxy, GAsyncResult *res, GError **error);"
g;g_dbus_proxy_call_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" GVariant *g_dbus_proxy_call_sync (GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GError **error);"
g;g_dbus_proxy_call_with_unix_fd_list;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" void g_dbus_proxy_call_with_unix_fd_list (GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_proxy_call_with_unix_fd_list_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" GVariant *g_dbus_proxy_call_with_unix_fd_list_finish (GDBusProxy *proxy, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error);"
g;g_dbus_proxy_call_with_unix_fd_list_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" GVariant *g_dbus_proxy_call_with_unix_fd_list_sync (GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, GCancellable *cancellable, GError **error);"
g;g_dbus_proxy_get_cached_property;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" GVariant *g_dbus_proxy_get_cached_property (GDBusProxy *proxy, const gchar *property_name);"
g;g_dbus_proxy_get_cached_property_names;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" gchar **g_dbus_proxy_get_cached_property_names (GDBusProxy *proxy);"
g;g_dbus_proxy_get_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" GDBusConnection *g_dbus_proxy_get_connection (GDBusProxy *proxy);"
g;g_dbus_proxy_get_default_timeout;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" gint g_dbus_proxy_get_default_timeout (GDBusProxy *proxy);"
g;g_dbus_proxy_get_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" GDBusProxyFlags g_dbus_proxy_get_flags (GDBusProxy *proxy);"
g;g_dbus_proxy_get_interface_info;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" GDBusInterfaceInfo *g_dbus_proxy_get_interface_info (GDBusProxy *proxy);"
g;g_dbus_proxy_get_interface_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" const gchar *g_dbus_proxy_get_interface_name (GDBusProxy *proxy);"
g;g_dbus_proxy_get_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" const gchar *g_dbus_proxy_get_name (GDBusProxy *proxy);"
g;g_dbus_proxy_get_name_owner;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" gchar *g_dbus_proxy_get_name_owner (GDBusProxy *proxy);"
g;g_dbus_proxy_get_object_path;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" const gchar *g_dbus_proxy_get_object_path (GDBusProxy *proxy);"
g;g_dbus_proxy_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;"  GType g_dbus_proxy_get_type (void) G_GNUC_CONST;"
g;g_dbus_proxy_new;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" void g_dbus_proxy_new (GDBusConnection *connection, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_proxy_new_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" GDBusProxy *g_dbus_proxy_new_finish (GAsyncResult *res, GError **error);"
g;g_dbus_proxy_new_for_bus;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" void g_dbus_proxy_new_for_bus (GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dbus_proxy_new_for_bus_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" GDBusProxy *g_dbus_proxy_new_for_bus_finish (GAsyncResult *res, GError **error);"
g;g_dbus_proxy_new_for_bus_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" GDBusProxy *g_dbus_proxy_new_for_bus_sync (GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GError **error);"
g;g_dbus_proxy_new_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" GDBusProxy *g_dbus_proxy_new_sync (GDBusConnection *connection, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GError **error);"
g;g_dbus_proxy_set_cached_property;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" void g_dbus_proxy_set_cached_property (GDBusProxy *proxy, const gchar *property_name, GVariant *value);"
g;g_dbus_proxy_set_default_timeout;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" void g_dbus_proxy_set_default_timeout (GDBusProxy *proxy, gint timeout_msec);"
g;g_dbus_proxy_set_interface_info;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusproxy.h;" void g_dbus_proxy_set_interface_info (GDBusProxy *proxy, GDBusInterfaceInfo *info);"
g;g_dbus_server_get_client_address;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusserver.h;" const gchar *g_dbus_server_get_client_address (GDBusServer *server);"
g;g_dbus_server_get_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusserver.h;" GDBusServerFlags g_dbus_server_get_flags (GDBusServer *server);"
g;g_dbus_server_get_guid;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusserver.h;" const gchar *g_dbus_server_get_guid (GDBusServer *server);"
g;g_dbus_server_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusserver.h;"  GType g_dbus_server_get_type (void) G_GNUC_CONST;"
g;g_dbus_server_is_active;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusserver.h;" gboolean g_dbus_server_is_active (GDBusServer *server);"
g;g_dbus_server_new_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusserver.h;" GDBusServer *g_dbus_server_new_sync (const gchar *address, GDBusServerFlags flags, const gchar *guid, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error);"
g;g_dbus_server_start;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusserver.h;" void g_dbus_server_start (GDBusServer *server);"
g;g_dbus_server_stop;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusserver.h;" void g_dbus_server_stop (GDBusServer *server);"
g;g_dbus_signal_info_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GType g_dbus_signal_info_get_type (void) G_GNUC_CONST;"
g;g_dbus_signal_info_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" GDBusSignalInfo *g_dbus_signal_info_ref (GDBusSignalInfo *info);"
g;g_dbus_signal_info_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gdbusintrospection.h;" void g_dbus_signal_info_unref (GDBusSignalInfo *info);"
g;g_dcgettext;glib-auto.f90;/usr/include/glib-2.0/glib/ggettext.h;" const gchar *g_dcgettext (const gchar *domain, const gchar *msgid, gint category) G_GNUC_FORMAT(2);"
g;g_dgettext;glib-auto.f90;/usr/include/glib-2.0/glib/ggettext.h;" const gchar *g_dgettext (const gchar *domain, const gchar *msgid) G_GNUC_FORMAT(2);"
g;g_dir_close;glib-auto.f90;/usr/include/glib-2.0/glib/gdir.h;" void g_dir_close (GDir *dir);"
g;g_dir_make_tmp;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gchar *g_dir_make_tmp (const gchar *tmpl, GError **error);"
g;g_dir_open_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gdir.h;" GDir *g_dir_open_utf8 (const gchar *path, guint flags, GError **error);"
g;g_dir_read_name_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gdir.h;" const gchar *g_dir_read_name_utf8 (GDir *dir);"
g;g_dir_rewind;glib-auto.f90;/usr/include/glib-2.0/glib/gdir.h;" void g_dir_rewind (GDir *dir);"
g;g_direct_equal;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_direct_equal (gconstpointer v1, gconstpointer v2) G_GNUC_CONST;"
g;g_direct_hash;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" guint g_direct_hash (gconstpointer v) G_GNUC_CONST;"
g;g_dngettext;glib-auto.f90;/usr/include/glib-2.0/glib/ggettext.h;" const gchar *g_dngettext (const gchar *domain, const gchar *msgid, const gchar *msgid_plural, gulong n) G_GNUC_FORMAT(3);"
g;g_double_equal;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_double_equal (gconstpointer v1, gconstpointer v2);"
g;g_double_hash;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" guint g_double_hash (gconstpointer v);"
g;g_dpgettext;glib-auto.f90;/usr/include/glib-2.0/glib/ggettext.h;" const gchar *g_dpgettext (const gchar *domain, const gchar *msgctxtid, gsize msgidoffset) G_GNUC_FORMAT(2);"
g;g_dpgettext2;glib-auto.f90;/usr/include/glib-2.0/glib/ggettext.h;" const gchar *g_dpgettext2 (const gchar *domain, const gchar *context, const gchar *msgid) G_GNUC_FORMAT(3);"
g;g_drive_can_eject;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_can_eject (GDrive *drive);"
g;g_drive_can_poll_for_media;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_can_poll_for_media (GDrive *drive);"
g;g_drive_can_start;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_can_start (GDrive *drive);"
g;g_drive_can_start_degraded;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_can_start_degraded (GDrive *drive);"
g;g_drive_can_stop;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_can_stop (GDrive *drive);"
g;g_drive_eject;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" void g_drive_eject (GDrive *drive, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_drive_eject_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_eject_finish (GDrive *drive, GAsyncResult *result, GError **error);"
g;g_drive_eject_with_operation;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" void g_drive_eject_with_operation (GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_drive_eject_with_operation_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_eject_with_operation_finish (GDrive *drive, GAsyncResult *result, GError **error);"
g;g_drive_enumerate_identifiers;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" char ** g_drive_enumerate_identifiers (GDrive *drive);"
g;g_drive_get_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" GIcon * g_drive_get_icon (GDrive *drive);"
g;g_drive_get_identifier;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" char * g_drive_get_identifier (GDrive *drive, const char *kind);"
g;g_drive_get_name;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" char * g_drive_get_name (GDrive *drive);"
g;g_drive_get_sort_key;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" const gchar *g_drive_get_sort_key (GDrive *drive);"
g;g_drive_get_start_stop_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" GDriveStartStopType g_drive_get_start_stop_type (GDrive *drive);"
g;g_drive_get_symbolic_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" GIcon * g_drive_get_symbolic_icon (GDrive *drive);"
g;g_drive_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;"  GType g_drive_get_type (void) G_GNUC_CONST;"
g;g_drive_get_volumes;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" GList * g_drive_get_volumes (GDrive *drive);"
g;g_drive_has_media;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_has_media (GDrive *drive);"
g;g_drive_has_volumes;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_has_volumes (GDrive *drive);"
g;g_drive_is_media_check_automatic;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_is_media_check_automatic (GDrive *drive);"
g;g_drive_is_media_removable;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_is_media_removable (GDrive *drive);"
g;g_drive_poll_for_media;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" void g_drive_poll_for_media (GDrive *drive, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_drive_poll_for_media_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_poll_for_media_finish (GDrive *drive, GAsyncResult *result, GError **error);"
g;g_drive_start;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" void g_drive_start (GDrive *drive, GDriveStartFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_drive_start_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_start_finish (GDrive *drive, GAsyncResult *result, GError **error);"
g;g_drive_stop;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" void g_drive_stop (GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_drive_stop_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdrive.h;" gboolean g_drive_stop_finish (GDrive *drive, GAsyncResult *result, GError **error);"
g;g_dtls_client_connection_get_accepted_cas;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsclientconnection.h;" GList * g_dtls_client_connection_get_accepted_cas (GDtlsClientConnection *conn);"
g;g_dtls_client_connection_get_server_identity;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsclientconnection.h;" GSocketConnectable *g_dtls_client_connection_get_server_identity (GDtlsClientConnection *conn);"
g;g_dtls_client_connection_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsclientconnection.h;"  GType g_dtls_client_connection_get_type (void) G_GNUC_CONST;"
g;g_dtls_client_connection_get_validation_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsclientconnection.h;" GTlsCertificateFlags g_dtls_client_connection_get_validation_flags (GDtlsClientConnection *conn);"
g;g_dtls_client_connection_new;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsclientconnection.h;" GDatagramBased *g_dtls_client_connection_new (GDatagramBased *base_socket, GSocketConnectable *server_identity, GError **error);"
g;g_dtls_client_connection_set_server_identity;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsclientconnection.h;" void g_dtls_client_connection_set_server_identity (GDtlsClientConnection *conn, GSocketConnectable *identity);"
g;g_dtls_client_connection_set_validation_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsclientconnection.h;" void g_dtls_client_connection_set_validation_flags (GDtlsClientConnection *conn, GTlsCertificateFlags flags);"
g;g_dtls_connection_close;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" gboolean g_dtls_connection_close (GDtlsConnection *conn, GCancellable *cancellable, GError **error);"
g;g_dtls_connection_close_async;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" void g_dtls_connection_close_async (GDtlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dtls_connection_close_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" gboolean g_dtls_connection_close_finish (GDtlsConnection *conn, GAsyncResult *result, GError **error);"
g;g_dtls_connection_emit_accept_certificate;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" gboolean g_dtls_connection_emit_accept_certificate (GDtlsConnection *conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors);"
g;g_dtls_connection_get_certificate;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" GTlsCertificate *g_dtls_connection_get_certificate (GDtlsConnection *conn);"
g;g_dtls_connection_get_database;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" GTlsDatabase *g_dtls_connection_get_database (GDtlsConnection *conn);"
g;g_dtls_connection_get_interaction;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" GTlsInteraction *g_dtls_connection_get_interaction (GDtlsConnection *conn);"
g;g_dtls_connection_get_peer_certificate;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" GTlsCertificate *g_dtls_connection_get_peer_certificate (GDtlsConnection *conn);"
g;g_dtls_connection_get_peer_certificate_errors;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors (GDtlsConnection *conn);"
g;g_dtls_connection_get_rehandshake_mode;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode (GDtlsConnection *conn);"
g;g_dtls_connection_get_require_close_notify;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" gboolean g_dtls_connection_get_require_close_notify (GDtlsConnection *conn);"
g;g_dtls_connection_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;"  GType g_dtls_connection_get_type (void) G_GNUC_CONST;"
g;g_dtls_connection_handshake;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" gboolean g_dtls_connection_handshake (GDtlsConnection *conn, GCancellable *cancellable, GError **error);"
g;g_dtls_connection_handshake_async;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" void g_dtls_connection_handshake_async (GDtlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dtls_connection_handshake_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" gboolean g_dtls_connection_handshake_finish (GDtlsConnection *conn, GAsyncResult *result, GError **error);"
g;g_dtls_connection_set_certificate;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" void g_dtls_connection_set_certificate (GDtlsConnection *conn, GTlsCertificate *certificate);"
g;g_dtls_connection_set_database;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" void g_dtls_connection_set_database (GDtlsConnection *conn, GTlsDatabase *database);"
g;g_dtls_connection_set_interaction;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" void g_dtls_connection_set_interaction (GDtlsConnection *conn, GTlsInteraction *interaction);"
g;g_dtls_connection_set_rehandshake_mode;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" void g_dtls_connection_set_rehandshake_mode (GDtlsConnection *conn, GTlsRehandshakeMode mode);"
g;g_dtls_connection_set_require_close_notify;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" void g_dtls_connection_set_require_close_notify (GDtlsConnection *conn, gboolean require_close_notify);"
g;g_dtls_connection_shutdown;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" gboolean g_dtls_connection_shutdown (GDtlsConnection *conn, gboolean shutdown_read, gboolean shutdown_write, GCancellable *cancellable, GError **error);"
g;g_dtls_connection_shutdown_async;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" void g_dtls_connection_shutdown_async (GDtlsConnection *conn, gboolean shutdown_read, gboolean shutdown_write, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_dtls_connection_shutdown_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsconnection.h;" gboolean g_dtls_connection_shutdown_finish (GDtlsConnection *conn, GAsyncResult *result, GError **error);"
g;g_dtls_server_connection_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsserverconnection.h;"  GType g_dtls_server_connection_get_type (void) G_GNUC_CONST;"
g;g_dtls_server_connection_new;glib-auto.f90;/usr/include/glib-2.0/gio/gdtlsserverconnection.h;" GDatagramBased *g_dtls_server_connection_new (GDatagramBased *base_socket, GTlsCertificate *certificate, GError **error);"
g;g_emblem_get_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gemblem.h;" GIcon *g_emblem_get_icon (GEmblem *emblem);"
g;g_emblem_get_origin;glib-auto.f90;/usr/include/glib-2.0/gio/gemblem.h;" GEmblemOrigin g_emblem_get_origin (GEmblem *emblem);"
g;g_emblem_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gemblem.h;"  GType g_emblem_get_type (void) G_GNUC_CONST;"
g;g_emblem_new;glib-auto.f90;/usr/include/glib-2.0/gio/gemblem.h;" GEmblem *g_emblem_new (GIcon *icon);"
g;g_emblem_new_with_origin;glib-auto.f90;/usr/include/glib-2.0/gio/gemblem.h;" GEmblem *g_emblem_new_with_origin (GIcon *icon, GEmblemOrigin origin);"
g;g_emblemed_icon_add_emblem;glib-auto.f90;/usr/include/glib-2.0/gio/gemblemedicon.h;" void g_emblemed_icon_add_emblem (GEmblemedIcon *emblemed, GEmblem *emblem);"
g;g_emblemed_icon_clear_emblems;glib-auto.f90;/usr/include/glib-2.0/gio/gemblemedicon.h;" void g_emblemed_icon_clear_emblems (GEmblemedIcon *emblemed);"
g;g_emblemed_icon_get_emblems;glib-auto.f90;/usr/include/glib-2.0/gio/gemblemedicon.h;" GList *g_emblemed_icon_get_emblems (GEmblemedIcon *emblemed);"
g;g_emblemed_icon_get_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gemblemedicon.h;" GIcon *g_emblemed_icon_get_icon (GEmblemedIcon *emblemed);"
g;g_emblemed_icon_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gemblemedicon.h;"  GType g_emblemed_icon_get_type (void) G_GNUC_CONST;"
g;g_emblemed_icon_new;glib-auto.f90;/usr/include/glib-2.0/gio/gemblemedicon.h;" GIcon *g_emblemed_icon_new (GIcon *icon, GEmblem *emblem);"
g;g_enum_complete_type_info;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" void g_enum_complete_type_info (GType g_enum_type, GTypeInfo *info, const GEnumValue *const_values);"
g;g_enum_get_value;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;"  GEnumValue* g_enum_get_value (GEnumClass *enum_class, gint value);"
g;g_enum_get_value_by_name;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" GEnumValue* g_enum_get_value_by_name (GEnumClass *enum_class, const gchar *name);"
g;g_enum_get_value_by_nick;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" GEnumValue* g_enum_get_value_by_nick (GEnumClass *enum_class, const gchar *nick);"
g;g_enum_register_static;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" GType g_enum_register_static (const gchar *name, const GEnumValue *const_static_values);"
g;g_environ_getenv;glib-auto.f90;/usr/include/glib-2.0/glib/genviron.h;" const gchar * g_environ_getenv (gchar **envp, const gchar *variable);"
g;g_environ_setenv;glib-auto.f90;/usr/include/glib-2.0/glib/genviron.h;" gchar ** g_environ_setenv (gchar **envp, const gchar *variable, const gchar *value, gboolean overwrite) G_GNUC_WARN_UNUSED_RESULT;"
g;g_environ_unsetenv;glib-auto.f90;/usr/include/glib-2.0/glib/genviron.h;" gchar ** g_environ_unsetenv (gchar **envp, const gchar *variable) G_GNUC_WARN_UNUSED_RESULT;"
g;g_error;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" static void g_error (const gchar *format, ...)  static void g_message (const gchar *format, ...)  static void g_critical (const gchar *format, ...)  static void g_warning (const gchar *format, ...)  static void g_info (const gchar *format, ...)  static void g_debug (const gchar *format, ...)  void g_print (const gchar *format, ...) G_GNUC_PRINTF (1, 2);"
g;g_error_copy;glib-auto.f90;/usr/include/glib-2.0/glib/gerror.h;" GError* g_error_copy (const GError *error);"
g;g_error_free;glib-auto.f90;/usr/include/glib-2.0/glib/gerror.h;" void g_error_free (GError *error);"
g;g_error_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_error_get_type (void) G_GNUC_CONST;"
g;g_error_matches;glib-auto.f90;/usr/include/glib-2.0/glib/gerror.h;" gboolean g_error_matches (const GError *error, GQuark domain, gint code);"
g;g_error_new;glib-auto.f90;/usr/include/glib-2.0/glib/gerror.h;"  GError* g_error_new (GQuark domain, gint code, const gchar *format, ...) G_GNUC_PRINTF (3, 4);"
g;g_error_new_literal;glib-auto.f90;/usr/include/glib-2.0/glib/gerror.h;" GError* g_error_new_literal (GQuark domain, gint code, const gchar *message);"
g;g_error_new_valist;glib-auto.f90;/usr/include/glib-2.0/glib/gerror.h;" GError* g_error_new_valist (GQuark domain, gint code, const gchar *format, va_list args) G_GNUC_PRINTF(3, 0);"
g;g_file_append_to;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileOutputStream * g_file_append_to (GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_append_to_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_append_to_async (GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_append_to_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileOutputStream * g_file_append_to_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_attribute_info_list_add;glib-auto.f90;/usr/include/glib-2.0/gio/gfileattribute.h;" void g_file_attribute_info_list_add (GFileAttributeInfoList *list, const char *name, GFileAttributeType type, GFileAttributeInfoFlags flags);"
g;g_file_attribute_info_list_dup;glib-auto.f90;/usr/include/glib-2.0/gio/gfileattribute.h;" GFileAttributeInfoList * g_file_attribute_info_list_dup (GFileAttributeInfoList *list);"
g;g_file_attribute_info_list_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileattribute.h;"  GType g_file_attribute_info_list_get_type (void);"
g;g_file_attribute_info_list_lookup;glib-auto.f90;/usr/include/glib-2.0/gio/gfileattribute.h;" const GFileAttributeInfo *g_file_attribute_info_list_lookup (GFileAttributeInfoList *list, const char *name);"
g;g_file_attribute_info_list_new;glib-auto.f90;/usr/include/glib-2.0/gio/gfileattribute.h;" GFileAttributeInfoList * g_file_attribute_info_list_new (void);"
g;g_file_attribute_info_list_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gfileattribute.h;" GFileAttributeInfoList * g_file_attribute_info_list_ref (GFileAttributeInfoList *list);"
g;g_file_attribute_info_list_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gfileattribute.h;" void g_file_attribute_info_list_unref (GFileAttributeInfoList *list);"
g;g_file_attribute_matcher_enumerate_namespace;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gboolean g_file_attribute_matcher_enumerate_namespace (GFileAttributeMatcher *matcher, const char *ns);"
g;g_file_attribute_matcher_enumerate_next;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" const char * g_file_attribute_matcher_enumerate_next (GFileAttributeMatcher *matcher);"
g;g_file_attribute_matcher_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GType g_file_attribute_matcher_get_type (void) G_GNUC_CONST;"
g;g_file_attribute_matcher_matches;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gboolean g_file_attribute_matcher_matches (GFileAttributeMatcher *matcher, const char *attribute);"
g;g_file_attribute_matcher_matches_only;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gboolean g_file_attribute_matcher_matches_only (GFileAttributeMatcher *matcher, const char *attribute);"
g;g_file_attribute_matcher_new;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GFileAttributeMatcher *g_file_attribute_matcher_new (const char *attributes);"
g;g_file_attribute_matcher_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GFileAttributeMatcher *g_file_attribute_matcher_ref (GFileAttributeMatcher *matcher);"
g;g_file_attribute_matcher_subtract;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GFileAttributeMatcher *g_file_attribute_matcher_subtract (GFileAttributeMatcher *matcher, GFileAttributeMatcher *subtract);"
g;g_file_attribute_matcher_to_string;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" char * g_file_attribute_matcher_to_string (GFileAttributeMatcher *matcher);"
g;g_file_attribute_matcher_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_attribute_matcher_unref (GFileAttributeMatcher *matcher);"
g;g_file_copy;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_copy (GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error);"
g;g_file_copy_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_copy_async (GFile *source, GFile *destination, GFileCopyFlags flags, int io_priority, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_copy_attributes;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_copy_attributes (GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_copy_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_copy_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_create;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileOutputStream * g_file_create (GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_create_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_create_async (GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_create_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileOutputStream * g_file_create_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_create_readwrite;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileIOStream * g_file_create_readwrite (GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_create_readwrite_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_create_readwrite_async (GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_create_readwrite_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileIOStream * g_file_create_readwrite_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_delete;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_delete (GFile *file, GCancellable *cancellable, GError **error);"
g;g_file_delete_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_delete_async (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_delete_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_delete_finish (GFile *file, GAsyncResult *result, GError **error);"
g;g_file_dup;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_dup (GFile *file);"
g;g_file_eject_mountable;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_eject_mountable (GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_eject_mountable_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_eject_mountable_finish (GFile *file, GAsyncResult *result, GError **error);"
g;g_file_eject_mountable_with_operation;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_eject_mountable_with_operation (GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_eject_mountable_with_operation_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_eject_mountable_with_operation_finish (GFile *file, GAsyncResult *result, GError **error);"
g;g_file_enumerate_children;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileEnumerator * g_file_enumerate_children (GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_enumerate_children_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_enumerate_children_async (GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_enumerate_children_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileEnumerator * g_file_enumerate_children_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_enumerator_close;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;" gboolean g_file_enumerator_close (GFileEnumerator *enumerator, GCancellable *cancellable, GError **error);"
g;g_file_enumerator_close_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;" void g_file_enumerator_close_async (GFileEnumerator *enumerator, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_enumerator_close_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;" gboolean g_file_enumerator_close_finish (GFileEnumerator *enumerator, GAsyncResult *result, GError **error);"
g;g_file_enumerator_get_child;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;" GFile * g_file_enumerator_get_child (GFileEnumerator *enumerator, GFileInfo *info);"
g;g_file_enumerator_get_container;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;" GFile * g_file_enumerator_get_container (GFileEnumerator *enumerator);"
g;g_file_enumerator_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;"  GType g_file_enumerator_get_type (void) G_GNUC_CONST;"
g;g_file_enumerator_has_pending;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;" gboolean g_file_enumerator_has_pending (GFileEnumerator *enumerator);"
g;g_file_enumerator_is_closed;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;" gboolean g_file_enumerator_is_closed (GFileEnumerator *enumerator);"
g;g_file_enumerator_iterate;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;" gboolean g_file_enumerator_iterate (GFileEnumerator *direnum, GFileInfo **out_info, GFile **out_child, GCancellable *cancellable, GError **error);"
g;g_file_enumerator_next_file;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;" GFileInfo *g_file_enumerator_next_file (GFileEnumerator *enumerator, GCancellable *cancellable, GError **error);"
g;g_file_enumerator_next_files_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;" void g_file_enumerator_next_files_async (GFileEnumerator *enumerator, int num_files, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_enumerator_next_files_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;" GList * g_file_enumerator_next_files_finish (GFileEnumerator *enumerator, GAsyncResult *result, GError **error);"
g;g_file_enumerator_set_pending;glib-auto.f90;/usr/include/glib-2.0/gio/gfileenumerator.h;" void g_file_enumerator_set_pending (GFileEnumerator *enumerator, gboolean pending);"
g;g_file_equal;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_equal (GFile *file1, GFile *file2);"
g;g_file_error_from_errno;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" GFileError g_file_error_from_errno (gint err_no);"
g;g_file_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;"  GQuark g_file_error_quark (void);"
g;g_file_find_enclosing_mount;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GMount * g_file_find_enclosing_mount (GFile *file, GCancellable *cancellable, GError **error);"
g;g_file_find_enclosing_mount_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_find_enclosing_mount_async (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_find_enclosing_mount_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GMount * g_file_find_enclosing_mount_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_get_basename;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" char * g_file_get_basename (GFile *file);"
g;g_file_get_child;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_get_child (GFile *file, const char *name);"
g;g_file_get_child_for_display_name;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_get_child_for_display_name (GFile *file, const char *display_name, GError **error);"
g;g_file_get_contents_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gboolean g_file_get_contents_utf8 (const gchar *filename, gchar **contents, gsize *length, GError **error);"
g;g_file_get_parent;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_get_parent (GFile *file);"
g;g_file_get_parse_name;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" char * g_file_get_parse_name (GFile *file);"
g;g_file_get_path;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" char * g_file_get_path (GFile *file);"
g;g_file_get_relative_path;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" char * g_file_get_relative_path (GFile *parent, GFile *descendant);"
g;g_file_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;"  GType g_file_get_type (void) G_GNUC_CONST;"
g;g_file_get_uri;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" char * g_file_get_uri (GFile *file);"
g;g_file_get_uri_scheme;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" char * g_file_get_uri_scheme (GFile *file);"
g;g_file_has_parent;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_has_parent (GFile *file, GFile *parent);"
g;g_file_has_prefix;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_has_prefix (GFile *file, GFile *prefix);"
g;g_file_has_uri_scheme;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_has_uri_scheme (GFile *file, const char *uri_scheme);"
g;g_file_hash;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" guint g_file_hash (gconstpointer file);"
g;g_file_icon_get_file;glib-auto.f90;/usr/include/glib-2.0/gio/gfileicon.h;" GFile * g_file_icon_get_file (GFileIcon *icon);"
g;g_file_icon_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileicon.h;"  GType g_file_icon_get_type (void) G_GNUC_CONST;"
g;g_file_icon_new;glib-auto.f90;/usr/include/glib-2.0/gio/gfileicon.h;" GIcon * g_file_icon_new (GFile *file);"
g;g_file_info_clear_status;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_clear_status (GFileInfo *info);"
g;g_file_info_copy_into;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_copy_into (GFileInfo *src_info, GFileInfo *dest_info);"
g;g_file_info_dup;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GFileInfo * g_file_info_dup (GFileInfo *other);"
g;g_file_info_get_attribute_as_string;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" char * g_file_info_get_attribute_as_string (GFileInfo *info, const char *attribute);"
g;g_file_info_get_attribute_boolean;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gboolean g_file_info_get_attribute_boolean (GFileInfo *info, const char *attribute);"
g;g_file_info_get_attribute_byte_string;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" const char * g_file_info_get_attribute_byte_string (GFileInfo *info, const char *attribute);"
g;g_file_info_get_attribute_data;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gboolean g_file_info_get_attribute_data (GFileInfo *info, const char *attribute, GFileAttributeType *type, gpointer *value_pp, GFileAttributeStatus *status);"
g;g_file_info_get_attribute_int32;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gint32 g_file_info_get_attribute_int32 (GFileInfo *info, const char *attribute);"
g;g_file_info_get_attribute_int64;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gint64 g_file_info_get_attribute_int64 (GFileInfo *info, const char *attribute);"
g;g_file_info_get_attribute_object;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GObject * g_file_info_get_attribute_object (GFileInfo *info, const char *attribute);"
g;g_file_info_get_attribute_status;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GFileAttributeStatus g_file_info_get_attribute_status (GFileInfo *info, const char *attribute);"
g;g_file_info_get_attribute_string;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" const char * g_file_info_get_attribute_string (GFileInfo *info, const char *attribute);"
g;g_file_info_get_attribute_stringv;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" char ** g_file_info_get_attribute_stringv (GFileInfo *info, const char *attribute);"
g;g_file_info_get_attribute_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GFileAttributeType g_file_info_get_attribute_type (GFileInfo *info, const char *attribute);"
g;g_file_info_get_attribute_uint32;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" guint32 g_file_info_get_attribute_uint32 (GFileInfo *info, const char *attribute);"
g;g_file_info_get_attribute_uint64;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" guint64 g_file_info_get_attribute_uint64 (GFileInfo *info, const char *attribute);"
g;g_file_info_get_content_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" const char * g_file_info_get_content_type (GFileInfo *info);"
g;g_file_info_get_deletion_date;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GDateTime * g_file_info_get_deletion_date (GFileInfo *info);"
g;g_file_info_get_display_name;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" const char * g_file_info_get_display_name (GFileInfo *info);"
g;g_file_info_get_edit_name;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" const char * g_file_info_get_edit_name (GFileInfo *info);"
g;g_file_info_get_etag;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" const char * g_file_info_get_etag (GFileInfo *info);"
g;g_file_info_get_file_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GFileType g_file_info_get_file_type (GFileInfo *info);"
g;g_file_info_get_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GIcon * g_file_info_get_icon (GFileInfo *info);"
g;g_file_info_get_is_backup;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gboolean g_file_info_get_is_backup (GFileInfo *info);"
g;g_file_info_get_is_hidden;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gboolean g_file_info_get_is_hidden (GFileInfo *info);"
g;g_file_info_get_is_symlink;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gboolean g_file_info_get_is_symlink (GFileInfo *info);"
g;g_file_info_get_modification_time;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_get_modification_time (GFileInfo *info, GTimeVal *result);"
g;g_file_info_get_name;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" const char * g_file_info_get_name (GFileInfo *info);"
g;g_file_info_get_size;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" goffset g_file_info_get_size (GFileInfo *info);"
g;g_file_info_get_sort_order;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gint32 g_file_info_get_sort_order (GFileInfo *info);"
g;g_file_info_get_symbolic_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GIcon * g_file_info_get_symbolic_icon (GFileInfo *info);"
g;g_file_info_get_symlink_target;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" const char * g_file_info_get_symlink_target (GFileInfo *info);"
g;g_file_info_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;"  GType g_file_info_get_type (void) G_GNUC_CONST;"
g;g_file_info_has_attribute;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gboolean g_file_info_has_attribute (GFileInfo *info, const char *attribute);"
g;g_file_info_has_namespace;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gboolean g_file_info_has_namespace (GFileInfo *info, const char *name_space);"
g;g_file_info_list_attributes;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" char ** g_file_info_list_attributes (GFileInfo *info, const char *name_space);"
g;g_file_info_new;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" GFileInfo * g_file_info_new (void);"
g;g_file_info_remove_attribute;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_remove_attribute (GFileInfo *info, const char *attribute);"
g;g_file_info_set_attribute;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_attribute (GFileInfo *info, const char *attribute, GFileAttributeType type, gpointer value_p);"
g;g_file_info_set_attribute_boolean;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_attribute_boolean (GFileInfo *info, const char *attribute, gboolean attr_value);"
g;g_file_info_set_attribute_byte_string;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_attribute_byte_string (GFileInfo *info, const char *attribute, const char *attr_value);"
g;g_file_info_set_attribute_int32;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_attribute_int32 (GFileInfo *info, const char *attribute, gint32 attr_value);"
g;g_file_info_set_attribute_int64;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_attribute_int64 (GFileInfo *info, const char *attribute, gint64 attr_value);"
g;g_file_info_set_attribute_mask;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_attribute_mask (GFileInfo *info, GFileAttributeMatcher *mask);"
g;g_file_info_set_attribute_object;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_attribute_object (GFileInfo *info, const char *attribute, GObject *attr_value);"
g;g_file_info_set_attribute_status;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" gboolean g_file_info_set_attribute_status (GFileInfo *info, const char *attribute, GFileAttributeStatus status);"
g;g_file_info_set_attribute_string;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_attribute_string (GFileInfo *info, const char *attribute, const char *attr_value);"
g;g_file_info_set_attribute_stringv;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_attribute_stringv (GFileInfo *info, const char *attribute, char **attr_value);"
g;g_file_info_set_attribute_uint32;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_attribute_uint32 (GFileInfo *info, const char *attribute, guint32 attr_value);"
g;g_file_info_set_attribute_uint64;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_attribute_uint64 (GFileInfo *info, const char *attribute, guint64 attr_value);"
g;g_file_info_set_content_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_content_type (GFileInfo *info, const char *content_type);"
g;g_file_info_set_display_name;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_display_name (GFileInfo *info, const char *display_name);"
g;g_file_info_set_edit_name;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_edit_name (GFileInfo *info, const char *edit_name);"
g;g_file_info_set_file_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_file_type (GFileInfo *info, GFileType type);"
g;g_file_info_set_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_icon (GFileInfo *info, GIcon *icon);"
g;g_file_info_set_is_hidden;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_is_hidden (GFileInfo *info, gboolean is_hidden);"
g;g_file_info_set_is_symlink;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_is_symlink (GFileInfo *info, gboolean is_symlink);"
g;g_file_info_set_modification_time;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_modification_time (GFileInfo *info, GTimeVal *mtime);"
g;g_file_info_set_name;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_name (GFileInfo *info, const char *name);"
g;g_file_info_set_size;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_size (GFileInfo *info, goffset size);"
g;g_file_info_set_sort_order;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_sort_order (GFileInfo *info, gint32 sort_order);"
g;g_file_info_set_symbolic_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_symbolic_icon (GFileInfo *info, GIcon *icon);"
g;g_file_info_set_symlink_target;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_set_symlink_target (GFileInfo *info, const char *symlink_target);"
g;g_file_info_unset_attribute_mask;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinfo.h;" void g_file_info_unset_attribute_mask (GFileInfo *info);"
g;g_file_input_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinputstream.h;"  GType g_file_input_stream_get_type (void) G_GNUC_CONST;"
g;g_file_input_stream_query_info;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinputstream.h;" GFileInfo *g_file_input_stream_query_info (GFileInputStream *stream, const char *attributes, GCancellable *cancellable, GError **error);"
g;g_file_input_stream_query_info_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinputstream.h;" void g_file_input_stream_query_info_async (GFileInputStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_input_stream_query_info_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfileinputstream.h;" GFileInfo *g_file_input_stream_query_info_finish (GFileInputStream *stream, GAsyncResult *result, GError **error);"
g;g_file_io_stream_get_etag;glib-auto.f90;/usr/include/glib-2.0/gio/gfileiostream.h;" char * g_file_io_stream_get_etag (GFileIOStream *stream);"
g;g_file_io_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileiostream.h;"  GType g_file_io_stream_get_type (void) G_GNUC_CONST;"
g;g_file_io_stream_query_info;glib-auto.f90;/usr/include/glib-2.0/gio/gfileiostream.h;" GFileInfo *g_file_io_stream_query_info (GFileIOStream *stream, const char *attributes, GCancellable *cancellable, GError **error);"
g;g_file_io_stream_query_info_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfileiostream.h;" void g_file_io_stream_query_info_async (GFileIOStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_io_stream_query_info_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfileiostream.h;" GFileInfo *g_file_io_stream_query_info_finish (GFileIOStream *stream, GAsyncResult *result, GError **error);"
g;g_file_is_native;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_is_native (GFile *file);"
g;g_file_load_contents;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_load_contents (GFile *file, GCancellable *cancellable, char **contents, gsize *length, char **etag_out, GError **error);"
g;g_file_load_contents_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_load_contents_async (GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_load_contents_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_load_contents_finish (GFile *file, GAsyncResult *res, char **contents, gsize *length, char **etag_out, GError **error);"
g;g_file_load_partial_contents_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_load_partial_contents_async (GFile *file, GCancellable *cancellable, GFileReadMoreCallback read_more_callback, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_load_partial_contents_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_load_partial_contents_finish (GFile *file, GAsyncResult *res, char **contents, gsize *length, char **etag_out, GError **error);"
g;g_file_make_directory;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_make_directory (GFile *file, GCancellable *cancellable, GError **error);"
g;g_file_make_directory_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_make_directory_async (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_make_directory_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_make_directory_finish (GFile *file, GAsyncResult *result, GError **error);"
g;g_file_make_directory_with_parents;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_make_directory_with_parents (GFile *file, GCancellable *cancellable, GError **error);"
g;g_file_make_symbolic_link;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_make_symbolic_link (GFile *file, const char *symlink_value, GCancellable *cancellable, GError **error);"
g;g_file_measure_disk_usage;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_measure_disk_usage (GFile *file, GFileMeasureFlags flags, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error);"
g;g_file_measure_disk_usage_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_measure_disk_usage_async (GFile *file, GFileMeasureFlags flags, gint io_priority, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_measure_disk_usage_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_measure_disk_usage_finish (GFile *file, GAsyncResult *result, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error);"
g;g_file_monitor;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileMonitor* g_file_monitor (GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_monitor_cancel;glib-auto.f90;/usr/include/glib-2.0/gio/gfilemonitor.h;" gboolean g_file_monitor_cancel (GFileMonitor *monitor);"
g;g_file_monitor_directory;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileMonitor* g_file_monitor_directory (GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_monitor_emit_event;glib-auto.f90;/usr/include/glib-2.0/gio/gfilemonitor.h;" void g_file_monitor_emit_event (GFileMonitor *monitor, GFile *child, GFile *other_file, GFileMonitorEvent event_type);"
g;g_file_monitor_file;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileMonitor* g_file_monitor_file (GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_monitor_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfilemonitor.h;"  GType g_file_monitor_get_type (void) G_GNUC_CONST;"
g;g_file_monitor_is_cancelled;glib-auto.f90;/usr/include/glib-2.0/gio/gfilemonitor.h;" gboolean g_file_monitor_is_cancelled (GFileMonitor *monitor);"
g;g_file_monitor_set_rate_limit;glib-auto.f90;/usr/include/glib-2.0/gio/gfilemonitor.h;" void g_file_monitor_set_rate_limit (GFileMonitor *monitor, gint limit_msecs);"
g;g_file_mount_enclosing_volume;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_mount_enclosing_volume (GFile *location, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_mount_enclosing_volume_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_mount_enclosing_volume_finish (GFile *location, GAsyncResult *result, GError **error);"
g;g_file_mount_mountable;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_mount_mountable (GFile *file, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_mount_mountable_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_mount_mountable_finish (GFile *file, GAsyncResult *result, GError **error);"
g;g_file_move;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_move (GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error);"
g;g_file_new_for_commandline_arg;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_new_for_commandline_arg (const char *arg);"
g;g_file_new_for_commandline_arg_and_cwd;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_new_for_commandline_arg_and_cwd (const gchar *arg, const gchar *cwd);"
g;g_file_new_for_path;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_new_for_path (const char *path);"
g;g_file_new_for_uri;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_new_for_uri (const char *uri);"
g;g_file_new_tmp;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_new_tmp (const char *tmpl, GFileIOStream **iostream, GError **error);"
g;g_file_open_readwrite;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileIOStream * g_file_open_readwrite (GFile *file, GCancellable *cancellable, GError **error);"
g;g_file_open_readwrite_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_open_readwrite_async (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_open_readwrite_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileIOStream * g_file_open_readwrite_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_open_tmp_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gint g_file_open_tmp_utf8 (const gchar *tmpl, gchar **name_used, GError **error);"
g;g_file_output_stream_get_etag;glib-auto.f90;/usr/include/glib-2.0/gio/gfileoutputstream.h;" char * g_file_output_stream_get_etag (GFileOutputStream *stream);"
g;g_file_output_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfileoutputstream.h;"  GType g_file_output_stream_get_type (void) G_GNUC_CONST;"
g;g_file_output_stream_query_info;glib-auto.f90;/usr/include/glib-2.0/gio/gfileoutputstream.h;" GFileInfo *g_file_output_stream_query_info (GFileOutputStream *stream, const char *attributes, GCancellable *cancellable, GError **error);"
g;g_file_output_stream_query_info_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfileoutputstream.h;" void g_file_output_stream_query_info_async (GFileOutputStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_output_stream_query_info_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfileoutputstream.h;" GFileInfo *g_file_output_stream_query_info_finish (GFileOutputStream *stream, GAsyncResult *result, GError **error);"
g;g_file_parse_name;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_parse_name (const char *parse_name);"
g;g_file_poll_mountable;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_poll_mountable (GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_poll_mountable_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_poll_mountable_finish (GFile *file, GAsyncResult *result, GError **error);"
g;g_file_query_default_handler;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GAppInfo *g_file_query_default_handler (GFile *file, GCancellable *cancellable, GError **error);"
g;g_file_query_exists;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_query_exists (GFile *file, GCancellable *cancellable);"
g;g_file_query_file_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileType g_file_query_file_type (GFile *file, GFileQueryInfoFlags flags, GCancellable *cancellable);"
g;g_file_query_filesystem_info;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileInfo * g_file_query_filesystem_info (GFile *file, const char *attributes, GCancellable *cancellable, GError **error);"
g;g_file_query_filesystem_info_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_query_filesystem_info_async (GFile *file, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_query_filesystem_info_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileInfo * g_file_query_filesystem_info_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_query_info;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileInfo * g_file_query_info (GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_query_info_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_query_info_async (GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_query_info_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileInfo * g_file_query_info_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_query_settable_attributes;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileAttributeInfoList *g_file_query_settable_attributes (GFile *file, GCancellable *cancellable, GError **error);"
g;g_file_query_writable_namespaces;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileAttributeInfoList *g_file_query_writable_namespaces (GFile *file, GCancellable *cancellable, GError **error);"
g;g_file_read;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileInputStream * g_file_read (GFile *file, GCancellable *cancellable, GError **error);"
g;g_file_read_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_read_async (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_read_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileInputStream * g_file_read_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_read_link;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gchar *g_file_read_link (const gchar *filename, GError **error);"
g;g_file_replace;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileOutputStream * g_file_replace (GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_replace_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_replace_async (GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_replace_contents;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_replace_contents (GFile *file, const char *contents, gsize length, const char *etag, gboolean make_backup, GFileCreateFlags flags, char **new_etag, GCancellable *cancellable, GError **error);"
g;g_file_replace_contents_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_replace_contents_async (GFile *file, const char *contents, gsize length, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_replace_contents_bytes_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_replace_contents_bytes_async (GFile *file, GBytes *contents, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_replace_contents_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_replace_contents_finish (GFile *file, GAsyncResult *res, char **new_etag, GError **error);"
g;g_file_replace_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileOutputStream * g_file_replace_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_replace_readwrite;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileIOStream * g_file_replace_readwrite (GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_replace_readwrite_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_replace_readwrite_async (GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_replace_readwrite_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFileIOStream * g_file_replace_readwrite_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_resolve_relative_path;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_resolve_relative_path (GFile *file, const char *relative_path);"
g;g_file_set_attribute;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_set_attribute (GFile *file, const char *attribute, GFileAttributeType type, gpointer value_p, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_set_attribute_byte_string;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_set_attribute_byte_string (GFile *file, const char *attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_set_attribute_int32;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_set_attribute_int32 (GFile *file, const char *attribute, gint32 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_set_attribute_int64;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_set_attribute_int64 (GFile *file, const char *attribute, gint64 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_set_attribute_string;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_set_attribute_string (GFile *file, const char *attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_set_attribute_uint32;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_set_attribute_uint32 (GFile *file, const char *attribute, guint32 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_set_attribute_uint64;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_set_attribute_uint64 (GFile *file, const char *attribute, guint64 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_set_attributes_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_set_attributes_async (GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_set_attributes_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_set_attributes_finish (GFile *file, GAsyncResult *result, GFileInfo **info, GError **error);"
g;g_file_set_attributes_from_info;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_set_attributes_from_info (GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);"
g;g_file_set_contents;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gboolean g_file_set_contents (const gchar *filename, const gchar *contents, gssize length, GError **error);"
g;g_file_set_display_name;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_set_display_name (GFile *file, const char *display_name, GCancellable *cancellable, GError **error);"
g;g_file_set_display_name_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_set_display_name_async (GFile *file, const char *display_name, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_set_display_name_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" GFile * g_file_set_display_name_finish (GFile *file, GAsyncResult *res, GError **error);"
g;g_file_start_mountable;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_start_mountable (GFile *file, GDriveStartFlags flags, GMountOperation *start_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_start_mountable_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_start_mountable_finish (GFile *file, GAsyncResult *result, GError **error);"
g;g_file_stop_mountable;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_stop_mountable (GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_stop_mountable_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_stop_mountable_finish (GFile *file, GAsyncResult *result, GError **error);"
g;g_file_supports_thread_contexts;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_supports_thread_contexts (GFile *file);"
g;g_file_test_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gboolean g_file_test_utf8 (const gchar *filename, GFileTest test);"
g;g_file_trash;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_trash (GFile *file, GCancellable *cancellable, GError **error);"
g;g_file_trash_async;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_trash_async (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_trash_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_trash_finish (GFile *file, GAsyncResult *result, GError **error);"
g;g_file_unmount_mountable;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_unmount_mountable (GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_unmount_mountable_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_unmount_mountable_finish (GFile *file, GAsyncResult *result, GError **error);"
g;g_file_unmount_mountable_with_operation;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" void g_file_unmount_mountable_with_operation (GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_file_unmount_mountable_with_operation_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gfile.h;" gboolean g_file_unmount_mountable_with_operation_finish (GFile *file, GAsyncResult *result, GError **error);"
g;g_filename_completer_get_completion_suffix;glib-auto.f90;/usr/include/glib-2.0/gio/gfilenamecompleter.h;" char * g_filename_completer_get_completion_suffix (GFilenameCompleter *completer, const char *initial_text);"
g;g_filename_completer_get_completions;glib-auto.f90;/usr/include/glib-2.0/gio/gfilenamecompleter.h;" char ** g_filename_completer_get_completions (GFilenameCompleter *completer, const char *initial_text);"
g;g_filename_completer_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfilenamecompleter.h;"  GType g_filename_completer_get_type (void) G_GNUC_CONST;"
g;g_filename_completer_new;glib-auto.f90;/usr/include/glib-2.0/gio/gfilenamecompleter.h;" GFilenameCompleter *g_filename_completer_new (void);"
g;g_filename_completer_set_dirs_only;glib-auto.f90;/usr/include/glib-2.0/gio/gfilenamecompleter.h;" void g_filename_completer_set_dirs_only (GFilenameCompleter *completer, gboolean dirs_only);"
g;g_filename_display_basename;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar *g_filename_display_basename (const gchar *filename) G_GNUC_MALLOC;"
g;g_filename_display_name;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar *g_filename_display_name (const gchar *filename) G_GNUC_MALLOC;"
g;g_filename_from_uri_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar *g_filename_from_uri_utf8 (const gchar *uri, gchar **hostname, GError **error) G_GNUC_MALLOC;"
g;g_filename_from_utf8_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar* g_filename_from_utf8_utf8 (const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error) G_GNUC_MALLOC;"
g;g_filename_to_uri_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar *g_filename_to_uri_utf8 (const gchar *filename, const gchar *hostname, GError **error) G_GNUC_MALLOC;"
g;g_filename_to_utf8_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar* g_filename_to_utf8_utf8 (const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error) G_GNUC_MALLOC;"
g;g_filter_input_stream_get_base_stream;glib-auto.f90;/usr/include/glib-2.0/gio/gfilterinputstream.h;" GInputStream * g_filter_input_stream_get_base_stream (GFilterInputStream *stream);"
g;g_filter_input_stream_get_close_base_stream;glib-auto.f90;/usr/include/glib-2.0/gio/gfilterinputstream.h;" gboolean g_filter_input_stream_get_close_base_stream (GFilterInputStream *stream);"
g;g_filter_input_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfilterinputstream.h;"  GType g_filter_input_stream_get_type (void) G_GNUC_CONST;"
g;g_filter_input_stream_set_close_base_stream;glib-auto.f90;/usr/include/glib-2.0/gio/gfilterinputstream.h;" void g_filter_input_stream_set_close_base_stream (GFilterInputStream *stream, gboolean close_base);"
g;g_filter_output_stream_get_base_stream;glib-auto.f90;/usr/include/glib-2.0/gio/gfilteroutputstream.h;" GOutputStream * g_filter_output_stream_get_base_stream (GFilterOutputStream *stream);"
g;g_filter_output_stream_get_close_base_stream;glib-auto.f90;/usr/include/glib-2.0/gio/gfilteroutputstream.h;" gboolean g_filter_output_stream_get_close_base_stream (GFilterOutputStream *stream);"
g;g_filter_output_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gfilteroutputstream.h;"  GType g_filter_output_stream_get_type (void) G_GNUC_CONST;"
g;g_filter_output_stream_set_close_base_stream;glib-auto.f90;/usr/include/glib-2.0/gio/gfilteroutputstream.h;" void g_filter_output_stream_set_close_base_stream (GFilterOutputStream *stream, gboolean close_base);"
g;g_find_program_in_path;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" gchar* g_find_program_in_path (const gchar *program);"
g;g_flags_complete_type_info;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" void g_flags_complete_type_info (GType g_flags_type, GTypeInfo *info, const GFlagsValue *const_values);"
g;g_flags_get_first_value;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" GFlagsValue* g_flags_get_first_value (GFlagsClass *flags_class, guint value);"
g;g_flags_get_value_by_name;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" GFlagsValue* g_flags_get_value_by_name (GFlagsClass *flags_class, const gchar *name);"
g;g_flags_get_value_by_nick;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" GFlagsValue* g_flags_get_value_by_nick (GFlagsClass *flags_class, const gchar *nick);"
g;g_flags_register_static;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" GType g_flags_register_static (const gchar *name, const GFlagsValue *const_static_values);"
g;g_format_size;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" gchar *g_format_size (guint64 size);"
g;g_format_size_for_display;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" gchar *g_format_size_for_display (goffset size);"
g;g_format_size_full;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" gchar *g_format_size_full (guint64 size, GFormatSizeFlags flags);"
g;g_fprintf;glib-auto.f90;/usr/include/glib-2.0/glib/gprintf.h;" gint g_fprintf (FILE *file, gchar const *format, ...) G_GNUC_PRINTF (2, 3);"
g;g_free;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;"  void g_free (gpointer mem);"
g;g_get_application_name;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * g_get_application_name (void);"
g;g_get_charset;glib-auto.f90;/usr/include/glib-2.0/glib/gcharset.h;"  gboolean g_get_charset (const char **charset);"
g;g_get_codeset;glib-auto.f90;/usr/include/glib-2.0/glib/gcharset.h;" gchar * g_get_codeset (void);"
g;g_get_current_dir_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gchar *g_get_current_dir_utf8 (void);"
g;g_get_current_time;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_get_current_time (GTimeVal *result);"
g;g_get_environ;glib-auto.f90;/usr/include/glib-2.0/glib/genviron.h;" gchar ** g_get_environ (void);"
g;g_get_filename_charsets;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gboolean g_get_filename_charsets (const gchar ***charsets);"
g;g_get_home_dir;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * g_get_home_dir (void);"
g;g_get_host_name;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * g_get_host_name (void);"
g;g_get_language_names;glib-auto.f90;/usr/include/glib-2.0/glib/gcharset.h;" const gchar * const * g_get_language_names (void);"
g;g_get_locale_variants;glib-auto.f90;/usr/include/glib-2.0/glib/gcharset.h;" gchar ** g_get_locale_variants (const gchar *locale);"
g;g_get_monotonic_time;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gint64 g_get_monotonic_time (void);"
g;g_get_num_processors;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" guint g_get_num_processors (void);"
g;g_get_prgname;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * g_get_prgname (void);"
g;g_get_real_name;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * g_get_real_name (void);"
g;g_get_real_time;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gint64 g_get_real_time (void);"
g;g_get_system_data_dirs;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * const * g_get_system_data_dirs (void);"
g;g_get_tmp_dir;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * g_get_tmp_dir (void);"
g;g_get_user_cache_dir;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * g_get_user_cache_dir (void);"
g;g_get_user_config_dir;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * g_get_user_config_dir (void);"
g;g_get_user_data_dir;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * g_get_user_data_dir (void);"
g;g_get_user_name;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;"  const gchar * g_get_user_name (void);"
g;g_get_user_runtime_dir;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * g_get_user_runtime_dir (void);"
g;g_get_user_special_dir;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * g_get_user_special_dir (GUserDirectory directory);"
g;g_getenv_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/genviron.h;" const gchar *g_getenv_utf8 (const gchar *variable);"
g;g_gstring_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_gstring_get_type (void) G_GNUC_CONST;"
g;g_gtype_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" GType g_gtype_get_type (void);"
g;g_hash_table_add;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_hash_table_add (GHashTable *hash_table, gpointer key);"
g;g_hash_table_contains;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_hash_table_contains (GHashTable *hash_table, gconstpointer key);"
g;g_hash_table_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" void g_hash_table_destroy (GHashTable *hash_table);"
g;g_hash_table_find;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gpointer g_hash_table_find (GHashTable *hash_table, GHRFunc predicate, gpointer user_data);"
g;g_hash_table_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" void g_hash_table_foreach (GHashTable *hash_table, GHFunc func, gpointer user_data);"
g;g_hash_table_foreach_remove;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" guint g_hash_table_foreach_remove (GHashTable *hash_table, GHRFunc func, gpointer user_data);"
g;g_hash_table_foreach_steal;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" guint g_hash_table_foreach_steal (GHashTable *hash_table, GHRFunc func, gpointer user_data);"
g;g_hash_table_get_keys;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" GList * g_hash_table_get_keys (GHashTable *hash_table);"
g;g_hash_table_get_keys_as_array;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gpointer * g_hash_table_get_keys_as_array (GHashTable *hash_table, guint *length);"
g;g_hash_table_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_hash_table_get_type (void) G_GNUC_CONST;"
g;g_hash_table_get_values;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" GList * g_hash_table_get_values (GHashTable *hash_table);"
g;g_hash_table_insert;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_hash_table_insert (GHashTable *hash_table, gpointer key, gpointer value);"
g;g_hash_table_iter_get_hash_table;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" GHashTable* g_hash_table_iter_get_hash_table (GHashTableIter *iter);"
g;g_hash_table_iter_init;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" void g_hash_table_iter_init (GHashTableIter *iter, GHashTable *hash_table);"
g;g_hash_table_iter_next;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_hash_table_iter_next (GHashTableIter *iter, gpointer *key, gpointer *value);"
g;g_hash_table_iter_remove;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" void g_hash_table_iter_remove (GHashTableIter *iter);"
g;g_hash_table_iter_replace;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" void g_hash_table_iter_replace (GHashTableIter *iter, gpointer value);"
g;g_hash_table_iter_steal;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" void g_hash_table_iter_steal (GHashTableIter *iter);"
g;g_hash_table_lookup;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gpointer g_hash_table_lookup (GHashTable *hash_table, gconstpointer key);"
g;g_hash_table_lookup_extended;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_hash_table_lookup_extended (GHashTable *hash_table, gconstpointer lookup_key, gpointer *orig_key, gpointer *value);"
g;g_hash_table_new;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;"  GHashTable* g_hash_table_new (GHashFunc hash_func, GEqualFunc key_equal_func);"
g;g_hash_table_new_full;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" GHashTable* g_hash_table_new_full (GHashFunc hash_func, GEqualFunc key_equal_func, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func);"
g;g_hash_table_ref;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" GHashTable* g_hash_table_ref (GHashTable *hash_table);"
g;g_hash_table_remove;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_hash_table_remove (GHashTable *hash_table, gconstpointer key);"
g;g_hash_table_remove_all;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" void g_hash_table_remove_all (GHashTable *hash_table);"
g;g_hash_table_replace;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_hash_table_replace (GHashTable *hash_table, gpointer key, gpointer value);"
g;g_hash_table_size;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" guint g_hash_table_size (GHashTable *hash_table);"
g;g_hash_table_steal;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_hash_table_steal (GHashTable *hash_table, gconstpointer key);"
g;g_hash_table_steal_all;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" void g_hash_table_steal_all (GHashTable *hash_table);"
g;g_hash_table_unref;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" void g_hash_table_unref (GHashTable *hash_table);"
g;g_hmac_copy;glib-auto.f90;/usr/include/glib-2.0/glib/ghmac.h;" GHmac * g_hmac_copy (const GHmac *hmac);"
g;g_hmac_get_digest;glib-auto.f90;/usr/include/glib-2.0/glib/ghmac.h;" void g_hmac_get_digest (GHmac *hmac, guint8 *buffer, gsize *digest_len);"
g;g_hmac_get_string;glib-auto.f90;/usr/include/glib-2.0/glib/ghmac.h;" const gchar * g_hmac_get_string (GHmac *hmac);"
g;g_hmac_new;glib-auto.f90;/usr/include/glib-2.0/glib/ghmac.h;"  GHmac * g_hmac_new (GChecksumType digest_type, const guchar *key, gsize key_len);"
g;g_hmac_ref;glib-auto.f90;/usr/include/glib-2.0/glib/ghmac.h;" GHmac * g_hmac_ref (GHmac *hmac);"
g;g_hmac_unref;glib-auto.f90;/usr/include/glib-2.0/glib/ghmac.h;" void g_hmac_unref (GHmac *hmac);"
g;g_hmac_update;glib-auto.f90;/usr/include/glib-2.0/glib/ghmac.h;" void g_hmac_update (GHmac *hmac, const guchar *data, gssize length);"
g;g_hook_alloc;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" GHook* g_hook_alloc (GHookList *hook_list);"
g;g_hook_compare_ids;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" gint g_hook_compare_ids (GHook *new_hook, GHook *sibling);"
g;g_hook_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" gboolean g_hook_destroy (GHookList *hook_list, gulong hook_id);"
g;g_hook_destroy_link;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" void g_hook_destroy_link (GHookList *hook_list, GHook *hook);"
g;g_hook_find;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" GHook* g_hook_find (GHookList *hook_list, gboolean need_valids, GHookFindFunc func, gpointer data);"
g;g_hook_find_data;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" GHook* g_hook_find_data (GHookList *hook_list, gboolean need_valids, gpointer data);"
g;g_hook_find_func;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" GHook* g_hook_find_func (GHookList *hook_list, gboolean need_valids, gpointer func);"
g;g_hook_find_func_data;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" GHook* g_hook_find_func_data (GHookList *hook_list, gboolean need_valids, gpointer func, gpointer data);"
g;g_hook_first_valid;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" GHook* g_hook_first_valid (GHookList *hook_list, gboolean may_be_in_call);"
g;g_hook_free;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" void g_hook_free (GHookList *hook_list, GHook *hook);"
g;g_hook_get;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" GHook* g_hook_get (GHookList *hook_list, gulong hook_id);"
g;g_hook_insert_before;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" void g_hook_insert_before (GHookList *hook_list, GHook *sibling, GHook *hook);"
g;g_hook_insert_sorted;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" void g_hook_insert_sorted (GHookList *hook_list, GHook *hook, GHookCompareFunc func);"
g;g_hook_list_clear;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" void g_hook_list_clear (GHookList *hook_list);"
g;g_hook_list_init;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;"  void g_hook_list_init (GHookList *hook_list, guint hook_size);"
g;g_hook_list_invoke;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" void g_hook_list_invoke (GHookList *hook_list, gboolean may_recurse);"
g;g_hook_list_invoke_check;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" void g_hook_list_invoke_check (GHookList *hook_list, gboolean may_recurse);"
g;g_hook_list_marshal;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" void g_hook_list_marshal (GHookList *hook_list, gboolean may_recurse, GHookMarshaller marshaller, gpointer marshal_data);"
g;g_hook_list_marshal_check;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" void g_hook_list_marshal_check (GHookList *hook_list, gboolean may_recurse, GHookCheckMarshaller marshaller, gpointer marshal_data);"
g;g_hook_next_valid;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" GHook* g_hook_next_valid (GHookList *hook_list, GHook *hook, gboolean may_be_in_call);"
g;g_hook_prepend;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" void g_hook_prepend (GHookList *hook_list, GHook *hook);"
g;g_hook_ref;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" GHook * g_hook_ref (GHookList *hook_list, GHook *hook);"
g;g_hook_unref;glib-auto.f90;/usr/include/glib-2.0/glib/ghook.h;" void g_hook_unref (GHookList *hook_list, GHook *hook);"
g;g_hostname_is_ascii_encoded;glib-auto.f90;/usr/include/glib-2.0/glib/ghostutils.h;" gboolean g_hostname_is_ascii_encoded (const gchar *hostname);"
g;g_hostname_is_ip_address;glib-auto.f90;/usr/include/glib-2.0/glib/ghostutils.h;" gboolean g_hostname_is_ip_address (const gchar *hostname);"
g;g_hostname_is_non_ascii;glib-auto.f90;/usr/include/glib-2.0/glib/ghostutils.h;"  gboolean g_hostname_is_non_ascii (const gchar *hostname);"
g;g_hostname_to_ascii;glib-auto.f90;/usr/include/glib-2.0/glib/ghostutils.h;" gchar *g_hostname_to_ascii (const gchar *hostname);"
g;g_hostname_to_unicode;glib-auto.f90;/usr/include/glib-2.0/glib/ghostutils.h;" gchar *g_hostname_to_unicode (const gchar *hostname);"
g;g_icon_deserialize;glib-auto.f90;/usr/include/glib-2.0/gio/gicon.h;" GIcon * g_icon_deserialize (GVariant *value);"
g;g_icon_equal;glib-auto.f90;/usr/include/glib-2.0/gio/gicon.h;" gboolean g_icon_equal (GIcon *icon1, GIcon *icon2);"
g;g_icon_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gicon.h;"  GType g_icon_get_type (void) G_GNUC_CONST;"
g;g_icon_hash;glib-auto.f90;/usr/include/glib-2.0/gio/gicon.h;" guint g_icon_hash (gconstpointer icon);"
g;g_icon_new_for_string;glib-auto.f90;/usr/include/glib-2.0/gio/gicon.h;" GIcon *g_icon_new_for_string (const gchar *str, GError **error);"
g;g_icon_serialize;glib-auto.f90;/usr/include/glib-2.0/gio/gicon.h;" GVariant * g_icon_serialize (GIcon *icon);"
g;g_icon_to_string;glib-auto.f90;/usr/include/glib-2.0/gio/gicon.h;" gchar *g_icon_to_string (GIcon *icon);"
g;g_iconv;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gsize g_iconv (GIConv converter, gchar **inbuf, gsize *inbytes_left, gchar **outbuf, gsize *outbytes_left);"
g;g_iconv_close;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gint g_iconv_close (GIConv converter);"
g;g_iconv_open;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" GIConv g_iconv_open (const gchar *to_codeset, const gchar *from_codeset);"
g;g_idle_add;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" guint g_idle_add (GSourceFunc function, gpointer data);"
g;g_idle_add_full;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" guint g_idle_add_full (gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);"
g;g_idle_remove_by_data;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_idle_remove_by_data (gpointer data);"
g;g_idle_source_new;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;"   GSource *g_idle_source_new (void);"
g;g_inet_address_equal;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gboolean g_inet_address_equal (GInetAddress *address, GInetAddress *other_address);"
g;g_inet_address_get_family;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" GSocketFamily g_inet_address_get_family (GInetAddress *address);"
g;g_inet_address_get_is_any;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gboolean g_inet_address_get_is_any (GInetAddress *address);"
g;g_inet_address_get_is_link_local;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gboolean g_inet_address_get_is_link_local (GInetAddress *address);"
g;g_inet_address_get_is_loopback;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gboolean g_inet_address_get_is_loopback (GInetAddress *address);"
g;g_inet_address_get_is_mc_global;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gboolean g_inet_address_get_is_mc_global (GInetAddress *address);"
g;g_inet_address_get_is_mc_link_local;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gboolean g_inet_address_get_is_mc_link_local (GInetAddress *address);"
g;g_inet_address_get_is_mc_node_local;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gboolean g_inet_address_get_is_mc_node_local (GInetAddress *address);"
g;g_inet_address_get_is_mc_org_local;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gboolean g_inet_address_get_is_mc_org_local (GInetAddress *address);"
g;g_inet_address_get_is_mc_site_local;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gboolean g_inet_address_get_is_mc_site_local (GInetAddress *address);"
g;g_inet_address_get_is_multicast;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gboolean g_inet_address_get_is_multicast (GInetAddress *address);"
g;g_inet_address_get_is_site_local;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gboolean g_inet_address_get_is_site_local (GInetAddress *address);"
g;g_inet_address_get_native_size;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gsize g_inet_address_get_native_size (GInetAddress *address);"
g;g_inet_address_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;"  GType g_inet_address_get_type (void) G_GNUC_CONST;"
g;g_inet_address_mask_equal;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddressmask.h;" gboolean g_inet_address_mask_equal (GInetAddressMask *mask, GInetAddressMask *mask2);"
g;g_inet_address_mask_get_address;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddressmask.h;" GInetAddress *g_inet_address_mask_get_address (GInetAddressMask *mask);"
g;g_inet_address_mask_get_family;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddressmask.h;" GSocketFamily g_inet_address_mask_get_family (GInetAddressMask *mask);"
g;g_inet_address_mask_get_length;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddressmask.h;" guint g_inet_address_mask_get_length (GInetAddressMask *mask);"
g;g_inet_address_mask_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddressmask.h;"  GType g_inet_address_mask_get_type (void) G_GNUC_CONST;"
g;g_inet_address_mask_matches;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddressmask.h;" gboolean g_inet_address_mask_matches (GInetAddressMask *mask, GInetAddress *address);"
g;g_inet_address_mask_new;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddressmask.h;" GInetAddressMask *g_inet_address_mask_new (GInetAddress *addr, guint length, GError **error);"
g;g_inet_address_mask_new_from_string;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddressmask.h;" GInetAddressMask *g_inet_address_mask_new_from_string (const gchar *mask_string, GError **error);"
g;g_inet_address_mask_to_string;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddressmask.h;" gchar *g_inet_address_mask_to_string (GInetAddressMask *mask);"
g;g_inet_address_new_any;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" GInetAddress * g_inet_address_new_any (GSocketFamily family);"
g;g_inet_address_new_from_bytes;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" GInetAddress * g_inet_address_new_from_bytes (const guint8 *bytes, GSocketFamily family);"
g;g_inet_address_new_from_string;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" GInetAddress * g_inet_address_new_from_string (const gchar *string);"
g;g_inet_address_new_loopback;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" GInetAddress * g_inet_address_new_loopback (GSocketFamily family);"
g;g_inet_address_to_bytes;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" const guint8 * g_inet_address_to_bytes (GInetAddress *address);"
g;g_inet_address_to_string;glib-auto.f90;/usr/include/glib-2.0/gio/ginetaddress.h;" gchar * g_inet_address_to_string (GInetAddress *address);"
g;g_inet_socket_address_get_address;glib-auto.f90;/usr/include/glib-2.0/gio/ginetsocketaddress.h;" GInetAddress * g_inet_socket_address_get_address (GInetSocketAddress *address);"
g;g_inet_socket_address_get_flowinfo;glib-auto.f90;/usr/include/glib-2.0/gio/ginetsocketaddress.h;" guint32 g_inet_socket_address_get_flowinfo (GInetSocketAddress *address);"
g;g_inet_socket_address_get_port;glib-auto.f90;/usr/include/glib-2.0/gio/ginetsocketaddress.h;" guint16 g_inet_socket_address_get_port (GInetSocketAddress *address);"
g;g_inet_socket_address_get_scope_id;glib-auto.f90;/usr/include/glib-2.0/gio/ginetsocketaddress.h;" guint32 g_inet_socket_address_get_scope_id (GInetSocketAddress *address);"
g;g_inet_socket_address_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/ginetsocketaddress.h;"  GType g_inet_socket_address_get_type (void) G_GNUC_CONST;"
g;g_inet_socket_address_new;glib-auto.f90;/usr/include/glib-2.0/gio/ginetsocketaddress.h;" GSocketAddress *g_inet_socket_address_new (GInetAddress *address, guint16 port);"
g;g_inet_socket_address_new_from_string;glib-auto.f90;/usr/include/glib-2.0/gio/ginetsocketaddress.h;" GSocketAddress *g_inet_socket_address_new_from_string (const char *address, guint port);"
g;g_initable_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/ginitable.h;"  GType g_initable_get_type (void) G_GNUC_CONST;"
g;g_initable_init;glib-auto.f90;/usr/include/glib-2.0/gio/ginitable.h;" gboolean g_initable_init (GInitable *initable, GCancellable *cancellable, GError **error);"
g;g_initable_new_valist;glib-auto.f90;/usr/include/glib-2.0/gio/ginitable.h;" GObject* g_initable_new_valist (GType object_type, const gchar *first_property_name, va_list var_args, GCancellable *cancellable, GError **error);"
g;g_initable_newv;glib-auto.f90;/usr/include/glib-2.0/gio/ginitable.h;" gpointer g_initable_newv (GType object_type, guint n_parameters, GParameter *parameters, GCancellable *cancellable, GError **error);"
g;g_initially_unowned_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;"  GType g_initially_unowned_get_type (void);"
g;g_input_stream_clear_pending;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" void g_input_stream_clear_pending (GInputStream *stream);"
g;g_input_stream_close;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" gboolean g_input_stream_close (GInputStream *stream, GCancellable *cancellable, GError **error);"
g;g_input_stream_close_async;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" void g_input_stream_close_async (GInputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_input_stream_close_finish;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" gboolean g_input_stream_close_finish (GInputStream *stream, GAsyncResult *result, GError **error);"
g;g_input_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;"  GType g_input_stream_get_type (void) G_GNUC_CONST;"
g;g_input_stream_has_pending;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" gboolean g_input_stream_has_pending (GInputStream *stream);"
g;g_input_stream_is_closed;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" gboolean g_input_stream_is_closed (GInputStream *stream);"
g;g_input_stream_read;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" gssize g_input_stream_read (GInputStream *stream, void *buffer, gsize count, GCancellable *cancellable, GError **error);"
g;g_input_stream_read_all;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" gboolean g_input_stream_read_all (GInputStream *stream, void *buffer, gsize count, gsize *bytes_read, GCancellable *cancellable, GError **error);"
g;g_input_stream_read_all_async;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" void g_input_stream_read_all_async (GInputStream *stream, void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_input_stream_read_all_finish;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" gboolean g_input_stream_read_all_finish (GInputStream *stream, GAsyncResult *result, gsize *bytes_read, GError **error);"
g;g_input_stream_read_async;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" void g_input_stream_read_async (GInputStream *stream, void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_input_stream_read_bytes;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" GBytes *g_input_stream_read_bytes (GInputStream *stream, gsize count, GCancellable *cancellable, GError **error);"
g;g_input_stream_read_bytes_async;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" void g_input_stream_read_bytes_async (GInputStream *stream, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_input_stream_read_bytes_finish;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" GBytes *g_input_stream_read_bytes_finish (GInputStream *stream, GAsyncResult *result, GError **error);"
g;g_input_stream_read_finish;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" gssize g_input_stream_read_finish (GInputStream *stream, GAsyncResult *result, GError **error);"
g;g_input_stream_set_pending;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" gboolean g_input_stream_set_pending (GInputStream *stream, GError **error);"
g;g_input_stream_skip;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" gssize g_input_stream_skip (GInputStream *stream, gsize count, GCancellable *cancellable, GError **error);"
g;g_input_stream_skip_async;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" void g_input_stream_skip_async (GInputStream *stream, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_input_stream_skip_finish;glib-auto.f90;/usr/include/glib-2.0/gio/ginputstream.h;" gssize g_input_stream_skip_finish (GInputStream *stream, GAsyncResult *result, GError **error);"
g;g_int64_equal;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_int64_equal (gconstpointer v1, gconstpointer v2);"
g;g_int64_hash;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" guint g_int64_hash (gconstpointer v);"
g;g_int_equal;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_int_equal (gconstpointer v1, gconstpointer v2);"
g;g_int_hash;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" guint g_int_hash (gconstpointer v);"
g;g_intern_static_string;glib-auto.f90;/usr/include/glib-2.0/glib/gquark.h;" const gchar * g_intern_static_string (const gchar *string);"
g;g_intern_string;glib-auto.f90;/usr/include/glib-2.0/glib/gquark.h;" const gchar * g_intern_string (const gchar *string);"
g;g_io_channel_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_io_channel_get_type (void) G_GNUC_CONST;"
g;g_io_condition_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_io_condition_get_type (void) G_GNUC_CONST;"
g;g_io_error_from_errno;glib-auto.f90;/usr/include/glib-2.0/gio/gioerror.h;" GIOErrorEnum g_io_error_from_errno (gint err_no);"
g;g_io_error_from_win32_error;glib-auto.f90;/usr/include/glib-2.0/gio/gioerror.h;" GIOErrorEnum g_io_error_from_win32_error (gint error_code);"
g;g_io_error_quark;glib-auto.f90;/usr/include/glib-2.0/gio/gioerror.h;"  GQuark g_io_error_quark (void);"
g;g_io_extension_get_name;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" const char * g_io_extension_get_name (GIOExtension *extension);"
g;g_io_extension_get_priority;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" gint g_io_extension_get_priority (GIOExtension *extension);"
g;g_io_extension_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" GType g_io_extension_get_type (GIOExtension *extension);"
g;g_io_extension_point_get_extension_by_name;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" GIOExtension * g_io_extension_point_get_extension_by_name (GIOExtensionPoint *extension_point, const char *name);"
g;g_io_extension_point_get_extensions;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" GList *g_io_extension_point_get_extensions (GIOExtensionPoint *extension_point);"
g;g_io_extension_point_get_required_type;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" GType g_io_extension_point_get_required_type (GIOExtensionPoint *extension_point);"
g;g_io_extension_point_implement;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" GIOExtension * g_io_extension_point_implement (const char *extension_point_name, GType type, const char *extension_name, gint priority);"
g;g_io_extension_point_lookup;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" GIOExtensionPoint *g_io_extension_point_lookup (const char *name);"
g;g_io_extension_point_register;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" GIOExtensionPoint *g_io_extension_point_register (const char *name);"
g;g_io_extension_point_set_required_type;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" void g_io_extension_point_set_required_type (GIOExtensionPoint *extension_point, GType type);"
g;g_io_extension_ref_class;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" GTypeClass* g_io_extension_ref_class (GIOExtension *extension);"
g;g_io_module_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" GType g_io_module_get_type (void) G_GNUC_CONST;"
g;g_io_module_load;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" void g_io_module_load (GIOModule *module);"
g;g_io_module_new;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" GIOModule *g_io_module_new (const gchar *filename);"
g;g_io_module_query;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" char **g_io_module_query (void);"
g;g_io_module_scope_block;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" void g_io_module_scope_block (GIOModuleScope *scope, const gchar *basename);"
g;g_io_module_scope_free;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" void g_io_module_scope_free (GIOModuleScope *scope);"
g;g_io_module_scope_new;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;"  GIOModuleScope * g_io_module_scope_new (GIOModuleScopeFlags flags);"
g;g_io_module_unload;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" void g_io_module_unload (GIOModule *module);"
g;g_io_modules_load_all_in_directory;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" GList *g_io_modules_load_all_in_directory (const gchar *dirname);"
g;g_io_modules_load_all_in_directory_with_scope;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" GList *g_io_modules_load_all_in_directory_with_scope (const gchar *dirname, GIOModuleScope *scope);"
g;g_io_modules_scan_all_in_directory;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" void g_io_modules_scan_all_in_directory (const char *dirname);"
g;g_io_modules_scan_all_in_directory_with_scope;glib-auto.f90;/usr/include/glib-2.0/gio/giomodule.h;" void g_io_modules_scan_all_in_directory_with_scope (const gchar *dirname, GIOModuleScope *scope);"
g;g_io_scheduler_cancel_all_jobs;glib-auto.f90;/usr/include/glib-2.0/gio/gioscheduler.h;" void g_io_scheduler_cancel_all_jobs (void);"
g;g_io_scheduler_job_send_to_mainloop;glib-auto.f90;/usr/include/glib-2.0/gio/gioscheduler.h;" gboolean g_io_scheduler_job_send_to_mainloop (GIOSchedulerJob *job, GSourceFunc func, gpointer user_data, GDestroyNotify notify);"
g;g_io_scheduler_job_send_to_mainloop_async;glib-auto.f90;/usr/include/glib-2.0/gio/gioscheduler.h;" void g_io_scheduler_job_send_to_mainloop_async (GIOSchedulerJob *job, GSourceFunc func, gpointer user_data, GDestroyNotify notify);"
g;g_io_scheduler_push_job;glib-auto.f90;/usr/include/glib-2.0/gio/gioscheduler.h;"  void g_io_scheduler_push_job (GIOSchedulerJobFunc job_func, gpointer user_data, GDestroyNotify notify, gint io_priority, GCancellable *cancellable);"
g;g_io_stream_clear_pending;glib-auto.f90;/usr/include/glib-2.0/gio/giostream.h;" void g_io_stream_clear_pending (GIOStream *stream);"
g;g_io_stream_close;glib-auto.f90;/usr/include/glib-2.0/gio/giostream.h;" gboolean g_io_stream_close (GIOStream *stream, GCancellable *cancellable, GError **error);"
g;g_io_stream_close_async;glib-auto.f90;/usr/include/glib-2.0/gio/giostream.h;" void g_io_stream_close_async (GIOStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_io_stream_close_finish;glib-auto.f90;/usr/include/glib-2.0/gio/giostream.h;" gboolean g_io_stream_close_finish (GIOStream *stream, GAsyncResult *result, GError **error);"
g;g_io_stream_get_input_stream;glib-auto.f90;/usr/include/glib-2.0/gio/giostream.h;" GInputStream * g_io_stream_get_input_stream (GIOStream *stream);"
g;g_io_stream_get_output_stream;glib-auto.f90;/usr/include/glib-2.0/gio/giostream.h;" GOutputStream *g_io_stream_get_output_stream (GIOStream *stream);"
g;g_io_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/giostream.h;"  GType g_io_stream_get_type (void) G_GNUC_CONST;"
g;g_io_stream_has_pending;glib-auto.f90;/usr/include/glib-2.0/gio/giostream.h;" gboolean g_io_stream_has_pending (GIOStream *stream);"
g;g_io_stream_is_closed;glib-auto.f90;/usr/include/glib-2.0/gio/giostream.h;" gboolean g_io_stream_is_closed (GIOStream *stream);"
g;g_io_stream_set_pending;glib-auto.f90;/usr/include/glib-2.0/gio/giostream.h;" gboolean g_io_stream_set_pending (GIOStream *stream, GError **error);"
g;g_io_stream_splice_async;glib-auto.f90;/usr/include/glib-2.0/gio/giostream.h;" void g_io_stream_splice_async (GIOStream *stream1, GIOStream *stream2, GIOStreamSpliceFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_io_stream_splice_finish;glib-auto.f90;/usr/include/glib-2.0/gio/giostream.h;" gboolean g_io_stream_splice_finish (GAsyncResult *result, GError **error);"
g;g_key_file_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;"  GQuark g_key_file_error_quark (void);"
g;g_key_file_free;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_free (GKeyFile *key_file);"
g;g_key_file_get_boolean;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean g_key_file_get_boolean (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);"
g;g_key_file_get_boolean_list;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean *g_key_file_get_boolean_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error) G_GNUC_MALLOC;"
g;g_key_file_get_comment;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gchar *g_key_file_get_comment (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error) G_GNUC_MALLOC;"
g;g_key_file_get_double;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gdouble g_key_file_get_double (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);"
g;g_key_file_get_double_list;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gdouble *g_key_file_get_double_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error) G_GNUC_MALLOC;"
g;g_key_file_get_groups;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gchar **g_key_file_get_groups (GKeyFile *key_file, gsize *length) G_GNUC_MALLOC;"
g;g_key_file_get_int64;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gint64 g_key_file_get_int64 (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);"
g;g_key_file_get_integer;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gint g_key_file_get_integer (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);"
g;g_key_file_get_integer_list;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gint *g_key_file_get_integer_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error) G_GNUC_MALLOC;"
g;g_key_file_get_keys;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gchar **g_key_file_get_keys (GKeyFile *key_file, const gchar *group_name, gsize *length, GError **error) G_GNUC_MALLOC;"
g;g_key_file_get_locale_string;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gchar *g_key_file_get_locale_string (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, GError **error) G_GNUC_MALLOC;"
g;g_key_file_get_locale_string_list;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gchar **g_key_file_get_locale_string_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, gsize *length, GError **error) G_GNUC_MALLOC;"
g;g_key_file_get_start_group;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gchar *g_key_file_get_start_group (GKeyFile *key_file) G_GNUC_MALLOC;"
g;g_key_file_get_string;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gchar *g_key_file_get_string (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error) G_GNUC_MALLOC;"
g;g_key_file_get_string_list;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gchar **g_key_file_get_string_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error) G_GNUC_MALLOC;"
g;g_key_file_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_key_file_get_type (void) G_GNUC_CONST;"
g;g_key_file_get_uint64;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" guint64 g_key_file_get_uint64 (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);"
g;g_key_file_get_value;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gchar *g_key_file_get_value (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error) G_GNUC_MALLOC;"
g;g_key_file_has_group;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean g_key_file_has_group (GKeyFile *key_file, const gchar *group_name);"
g;g_key_file_has_key;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean g_key_file_has_key (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);"
g;g_key_file_load_from_data;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean g_key_file_load_from_data (GKeyFile *key_file, const gchar *data, gsize length, GKeyFileFlags flags, GError **error);"
g;g_key_file_load_from_data_dirs;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean g_key_file_load_from_data_dirs (GKeyFile *key_file, const gchar *file, gchar **full_path, GKeyFileFlags flags, GError **error);"
g;g_key_file_load_from_dirs;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean g_key_file_load_from_dirs (GKeyFile *key_file, const gchar *file, const gchar **search_dirs, gchar **full_path, GKeyFileFlags flags, GError **error);"
g;g_key_file_load_from_file;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean g_key_file_load_from_file (GKeyFile *key_file, const gchar *file, GKeyFileFlags flags, GError **error);"
g;g_key_file_new;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" GKeyFile *g_key_file_new (void);"
g;g_key_file_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" GKeyFile *g_key_file_ref (GKeyFile *key_file);"
g;g_key_file_remove_comment;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean g_key_file_remove_comment (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);"
g;g_key_file_remove_group;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean g_key_file_remove_group (GKeyFile *key_file, const gchar *group_name, GError **error);"
g;g_key_file_remove_key;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean g_key_file_remove_key (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);"
g;g_key_file_save_to_file;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean g_key_file_save_to_file (GKeyFile *key_file, const gchar *filename, GError **error);"
g;g_key_file_set_boolean;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_boolean (GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean value);"
g;g_key_file_set_boolean_list;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_boolean_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean list[], gsize length);"
g;g_key_file_set_comment;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gboolean g_key_file_set_comment (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *comment, GError **error);"
g;g_key_file_set_double;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_double (GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble value);"
g;g_key_file_set_double_list;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_double_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble list[], gsize length);"
g;g_key_file_set_int64;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_int64 (GKeyFile *key_file, const gchar *group_name, const gchar *key, gint64 value);"
g;g_key_file_set_integer;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_integer (GKeyFile *key_file, const gchar *group_name, const gchar *key, gint value);"
g;g_key_file_set_integer_list;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_integer_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gint list[], gsize length);"
g;g_key_file_set_list_separator;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_list_separator (GKeyFile *key_file, gchar separator);"
g;g_key_file_set_locale_string;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_locale_string (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar *string);"
g;g_key_file_set_locale_string_list;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_locale_string_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar * const list[], gsize length);"
g;g_key_file_set_string;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_string (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *string);"
g;g_key_file_set_string_list;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_string_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar * const list[], gsize length);"
g;g_key_file_set_uint64;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_uint64 (GKeyFile *key_file, const gchar *group_name, const gchar *key, guint64 value);"
g;g_key_file_set_value;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_set_value (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *value);"
g;g_key_file_to_data;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" gchar *g_key_file_to_data (GKeyFile *key_file, gsize *length, GError **error) G_GNUC_MALLOC;"
g;g_key_file_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gkeyfile.h;" void g_key_file_unref (GKeyFile *key_file);"
g;g_keyfile_settings_backend_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsbackend.h;" GSettingsBackend * g_keyfile_settings_backend_new (const gchar *filename, const gchar *root_path, const gchar *root_group);"
g;g_list_alloc;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;"  GList* g_list_alloc (void) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_append;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_append (GList *list, gpointer data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_concat;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_concat (GList *list1, GList *list2) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_copy;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_copy (GList *list) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_copy_deep;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_copy_deep (GList *list, GCopyFunc func, gpointer user_data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_delete_link;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_delete_link (GList *list, GList *link_) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_find;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_find (GList *list, gconstpointer data);"
g;g_list_find_custom;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_find_custom (GList *list, gconstpointer data, GCompareFunc func);"
g;g_list_first;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_first (GList *list);"
g;g_list_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" void g_list_foreach (GList *list, GFunc func, gpointer user_data);"
g;g_list_free;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" void g_list_free (GList *list);"
g;g_list_free_1;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" void g_list_free_1 (GList *list);"
g;g_list_free_full;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" void g_list_free_full (GList *list, GDestroyNotify free_func);"
g;g_list_index;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" gint g_list_index (GList *list, gconstpointer data);"
g;g_list_insert;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_insert (GList *list, gpointer data, gint position) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_insert_before;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_insert_before (GList *list, GList *sibling, gpointer data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_insert_sorted;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_insert_sorted (GList *list, gpointer data, GCompareFunc func) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_insert_sorted_with_data;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_insert_sorted_with_data (GList *list, gpointer data, GCompareDataFunc func, gpointer user_data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_last;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_last (GList *list);"
g;g_list_length;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" guint g_list_length (GList *list);"
g;g_list_model_get_item;glib-auto.f90;/usr/include/glib-2.0/gio/glistmodel.h;" gpointer g_list_model_get_item (GListModel *list, guint position);"
g;g_list_model_get_n_items;glib-auto.f90;/usr/include/glib-2.0/gio/glistmodel.h;" guint g_list_model_get_n_items (GListModel *list);"
g;g_list_model_get_object;glib-auto.f90;/usr/include/glib-2.0/gio/glistmodel.h;" GObject * g_list_model_get_object (GListModel *list, guint position);"
g;g_list_model_items_changed;glib-auto.f90;/usr/include/glib-2.0/gio/glistmodel.h;" void g_list_model_items_changed (GListModel *list, guint position, guint removed, guint added);"
g;g_list_nth;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_nth (GList *list, guint n);"
g;g_list_nth_data;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" gpointer g_list_nth_data (GList *list, guint n);"
g;g_list_nth_prev;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_nth_prev (GList *list, guint n);"
g;g_list_pop_allocator;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_list_pop_allocator (void);"
g;g_list_position;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" gint g_list_position (GList *list, GList *llink);"
g;g_list_prepend;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_prepend (GList *list, gpointer data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_push_allocator;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_list_push_allocator (GAllocator *allocator);"
g;g_list_remove;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_remove (GList *list, gconstpointer data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_remove_all;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_remove_all (GList *list, gconstpointer data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_remove_link;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_remove_link (GList *list, GList *llink) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_reverse;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_reverse (GList *list) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_sort;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_sort (GList *list, GCompareFunc compare_func) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_sort_with_data;glib-auto.f90;/usr/include/glib-2.0/glib/glist.h;" GList* g_list_sort_with_data (GList *list, GCompareDataFunc compare_func, gpointer user_data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_list_store_append;glib-auto.f90;/usr/include/glib-2.0/gio/gliststore.h;" void g_list_store_append (GListStore *store, gpointer item);"
g;g_list_store_insert;glib-auto.f90;/usr/include/glib-2.0/gio/gliststore.h;" void g_list_store_insert (GListStore *store, guint position, gpointer item);"
g;g_list_store_insert_sorted;glib-auto.f90;/usr/include/glib-2.0/gio/gliststore.h;" guint g_list_store_insert_sorted (GListStore *store, gpointer item, GCompareDataFunc compare_func, gpointer user_data);"
g;g_list_store_remove;glib-auto.f90;/usr/include/glib-2.0/gio/gliststore.h;" void g_list_store_remove (GListStore *store, guint position);"
g;g_list_store_remove_all;glib-auto.f90;/usr/include/glib-2.0/gio/gliststore.h;" void g_list_store_remove_all (GListStore *store);"
g;g_list_store_sort;glib-auto.f90;/usr/include/glib-2.0/gio/gliststore.h;" void g_list_store_sort (GListStore *store, GCompareDataFunc compare_func, gpointer user_data);"
g;g_list_store_splice;glib-auto.f90;/usr/include/glib-2.0/gio/gliststore.h;" void g_list_store_splice (GListStore *store, guint position, guint n_removals, gpointer *additions, guint n_additions);"
g;g_listenv;glib-auto.f90;/usr/include/glib-2.0/glib/genviron.h;" gchar ** g_listenv (void);"
g;g_loadable_icon_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gloadableicon.h;"  GType g_loadable_icon_get_type (void) G_GNUC_CONST;"
g;g_loadable_icon_load;glib-auto.f90;/usr/include/glib-2.0/gio/gloadableicon.h;" GInputStream *g_loadable_icon_load (GLoadableIcon *icon, int size, char **type, GCancellable *cancellable, GError **error);"
g;g_loadable_icon_load_async;glib-auto.f90;/usr/include/glib-2.0/gio/gloadableicon.h;" void g_loadable_icon_load_async (GLoadableIcon *icon, int size, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_loadable_icon_load_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gloadableicon.h;" GInputStream *g_loadable_icon_load_finish (GLoadableIcon *icon, GAsyncResult *res, char **type, GError **error);"
g;g_locale_from_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar* g_locale_from_utf8 (const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error) G_GNUC_MALLOC;"
g;g_locale_to_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar* g_locale_to_utf8 (const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error) G_GNUC_MALLOC;"
g;g_log;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" void g_log (const gchar *log_domain, GLogLevelFlags log_level, const gchar *format, ...) G_GNUC_PRINTF (3, 4);"
g;g_log_default_handler;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" void g_log_default_handler (const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data);"
g;g_log_remove_handler;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" void g_log_remove_handler (const gchar *log_domain, guint handler_id);"
g;g_log_set_always_fatal;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" GLogLevelFlags g_log_set_always_fatal (GLogLevelFlags fatal_mask);"
g;g_log_set_default_handler;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" GLogFunc g_log_set_default_handler (GLogFunc log_func, gpointer user_data);"
g;g_log_set_fatal_mask;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" GLogLevelFlags g_log_set_fatal_mask (const gchar *log_domain, GLogLevelFlags fatal_mask);"
g;g_log_set_handler;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" guint g_log_set_handler (const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data);"
g;g_log_set_handler_full;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" guint g_log_set_handler_full (const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data, GDestroyNotify destroy);"
g;g_logv;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" void g_logv (const gchar *log_domain, GLogLevelFlags log_level, const gchar *format, va_list args) G_GNUC_PRINTF(3, 0);"
g;g_main_context_acquire;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_main_context_acquire (GMainContext *context);"
g;g_main_context_add_poll;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_context_add_poll (GMainContext *context, GPollFD *fd, gint priority);"
g;g_main_context_check;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gint g_main_context_check (GMainContext *context, gint max_priority, GPollFD *fds, gint n_fds);"
g;g_main_context_default;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GMainContext *g_main_context_default (void);"
g;g_main_context_dispatch;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_context_dispatch (GMainContext *context);"
g;g_main_context_find_source_by_funcs_user_data;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GSource *g_main_context_find_source_by_funcs_user_data (GMainContext *context, GSourceFuncs *funcs, gpointer user_data);"
g;g_main_context_find_source_by_id;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GSource *g_main_context_find_source_by_id (GMainContext *context, guint source_id);"
g;g_main_context_find_source_by_user_data;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GSource *g_main_context_find_source_by_user_data (GMainContext *context, gpointer user_data);"
g;g_main_context_get_poll_func;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GPollFunc g_main_context_get_poll_func (GMainContext *context);"
g;g_main_context_get_thread_default;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GMainContext *g_main_context_get_thread_default (void);"
g;g_main_context_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_main_context_get_type (void) G_GNUC_CONST;"
g;g_main_context_invoke;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_context_invoke (GMainContext *context, GSourceFunc function, gpointer data);"
g;g_main_context_invoke_full;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_context_invoke_full (GMainContext *context, gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);"
g;g_main_context_is_owner;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_main_context_is_owner (GMainContext *context);"
g;g_main_context_iteration;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_main_context_iteration (GMainContext *context, gboolean may_block);"
g;g_main_context_new;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;"  GMainContext *g_main_context_new (void);"
g;g_main_context_pending;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_main_context_pending (GMainContext *context);"
g;g_main_context_pop_thread_default;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_context_pop_thread_default (GMainContext *context);"
g;g_main_context_prepare;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_main_context_prepare (GMainContext *context, gint *priority);"
g;g_main_context_push_thread_default;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_context_push_thread_default (GMainContext *context);"
g;g_main_context_query;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gint g_main_context_query (GMainContext *context, gint max_priority, gint *timeout_, GPollFD *fds, gint n_fds);"
g;g_main_context_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GMainContext *g_main_context_ref (GMainContext *context);"
g;g_main_context_ref_thread_default;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GMainContext *g_main_context_ref_thread_default (void);"
g;g_main_context_release;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_context_release (GMainContext *context);"
g;g_main_context_remove_poll;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_context_remove_poll (GMainContext *context, GPollFD *fd);"
g;g_main_context_set_poll_func;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_context_set_poll_func (GMainContext *context, GPollFunc func);"
g;g_main_context_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_context_unref (GMainContext *context);"
g;g_main_context_wait;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_main_context_wait (GMainContext *context, GCond *cond, GMutex *mutex);"
g;g_main_context_wakeup;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_context_wakeup (GMainContext *context);"
g;g_main_current_source;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GSource *g_main_current_source (void);"
g;g_main_depth;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gint g_main_depth (void);"
g;g_main_loop_get_context;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GMainContext *g_main_loop_get_context (GMainLoop *loop);"
g;g_main_loop_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_main_loop_get_type (void) G_GNUC_CONST;"
g;g_main_loop_is_running;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_main_loop_is_running (GMainLoop *loop);"
g;g_main_loop_new;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GMainLoop *g_main_loop_new (GMainContext *context, gboolean is_running);"
g;g_main_loop_quit;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_loop_quit (GMainLoop *loop);"
g;g_main_loop_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GMainLoop *g_main_loop_ref (GMainLoop *loop);"
g;g_main_loop_run;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_loop_run (GMainLoop *loop);"
g;g_main_loop_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_main_loop_unref (GMainLoop *loop);"
g;g_malloc;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gpointer g_malloc (gsize n_bytes) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE(1);"
g;g_malloc0;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gpointer g_malloc0 (gsize n_bytes) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE(1);"
g;g_malloc0_n;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gpointer g_malloc0_n (gsize n_blocks, gsize n_block_bytes) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE2(1,2);"
g;g_malloc_n;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gpointer g_malloc_n (gsize n_blocks, gsize n_block_bytes) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE2(1,2);"
g;g_mapped_file_free;glib-auto.f90;/usr/include/glib-2.0/glib/gmappedfile.h;" void g_mapped_file_free (GMappedFile *file);"
g;g_mapped_file_get_bytes;glib-auto.f90;/usr/include/glib-2.0/glib/gmappedfile.h;" GBytes * g_mapped_file_get_bytes (GMappedFile *file);"
g;g_mapped_file_get_contents;glib-auto.f90;/usr/include/glib-2.0/glib/gmappedfile.h;" gchar *g_mapped_file_get_contents (GMappedFile *file);"
g;g_mapped_file_get_length;glib-auto.f90;/usr/include/glib-2.0/glib/gmappedfile.h;" gsize g_mapped_file_get_length (GMappedFile *file);"
g;g_mapped_file_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_mapped_file_get_type (void) G_GNUC_CONST;"
g;g_mapped_file_new;glib-auto.f90;/usr/include/glib-2.0/glib/gmappedfile.h;"  GMappedFile *g_mapped_file_new (const gchar *filename, gboolean writable, GError **error) G_GNUC_MALLOC;"
g;g_mapped_file_new_from_fd;glib-auto.f90;/usr/include/glib-2.0/glib/gmappedfile.h;" GMappedFile *g_mapped_file_new_from_fd (gint fd, gboolean writable, GError **error) G_GNUC_MALLOC;"
g;g_mapped_file_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gmappedfile.h;" GMappedFile *g_mapped_file_ref (GMappedFile *file);"
g;g_mapped_file_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gmappedfile.h;" void g_mapped_file_unref (GMappedFile *file);"
g;g_markup_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;"  GQuark g_markup_error_quark (void);"
g;g_markup_escape_text;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" gchar* g_markup_escape_text (const gchar *text, gssize length);"
g;g_markup_parse_context_end_parse;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" gboolean g_markup_parse_context_end_parse (GMarkupParseContext *context, GError **error);"
g;g_markup_parse_context_free;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" void g_markup_parse_context_free (GMarkupParseContext *context);"
g;g_markup_parse_context_get_element;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" const gchar * g_markup_parse_context_get_element (GMarkupParseContext *context);"
g;g_markup_parse_context_get_element_stack;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" const GSList * g_markup_parse_context_get_element_stack (GMarkupParseContext *context);"
g;g_markup_parse_context_get_position;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" void g_markup_parse_context_get_position (GMarkupParseContext *context, gint *line_number, gint *char_number);"
g;g_markup_parse_context_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_markup_parse_context_get_type (void) G_GNUC_CONST;"
g;g_markup_parse_context_get_user_data;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" gpointer g_markup_parse_context_get_user_data (GMarkupParseContext *context);"
g;g_markup_parse_context_new;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" GMarkupParseContext *g_markup_parse_context_new (const GMarkupParser *parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify);"
g;g_markup_parse_context_parse;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" gboolean g_markup_parse_context_parse (GMarkupParseContext *context, const gchar *text, gssize text_len, GError **error);"
g;g_markup_parse_context_pop;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" gpointer g_markup_parse_context_pop (GMarkupParseContext *context);"
g;g_markup_parse_context_push;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" void g_markup_parse_context_push (GMarkupParseContext *context, const GMarkupParser *parser, gpointer user_data);"
g;g_markup_parse_context_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" GMarkupParseContext *g_markup_parse_context_ref (GMarkupParseContext *context);"
g;g_markup_parse_context_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" void g_markup_parse_context_unref (GMarkupParseContext *context);"
g;g_markup_printf_escaped;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" gchar *g_markup_printf_escaped (const char *format, ...) G_GNUC_PRINTF (1, 2);"
g;g_markup_vprintf_escaped;glib-auto.f90;/usr/include/glib-2.0/glib/gmarkup.h;" gchar *g_markup_vprintf_escaped (const char *format, va_list args) G_GNUC_PRINTF(1, 0);"
g;g_match_info_expand_references;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gchar *g_match_info_expand_references(const GMatchInfo *match_info, const gchar *string_to_expand, GError **error);"
g;g_match_info_fetch;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gchar *g_match_info_fetch (const GMatchInfo *match_info, gint match_num);"
g;g_match_info_fetch_all;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gchar **g_match_info_fetch_all (const GMatchInfo *match_info);"
g;g_match_info_fetch_named;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gchar *g_match_info_fetch_named (const GMatchInfo *match_info, const gchar *name);"
g;g_match_info_fetch_named_pos;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gboolean g_match_info_fetch_named_pos (const GMatchInfo *match_info, const gchar *name, gint *start_pos, gint *end_pos);"
g;g_match_info_fetch_pos;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gboolean g_match_info_fetch_pos (const GMatchInfo *match_info, gint match_num, gint *start_pos, gint *end_pos);"
g;g_match_info_free;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" void g_match_info_free (GMatchInfo *match_info);"
g;g_match_info_get_match_count;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gint g_match_info_get_match_count (const GMatchInfo *match_info);"
g;g_match_info_get_regex;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" GRegex *g_match_info_get_regex (const GMatchInfo *match_info);"
g;g_match_info_get_string;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" const gchar *g_match_info_get_string (const GMatchInfo *match_info);"
g;g_match_info_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_match_info_get_type (void) G_GNUC_CONST;"
g;g_match_info_is_partial_match;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gboolean g_match_info_is_partial_match (const GMatchInfo *match_info);"
g;g_match_info_matches;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gboolean g_match_info_matches (const GMatchInfo *match_info);"
g;g_match_info_next;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gboolean g_match_info_next (GMatchInfo *match_info, GError **error);"
g;g_match_info_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" GMatchInfo *g_match_info_ref (GMatchInfo *match_info);"
g;g_match_info_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" void g_match_info_unref (GMatchInfo *match_info);"
g;g_mem_chunk_alloc;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" gpointer g_mem_chunk_alloc (GMemChunk *mem_chunk);"
g;g_mem_chunk_alloc0;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" gpointer g_mem_chunk_alloc0 (GMemChunk *mem_chunk);"
g;g_mem_chunk_clean;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_mem_chunk_clean (GMemChunk *mem_chunk);"
g;g_mem_chunk_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_mem_chunk_destroy (GMemChunk *mem_chunk);"
g;g_mem_chunk_free;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_mem_chunk_free (GMemChunk *mem_chunk, gpointer mem);"
g;g_mem_chunk_info;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_mem_chunk_info (void);"
g;g_mem_chunk_new;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;"  GMemChunk * g_mem_chunk_new (const gchar *name, gint atom_size, gsize area_size, gint type);"
g;g_mem_chunk_print;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_mem_chunk_print (GMemChunk *mem_chunk);"
g;g_mem_chunk_reset;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_mem_chunk_reset (GMemChunk *mem_chunk);"
g;g_mem_is_system_malloc;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gboolean g_mem_is_system_malloc (void);"
g;g_mem_profile;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" void g_mem_profile (void);"
g;g_memdup;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gpointer g_memdup (gconstpointer mem, guint byte_size) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE(2);"
g;g_memory_input_stream_add_bytes;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryinputstream.h;" void g_memory_input_stream_add_bytes (GMemoryInputStream *stream, GBytes *bytes);"
g;g_memory_input_stream_add_data;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryinputstream.h;" void g_memory_input_stream_add_data (GMemoryInputStream *stream, const void *data, gssize len, GDestroyNotify destroy);"
g;g_memory_input_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryinputstream.h;"  GType g_memory_input_stream_get_type (void) G_GNUC_CONST;"
g;g_memory_input_stream_new;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryinputstream.h;" GInputStream * g_memory_input_stream_new (void);"
g;g_memory_input_stream_new_from_bytes;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryinputstream.h;" GInputStream * g_memory_input_stream_new_from_bytes (GBytes *bytes);"
g;g_memory_input_stream_new_from_data;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryinputstream.h;" GInputStream * g_memory_input_stream_new_from_data (const void *data, gssize len, GDestroyNotify destroy);"
g;g_memory_output_stream_get_data;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryoutputstream.h;" gpointer g_memory_output_stream_get_data (GMemoryOutputStream *ostream);"
g;g_memory_output_stream_get_data_size;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryoutputstream.h;" gsize g_memory_output_stream_get_data_size (GMemoryOutputStream *ostream);"
g;g_memory_output_stream_get_size;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryoutputstream.h;" gsize g_memory_output_stream_get_size (GMemoryOutputStream *ostream);"
g;g_memory_output_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryoutputstream.h;"  GType g_memory_output_stream_get_type (void) G_GNUC_CONST;"
g;g_memory_output_stream_new;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryoutputstream.h;" GOutputStream *g_memory_output_stream_new (gpointer data, gsize size, GReallocFunc realloc_function, GDestroyNotify destroy_function);"
g;g_memory_output_stream_new_resizable;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryoutputstream.h;" GOutputStream *g_memory_output_stream_new_resizable (void);"
g;g_memory_output_stream_steal_as_bytes;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryoutputstream.h;" GBytes * g_memory_output_stream_steal_as_bytes (GMemoryOutputStream *ostream);"
g;g_memory_output_stream_steal_data;glib-auto.f90;/usr/include/glib-2.0/gio/gmemoryoutputstream.h;" gpointer g_memory_output_stream_steal_data (GMemoryOutputStream *ostream);"
g;g_memory_settings_backend_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsbackend.h;" GSettingsBackend * g_memory_settings_backend_new (void);"
g;g_menu_append;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_append (GMenu *menu, const gchar *label, const gchar *detailed_action);"
g;g_menu_append_item;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_append_item (GMenu *menu, GMenuItem *item);"
g;g_menu_append_section;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_append_section (GMenu *menu, const gchar *label, GMenuModel *section);"
g;g_menu_append_submenu;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_append_submenu (GMenu *menu, const gchar *label, GMenuModel *submenu);"
g;g_menu_attribute_iter_get_name;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" const gchar * g_menu_attribute_iter_get_name (GMenuAttributeIter *iter);"
g;g_menu_attribute_iter_get_next;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" gboolean g_menu_attribute_iter_get_next (GMenuAttributeIter *iter, const gchar **out_name, GVariant **value);"
g;g_menu_attribute_iter_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" GType g_menu_attribute_iter_get_type (void) G_GNUC_CONST;"
g;g_menu_attribute_iter_get_value;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" GVariant * g_menu_attribute_iter_get_value (GMenuAttributeIter *iter);"
g;g_menu_attribute_iter_next;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" gboolean g_menu_attribute_iter_next (GMenuAttributeIter *iter);"
g;g_menu_freeze;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_freeze (GMenu *menu);"
g;g_menu_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;"  GType g_menu_get_type (void) G_GNUC_CONST;"
g;g_menu_insert;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_insert (GMenu *menu, gint position, const gchar *label, const gchar *detailed_action);"
g;g_menu_insert_item;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_insert_item (GMenu *menu, gint position, GMenuItem *item);"
g;g_menu_insert_section;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_insert_section (GMenu *menu, gint position, const gchar *label, GMenuModel *section);"
g;g_menu_insert_submenu;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_insert_submenu (GMenu *menu, gint position, const gchar *label, GMenuModel *submenu);"
g;g_menu_item_get_attribute_value;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" GVariant * g_menu_item_get_attribute_value (GMenuItem *menu_item, const gchar *attribute, const GVariantType *expected_type);"
g;g_menu_item_get_link;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" GMenuModel *g_menu_item_get_link (GMenuItem *menu_item, const gchar *link);"
g;g_menu_item_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" GType g_menu_item_get_type (void) G_GNUC_CONST;"
g;g_menu_item_new;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" GMenuItem * g_menu_item_new (const gchar *label, const gchar *detailed_action);"
g;g_menu_item_new_from_model;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" GMenuItem * g_menu_item_new_from_model (GMenuModel *model, gint item_index);"
g;g_menu_item_new_section;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" GMenuItem * g_menu_item_new_section (const gchar *label, GMenuModel *section);"
g;g_menu_item_new_submenu;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" GMenuItem * g_menu_item_new_submenu (const gchar *label, GMenuModel *submenu);"
g;g_menu_item_set_action_and_target_value;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_item_set_action_and_target_value (GMenuItem *menu_item, const gchar *action, GVariant *target_value);"
g;g_menu_item_set_attribute_value;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_item_set_attribute_value (GMenuItem *menu_item, const gchar *attribute, GVariant *value);"
g;g_menu_item_set_detailed_action;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_item_set_detailed_action (GMenuItem *menu_item, const gchar *detailed_action);"
g;g_menu_item_set_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_item_set_icon (GMenuItem *menu_item, GIcon *icon);"
g;g_menu_item_set_label;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_item_set_label (GMenuItem *menu_item, const gchar *label);"
g;g_menu_item_set_link;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_item_set_link (GMenuItem *menu_item, const gchar *link, GMenuModel *model);"
g;g_menu_item_set_section;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_item_set_section (GMenuItem *menu_item, GMenuModel *section);"
g;g_menu_item_set_submenu;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_item_set_submenu (GMenuItem *menu_item, GMenuModel *submenu);"
g;g_menu_link_iter_get_name;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" const gchar * g_menu_link_iter_get_name (GMenuLinkIter *iter);"
g;g_menu_link_iter_get_next;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" gboolean g_menu_link_iter_get_next (GMenuLinkIter *iter, const gchar **out_link, GMenuModel **value);"
g;g_menu_link_iter_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" GType g_menu_link_iter_get_type (void) G_GNUC_CONST;"
g;g_menu_link_iter_get_value;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" GMenuModel * g_menu_link_iter_get_value (GMenuLinkIter *iter);"
g;g_menu_link_iter_next;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" gboolean g_menu_link_iter_next (GMenuLinkIter *iter);"
g;g_menu_model_get_item_attribute_value;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" GVariant * g_menu_model_get_item_attribute_value (GMenuModel *model, gint item_index, const gchar *attribute, const GVariantType *expected_type);"
g;g_menu_model_get_item_link;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" GMenuModel * g_menu_model_get_item_link (GMenuModel *model, gint item_index, const gchar *link);"
g;g_menu_model_get_n_items;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" gint g_menu_model_get_n_items (GMenuModel *model);"
g;g_menu_model_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;"  GType g_menu_model_get_type (void) G_GNUC_CONST;"
g;g_menu_model_is_mutable;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" gboolean g_menu_model_is_mutable (GMenuModel *model);"
g;g_menu_model_items_changed;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" void g_menu_model_items_changed (GMenuModel *model, gint position, gint removed, gint added);"
g;g_menu_model_iterate_item_attributes;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" GMenuAttributeIter * g_menu_model_iterate_item_attributes (GMenuModel *model, gint item_index);"
g;g_menu_model_iterate_item_links;glib-auto.f90;/usr/include/glib-2.0/gio/gmenumodel.h;" GMenuLinkIter * g_menu_model_iterate_item_links (GMenuModel *model, gint item_index);"
g;g_menu_new;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" GMenu * g_menu_new (void);"
g;g_menu_prepend;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_prepend (GMenu *menu, const gchar *label, const gchar *detailed_action);"
g;g_menu_prepend_item;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_prepend_item (GMenu *menu, GMenuItem *item);"
g;g_menu_prepend_section;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_prepend_section (GMenu *menu, const gchar *label, GMenuModel *section);"
g;g_menu_prepend_submenu;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_prepend_submenu (GMenu *menu, const gchar *label, GMenuModel *submenu);"
g;g_menu_remove;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_remove (GMenu *menu, gint position);"
g;g_menu_remove_all;glib-auto.f90;/usr/include/glib-2.0/gio/gmenu.h;" void g_menu_remove_all (GMenu *menu);"
g;g_mkdir_with_parents;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gint g_mkdir_with_parents (const gchar *pathname, gint mode);"
g;g_mkdtemp;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gchar *g_mkdtemp (gchar *tmpl);"
g;g_mkdtemp_full;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gchar *g_mkdtemp_full (gchar *tmpl, gint mode);"
g;g_mkstemp_full;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gint g_mkstemp_full (gchar *tmpl, gint flags, gint mode);"
g;g_mkstemp_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gint g_mkstemp_utf8 (gchar *tmpl);"
g;g_module_build_path;glib-auto.f90;/usr/include/glib-2.0/gmodule.h;" gchar* g_module_build_path (const gchar *directory, const gchar *module_name);"
g;g_module_close;glib-auto.f90;/usr/include/glib-2.0/gmodule.h;" gboolean g_module_close (GModule *module);"
g;g_module_error;glib-auto.f90;/usr/include/glib-2.0/gmodule.h;" const gchar * g_module_error (void);"
g;g_module_make_resident;glib-auto.f90;/usr/include/glib-2.0/gmodule.h;" void g_module_make_resident (GModule *module);"
g;g_module_name_utf8;glib-auto.f90;/usr/include/glib-2.0/gmodule.h;" const gchar *g_module_name_utf8 (GModule *module);"
g;g_module_open_utf8;glib-auto.f90;/usr/include/glib-2.0/gmodule.h;" GModule * g_module_open_utf8 (const gchar *file_name, GModuleFlags flags);"
g;g_module_supported;glib-auto.f90;/usr/include/glib-2.0/gmodule.h;"  gboolean g_module_supported (void) G_GNUC_CONST;"
g;g_module_symbol;glib-auto.f90;/usr/include/glib-2.0/gmodule.h;" gboolean g_module_symbol (GModule *module, const gchar *symbol_name, gpointer *symbol);"
g;g_mount_can_eject;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" gboolean g_mount_can_eject (GMount *mount);"
g;g_mount_can_unmount;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" gboolean g_mount_can_unmount (GMount *mount);"
g;g_mount_eject;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" void g_mount_eject (GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_mount_eject_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" gboolean g_mount_eject_finish (GMount *mount, GAsyncResult *result, GError **error);"
g;g_mount_eject_with_operation;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" void g_mount_eject_with_operation (GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_mount_eject_with_operation_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" gboolean g_mount_eject_with_operation_finish (GMount *mount, GAsyncResult *result, GError **error);"
g;g_mount_get_default_location;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" GFile * g_mount_get_default_location (GMount *mount);"
g;g_mount_get_drive;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" GDrive * g_mount_get_drive (GMount *mount);"
g;g_mount_get_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" GIcon * g_mount_get_icon (GMount *mount);"
g;g_mount_get_name;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" char * g_mount_get_name (GMount *mount);"
g;g_mount_get_root;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" GFile * g_mount_get_root (GMount *mount);"
g;g_mount_get_sort_key;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" const gchar *g_mount_get_sort_key (GMount *mount);"
g;g_mount_get_symbolic_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" GIcon * g_mount_get_symbolic_icon (GMount *mount);"
g;g_mount_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;"  GType g_mount_get_type (void) G_GNUC_CONST;"
g;g_mount_get_uuid;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" char * g_mount_get_uuid (GMount *mount);"
g;g_mount_get_volume;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" GVolume * g_mount_get_volume (GMount *mount);"
g;g_mount_guess_content_type;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" void g_mount_guess_content_type (GMount *mount, gboolean force_rescan, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_mount_guess_content_type_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" gchar ** g_mount_guess_content_type_finish (GMount *mount, GAsyncResult *result, GError **error);"
g;g_mount_guess_content_type_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" gchar ** g_mount_guess_content_type_sync (GMount *mount, gboolean force_rescan, GCancellable *cancellable, GError **error);"
g;g_mount_is_shadowed;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" gboolean g_mount_is_shadowed (GMount *mount);"
g;g_mount_operation_get_anonymous;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" gboolean g_mount_operation_get_anonymous (GMountOperation *op);"
g;g_mount_operation_get_choice;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" int g_mount_operation_get_choice (GMountOperation *op);"
g;g_mount_operation_get_domain;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" const char * g_mount_operation_get_domain (GMountOperation *op);"
g;g_mount_operation_get_password;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" const char * g_mount_operation_get_password (GMountOperation *op);"
g;g_mount_operation_get_password_save;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" GPasswordSave g_mount_operation_get_password_save (GMountOperation *op);"
g;g_mount_operation_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;"  GType g_mount_operation_get_type (void) G_GNUC_CONST;"
g;g_mount_operation_get_username;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" const char * g_mount_operation_get_username (GMountOperation *op);"
g;g_mount_operation_new;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" GMountOperation * g_mount_operation_new (void);"
g;g_mount_operation_reply;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" void g_mount_operation_reply (GMountOperation *op, GMountOperationResult result);"
g;g_mount_operation_set_anonymous;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" void g_mount_operation_set_anonymous (GMountOperation *op, gboolean anonymous);"
g;g_mount_operation_set_choice;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" void g_mount_operation_set_choice (GMountOperation *op, int choice);"
g;g_mount_operation_set_domain;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" void g_mount_operation_set_domain (GMountOperation *op, const char *domain);"
g;g_mount_operation_set_password;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" void g_mount_operation_set_password (GMountOperation *op, const char *password);"
g;g_mount_operation_set_password_save;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" void g_mount_operation_set_password_save (GMountOperation *op, GPasswordSave save);"
g;g_mount_operation_set_username;glib-auto.f90;/usr/include/glib-2.0/gio/gmountoperation.h;" void g_mount_operation_set_username (GMountOperation *op, const char *username);"
g;g_mount_remount;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" void g_mount_remount (GMount *mount, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_mount_remount_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" gboolean g_mount_remount_finish (GMount *mount, GAsyncResult *result, GError **error);"
g;g_mount_shadow;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" void g_mount_shadow (GMount *mount);"
g;g_mount_unmount;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" void g_mount_unmount (GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_mount_unmount_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" gboolean g_mount_unmount_finish (GMount *mount, GAsyncResult *result, GError **error);"
g;g_mount_unmount_with_operation;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" void g_mount_unmount_with_operation (GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_mount_unmount_with_operation_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" gboolean g_mount_unmount_with_operation_finish (GMount *mount, GAsyncResult *result, GError **error);"
g;g_mount_unshadow;glib-auto.f90;/usr/include/glib-2.0/gio/gmount.h;" void g_mount_unshadow (GMount *mount);"
g;g_mutex_clear;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_mutex_clear (GMutex *mutex);"
g;g_mutex_free;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_mutex_free (GMutex *mutex);"
g;g_mutex_init;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_mutex_init (GMutex *mutex);"
g;g_mutex_lock;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_mutex_lock (GMutex *mutex);"
g;g_mutex_new;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" GMutex * g_mutex_new (void);"
g;g_mutex_trylock;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" gboolean g_mutex_trylock (GMutex *mutex);"
g;g_mutex_unlock;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_mutex_unlock (GMutex *mutex);"
g;g_native_volume_monitor_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gnativevolumemonitor.h;"  GType g_native_volume_monitor_get_type (void) G_GNUC_CONST;"
g;g_network_address_get_hostname;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkaddress.h;" const gchar *g_network_address_get_hostname (GNetworkAddress *addr);"
g;g_network_address_get_port;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkaddress.h;" guint16 g_network_address_get_port (GNetworkAddress *addr);"
g;g_network_address_get_scheme;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkaddress.h;" const gchar *g_network_address_get_scheme (GNetworkAddress *addr);"
g;g_network_address_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkaddress.h;"  GType g_network_address_get_type (void) G_GNUC_CONST;"
g;g_network_address_new;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkaddress.h;" GSocketConnectable *g_network_address_new (const gchar *hostname, guint16 port);"
g;g_network_address_new_loopback;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkaddress.h;" GSocketConnectable *g_network_address_new_loopback (guint16 port);"
g;g_network_address_parse;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkaddress.h;" GSocketConnectable *g_network_address_parse (const gchar *host_and_port, guint16 default_port, GError **error);"
g;g_network_address_parse_uri;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkaddress.h;" GSocketConnectable *g_network_address_parse_uri (const gchar *uri, guint16 default_port, GError **error);"
g;g_network_monitor_can_reach;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkmonitor.h;" gboolean g_network_monitor_can_reach (GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GError **error);"
g;g_network_monitor_can_reach_async;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkmonitor.h;" void g_network_monitor_can_reach_async (GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_network_monitor_can_reach_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkmonitor.h;" gboolean g_network_monitor_can_reach_finish (GNetworkMonitor *monitor, GAsyncResult *result, GError **error);"
g;g_network_monitor_get_connectivity;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkmonitor.h;" GNetworkConnectivity g_network_monitor_get_connectivity (GNetworkMonitor *monitor);"
g;g_network_monitor_get_default;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkmonitor.h;" GNetworkMonitor *g_network_monitor_get_default (void);"
g;g_network_monitor_get_network_available;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkmonitor.h;" gboolean g_network_monitor_get_network_available (GNetworkMonitor *monitor);"
g;g_network_monitor_get_network_metered;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkmonitor.h;" gboolean g_network_monitor_get_network_metered (GNetworkMonitor *monitor);"
g;g_network_monitor_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkmonitor.h;"  GType g_network_monitor_get_type (void) G_GNUC_CONST;"
g;g_network_service_get_domain;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkservice.h;" const gchar *g_network_service_get_domain (GNetworkService *srv);"
g;g_network_service_get_protocol;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkservice.h;" const gchar *g_network_service_get_protocol (GNetworkService *srv);"
g;g_network_service_get_scheme;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkservice.h;" const gchar *g_network_service_get_scheme (GNetworkService *srv);"
g;g_network_service_get_service;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkservice.h;" const gchar *g_network_service_get_service (GNetworkService *srv);"
g;g_network_service_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkservice.h;"  GType g_network_service_get_type (void) G_GNUC_CONST;"
g;g_network_service_new;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkservice.h;" GSocketConnectable *g_network_service_new (const gchar *service, const gchar *protocol, const gchar *domain);"
g;g_network_service_set_scheme;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworkservice.h;" void g_network_service_set_scheme (GNetworkService *srv, const gchar *scheme);"
g;g_networking_init;glib-auto.f90;/usr/include/glib-2.0/gio/gnetworking.h;"  void g_networking_init (void);"
g;g_node_child_index;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" gint g_node_child_index (GNode *node, gpointer data);"
g;g_node_child_position;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" gint g_node_child_position (GNode *node, GNode *child);"
g;g_node_children_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" void g_node_children_foreach (GNode *node, GTraverseFlags flags, GNodeForeachFunc func, gpointer data);"
g;g_node_copy;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_copy (GNode *node);"
g;g_node_copy_deep;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_copy_deep (GNode *node, GCopyFunc copy_func, gpointer data);"
g;g_node_depth;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" guint g_node_depth (GNode *node);"
g;g_node_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" void g_node_destroy (GNode *root);"
g;g_node_find;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_find (GNode *root, GTraverseType order, GTraverseFlags flags, gpointer data);"
g;g_node_find_child;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_find_child (GNode *node, GTraverseFlags flags, gpointer data);"
g;g_node_first_sibling;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_first_sibling (GNode *node);"
g;g_node_get_root;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_get_root (GNode *node);"
g;g_node_insert;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_insert (GNode *parent, gint position, GNode *node);"
g;g_node_insert_after;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_insert_after (GNode *parent, GNode *sibling, GNode *node);"
g;g_node_insert_before;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_insert_before (GNode *parent, GNode *sibling, GNode *node);"
g;g_node_is_ancestor;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" gboolean g_node_is_ancestor (GNode *node, GNode *descendant);"
g;g_node_last_child;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_last_child (GNode *node);"
g;g_node_last_sibling;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_last_sibling (GNode *node);"
g;g_node_max_height;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" guint g_node_max_height (GNode *root);"
g;g_node_n_children;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" guint g_node_n_children (GNode *node);"
g;g_node_n_nodes;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" guint g_node_n_nodes (GNode *root, GTraverseFlags flags);"
g;g_node_new;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;"  GNode* g_node_new (gpointer data);"
g;g_node_nth_child;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_nth_child (GNode *node, guint n);"
g;g_node_pop_allocator;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_node_pop_allocator (void);"
g;g_node_prepend;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" GNode* g_node_prepend (GNode *parent, GNode *node);"
g;g_node_push_allocator;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_node_push_allocator (GAllocator *allocator);"
g;g_node_reverse_children;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" void g_node_reverse_children (GNode *node);"
g;g_node_traverse;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" void g_node_traverse (GNode *root, GTraverseType order, GTraverseFlags flags, gint max_depth, GNodeTraverseFunc func, gpointer data);"
g;g_node_unlink;glib-auto.f90;/usr/include/glib-2.0/glib/gnode.h;" void g_node_unlink (GNode *node);"
g;g_notification_add_button;glib-auto.f90;/usr/include/glib-2.0/gio/gnotification.h;" void g_notification_add_button (GNotification *notification, const gchar *label, const gchar *detailed_action);"
g;g_notification_add_button_with_target_value;glib-auto.f90;/usr/include/glib-2.0/gio/gnotification.h;" void g_notification_add_button_with_target_value (GNotification *notification, const gchar *label, const gchar *action, GVariant *target);"
g;g_notification_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gnotification.h;"  GType g_notification_get_type (void) G_GNUC_CONST;"
g;g_notification_new;glib-auto.f90;/usr/include/glib-2.0/gio/gnotification.h;" GNotification * g_notification_new (const gchar *title);"
g;g_notification_set_body;glib-auto.f90;/usr/include/glib-2.0/gio/gnotification.h;" void g_notification_set_body (GNotification *notification, const gchar *body);"
g;g_notification_set_default_action;glib-auto.f90;/usr/include/glib-2.0/gio/gnotification.h;" void g_notification_set_default_action (GNotification *notification, const gchar *detailed_action);"
g;g_notification_set_default_action_and_target_value;glib-auto.f90;/usr/include/glib-2.0/gio/gnotification.h;" void g_notification_set_default_action_and_target_value (GNotification *notification, const gchar *action, GVariant *target);"
g;g_notification_set_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gnotification.h;" void g_notification_set_icon (GNotification *notification, GIcon *icon);"
g;g_notification_set_priority;glib-auto.f90;/usr/include/glib-2.0/gio/gnotification.h;" void g_notification_set_priority (GNotification *notification, GNotificationPriority priority);"
g;g_notification_set_title;glib-auto.f90;/usr/include/glib-2.0/gio/gnotification.h;" void g_notification_set_title (GNotification *notification, const gchar *title);"
g;g_notification_set_urgent;glib-auto.f90;/usr/include/glib-2.0/gio/gnotification.h;" void g_notification_set_urgent (GNotification *notification, gboolean urgent);"
g;g_null_settings_backend_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsbackend.h;" GSettingsBackend * g_null_settings_backend_new (void);"
g;g_nullify_pointer;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" void g_nullify_pointer (gpointer *nullify_location);"
g;g_object_add_toggle_ref;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_add_toggle_ref (GObject *object, GToggleNotify notify, gpointer data);"
g;g_object_add_weak_pointer;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_add_weak_pointer (GObject *object, gpointer *weak_pointer_location);"
g;g_object_bind_property;glib-auto.f90;/usr/include/glib-2.0/gobject/gbinding.h;" GBinding *g_object_bind_property (gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags);"
g;g_object_bind_property_full;glib-auto.f90;/usr/include/glib-2.0/gobject/gbinding.h;" GBinding *g_object_bind_property_full (gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify notify);"
g;g_object_bind_property_with_closures;glib-auto.f90;/usr/include/glib-2.0/gobject/gbinding.h;" GBinding *g_object_bind_property_with_closures (gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from);"
g;g_object_class_find_property;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" GParamSpec* g_object_class_find_property (GObjectClass *oclass, const gchar *property_name);"
g;g_object_class_install_properties;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_class_install_properties (GObjectClass *oclass, guint n_pspecs, GParamSpec **pspecs);"
g;g_object_class_install_property;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_class_install_property (GObjectClass *oclass, guint property_id, GParamSpec *pspec);"
g;g_object_class_list_properties;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" GParamSpec**g_object_class_list_properties (GObjectClass *oclass, guint *n_properties);"
g;g_object_class_override_property;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_class_override_property (GObjectClass *oclass, guint property_id, const gchar *name);"
g;g_object_compat_control;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gsize g_object_compat_control (gsize what, gpointer data);"
g;g_object_dup_data;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gpointer g_object_dup_data (GObject *object, const gchar *key, GDuplicateFunc dup_func, gpointer user_data);"
g;g_object_dup_qdata;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gpointer g_object_dup_qdata (GObject *object, GQuark quark, GDuplicateFunc dup_func, gpointer user_data);"
g;g_object_force_floating;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_force_floating (GObject *object);"
g;g_object_freeze_notify;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_freeze_notify (GObject *object);"
g;g_object_get_data;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gpointer g_object_get_data (GObject *object, const gchar *key);"
g;g_object_get_property;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_get_property (GObject *object, const gchar *property_name, GValue *value);"
g;g_object_get_qdata;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gpointer g_object_get_qdata (GObject *object, GQuark quark);"
g;g_object_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" GType g_object_get_type (void) G_GNUC_CONST;"
g;g_object_get_valist;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_get_valist (GObject *object, const gchar *first_property_name, va_list var_args);"
g;g_object_interface_find_property;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" GParamSpec* g_object_interface_find_property (gpointer g_iface, const gchar *property_name);"
g;g_object_interface_install_property;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_interface_install_property (gpointer g_iface, GParamSpec *pspec);"
g;g_object_interface_list_properties;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" GParamSpec**g_object_interface_list_properties (gpointer g_iface, guint *n_properties_p);"
g;g_object_is_floating;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gboolean g_object_is_floating (gpointer object);"
g;g_object_new_valist;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" GObject* g_object_new_valist (GType object_type, const gchar *first_property_name, va_list var_args);"
g;g_object_newv;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gpointer g_object_newv (GType object_type, guint n_parameters, GParameter *parameters);"
g;g_object_notify;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_notify (GObject *object, const gchar *property_name);"
g;g_object_notify_by_pspec;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_notify_by_pspec (GObject *object, GParamSpec *pspec);"
g;g_object_ref;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gpointer g_object_ref (gpointer object);"
g;g_object_ref_sink;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gpointer g_object_ref_sink (gpointer object);"
g;g_object_remove_toggle_ref;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_remove_toggle_ref (GObject *object, GToggleNotify notify, gpointer data);"
g;g_object_remove_weak_pointer;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_remove_weak_pointer (GObject *object, gpointer *weak_pointer_location);"
g;g_object_replace_data;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gboolean g_object_replace_data (GObject *object, const gchar *key, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy);"
g;g_object_replace_qdata;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gboolean g_object_replace_qdata (GObject *object, GQuark quark, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy);"
g;g_object_run_dispose;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_run_dispose (GObject *object);"
g;g_object_set_data;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_set_data (GObject *object, const gchar *key, gpointer data);"
g;g_object_set_data_full;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_set_data_full (GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy);"
g;g_object_set_property;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_set_property (GObject *object, const gchar *property_name, const GValue *value);"
g;g_object_set_qdata;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_set_qdata (GObject *object, GQuark quark, gpointer data);"
g;g_object_set_qdata_full;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_set_qdata_full (GObject *object, GQuark quark, gpointer data, GDestroyNotify destroy);"
g;g_object_set_valist;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_set_valist (GObject *object, const gchar *first_property_name, va_list var_args);"
g;g_object_steal_data;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gpointer g_object_steal_data (GObject *object, const gchar *key);"
g;g_object_steal_qdata;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gpointer g_object_steal_qdata (GObject *object, GQuark quark);"
g;g_object_thaw_notify;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_thaw_notify (GObject *object);"
g;g_object_unref;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_unref (gpointer object);"
g;g_object_watch_closure;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_watch_closure (GObject *object, GClosure *closure);"
g;g_object_weak_ref;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_weak_ref (GObject *object, GWeakNotify notify, gpointer data);"
g;g_object_weak_unref;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_object_weak_unref (GObject *object, GWeakNotify notify, gpointer data);"
g;g_on_error_query;glib-auto.f90;/usr/include/glib-2.0/glib/gbacktrace.h;"  void g_on_error_query (const gchar *prg_name);"
g;g_on_error_stack_trace;glib-auto.f90;/usr/include/glib-2.0/glib/gbacktrace.h;" void g_on_error_stack_trace (const gchar *prg_name);"
g;g_once_impl;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" gpointer g_once_impl (GOnce *once, GThreadFunc func, gpointer arg);"
g;g_once_init_enter_impl;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" gboolean g_once_init_enter_impl (volatile gsize *location);"
g;g_once_init_leave;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_once_init_leave (volatile void *location, gsize result);"
g;g_option_context_add_group;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_context_add_group (GOptionContext *context, GOptionGroup *group);"
g;g_option_context_add_main_entries;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_context_add_main_entries (GOptionContext *context, const GOptionEntry *entries, const gchar *translation_domain);"
g;g_option_context_free;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_context_free (GOptionContext *context);"
g;g_option_context_get_description;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" const gchar * g_option_context_get_description (GOptionContext *context);"
g;g_option_context_get_help;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" gchar *g_option_context_get_help (GOptionContext *context, gboolean main_help, GOptionGroup *group);"
g;g_option_context_get_help_enabled;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" gboolean g_option_context_get_help_enabled (GOptionContext *context);"
g;g_option_context_get_ignore_unknown_options;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" gboolean g_option_context_get_ignore_unknown_options (GOptionContext *context);"
g;g_option_context_get_main_group;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" GOptionGroup *g_option_context_get_main_group (GOptionContext *context);"
g;g_option_context_get_strict_posix;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" gboolean g_option_context_get_strict_posix (GOptionContext *context);"
g;g_option_context_get_summary;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" const gchar * g_option_context_get_summary (GOptionContext *context);"
g;g_option_context_new;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" GOptionContext *g_option_context_new (const gchar *parameter_string);"
g;g_option_context_parse;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" gboolean g_option_context_parse (GOptionContext *context, gint *argc, gchar ***argv, GError **error);"
g;g_option_context_parse_strv;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" gboolean g_option_context_parse_strv (GOptionContext *context, gchar ***arguments, GError **error);"
g;g_option_context_set_description;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_context_set_description (GOptionContext *context, const gchar *description);"
g;g_option_context_set_help_enabled;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_context_set_help_enabled (GOptionContext *context, gboolean help_enabled);"
g;g_option_context_set_ignore_unknown_options;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_context_set_ignore_unknown_options (GOptionContext *context, gboolean ignore_unknown);"
g;g_option_context_set_main_group;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_context_set_main_group (GOptionContext *context, GOptionGroup *group);"
g;g_option_context_set_strict_posix;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_context_set_strict_posix (GOptionContext *context, gboolean strict_posix);"
g;g_option_context_set_summary;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_context_set_summary (GOptionContext *context, const gchar *summary);"
g;g_option_context_set_translate_func;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_context_set_translate_func (GOptionContext *context, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);"
g;g_option_context_set_translation_domain;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_context_set_translation_domain (GOptionContext *context, const gchar *domain);"
g;g_option_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;"  GQuark g_option_error_quark (void);"
g;g_option_group_add_entries;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_group_add_entries (GOptionGroup *group, const GOptionEntry *entries);"
g;g_option_group_free;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_group_free (GOptionGroup *group);"
g;g_option_group_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_option_group_get_type (void) G_GNUC_CONST;"
g;g_option_group_new;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" GOptionGroup *g_option_group_new (const gchar *name, const gchar *description, const gchar *help_description, gpointer user_data, GDestroyNotify destroy);"
g;g_option_group_ref;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" GOptionGroup *g_option_group_ref (GOptionGroup *group);"
g;g_option_group_set_error_hook;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_group_set_error_hook (GOptionGroup *group, GOptionErrorFunc error_func);"
g;g_option_group_set_parse_hooks;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_group_set_parse_hooks (GOptionGroup *group, GOptionParseFunc pre_parse_func, GOptionParseFunc post_parse_func);"
g;g_option_group_set_translate_func;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_group_set_translate_func (GOptionGroup *group, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);"
g;g_option_group_set_translation_domain;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_group_set_translation_domain (GOptionGroup *group, const gchar *domain);"
g;g_option_group_unref;glib-auto.f90;/usr/include/glib-2.0/glib/goption.h;" void g_option_group_unref (GOptionGroup *group);"
g;g_output_stream_clear_pending;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" void g_output_stream_clear_pending (GOutputStream *stream);"
g;g_output_stream_close;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gboolean g_output_stream_close (GOutputStream *stream, GCancellable *cancellable, GError **error);"
g;g_output_stream_close_async;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" void g_output_stream_close_async (GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_output_stream_close_finish;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gboolean g_output_stream_close_finish (GOutputStream *stream, GAsyncResult *result, GError **error);"
g;g_output_stream_flush;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gboolean g_output_stream_flush (GOutputStream *stream, GCancellable *cancellable, GError **error);"
g;g_output_stream_flush_async;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" void g_output_stream_flush_async (GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_output_stream_flush_finish;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gboolean g_output_stream_flush_finish (GOutputStream *stream, GAsyncResult *result, GError **error);"
g;g_output_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;"  GType g_output_stream_get_type (void) G_GNUC_CONST;"
g;g_output_stream_has_pending;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gboolean g_output_stream_has_pending (GOutputStream *stream);"
g;g_output_stream_is_closed;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gboolean g_output_stream_is_closed (GOutputStream *stream);"
g;g_output_stream_is_closing;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gboolean g_output_stream_is_closing (GOutputStream *stream);"
g;g_output_stream_printf;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gboolean g_output_stream_printf (GOutputStream *stream, gsize *bytes_written, GCancellable *cancellable, GError **error, const gchar *format, ...) G_GNUC_PRINTF (5, 6);"
g;g_output_stream_set_pending;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gboolean g_output_stream_set_pending (GOutputStream *stream, GError **error);"
g;g_output_stream_splice;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gssize g_output_stream_splice (GOutputStream *stream, GInputStream *source, GOutputStreamSpliceFlags flags, GCancellable *cancellable, GError **error);"
g;g_output_stream_splice_async;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" void g_output_stream_splice_async (GOutputStream *stream, GInputStream *source, GOutputStreamSpliceFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_output_stream_splice_finish;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gssize g_output_stream_splice_finish (GOutputStream *stream, GAsyncResult *result, GError **error);"
g;g_output_stream_vprintf;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gboolean g_output_stream_vprintf (GOutputStream *stream, gsize *bytes_written, GCancellable *cancellable, GError **error, const gchar *format, va_list args) G_GNUC_PRINTF (5, 0);"
g;g_output_stream_write;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gssize g_output_stream_write (GOutputStream *stream, const void *buffer, gsize count, GCancellable *cancellable, GError **error);"
g;g_output_stream_write_all;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gboolean g_output_stream_write_all (GOutputStream *stream, const void *buffer, gsize count, gsize *bytes_written, GCancellable *cancellable, GError **error);"
g;g_output_stream_write_all_async;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" void g_output_stream_write_all_async (GOutputStream *stream, const void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_output_stream_write_all_finish;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gboolean g_output_stream_write_all_finish (GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error);"
g;g_output_stream_write_async;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" void g_output_stream_write_async (GOutputStream *stream, const void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_output_stream_write_bytes;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gssize g_output_stream_write_bytes (GOutputStream *stream, GBytes *bytes, GCancellable *cancellable, GError **error);"
g;g_output_stream_write_bytes_async;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" void g_output_stream_write_bytes_async (GOutputStream *stream, GBytes *bytes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_output_stream_write_bytes_finish;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gssize g_output_stream_write_bytes_finish (GOutputStream *stream, GAsyncResult *result, GError **error);"
g;g_output_stream_write_finish;glib-auto.f90;/usr/include/glib-2.0/gio/goutputstream.h;" gssize g_output_stream_write_finish (GOutputStream *stream, GAsyncResult *result, GError **error);"
g;g_param_spec_boolean;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_boolean (const gchar *name, const gchar *nick, const gchar *blurb, gboolean default_value, GParamFlags flags);"
g;g_param_spec_boxed;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_boxed (const gchar *name, const gchar *nick, const gchar *blurb, GType boxed_type, GParamFlags flags);"
g;g_param_spec_char;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;"  GParamSpec* g_param_spec_char (const gchar *name, const gchar *nick, const gchar *blurb, gint8 minimum, gint8 maximum, gint8 default_value, GParamFlags flags);"
g;g_param_spec_double;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_double (const gchar *name, const gchar *nick, const gchar *blurb, gdouble minimum, gdouble maximum, gdouble default_value, GParamFlags flags);"
g;g_param_spec_enum;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_enum (const gchar *name, const gchar *nick, const gchar *blurb, GType enum_type, gint default_value, GParamFlags flags);"
g;g_param_spec_flags;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_flags (const gchar *name, const gchar *nick, const gchar *blurb, GType flags_type, guint default_value, GParamFlags flags);"
g;g_param_spec_float;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_float (const gchar *name, const gchar *nick, const gchar *blurb, gfloat minimum, gfloat maximum, gfloat default_value, GParamFlags flags);"
g;g_param_spec_get_blurb;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" const gchar * g_param_spec_get_blurb (GParamSpec *pspec);"
g;g_param_spec_get_default_value;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" const GValue * g_param_spec_get_default_value (GParamSpec *pspec);"
g;g_param_spec_get_name;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" const gchar * g_param_spec_get_name (GParamSpec *pspec);"
g;g_param_spec_get_name_quark;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" GQuark g_param_spec_get_name_quark (GParamSpec *pspec);"
g;g_param_spec_get_nick;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" const gchar * g_param_spec_get_nick (GParamSpec *pspec);"
g;g_param_spec_get_qdata;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" gpointer g_param_spec_get_qdata (GParamSpec *pspec, GQuark quark);"
g;g_param_spec_get_redirect_target;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" GParamSpec* g_param_spec_get_redirect_target (GParamSpec *pspec);"
g;g_param_spec_gtype;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_gtype (const gchar *name, const gchar *nick, const gchar *blurb, GType is_a_type, GParamFlags flags);"
g;g_param_spec_int;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_int (const gchar *name, const gchar *nick, const gchar *blurb, gint minimum, gint maximum, gint default_value, GParamFlags flags);"
g;g_param_spec_int64;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_int64 (const gchar *name, const gchar *nick, const gchar *blurb, gint64 minimum, gint64 maximum, gint64 default_value, GParamFlags flags);"
g;g_param_spec_internal;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" gpointer g_param_spec_internal (GType param_type, const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags);"
g;g_param_spec_long;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_long (const gchar *name, const gchar *nick, const gchar *blurb, glong minimum, glong maximum, glong default_value, GParamFlags flags);"
g;g_param_spec_object;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_object (const gchar *name, const gchar *nick, const gchar *blurb, GType object_type, GParamFlags flags);"
g;g_param_spec_override;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_override (const gchar *name, GParamSpec *overridden);"
g;g_param_spec_param;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_param (const gchar *name, const gchar *nick, const gchar *blurb, GType param_type, GParamFlags flags);"
g;g_param_spec_pointer;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_pointer (const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags);"
g;g_param_spec_pool_insert;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" void g_param_spec_pool_insert (GParamSpecPool *pool, GParamSpec *pspec, GType owner_type);"
g;g_param_spec_pool_list;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" GParamSpec** g_param_spec_pool_list (GParamSpecPool *pool, GType owner_type, guint *n_pspecs_p);"
g;g_param_spec_pool_list_owned;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" GList* g_param_spec_pool_list_owned (GParamSpecPool *pool, GType owner_type);"
g;g_param_spec_pool_lookup;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" GParamSpec* g_param_spec_pool_lookup (GParamSpecPool *pool, const gchar *param_name, GType owner_type, gboolean walk_ancestors);"
g;g_param_spec_pool_new;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" GParamSpecPool* g_param_spec_pool_new (gboolean type_prefixing);"
g;g_param_spec_pool_remove;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" void g_param_spec_pool_remove (GParamSpecPool *pool, GParamSpec *pspec);"
g;g_param_spec_ref;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;"    GParamSpec* g_param_spec_ref (GParamSpec *pspec);"
g;g_param_spec_ref_sink;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" GParamSpec* g_param_spec_ref_sink (GParamSpec *pspec);"
g;g_param_spec_set_qdata;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" void g_param_spec_set_qdata (GParamSpec *pspec, GQuark quark, gpointer data);"
g;g_param_spec_set_qdata_full;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" void g_param_spec_set_qdata_full (GParamSpec *pspec, GQuark quark, gpointer data, GDestroyNotify destroy);"
g;g_param_spec_sink;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" void g_param_spec_sink (GParamSpec *pspec);"
g;g_param_spec_steal_qdata;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" gpointer g_param_spec_steal_qdata (GParamSpec *pspec, GQuark quark);"
g;g_param_spec_string;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_string (const gchar *name, const gchar *nick, const gchar *blurb, const gchar *default_value, GParamFlags flags);"
g;g_param_spec_uchar;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_uchar (const gchar *name, const gchar *nick, const gchar *blurb, guint8 minimum, guint8 maximum, guint8 default_value, GParamFlags flags);"
g;g_param_spec_uint;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_uint (const gchar *name, const gchar *nick, const gchar *blurb, guint minimum, guint maximum, guint default_value, GParamFlags flags);"
g;g_param_spec_uint64;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_uint64 (const gchar *name, const gchar *nick, const gchar *blurb, guint64 minimum, guint64 maximum, guint64 default_value, GParamFlags flags);"
g;g_param_spec_ulong;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_ulong (const gchar *name, const gchar *nick, const gchar *blurb, gulong minimum, gulong maximum, gulong default_value, GParamFlags flags);"
g;g_param_spec_unichar;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_unichar (const gchar *name, const gchar *nick, const gchar *blurb, gunichar default_value, GParamFlags flags);"
g;g_param_spec_unref;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" void g_param_spec_unref (GParamSpec *pspec);"
g;g_param_spec_value_array;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_value_array (const gchar *name, const gchar *nick, const gchar *blurb, GParamSpec *element_spec, GParamFlags flags);"
g;g_param_spec_variant;glib-auto.f90;/usr/include/glib-2.0/gobject/gparamspecs.h;" GParamSpec* g_param_spec_variant (const gchar *name, const gchar *nick, const gchar *blurb, const GVariantType *type, GVariant *default_value, GParamFlags flags);"
g;g_param_type_register_static;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" GType g_param_type_register_static (const gchar *name, const GParamSpecTypeInfo *pspec_info);"
g;g_param_value_convert;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" gboolean g_param_value_convert (GParamSpec *pspec, const GValue *src_value, GValue *dest_value, gboolean strict_validation);"
g;g_param_value_defaults;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" gboolean g_param_value_defaults (GParamSpec *pspec, GValue *value);"
g;g_param_value_set_default;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" void g_param_value_set_default (GParamSpec *pspec, GValue *value);"
g;g_param_value_validate;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" gboolean g_param_value_validate (GParamSpec *pspec, GValue *value);"
g;g_param_values_cmp;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" gint g_param_values_cmp (GParamSpec *pspec, const GValue *value1, const GValue *value2);"
g;g_parse_debug_string;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" guint g_parse_debug_string (const gchar *string, const GDebugKey *keys, guint nkeys);"
g;g_path_get_basename;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gchar *g_path_get_basename (const gchar *file_name) G_GNUC_MALLOC;"
g;g_path_get_dirname;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gchar *g_path_get_dirname (const gchar *file_name) G_GNUC_MALLOC;"
g;g_path_is_absolute;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gboolean g_path_is_absolute (const gchar *file_name);"
g;g_path_skip_root;glib-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" const gchar *g_path_skip_root (const gchar *file_name);"
g;g_pattern_match;glib-auto.f90;/usr/include/glib-2.0/glib/gpattern.h;" gboolean g_pattern_match (GPatternSpec *pspec, guint string_length, const gchar *string, const gchar *string_reversed);"
g;g_pattern_match_simple;glib-auto.f90;/usr/include/glib-2.0/glib/gpattern.h;" gboolean g_pattern_match_simple (const gchar *pattern, const gchar *string);"
g;g_pattern_match_string;glib-auto.f90;/usr/include/glib-2.0/glib/gpattern.h;" gboolean g_pattern_match_string (GPatternSpec *pspec, const gchar *string);"
g;g_pattern_spec_equal;glib-auto.f90;/usr/include/glib-2.0/glib/gpattern.h;" gboolean g_pattern_spec_equal (GPatternSpec *pspec1, GPatternSpec *pspec2);"
g;g_pattern_spec_free;glib-auto.f90;/usr/include/glib-2.0/glib/gpattern.h;" void g_pattern_spec_free (GPatternSpec *pspec);"
g;g_pattern_spec_new;glib-auto.f90;/usr/include/glib-2.0/glib/gpattern.h;"  GPatternSpec* g_pattern_spec_new (const gchar *pattern);"
g;g_permission_acquire;glib-auto.f90;/usr/include/glib-2.0/gio/gpermission.h;" gboolean g_permission_acquire (GPermission *permission, GCancellable *cancellable, GError **error);"
g;g_permission_acquire_async;glib-auto.f90;/usr/include/glib-2.0/gio/gpermission.h;" void g_permission_acquire_async (GPermission *permission, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_permission_acquire_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gpermission.h;" gboolean g_permission_acquire_finish (GPermission *permission, GAsyncResult *result, GError **error);"
g;g_permission_get_allowed;glib-auto.f90;/usr/include/glib-2.0/gio/gpermission.h;" gboolean g_permission_get_allowed (GPermission *permission);"
g;g_permission_get_can_acquire;glib-auto.f90;/usr/include/glib-2.0/gio/gpermission.h;" gboolean g_permission_get_can_acquire (GPermission *permission);"
g;g_permission_get_can_release;glib-auto.f90;/usr/include/glib-2.0/gio/gpermission.h;" gboolean g_permission_get_can_release (GPermission *permission);"
g;g_permission_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gpermission.h;"  GType g_permission_get_type (void);"
g;g_permission_impl_update;glib-auto.f90;/usr/include/glib-2.0/gio/gpermission.h;" void g_permission_impl_update (GPermission *permission, gboolean allowed, gboolean can_acquire, gboolean can_release);"
g;g_permission_release;glib-auto.f90;/usr/include/glib-2.0/gio/gpermission.h;" gboolean g_permission_release (GPermission *permission, GCancellable *cancellable, GError **error);"
g;g_permission_release_async;glib-auto.f90;/usr/include/glib-2.0/gio/gpermission.h;" void g_permission_release_async (GPermission *permission, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_permission_release_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gpermission.h;" gboolean g_permission_release_finish (GPermission *permission, GAsyncResult *result, GError **error);"
g;g_pointer_bit_lock;glib-auto.f90;/usr/include/glib-2.0/glib/gbitlock.h;" void g_pointer_bit_lock (volatile void *address, gint lock_bit);"
g;g_pointer_bit_trylock;glib-auto.f90;/usr/include/glib-2.0/glib/gbitlock.h;" gboolean g_pointer_bit_trylock (volatile void *address, gint lock_bit);"
g;g_pointer_bit_unlock;glib-auto.f90;/usr/include/glib-2.0/glib/gbitlock.h;" void g_pointer_bit_unlock (volatile void *address, gint lock_bit);"
g;g_pointer_type_register_static;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" GType g_pointer_type_register_static (const gchar *name);"
g;g_poll;glib-auto.f90;/usr/include/glib-2.0/glib/gpoll.h;"  gint g_poll (GPollFD *fds, guint nfds, gint timeout);"
g;g_pollable_input_stream_can_poll;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableinputstream.h;" gboolean g_pollable_input_stream_can_poll (GPollableInputStream *stream);"
g;g_pollable_input_stream_create_source;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableinputstream.h;" GSource *g_pollable_input_stream_create_source (GPollableInputStream *stream, GCancellable *cancellable);"
g;g_pollable_input_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableinputstream.h;"  GType g_pollable_input_stream_get_type (void) G_GNUC_CONST;"
g;g_pollable_input_stream_is_readable;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableinputstream.h;" gboolean g_pollable_input_stream_is_readable (GPollableInputStream *stream);"
g;g_pollable_input_stream_read_nonblocking;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableinputstream.h;" gssize g_pollable_input_stream_read_nonblocking (GPollableInputStream *stream, void *buffer, gsize count, GCancellable *cancellable, GError **error);"
g;g_pollable_output_stream_can_poll;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableoutputstream.h;" gboolean g_pollable_output_stream_can_poll (GPollableOutputStream *stream);"
g;g_pollable_output_stream_create_source;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableoutputstream.h;" GSource *g_pollable_output_stream_create_source (GPollableOutputStream *stream, GCancellable *cancellable);"
g;g_pollable_output_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableoutputstream.h;"  GType g_pollable_output_stream_get_type (void) G_GNUC_CONST;"
g;g_pollable_output_stream_is_writable;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableoutputstream.h;" gboolean g_pollable_output_stream_is_writable (GPollableOutputStream *stream);"
g;g_pollable_output_stream_write_nonblocking;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableoutputstream.h;" gssize g_pollable_output_stream_write_nonblocking (GPollableOutputStream *stream, const void *buffer, gsize count, GCancellable *cancellable, GError **error);"
g;g_pollable_source_new;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableutils.h;"  GSource *g_pollable_source_new (GObject *pollable_stream);"
g;g_pollable_source_new_full;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableutils.h;" GSource *g_pollable_source_new_full (gpointer pollable_stream, GSource *child_source, GCancellable *cancellable);"
g;g_pollable_stream_read;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableutils.h;" gssize g_pollable_stream_read (GInputStream *stream, void *buffer, gsize count, gboolean blocking, GCancellable *cancellable, GError **error);"
g;g_pollable_stream_write;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableutils.h;" gssize g_pollable_stream_write (GOutputStream *stream, const void *buffer, gsize count, gboolean blocking, GCancellable *cancellable, GError **error);"
g;g_pollable_stream_write_all;glib-auto.f90;/usr/include/glib-2.0/gio/gpollableutils.h;" gboolean g_pollable_stream_write_all (GOutputStream *stream, const void *buffer, gsize count, gboolean blocking, gsize *bytes_written, GCancellable *cancellable, GError **error);"
g;g_pollfd_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_pollfd_get_type (void) G_GNUC_CONST;"
g;g_prefix_error;glib-auto.f90;/usr/include/glib-2.0/glib/gerror.h;" void g_prefix_error (GError **err, const gchar *format, ...) G_GNUC_PRINTF (2, 3);"
g;g_printerr;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" void g_printerr (const gchar *format, ...) G_GNUC_PRINTF (1, 2);"
g;g_printf;glib-auto.f90;/usr/include/glib-2.0/glib/gprintf.h;"  gint g_printf (gchar const *format, ...) G_GNUC_PRINTF (1, 2);"
g;g_printf_string_upper_bound;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;"  gsize g_printf_string_upper_bound (const gchar* format, va_list args) G_GNUC_PRINTF(1, 0);"
g;g_private_get;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" gpointer g_private_get (GPrivate *key);"
g;g_private_new;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" GPrivate * g_private_new (GDestroyNotify notify);"
g;g_private_replace;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_private_replace (GPrivate *key, gpointer value);"
g;g_private_set;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_private_set (GPrivate *key, gpointer value);"
g;g_propagate_error;glib-auto.f90;/usr/include/glib-2.0/glib/gerror.h;" void g_propagate_error (GError **dest, GError *src);"
g;g_propagate_prefixed_error;glib-auto.f90;/usr/include/glib-2.0/glib/gerror.h;" void g_propagate_prefixed_error (GError **dest, GError *src, const gchar *format, ...) G_GNUC_PRINTF (3, 4);"
g;g_property_action_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gpropertyaction.h;"  GType g_property_action_get_type (void) G_GNUC_CONST;"
g;g_property_action_new;glib-auto.f90;/usr/include/glib-2.0/gio/gpropertyaction.h;" GPropertyAction * g_property_action_new (const gchar *name, gpointer object, const gchar *property_name);"
g;g_proxy_address_enumerator_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyaddressenumerator.h;"  GType g_proxy_address_enumerator_get_type (void) G_GNUC_CONST;"
g;g_proxy_address_get_destination_hostname;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyaddress.h;" const gchar *g_proxy_address_get_destination_hostname (GProxyAddress *proxy);"
g;g_proxy_address_get_destination_port;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyaddress.h;" guint16 g_proxy_address_get_destination_port (GProxyAddress *proxy);"
g;g_proxy_address_get_destination_protocol;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyaddress.h;" const gchar *g_proxy_address_get_destination_protocol (GProxyAddress *proxy);"
g;g_proxy_address_get_password;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyaddress.h;" const gchar *g_proxy_address_get_password (GProxyAddress *proxy);"
g;g_proxy_address_get_protocol;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyaddress.h;" const gchar *g_proxy_address_get_protocol (GProxyAddress *proxy);"
g;g_proxy_address_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyaddress.h;"  GType g_proxy_address_get_type (void) G_GNUC_CONST;"
g;g_proxy_address_get_uri;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyaddress.h;" const gchar *g_proxy_address_get_uri (GProxyAddress *proxy);"
g;g_proxy_address_get_username;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyaddress.h;" const gchar *g_proxy_address_get_username (GProxyAddress *proxy);"
g;g_proxy_address_new;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyaddress.h;" GSocketAddress *g_proxy_address_new (GInetAddress *inetaddr, guint16 port, const gchar *protocol, const gchar *dest_hostname, guint16 dest_port, const gchar *username, const gchar *password);"
g;g_proxy_connect;glib-auto.f90;/usr/include/glib-2.0/gio/gproxy.h;" GIOStream *g_proxy_connect (GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GError **error);"
g;g_proxy_connect_async;glib-auto.f90;/usr/include/glib-2.0/gio/gproxy.h;" void g_proxy_connect_async (GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_proxy_connect_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gproxy.h;" GIOStream *g_proxy_connect_finish (GProxy *proxy, GAsyncResult *result, GError **error);"
g;g_proxy_get_default_for_protocol;glib-auto.f90;/usr/include/glib-2.0/gio/gproxy.h;" GProxy *g_proxy_get_default_for_protocol (const gchar *protocol);"
g;g_proxy_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gproxy.h;"  GType g_proxy_get_type (void) G_GNUC_CONST;"
g;g_proxy_resolver_get_default;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyresolver.h;" GProxyResolver *g_proxy_resolver_get_default (void);"
g;g_proxy_resolver_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyresolver.h;"  GType g_proxy_resolver_get_type (void) G_GNUC_CONST;"
g;g_proxy_resolver_is_supported;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyresolver.h;" gboolean g_proxy_resolver_is_supported (GProxyResolver *resolver);"
g;g_proxy_resolver_lookup;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyresolver.h;" gchar **g_proxy_resolver_lookup (GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GError **error);"
g;g_proxy_resolver_lookup_async;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyresolver.h;" void g_proxy_resolver_lookup_async (GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_proxy_resolver_lookup_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gproxyresolver.h;" gchar **g_proxy_resolver_lookup_finish (GProxyResolver *resolver, GAsyncResult *result, GError **error);"
g;g_proxy_supports_hostname;glib-auto.f90;/usr/include/glib-2.0/gio/gproxy.h;" gboolean g_proxy_supports_hostname (GProxy *proxy);"
g;g_ptr_array_add;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_ptr_array_add (GPtrArray *array, gpointer data);"
g;g_ptr_array_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_ptr_array_foreach (GPtrArray *array, GFunc func, gpointer user_data);"
g;g_ptr_array_free;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" gpointer* g_ptr_array_free (GPtrArray *array, gboolean free_seg);"
g;g_ptr_array_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_ptr_array_get_type (void) G_GNUC_CONST;"
g;g_ptr_array_insert;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_ptr_array_insert (GPtrArray *array, gint index_, gpointer data);"
g;g_ptr_array_new;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GPtrArray* g_ptr_array_new (void);"
g;g_ptr_array_new_full;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GPtrArray* g_ptr_array_new_full (guint reserved_size, GDestroyNotify element_free_func);"
g;g_ptr_array_new_with_free_func;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GPtrArray* g_ptr_array_new_with_free_func (GDestroyNotify element_free_func);"
g;g_ptr_array_ref;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GPtrArray* g_ptr_array_ref (GPtrArray *array);"
g;g_ptr_array_remove;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" gboolean g_ptr_array_remove (GPtrArray *array, gpointer data);"
g;g_ptr_array_remove_fast;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" gboolean g_ptr_array_remove_fast (GPtrArray *array, gpointer data);"
g;g_ptr_array_remove_index;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" gpointer g_ptr_array_remove_index (GPtrArray *array, guint index_);"
g;g_ptr_array_remove_index_fast;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" gpointer g_ptr_array_remove_index_fast (GPtrArray *array, guint index_);"
g;g_ptr_array_remove_range;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GPtrArray *g_ptr_array_remove_range (GPtrArray *array, guint index_, guint length);"
g;g_ptr_array_set_free_func;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_ptr_array_set_free_func (GPtrArray *array, GDestroyNotify element_free_func);"
g;g_ptr_array_set_size;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_ptr_array_set_size (GPtrArray *array, gint length);"
g;g_ptr_array_sized_new;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" GPtrArray* g_ptr_array_sized_new (guint reserved_size);"
g;g_ptr_array_sort;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_ptr_array_sort (GPtrArray *array, GCompareFunc compare_func);"
g;g_ptr_array_sort_with_data;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_ptr_array_sort_with_data (GPtrArray *array, GCompareDataFunc compare_func, gpointer user_data);"
g;g_ptr_array_unref;glib-auto.f90;/usr/include/glib-2.0/glib/garray.h;" void g_ptr_array_unref (GPtrArray *array);"
g;g_qsort_with_data;glib-auto.f90;/usr/include/glib-2.0/glib/gqsort.h;"    void g_qsort_with_data (gconstpointer pbase, gint total_elems, gsize size, GCompareDataFunc compare_func, gpointer user_data);"
g;g_quark_from_static_string;glib-auto.f90;/usr/include/glib-2.0/glib/gquark.h;" GQuark g_quark_from_static_string (const gchar *string);"
g;g_quark_from_string;glib-auto.f90;/usr/include/glib-2.0/glib/gquark.h;" GQuark g_quark_from_string (const gchar *string);"
g;g_quark_to_string;glib-auto.f90;/usr/include/glib-2.0/glib/gquark.h;" const gchar * g_quark_to_string (GQuark quark) G_GNUC_CONST;"
g;g_quark_try_string;glib-auto.f90;/usr/include/glib-2.0/glib/gquark.h;"  GQuark g_quark_try_string (const gchar *string);"
g;g_queue_clear;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_clear (GQueue *queue);"
g;g_queue_copy;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" GQueue * g_queue_copy (GQueue *queue);"
g;g_queue_delete_link;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_delete_link (GQueue *queue, GList *link_);"
g;g_queue_find;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" GList * g_queue_find (GQueue *queue, gconstpointer data);"
g;g_queue_find_custom;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" GList * g_queue_find_custom (GQueue *queue, gconstpointer data, GCompareFunc func);"
g;g_queue_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_foreach (GQueue *queue, GFunc func, gpointer user_data);"
g;g_queue_free;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_free (GQueue *queue);"
g;g_queue_free_full;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_free_full (GQueue *queue, GDestroyNotify free_func);"
g;g_queue_get_length;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" guint g_queue_get_length (GQueue *queue);"
g;g_queue_index;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" gint g_queue_index (GQueue *queue, gconstpointer data);"
g;g_queue_init;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_init (GQueue *queue);"
g;g_queue_insert_after;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_insert_after (GQueue *queue, GList *sibling, gpointer data);"
g;g_queue_insert_before;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_insert_before (GQueue *queue, GList *sibling, gpointer data);"
g;g_queue_insert_sorted;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_insert_sorted (GQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data);"
g;g_queue_is_empty;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" gboolean g_queue_is_empty (GQueue *queue);"
g;g_queue_link_index;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" gint g_queue_link_index (GQueue *queue, GList *link_);"
g;g_queue_new;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;"  GQueue* g_queue_new (void);"
g;g_queue_peek_head;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" gpointer g_queue_peek_head (GQueue *queue);"
g;g_queue_peek_head_link;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" GList* g_queue_peek_head_link (GQueue *queue);"
g;g_queue_peek_nth;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" gpointer g_queue_peek_nth (GQueue *queue, guint n);"
g;g_queue_peek_nth_link;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" GList* g_queue_peek_nth_link (GQueue *queue, guint n);"
g;g_queue_peek_tail;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" gpointer g_queue_peek_tail (GQueue *queue);"
g;g_queue_peek_tail_link;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" GList* g_queue_peek_tail_link (GQueue *queue);"
g;g_queue_pop_head;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" gpointer g_queue_pop_head (GQueue *queue);"
g;g_queue_pop_head_link;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" GList* g_queue_pop_head_link (GQueue *queue);"
g;g_queue_pop_nth;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" gpointer g_queue_pop_nth (GQueue *queue, guint n);"
g;g_queue_pop_nth_link;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" GList* g_queue_pop_nth_link (GQueue *queue, guint n);"
g;g_queue_pop_tail;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" gpointer g_queue_pop_tail (GQueue *queue);"
g;g_queue_pop_tail_link;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" GList* g_queue_pop_tail_link (GQueue *queue);"
g;g_queue_push_head;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_push_head (GQueue *queue, gpointer data);"
g;g_queue_push_head_link;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_push_head_link (GQueue *queue, GList *link_);"
g;g_queue_push_nth;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_push_nth (GQueue *queue, gpointer data, gint n);"
g;g_queue_push_nth_link;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_push_nth_link (GQueue *queue, gint n, GList *link_);"
g;g_queue_push_tail;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_push_tail (GQueue *queue, gpointer data);"
g;g_queue_push_tail_link;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_push_tail_link (GQueue *queue, GList *link_);"
g;g_queue_remove;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" gboolean g_queue_remove (GQueue *queue, gconstpointer data);"
g;g_queue_remove_all;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" guint g_queue_remove_all (GQueue *queue, gconstpointer data);"
g;g_queue_reverse;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_reverse (GQueue *queue);"
g;g_queue_sort;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_sort (GQueue *queue, GCompareDataFunc compare_func, gpointer user_data);"
g;g_queue_unlink;glib-auto.f90;/usr/include/glib-2.0/glib/gqueue.h;" void g_queue_unlink (GQueue *queue, GList *link_);"
g;g_rand_copy;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" GRand* g_rand_copy (GRand *rand_);"
g;g_rand_double;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" gdouble g_rand_double (GRand *rand_);"
g;g_rand_double_range;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" gdouble g_rand_double_range (GRand *rand_, gdouble begin, gdouble end);"
g;g_rand_free;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" void g_rand_free (GRand *rand_);"
g;g_rand_int;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" guint32 g_rand_int (GRand *rand_);"
g;g_rand_int_range;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" gint32 g_rand_int_range (GRand *rand_, gint32 begin, gint32 end);"
g;g_rand_new;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" GRand* g_rand_new (void);"
g;g_rand_new_with_seed;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;"  GRand* g_rand_new_with_seed (guint32 seed);"
g;g_rand_new_with_seed_array;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" GRand* g_rand_new_with_seed_array (const guint32 *seed, guint seed_length);"
g;g_rand_set_seed;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" void g_rand_set_seed (GRand *rand_, guint32 seed);"
g;g_rand_set_seed_array;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" void g_rand_set_seed_array (GRand *rand_, const guint32 *seed, guint seed_length);"
g;g_random_double;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" gdouble g_random_double (void);"
g;g_random_double_range;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" gdouble g_random_double_range (gdouble begin, gdouble end);"
g;g_random_int;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" guint32 g_random_int (void);"
g;g_random_int_range;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" gint32 g_random_int_range (gint32 begin, gint32 end);"
g;g_random_set_seed;glib-auto.f90;/usr/include/glib-2.0/glib/grand.h;" void g_random_set_seed (guint32 seed);"
g;g_realloc;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gpointer g_realloc (gpointer mem, gsize n_bytes) G_GNUC_WARN_UNUSED_RESULT;"
g;g_realloc_n;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gpointer g_realloc_n (gpointer mem, gsize n_blocks, gsize n_block_bytes) G_GNUC_WARN_UNUSED_RESULT;"
g;g_rec_mutex_clear;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_rec_mutex_clear (GRecMutex *rec_mutex);"
g;g_rec_mutex_init;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_rec_mutex_init (GRecMutex *rec_mutex);"
g;g_rec_mutex_lock;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_rec_mutex_lock (GRecMutex *rec_mutex);"
g;g_rec_mutex_trylock;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" gboolean g_rec_mutex_trylock (GRecMutex *rec_mutex);"
g;g_rec_mutex_unlock;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_rec_mutex_unlock (GRecMutex *rec_mutex);"
g;g_regex_check_replacement;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gboolean g_regex_check_replacement (const gchar *replacement, gboolean *has_references, GError **error);"
g;g_regex_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;"  GQuark g_regex_error_quark (void);"
g;g_regex_escape_nul;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gchar *g_regex_escape_nul (const gchar *string, gint length);"
g;g_regex_escape_string;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gchar *g_regex_escape_string (const gchar *string, gint length);"
g;g_regex_get_capture_count;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gint g_regex_get_capture_count (const GRegex *regex);"
g;g_regex_get_compile_flags;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" GRegexCompileFlags g_regex_get_compile_flags (const GRegex *regex);"
g;g_regex_get_has_cr_or_lf;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gboolean g_regex_get_has_cr_or_lf (const GRegex *regex);"
g;g_regex_get_match_flags;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" GRegexMatchFlags g_regex_get_match_flags (const GRegex *regex);"
g;g_regex_get_max_backref;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gint g_regex_get_max_backref (const GRegex *regex);"
g;g_regex_get_max_lookbehind;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gint g_regex_get_max_lookbehind (const GRegex *regex);"
g;g_regex_get_pattern;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" const gchar *g_regex_get_pattern (const GRegex *regex);"
g;g_regex_get_string_number;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gint g_regex_get_string_number (const GRegex *regex, const gchar *name);"
g;g_regex_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_regex_get_type (void) G_GNUC_CONST;"
g;g_regex_match;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gboolean g_regex_match (const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info);"
g;g_regex_match_all;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gboolean g_regex_match_all (const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info);"
g;g_regex_match_all_full;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gboolean g_regex_match_all_full (const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error);"
g;g_regex_match_full;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gboolean g_regex_match_full (const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error);"
g;g_regex_match_simple;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gboolean g_regex_match_simple (const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options);"
g;g_regex_new;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" GRegex *g_regex_new (const gchar *pattern, GRegexCompileFlags compile_options, GRegexMatchFlags match_options, GError **error);"
g;g_regex_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" GRegex *g_regex_ref (GRegex *regex);"
g;g_regex_replace;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gchar *g_regex_replace (const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error);"
g;g_regex_replace_eval;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gchar *g_regex_replace_eval (const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data, GError **error);"
g;g_regex_replace_literal;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gchar *g_regex_replace_literal (const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error);"
g;g_regex_split;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gchar **g_regex_split (const GRegex *regex, const gchar *string, GRegexMatchFlags match_options);"
g;g_regex_split_full;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gchar **g_regex_split_full (const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, gint max_tokens, GError **error);"
g;g_regex_split_simple;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" gchar **g_regex_split_simple (const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options);"
g;g_regex_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gregex.h;" void g_regex_unref (GRegex *regex);"
g;g_relation_count;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/grel.h;" gint g_relation_count (GRelation *relation, gconstpointer key, gint field);"
g;g_relation_delete;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/grel.h;" gint g_relation_delete (GRelation *relation, gconstpointer key, gint field);"
g;g_relation_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/grel.h;" void g_relation_destroy (GRelation *relation);"
g;g_relation_index;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/grel.h;" void g_relation_index (GRelation *relation, gint field, GHashFunc hash_func, GEqualFunc key_equal_func);"
g;g_relation_new;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/grel.h;"  GRelation* g_relation_new (gint fields);"
g;g_relation_print;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/grel.h;" void g_relation_print (GRelation *relation);"
g;g_relation_select;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/grel.h;" GTuples* g_relation_select (GRelation *relation, gconstpointer key, gint field);"
g;g_reload_user_special_dirs_cache;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" void g_reload_user_special_dirs_cache (void);"
g;g_remote_action_group_activate_action_full;glib-auto.f90;/usr/include/glib-2.0/gio/gremoteactiongroup.h;" void g_remote_action_group_activate_action_full (GRemoteActionGroup *remote, const gchar *action_name, GVariant *parameter, GVariant *platform_data);"
g;g_remote_action_group_change_action_state_full;glib-auto.f90;/usr/include/glib-2.0/gio/gremoteactiongroup.h;" void g_remote_action_group_change_action_state_full (GRemoteActionGroup *remote, const gchar *action_name, GVariant *value, GVariant *platform_data);"
g;g_remote_action_group_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gremoteactiongroup.h;"  GType g_remote_action_group_get_type (void) G_GNUC_CONST;"
g;g_resolver_error_quark;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" GQuark g_resolver_error_quark (void);"
g;g_resolver_free_addresses;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" void g_resolver_free_addresses (GList *addresses);"
g;g_resolver_free_targets;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" void g_resolver_free_targets (GList *targets);"
g;g_resolver_get_default;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" GResolver *g_resolver_get_default (void);"
g;g_resolver_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;"  GType g_resolver_get_type (void) G_GNUC_CONST;"
g;g_resolver_lookup_by_address;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" gchar *g_resolver_lookup_by_address (GResolver *resolver, GInetAddress *address, GCancellable *cancellable, GError **error);"
g;g_resolver_lookup_by_address_async;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" void g_resolver_lookup_by_address_async (GResolver *resolver, GInetAddress *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_resolver_lookup_by_address_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" gchar *g_resolver_lookup_by_address_finish (GResolver *resolver, GAsyncResult *result, GError **error);"
g;g_resolver_lookup_by_name;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" GList *g_resolver_lookup_by_name (GResolver *resolver, const gchar *hostname, GCancellable *cancellable, GError **error);"
g;g_resolver_lookup_by_name_async;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" void g_resolver_lookup_by_name_async (GResolver *resolver, const gchar *hostname, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_resolver_lookup_by_name_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" GList *g_resolver_lookup_by_name_finish (GResolver *resolver, GAsyncResult *result, GError **error);"
g;g_resolver_lookup_records;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" GList *g_resolver_lookup_records (GResolver *resolver, const gchar *rrname, GResolverRecordType record_type, GCancellable *cancellable, GError **error);"
g;g_resolver_lookup_records_async;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" void g_resolver_lookup_records_async (GResolver *resolver, const gchar *rrname, GResolverRecordType record_type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_resolver_lookup_records_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" GList *g_resolver_lookup_records_finish (GResolver *resolver, GAsyncResult *result, GError **error);"
g;g_resolver_lookup_service;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" GList *g_resolver_lookup_service (GResolver *resolver, const gchar *service, const gchar *protocol, const gchar *domain, GCancellable *cancellable, GError **error);"
g;g_resolver_lookup_service_async;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" void g_resolver_lookup_service_async (GResolver *resolver, const gchar *service, const gchar *protocol, const gchar *domain, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_resolver_lookup_service_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" GList *g_resolver_lookup_service_finish (GResolver *resolver, GAsyncResult *result, GError **error);"
g;g_resolver_set_default;glib-auto.f90;/usr/include/glib-2.0/gio/gresolver.h;" void g_resolver_set_default (GResolver *resolver);"
g;g_resource_enumerate_children;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" char ** g_resource_enumerate_children (GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error);"
g;g_resource_error_quark;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;"  GQuark g_resource_error_quark (void);"
g;g_resource_get_info;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" gboolean g_resource_get_info (GResource *resource, const char *path, GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError **error);"
g;g_resource_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" GType g_resource_get_type (void) G_GNUC_CONST;"
g;g_resource_load;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" GResource * g_resource_load (const gchar *filename, GError **error);"
g;g_resource_lookup_data;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" GBytes * g_resource_lookup_data (GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error);"
g;g_resource_new_from_data;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" GResource * g_resource_new_from_data (GBytes *data, GError **error);"
g;g_resource_open_stream;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" GInputStream *g_resource_open_stream (GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error);"
g;g_resource_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" GResource * g_resource_ref (GResource *resource);"
g;g_resource_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" void g_resource_unref (GResource *resource);"
g;g_resources_enumerate_children;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" char ** g_resources_enumerate_children (const char *path, GResourceLookupFlags lookup_flags, GError **error);"
g;g_resources_get_info;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" gboolean g_resources_get_info (const char *path, GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError **error);"
g;g_resources_lookup_data;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" GBytes * g_resources_lookup_data (const char *path, GResourceLookupFlags lookup_flags, GError **error);"
g;g_resources_open_stream;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" GInputStream *g_resources_open_stream (const char *path, GResourceLookupFlags lookup_flags, GError **error);"
g;g_resources_register;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" void g_resources_register (GResource *resource);"
g;g_resources_unregister;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" void g_resources_unregister (GResource *resource);"
g;g_return_if_fail_warning;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" void g_return_if_fail_warning (const char *log_domain, const char *pretty_function, const char *expression) G_ANALYZER_NORETURN;"
g;g_rw_lock_clear;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_rw_lock_clear (GRWLock *rw_lock);"
g;g_rw_lock_init;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_rw_lock_init (GRWLock *rw_lock);"
g;g_rw_lock_reader_lock;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_rw_lock_reader_lock (GRWLock *rw_lock);"
g;g_rw_lock_reader_trylock;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" gboolean g_rw_lock_reader_trylock (GRWLock *rw_lock);"
g;g_rw_lock_reader_unlock;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_rw_lock_reader_unlock (GRWLock *rw_lock);"
g;g_rw_lock_writer_lock;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_rw_lock_writer_lock (GRWLock *rw_lock);"
g;g_rw_lock_writer_trylock;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" gboolean g_rw_lock_writer_trylock (GRWLock *rw_lock);"
g;g_rw_lock_writer_unlock;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_rw_lock_writer_unlock (GRWLock *rw_lock);"
g;g_scanner_cur_line;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" guint g_scanner_cur_line (GScanner *scanner);"
g;g_scanner_cur_position;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" guint g_scanner_cur_position (GScanner *scanner);"
g;g_scanner_cur_token;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" GTokenType g_scanner_cur_token (GScanner *scanner);"
g;g_scanner_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" void g_scanner_destroy (GScanner *scanner);"
g;g_scanner_eof;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" gboolean g_scanner_eof (GScanner *scanner);"
g;g_scanner_error;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" void g_scanner_error (GScanner *scanner, const gchar *format, ...) G_GNUC_PRINTF (2,3);"
g;g_scanner_get_next_token;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" GTokenType g_scanner_get_next_token (GScanner *scanner);"
g;g_scanner_input_file;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" void g_scanner_input_file (GScanner *scanner, gint input_fd);"
g;g_scanner_input_text;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" void g_scanner_input_text (GScanner *scanner, const gchar *text, guint text_len);"
g;g_scanner_lookup_symbol;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" gpointer g_scanner_lookup_symbol (GScanner *scanner, const gchar *symbol);"
g;g_scanner_new;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;"  GScanner* g_scanner_new (const GScannerConfig *config_templ);"
g;g_scanner_peek_next_token;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" GTokenType g_scanner_peek_next_token (GScanner *scanner);"
g;g_scanner_scope_add_symbol;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" void g_scanner_scope_add_symbol (GScanner *scanner, guint scope_id, const gchar *symbol, gpointer value);"
g;g_scanner_scope_foreach_symbol;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" void g_scanner_scope_foreach_symbol (GScanner *scanner, guint scope_id, GHFunc func, gpointer user_data);"
g;g_scanner_scope_lookup_symbol;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" gpointer g_scanner_scope_lookup_symbol (GScanner *scanner, guint scope_id, const gchar *symbol);"
g;g_scanner_scope_remove_symbol;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" void g_scanner_scope_remove_symbol (GScanner *scanner, guint scope_id, const gchar *symbol);"
g;g_scanner_set_scope;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" guint g_scanner_set_scope (GScanner *scanner, guint scope_id);"
g;g_scanner_sync_file_offset;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" void g_scanner_sync_file_offset (GScanner *scanner);"
g;g_scanner_unexp_token;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" void g_scanner_unexp_token (GScanner *scanner, GTokenType expected_token, const gchar *identifier_spec, const gchar *symbol_spec, const gchar *symbol_name, const gchar *message, gint is_error);"
g;g_scanner_warn;glib-auto.f90;/usr/include/glib-2.0/glib/gscanner.h;" void g_scanner_warn (GScanner *scanner, const gchar *format, ...) G_GNUC_PRINTF (2,3);"
g;g_seekable_can_seek;glib-auto.f90;/usr/include/glib-2.0/gio/gseekable.h;" gboolean g_seekable_can_seek (GSeekable *seekable);"
g;g_seekable_can_truncate;glib-auto.f90;/usr/include/glib-2.0/gio/gseekable.h;" gboolean g_seekable_can_truncate (GSeekable *seekable);"
g;g_seekable_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gseekable.h;"  GType g_seekable_get_type (void) G_GNUC_CONST;"
g;g_seekable_seek;glib-auto.f90;/usr/include/glib-2.0/gio/gseekable.h;" gboolean g_seekable_seek (GSeekable *seekable, goffset offset, GSeekType type, GCancellable *cancellable, GError **error);"
g;g_seekable_tell;glib-auto.f90;/usr/include/glib-2.0/gio/gseekable.h;" goffset g_seekable_tell (GSeekable *seekable);"
g;g_seekable_truncate;glib-auto.f90;/usr/include/glib-2.0/gio/gseekable.h;" gboolean g_seekable_truncate (GSeekable *seekable, goffset offset, GCancellable *cancellable, GError **error);"
g;g_sequence_append;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_append (GSequence *seq, gpointer data);"
g;g_sequence_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_foreach (GSequence *seq, GFunc func, gpointer user_data);"
g;g_sequence_foreach_range;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_foreach_range (GSequenceIter *begin, GSequenceIter *end, GFunc func, gpointer user_data);"
g;g_sequence_free;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_free (GSequence *seq);"
g;g_sequence_get;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" gpointer g_sequence_get (GSequenceIter *iter);"
g;g_sequence_get_begin_iter;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_get_begin_iter (GSequence *seq);"
g;g_sequence_get_end_iter;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_get_end_iter (GSequence *seq);"
g;g_sequence_get_iter_at_pos;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_get_iter_at_pos (GSequence *seq, gint pos);"
g;g_sequence_get_length;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" gint g_sequence_get_length (GSequence *seq);"
g;g_sequence_insert_before;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_insert_before (GSequenceIter *iter, gpointer data);"
g;g_sequence_insert_sorted;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_insert_sorted (GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);"
g;g_sequence_insert_sorted_iter;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_insert_sorted_iter (GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);"
g;g_sequence_is_empty;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" gboolean g_sequence_is_empty (GSequence *seq);"
g;g_sequence_iter_compare;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" gint g_sequence_iter_compare (GSequenceIter *a, GSequenceIter *b);"
g;g_sequence_iter_get_position;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" gint g_sequence_iter_get_position (GSequenceIter *iter);"
g;g_sequence_iter_get_sequence;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequence * g_sequence_iter_get_sequence (GSequenceIter *iter);"
g;g_sequence_iter_is_begin;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" gboolean g_sequence_iter_is_begin (GSequenceIter *iter);"
g;g_sequence_iter_is_end;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" gboolean g_sequence_iter_is_end (GSequenceIter *iter);"
g;g_sequence_iter_move;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_iter_move (GSequenceIter *iter, gint delta);"
g;g_sequence_iter_next;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_iter_next (GSequenceIter *iter);"
g;g_sequence_iter_prev;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_iter_prev (GSequenceIter *iter);"
g;g_sequence_lookup;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_lookup (GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);"
g;g_sequence_lookup_iter;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_lookup_iter (GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);"
g;g_sequence_move;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_move (GSequenceIter *src, GSequenceIter *dest);"
g;g_sequence_move_range;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_move_range (GSequenceIter *dest, GSequenceIter *begin, GSequenceIter *end);"
g;g_sequence_new;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;"  GSequence * g_sequence_new (GDestroyNotify data_destroy);"
g;g_sequence_prepend;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_prepend (GSequence *seq, gpointer data);"
g;g_sequence_range_get_midpoint;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_range_get_midpoint (GSequenceIter *begin, GSequenceIter *end);"
g;g_sequence_remove;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_remove (GSequenceIter *iter);"
g;g_sequence_remove_range;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_remove_range (GSequenceIter *begin, GSequenceIter *end);"
g;g_sequence_search;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_search (GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);"
g;g_sequence_search_iter;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" GSequenceIter *g_sequence_search_iter (GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);"
g;g_sequence_set;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_set (GSequenceIter *iter, gpointer data);"
g;g_sequence_sort;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_sort (GSequence *seq, GCompareDataFunc cmp_func, gpointer cmp_data);"
g;g_sequence_sort_changed;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_sort_changed (GSequenceIter *iter, GCompareDataFunc cmp_func, gpointer cmp_data);"
g;g_sequence_sort_changed_iter;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_sort_changed_iter (GSequenceIter *iter, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);"
g;g_sequence_sort_iter;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_sort_iter (GSequence *seq, GSequenceIterCompareFunc cmp_func, gpointer cmp_data);"
g;g_sequence_swap;glib-auto.f90;/usr/include/glib-2.0/glib/gsequence.h;" void g_sequence_swap (GSequenceIter *a, GSequenceIter *b);"
g;g_set_application_name;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" void g_set_application_name (const gchar *application_name);"
g;g_set_error;glib-auto.f90;/usr/include/glib-2.0/glib/gerror.h;" void g_set_error (GError **err, GQuark domain, gint code, const gchar *format, ...) G_GNUC_PRINTF (4, 5);"
g;g_set_error_literal;glib-auto.f90;/usr/include/glib-2.0/glib/gerror.h;" void g_set_error_literal (GError **err, GQuark domain, gint code, const gchar *message);"
g;g_set_prgname;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" void g_set_prgname (const gchar *prgname);"
g;g_set_print_handler;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" GPrintFunc g_set_print_handler (GPrintFunc func);"
g;g_set_printerr_handler;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" GPrintFunc g_set_printerr_handler (GPrintFunc func);"
g;g_setenv_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/genviron.h;" gboolean g_setenv_utf8 (const gchar *variable, const gchar *value, gboolean overwrite);"
g;g_settings_apply;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" void g_settings_apply (GSettings *settings);"
g;g_settings_backend_changed;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsbackend.h;" void g_settings_backend_changed (GSettingsBackend *backend, const gchar *key, gpointer origin_tag);"
g;g_settings_backend_changed_tree;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsbackend.h;" void g_settings_backend_changed_tree (GSettingsBackend *backend, GTree *tree, gpointer origin_tag);"
g;g_settings_backend_flatten_tree;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsbackend.h;" void g_settings_backend_flatten_tree (GTree *tree, gchar **path, const gchar ***keys, GVariant ***values);"
g;g_settings_backend_get_default;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsbackend.h;" GSettingsBackend * g_settings_backend_get_default (void);"
g;g_settings_backend_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsbackend.h;"  GType g_settings_backend_get_type (void);"
g;g_settings_backend_keys_changed;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsbackend.h;" void g_settings_backend_keys_changed (GSettingsBackend *backend, const gchar *path, gchar const * const *items, gpointer origin_tag);"
g;g_settings_backend_path_changed;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsbackend.h;" void g_settings_backend_path_changed (GSettingsBackend *backend, const gchar *path, gpointer origin_tag);"
g;g_settings_backend_path_writable_changed;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsbackend.h;" void g_settings_backend_path_writable_changed (GSettingsBackend *backend, const gchar *path);"
g;g_settings_backend_writable_changed;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsbackend.h;" void g_settings_backend_writable_changed (GSettingsBackend *backend, const gchar *key);"
g;g_settings_bind;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" void g_settings_bind (GSettings *settings, const gchar *key, gpointer object, const gchar *property, GSettingsBindFlags flags);"
g;g_settings_bind_with_mapping;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" void g_settings_bind_with_mapping (GSettings *settings, const gchar *key, gpointer object, const gchar *property, GSettingsBindFlags flags, GSettingsBindGetMapping get_mapping, GSettingsBindSetMapping set_mapping, gpointer user_data, GDestroyNotify destroy);"
g;g_settings_bind_writable;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" void g_settings_bind_writable (GSettings *settings, const gchar *key, gpointer object, const gchar *property, gboolean inverted);"
g;g_settings_create_action;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" GAction * g_settings_create_action (GSettings *settings, const gchar *key);"
g;g_settings_delay;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" void g_settings_delay (GSettings *settings);"
g;g_settings_get_boolean;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_get_boolean (GSettings *settings, const gchar *key);"
g;g_settings_get_child;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" GSettings * g_settings_get_child (GSettings *settings, const gchar *name);"
g;g_settings_get_default_value;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" GVariant * g_settings_get_default_value (GSettings *settings, const gchar *key);"
g;g_settings_get_double;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gdouble g_settings_get_double (GSettings *settings, const gchar *key);"
g;g_settings_get_enum;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gint g_settings_get_enum (GSettings *settings, const gchar *key);"
g;g_settings_get_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" guint g_settings_get_flags (GSettings *settings, const gchar *key);"
g;g_settings_get_has_unapplied;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_get_has_unapplied (GSettings *settings);"
g;g_settings_get_int;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gint g_settings_get_int (GSettings *settings, const gchar *key);"
g;g_settings_get_mapped;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gpointer g_settings_get_mapped (GSettings *settings, const gchar *key, GSettingsGetMapping mapping, gpointer user_data);"
g;g_settings_get_range;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" GVariant * g_settings_get_range (GSettings *settings, const gchar *key);"
g;g_settings_get_string;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gchar * g_settings_get_string (GSettings *settings, const gchar *key);"
g;g_settings_get_strv;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gchar ** g_settings_get_strv (GSettings *settings, const gchar *key);"
g;g_settings_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;"  GType g_settings_get_type (void);"
g;g_settings_get_uint;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" guint g_settings_get_uint (GSettings *settings, const gchar *key);"
g;g_settings_get_user_value;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" GVariant * g_settings_get_user_value (GSettings *settings, const gchar *key);"
g;g_settings_get_value;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" GVariant * g_settings_get_value (GSettings *settings, const gchar *key);"
g;g_settings_is_writable;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_is_writable (GSettings *settings, const gchar *name);"
g;g_settings_list_children;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gchar ** g_settings_list_children (GSettings *settings);"
g;g_settings_list_keys;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gchar ** g_settings_list_keys (GSettings *settings);"
g;g_settings_list_relocatable_schemas;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" const gchar * const * g_settings_list_relocatable_schemas (void);"
g;g_settings_list_schemas;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" const gchar * const * g_settings_list_schemas (void);"
g;g_settings_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" GSettings * g_settings_new (const gchar *schema_id);"
g;g_settings_new_full;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" GSettings * g_settings_new_full (GSettingsSchema *schema, GSettingsBackend *backend, const gchar *path);"
g;g_settings_new_with_backend;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" GSettings * g_settings_new_with_backend (const gchar *schema_id, GSettingsBackend *backend);"
g;g_settings_new_with_backend_and_path;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" GSettings * g_settings_new_with_backend_and_path (const gchar *schema_id, GSettingsBackend *backend, const gchar *path);"
g;g_settings_new_with_path;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" GSettings * g_settings_new_with_path (const gchar *schema_id, const gchar *path);"
g;g_settings_range_check;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_range_check (GSettings *settings, const gchar *key, GVariant *value);"
g;g_settings_reset;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" void g_settings_reset (GSettings *settings, const gchar *key);"
g;g_settings_revert;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" void g_settings_revert (GSettings *settings);"
g;g_settings_schema_get_id;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" const gchar * g_settings_schema_get_id (GSettingsSchema *schema);"
g;g_settings_schema_get_key;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" GSettingsSchemaKey * g_settings_schema_get_key (GSettingsSchema *schema, const gchar *name);"
g;g_settings_schema_get_path;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" const gchar * g_settings_schema_get_path (GSettingsSchema *schema);"
g;g_settings_schema_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" GType g_settings_schema_get_type (void) G_GNUC_CONST;"
g;g_settings_schema_has_key;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" gboolean g_settings_schema_has_key (GSettingsSchema *schema, const gchar *name);"
g;g_settings_schema_key_get_default_value;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" GVariant * g_settings_schema_key_get_default_value (GSettingsSchemaKey *key);"
g;g_settings_schema_key_get_description;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" const gchar * g_settings_schema_key_get_description (GSettingsSchemaKey *key);"
g;g_settings_schema_key_get_name;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" const gchar * g_settings_schema_key_get_name (GSettingsSchemaKey *key);"
g;g_settings_schema_key_get_range;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" GVariant * g_settings_schema_key_get_range (GSettingsSchemaKey *key);"
g;g_settings_schema_key_get_summary;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" const gchar * g_settings_schema_key_get_summary (GSettingsSchemaKey *key);"
g;g_settings_schema_key_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" GType g_settings_schema_key_get_type (void) G_GNUC_CONST;"
g;g_settings_schema_key_get_value_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" const GVariantType * g_settings_schema_key_get_value_type (GSettingsSchemaKey *key);"
g;g_settings_schema_key_range_check;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" gboolean g_settings_schema_key_range_check (GSettingsSchemaKey *key, GVariant *value);"
g;g_settings_schema_key_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" GSettingsSchemaKey * g_settings_schema_key_ref (GSettingsSchemaKey *key);"
g;g_settings_schema_key_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" void g_settings_schema_key_unref (GSettingsSchemaKey *key);"
g;g_settings_schema_list_children;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" gchar ** g_settings_schema_list_children (GSettingsSchema *schema);"
g;g_settings_schema_list_keys;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" gchar** g_settings_schema_list_keys (GSettingsSchema *schema);"
g;g_settings_schema_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" GSettingsSchema * g_settings_schema_ref (GSettingsSchema *schema);"
g;g_settings_schema_source_get_default;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" GSettingsSchemaSource * g_settings_schema_source_get_default (void);"
g;g_settings_schema_source_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;"  GType g_settings_schema_source_get_type (void) G_GNUC_CONST;"
g;g_settings_schema_source_list_schemas;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" void g_settings_schema_source_list_schemas (GSettingsSchemaSource *source, gboolean recursive, gchar ***non_relocatable, gchar ***relocatable);"
g;g_settings_schema_source_lookup;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" GSettingsSchema * g_settings_schema_source_lookup (GSettingsSchemaSource *source, const gchar *schema_id, gboolean recursive);"
g;g_settings_schema_source_new_from_directory;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" GSettingsSchemaSource * g_settings_schema_source_new_from_directory (const gchar *directory, GSettingsSchemaSource *parent, gboolean trusted, GError **error);"
g;g_settings_schema_source_ref;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" GSettingsSchemaSource * g_settings_schema_source_ref (GSettingsSchemaSource *source);"
g;g_settings_schema_source_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" void g_settings_schema_source_unref (GSettingsSchemaSource *source);"
g;g_settings_schema_unref;glib-auto.f90;/usr/include/glib-2.0/gio/gsettingsschema.h;" void g_settings_schema_unref (GSettingsSchema *schema);"
g;g_settings_set_boolean;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_set_boolean (GSettings *settings, const gchar *key, gboolean value);"
g;g_settings_set_double;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_set_double (GSettings *settings, const gchar *key, gdouble value);"
g;g_settings_set_enum;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_set_enum (GSettings *settings, const gchar *key, gint value);"
g;g_settings_set_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_set_flags (GSettings *settings, const gchar *key, guint value);"
g;g_settings_set_int;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_set_int (GSettings *settings, const gchar *key, gint value);"
g;g_settings_set_string;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_set_string (GSettings *settings, const gchar *key, const gchar *value);"
g;g_settings_set_strv;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_set_strv (GSettings *settings, const gchar *key, const gchar *const *value);"
g;g_settings_set_uint;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_set_uint (GSettings *settings, const gchar *key, guint value);"
g;g_settings_set_value;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" gboolean g_settings_set_value (GSettings *settings, const gchar *key, GVariant *value);"
g;g_settings_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" void g_settings_sync (void);"
g;g_settings_unbind;glib-auto.f90;/usr/include/glib-2.0/gio/gsettings.h;" void g_settings_unbind (gpointer object, const gchar *property);"
g;g_shell_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/gshell.h;"  GQuark g_shell_error_quark (void);"
g;g_shell_parse_argv;glib-auto.f90;/usr/include/glib-2.0/glib/gshell.h;" gboolean g_shell_parse_argv (const gchar *command_line, gint *argcp, gchar ***argvp, GError **error);"
g;g_shell_quote;glib-auto.f90;/usr/include/glib-2.0/glib/gshell.h;" gchar* g_shell_quote (const gchar *unquoted_string);"
g;g_shell_unquote;glib-auto.f90;/usr/include/glib-2.0/glib/gshell.h;" gchar* g_shell_unquote (const gchar *quoted_string, GError **error);"
g;g_signal_accumulator_first_wins;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" gboolean g_signal_accumulator_first_wins (GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy);"
g;g_signal_accumulator_true_handled;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" gboolean g_signal_accumulator_true_handled (GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy);"
g;g_signal_add_emission_hook;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" gulong g_signal_add_emission_hook (guint signal_id, GQuark detail, GSignalEmissionHook hook_func, gpointer hook_data, GDestroyNotify data_destroy);"
g;g_signal_chain_from_overridden;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_chain_from_overridden (const GValue *instance_and_params, GValue *return_value);"
g;g_signal_connect_closure;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" gulong g_signal_connect_closure (gpointer instance, const gchar *detailed_signal, GClosure *closure, gboolean after);"
g;g_signal_connect_closure_by_id;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" gulong g_signal_connect_closure_by_id (gpointer instance, guint signal_id, GQuark detail, GClosure *closure, gboolean after);"
g;g_signal_connect_data;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" gulong g_signal_connect_data (gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer data, GClosureNotify destroy_data, GConnectFlags connect_flags);"
g;g_signal_connect_object;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gulong g_signal_connect_object (gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags);"
g;g_signal_emit_valist;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_emit_valist (gpointer instance, guint signal_id, GQuark detail, va_list var_args);"
g;g_signal_emitv;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_emitv (const GValue *instance_and_params, guint signal_id, GQuark detail, GValue *return_value);"
g;g_signal_get_invocation_hint;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" GSignalInvocationHint* g_signal_get_invocation_hint (gpointer instance);"
g;g_signal_handler_block;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_handler_block (gpointer instance, gulong handler_id);"
g;g_signal_handler_disconnect;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_handler_disconnect (gpointer instance, gulong handler_id);"
g;g_signal_handler_find;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" gulong g_signal_handler_find (gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);"
g;g_signal_handler_is_connected;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" gboolean g_signal_handler_is_connected (gpointer instance, gulong handler_id);"
g;g_signal_handler_unblock;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_handler_unblock (gpointer instance, gulong handler_id);"
g;g_signal_handlers_block_matched;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" guint g_signal_handlers_block_matched (gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);"
g;g_signal_handlers_destroy;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_handlers_destroy (gpointer instance);"
g;g_signal_handlers_disconnect_matched;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" guint g_signal_handlers_disconnect_matched (gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);"
g;g_signal_handlers_unblock_matched;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" guint g_signal_handlers_unblock_matched (gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);"
g;g_signal_has_handler_pending;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" gboolean g_signal_has_handler_pending (gpointer instance, guint signal_id, GQuark detail, gboolean may_be_blocked);"
g;g_signal_list_ids;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" guint* g_signal_list_ids (GType itype, guint *n_ids);"
g;g_signal_lookup;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" guint g_signal_lookup (const gchar *name, GType itype);"
g;g_signal_name;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" const gchar * g_signal_name (guint signal_id);"
g;g_signal_new_valist;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" guint g_signal_new_valist (const gchar *signal_name, GType itype, GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, va_list args);"
g;g_signal_newv;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;"  guint g_signal_newv (const gchar *signal_name, GType itype, GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, GType *param_types);"
g;g_signal_override_class_closure;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_override_class_closure (guint signal_id, GType instance_type, GClosure *class_closure);"
g;g_signal_override_class_handler;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_override_class_handler (const gchar *signal_name, GType instance_type, GCallback class_handler);"
g;g_signal_parse_name;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" gboolean g_signal_parse_name (const gchar *detailed_signal, GType itype, guint *signal_id_p, GQuark *detail_p, gboolean force_detail_quark);"
g;g_signal_query;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_query (guint signal_id, GSignalQuery *query);"
g;g_signal_remove_emission_hook;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_remove_emission_hook (guint signal_id, gulong hook_id);"
g;g_signal_stop_emission;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_stop_emission (gpointer instance, guint signal_id, GQuark detail);"
g;g_signal_stop_emission_by_name;glib-auto.f90;/usr/include/glib-2.0/gobject/gsignal.h;" void g_signal_stop_emission_by_name (gpointer instance, const gchar *detailed_signal);"
g;g_signal_type_cclosure_new;glib-auto.f90;/usr/include/glib-2.0/gobject/gclosure.h;" GClosure* g_signal_type_cclosure_new (GType itype, guint struct_offset);"
g;g_simple_action_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleaction.h;"  GType g_simple_action_get_type (void) G_GNUC_CONST;"
g;g_simple_action_group_add_entries;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleactiongroup.h;" void g_simple_action_group_add_entries (GSimpleActionGroup *simple, const GActionEntry *entries, gint n_entries, gpointer user_data);"
g;g_simple_action_group_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleactiongroup.h;"  GType g_simple_action_group_get_type (void) G_GNUC_CONST;"
g;g_simple_action_group_insert;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleactiongroup.h;" void g_simple_action_group_insert (GSimpleActionGroup *simple, GAction *action);"
g;g_simple_action_group_lookup;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleactiongroup.h;" GAction * g_simple_action_group_lookup (GSimpleActionGroup *simple, const gchar *action_name);"
g;g_simple_action_group_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleactiongroup.h;" GSimpleActionGroup * g_simple_action_group_new (void);"
g;g_simple_action_group_remove;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleactiongroup.h;" void g_simple_action_group_remove (GSimpleActionGroup *simple, const gchar *action_name);"
g;g_simple_action_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleaction.h;" GSimpleAction * g_simple_action_new (const gchar *name, const GVariantType *parameter_type);"
g;g_simple_action_new_stateful;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleaction.h;" GSimpleAction * g_simple_action_new_stateful (const gchar *name, const GVariantType *parameter_type, GVariant *state);"
g;g_simple_action_set_enabled;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleaction.h;" void g_simple_action_set_enabled (GSimpleAction *simple, gboolean enabled);"
g;g_simple_action_set_state;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleaction.h;" void g_simple_action_set_state (GSimpleAction *simple, GVariant *value);"
g;g_simple_action_set_state_hint;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleaction.h;" void g_simple_action_set_state_hint (GSimpleAction *simple, GVariant *state_hint);"
g;g_simple_async_report_error_in_idle;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_report_error_in_idle (GObject *object, GAsyncReadyCallback callback, gpointer user_data, GQuark domain, gint code, const char *format, ...) G_GNUC_PRINTF(6, 7);"
g;g_simple_async_report_gerror_in_idle;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_report_gerror_in_idle (GObject *object, GAsyncReadyCallback callback, gpointer user_data, const GError *error);"
g;g_simple_async_report_take_gerror_in_idle;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_report_take_gerror_in_idle (GObject *object, GAsyncReadyCallback callback, gpointer user_data, GError *error);"
g;g_simple_async_result_complete;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_result_complete (GSimpleAsyncResult *simple);"
g;g_simple_async_result_complete_in_idle;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_result_complete_in_idle (GSimpleAsyncResult *simple);"
g;g_simple_async_result_get_op_res_gboolean;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" gboolean g_simple_async_result_get_op_res_gboolean (GSimpleAsyncResult *simple);"
g;g_simple_async_result_get_op_res_gpointer;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" gpointer g_simple_async_result_get_op_res_gpointer (GSimpleAsyncResult *simple);"
g;g_simple_async_result_get_op_res_gssize;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" gssize g_simple_async_result_get_op_res_gssize (GSimpleAsyncResult *simple);"
g;g_simple_async_result_get_source_tag;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" gpointer g_simple_async_result_get_source_tag (GSimpleAsyncResult *simple);"
g;g_simple_async_result_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;"  GType g_simple_async_result_get_type (void) G_GNUC_CONST;"
g;g_simple_async_result_is_valid;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" gboolean g_simple_async_result_is_valid (GAsyncResult *result, GObject *source, gpointer source_tag);"
g;g_simple_async_result_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" GSimpleAsyncResult *g_simple_async_result_new (GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, gpointer source_tag);"
g;g_simple_async_result_new_error;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" GSimpleAsyncResult *g_simple_async_result_new_error (GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, GQuark domain, gint code, const char *format, ...) G_GNUC_PRINTF (6, 7);"
g;g_simple_async_result_new_from_error;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" GSimpleAsyncResult *g_simple_async_result_new_from_error (GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, const GError *error);"
g;g_simple_async_result_new_take_error;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" GSimpleAsyncResult *g_simple_async_result_new_take_error (GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, GError *error);"
g;g_simple_async_result_propagate_error;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" gboolean g_simple_async_result_propagate_error (GSimpleAsyncResult *simple, GError **dest);"
g;g_simple_async_result_run_in_thread;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_result_run_in_thread (GSimpleAsyncResult *simple, GSimpleAsyncThreadFunc func, int io_priority, GCancellable *cancellable);"
g;g_simple_async_result_set_check_cancellable;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_result_set_check_cancellable (GSimpleAsyncResult *simple, GCancellable *check_cancellable);"
g;g_simple_async_result_set_error;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_result_set_error (GSimpleAsyncResult *simple, GQuark domain, gint code, const char *format, ...) G_GNUC_PRINTF (4, 5);"
g;g_simple_async_result_set_error_va;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_result_set_error_va (GSimpleAsyncResult *simple, GQuark domain, gint code, const char *format, va_list args) G_GNUC_PRINTF(4, 0);"
g;g_simple_async_result_set_from_error;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_result_set_from_error (GSimpleAsyncResult *simple, const GError *error);"
g;g_simple_async_result_set_handle_cancellation;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_result_set_handle_cancellation (GSimpleAsyncResult *simple, gboolean handle_cancellation);"
g;g_simple_async_result_set_op_res_gboolean;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_result_set_op_res_gboolean (GSimpleAsyncResult *simple, gboolean op_res);"
g;g_simple_async_result_set_op_res_gpointer;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_result_set_op_res_gpointer (GSimpleAsyncResult *simple, gpointer op_res, GDestroyNotify destroy_op_res);"
g;g_simple_async_result_set_op_res_gssize;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_result_set_op_res_gssize (GSimpleAsyncResult *simple, gssize op_res);"
g;g_simple_async_result_take_error;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleasyncresult.h;" void g_simple_async_result_take_error (GSimpleAsyncResult *simple, GError *error);"
g;g_simple_io_stream_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleiostream.h;"  GType g_simple_io_stream_get_type (void) G_GNUC_CONST;"
g;g_simple_io_stream_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleiostream.h;" GIOStream *g_simple_io_stream_new (GInputStream *input_stream, GOutputStream *output_stream);"
g;g_simple_permission_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsimplepermission.h;"  GType g_simple_permission_get_type (void);"
g;g_simple_permission_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsimplepermission.h;" GPermission * g_simple_permission_new (gboolean allowed);"
g;g_simple_proxy_resolver_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleproxyresolver.h;"  GType g_simple_proxy_resolver_get_type (void) G_GNUC_CONST;"
g;g_simple_proxy_resolver_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleproxyresolver.h;" GProxyResolver *g_simple_proxy_resolver_new (const gchar *default_proxy, gchar **ignore_hosts);"
g;g_simple_proxy_resolver_set_default_proxy;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleproxyresolver.h;" void g_simple_proxy_resolver_set_default_proxy (GSimpleProxyResolver *resolver, const gchar *default_proxy);"
g;g_simple_proxy_resolver_set_ignore_hosts;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleproxyresolver.h;" void g_simple_proxy_resolver_set_ignore_hosts (GSimpleProxyResolver *resolver, gchar **ignore_hosts);"
g;g_simple_proxy_resolver_set_uri_proxy;glib-auto.f90;/usr/include/glib-2.0/gio/gsimpleproxyresolver.h;" void g_simple_proxy_resolver_set_uri_proxy (GSimpleProxyResolver *resolver, const gchar *uri_scheme, const gchar *proxy);"
g;g_slice_alloc;glib-auto.f90;/usr/include/glib-2.0/glib/gslice.h;"  gpointer g_slice_alloc (gsize block_size) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE(1);"
g;g_slice_alloc0;glib-auto.f90;/usr/include/glib-2.0/glib/gslice.h;" gpointer g_slice_alloc0 (gsize block_size) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE(1);"
g;g_slice_copy;glib-auto.f90;/usr/include/glib-2.0/glib/gslice.h;" gpointer g_slice_copy (gsize block_size, gconstpointer mem_block) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE(1);"
g;g_slice_debug_tree_statistics;glib-auto.f90;/usr/include/glib-2.0/glib/gslice.h;" void g_slice_debug_tree_statistics (void);"
g;g_slice_free1;glib-auto.f90;/usr/include/glib-2.0/glib/gslice.h;" void g_slice_free1 (gsize block_size, gpointer mem_block);"
g;g_slice_free_chain_with_offset;glib-auto.f90;/usr/include/glib-2.0/glib/gslice.h;" void g_slice_free_chain_with_offset (gsize block_size, gpointer mem_chain, gsize next_offset);"
g;g_slice_get_config;glib-auto.f90;/usr/include/glib-2.0/glib/gslice.h;" gint64 g_slice_get_config (GSliceConfig ckey);"
g;g_slice_get_config_state;glib-auto.f90;/usr/include/glib-2.0/glib/gslice.h;" gint64* g_slice_get_config_state (GSliceConfig ckey, gint64 address, guint *n_values);"
g;g_slice_set_config;glib-auto.f90;/usr/include/glib-2.0/glib/gslice.h;" void g_slice_set_config (GSliceConfig ckey, gint64 value);"
g;g_slist_alloc;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;"  GSList* g_slist_alloc (void) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_append;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_append (GSList *list, gpointer data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_concat;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_concat (GSList *list1, GSList *list2) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_copy;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_copy (GSList *list) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_copy_deep;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_copy_deep (GSList *list, GCopyFunc func, gpointer user_data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_delete_link;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_delete_link (GSList *list, GSList *link_) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_find;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_find (GSList *list, gconstpointer data);"
g;g_slist_find_custom;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_find_custom (GSList *list, gconstpointer data, GCompareFunc func);"
g;g_slist_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" void g_slist_foreach (GSList *list, GFunc func, gpointer user_data);"
g;g_slist_free;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" void g_slist_free (GSList *list);"
g;g_slist_free_1;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" void g_slist_free_1 (GSList *list);"
g;g_slist_free_full;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" void g_slist_free_full (GSList *list, GDestroyNotify free_func);"
g;g_slist_index;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" gint g_slist_index (GSList *list, gconstpointer data);"
g;g_slist_insert;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_insert (GSList *list, gpointer data, gint position) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_insert_before;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_insert_before (GSList *slist, GSList *sibling, gpointer data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_insert_sorted;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_insert_sorted (GSList *list, gpointer data, GCompareFunc func) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_insert_sorted_with_data;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_insert_sorted_with_data (GSList *list, gpointer data, GCompareDataFunc func, gpointer user_data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_last;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_last (GSList *list);"
g;g_slist_length;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" guint g_slist_length (GSList *list);"
g;g_slist_nth;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_nth (GSList *list, guint n);"
g;g_slist_nth_data;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" gpointer g_slist_nth_data (GSList *list, guint n);"
g;g_slist_pop_allocator;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_slist_pop_allocator (void);"
g;g_slist_position;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" gint g_slist_position (GSList *list, GSList *llink);"
g;g_slist_prepend;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_prepend (GSList *list, gpointer data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_push_allocator;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gallocator.h;" void g_slist_push_allocator (GAllocator *allocator);"
g;g_slist_remove;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_remove (GSList *list, gconstpointer data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_remove_all;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_remove_all (GSList *list, gconstpointer data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_remove_link;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_remove_link (GSList *list, GSList *link_) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_reverse;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_reverse (GSList *list) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_sort;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_sort (GSList *list, GCompareFunc compare_func) G_GNUC_WARN_UNUSED_RESULT;"
g;g_slist_sort_with_data;glib-auto.f90;/usr/include/glib-2.0/glib/gslist.h;" GSList* g_slist_sort_with_data (GSList *list, GCompareDataFunc compare_func, gpointer user_data) G_GNUC_WARN_UNUSED_RESULT;"
g;g_snprintf;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" gint g_snprintf (gchar *string, gulong n, gchar const *format, ...) G_GNUC_PRINTF (3, 4);"
g;g_socket_accept;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" GSocket * g_socket_accept (GSocket *socket, GCancellable *cancellable, GError **error);"
g;g_socket_address_enumerator_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketaddressenumerator.h;"  GType g_socket_address_enumerator_get_type (void) G_GNUC_CONST;"
g;g_socket_address_enumerator_next;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketaddressenumerator.h;" GSocketAddress *g_socket_address_enumerator_next (GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GError **error);"
g;g_socket_address_enumerator_next_async;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketaddressenumerator.h;" void g_socket_address_enumerator_next_async (GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_socket_address_enumerator_next_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketaddressenumerator.h;" GSocketAddress *g_socket_address_enumerator_next_finish (GSocketAddressEnumerator *enumerator, GAsyncResult *result, GError **error);"
g;g_socket_address_get_family;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketaddress.h;" GSocketFamily g_socket_address_get_family (GSocketAddress *address);"
g;g_socket_address_get_native_size;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketaddress.h;" gssize g_socket_address_get_native_size (GSocketAddress *address);"
g;g_socket_address_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketaddress.h;"  GType g_socket_address_get_type (void) G_GNUC_CONST;"
g;g_socket_address_new_from_native;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketaddress.h;" GSocketAddress * g_socket_address_new_from_native (gpointer native, gsize len);"
g;g_socket_address_to_native;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketaddress.h;" gboolean g_socket_address_to_native (GSocketAddress *address, gpointer dest, gsize destlen, GError **error);"
g;g_socket_bind;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_bind (GSocket *socket, GSocketAddress *address, gboolean allow_reuse, GError **error);"
g;g_socket_check_connect_result;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_check_connect_result (GSocket *socket, GError **error);"
g;g_socket_client_add_application_proxy;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_add_application_proxy (GSocketClient *client, const gchar *protocol);"
g;g_socket_client_connect;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketConnection * g_socket_client_connect (GSocketClient *client, GSocketConnectable *connectable, GCancellable *cancellable, GError **error);"
g;g_socket_client_connect_async;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_connect_async (GSocketClient *client, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_socket_client_connect_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketConnection * g_socket_client_connect_finish (GSocketClient *client, GAsyncResult *result, GError **error);"
g;g_socket_client_connect_to_host;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketConnection * g_socket_client_connect_to_host (GSocketClient *client, const gchar *host_and_port, guint16 default_port, GCancellable *cancellable, GError **error);"
g;g_socket_client_connect_to_host_async;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_connect_to_host_async (GSocketClient *client, const gchar *host_and_port, guint16 default_port, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_socket_client_connect_to_host_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketConnection * g_socket_client_connect_to_host_finish (GSocketClient *client, GAsyncResult *result, GError **error);"
g;g_socket_client_connect_to_service;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketConnection * g_socket_client_connect_to_service (GSocketClient *client, const gchar *domain, const gchar *service, GCancellable *cancellable, GError **error);"
g;g_socket_client_connect_to_service_async;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_connect_to_service_async (GSocketClient *client, const gchar *domain, const gchar *service, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_socket_client_connect_to_service_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketConnection * g_socket_client_connect_to_service_finish (GSocketClient *client, GAsyncResult *result, GError **error);"
g;g_socket_client_connect_to_uri;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketConnection * g_socket_client_connect_to_uri (GSocketClient *client, const gchar *uri, guint16 default_port, GCancellable *cancellable, GError **error);"
g;g_socket_client_connect_to_uri_async;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_connect_to_uri_async (GSocketClient *client, const gchar *uri, guint16 default_port, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_socket_client_connect_to_uri_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketConnection * g_socket_client_connect_to_uri_finish (GSocketClient *client, GAsyncResult *result, GError **error);"
g;g_socket_client_get_enable_proxy;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" gboolean g_socket_client_get_enable_proxy (GSocketClient *client);"
g;g_socket_client_get_family;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketFamily g_socket_client_get_family (GSocketClient *client);"
g;g_socket_client_get_local_address;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketAddress *g_socket_client_get_local_address (GSocketClient *client);"
g;g_socket_client_get_protocol;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketProtocol g_socket_client_get_protocol (GSocketClient *client);"
g;g_socket_client_get_proxy_resolver;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GProxyResolver *g_socket_client_get_proxy_resolver (GSocketClient *client);"
g;g_socket_client_get_socket_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketType g_socket_client_get_socket_type (GSocketClient *client);"
g;g_socket_client_get_timeout;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" guint g_socket_client_get_timeout (GSocketClient *client);"
g;g_socket_client_get_tls;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" gboolean g_socket_client_get_tls (GSocketClient *client);"
g;g_socket_client_get_tls_validation_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GTlsCertificateFlags g_socket_client_get_tls_validation_flags (GSocketClient *client);"
g;g_socket_client_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;"  GType g_socket_client_get_type (void) G_GNUC_CONST;"
g;g_socket_client_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" GSocketClient *g_socket_client_new (void);"
g;g_socket_client_set_enable_proxy;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_set_enable_proxy (GSocketClient *client, gboolean enable);"
g;g_socket_client_set_family;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_set_family (GSocketClient *client, GSocketFamily family);"
g;g_socket_client_set_local_address;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_set_local_address (GSocketClient *client, GSocketAddress *address);"
g;g_socket_client_set_protocol;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_set_protocol (GSocketClient *client, GSocketProtocol protocol);"
g;g_socket_client_set_proxy_resolver;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_set_proxy_resolver (GSocketClient *client, GProxyResolver *proxy_resolver);"
g;g_socket_client_set_socket_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_set_socket_type (GSocketClient *client, GSocketType type);"
g;g_socket_client_set_timeout;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_set_timeout (GSocketClient *client, guint timeout);"
g;g_socket_client_set_tls;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_set_tls (GSocketClient *client, gboolean tls);"
g;g_socket_client_set_tls_validation_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketclient.h;" void g_socket_client_set_tls_validation_flags (GSocketClient *client, GTlsCertificateFlags flags);"
g;g_socket_close;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_close (GSocket *socket, GError **error);"
g;g_socket_condition_check;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" GIOCondition g_socket_condition_check (GSocket *socket, GIOCondition condition);"
g;g_socket_condition_timed_wait;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_condition_timed_wait (GSocket *socket, GIOCondition condition, gint64 timeout, GCancellable *cancellable, GError **error);"
g;g_socket_condition_wait;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_condition_wait (GSocket *socket, GIOCondition condition, GCancellable *cancellable, GError **error);"
g;g_socket_connect;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_connect (GSocket *socket, GSocketAddress *address, GCancellable *cancellable, GError **error);"
g;g_socket_connectable_enumerate;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnectable.h;" GSocketAddressEnumerator *g_socket_connectable_enumerate (GSocketConnectable *connectable);"
g;g_socket_connectable_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnectable.h;"  GType g_socket_connectable_get_type (void) G_GNUC_CONST;"
g;g_socket_connectable_proxy_enumerate;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnectable.h;" GSocketAddressEnumerator *g_socket_connectable_proxy_enumerate (GSocketConnectable *connectable);"
g;g_socket_connectable_to_string;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnectable.h;" gchar *g_socket_connectable_to_string (GSocketConnectable *connectable);"
g;g_socket_connection_connect;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnection.h;" gboolean g_socket_connection_connect (GSocketConnection *connection, GSocketAddress *address, GCancellable *cancellable, GError **error);"
g;g_socket_connection_connect_async;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnection.h;" void g_socket_connection_connect_async (GSocketConnection *connection, GSocketAddress *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_socket_connection_connect_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnection.h;" gboolean g_socket_connection_connect_finish (GSocketConnection *connection, GAsyncResult *result, GError **error);"
g;g_socket_connection_factory_create_connection;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnection.h;" GSocketConnection *g_socket_connection_factory_create_connection (GSocket *socket);"
g;g_socket_connection_factory_lookup_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnection.h;" GType g_socket_connection_factory_lookup_type (GSocketFamily family, GSocketType type, gint protocol_id);"
g;g_socket_connection_factory_register_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnection.h;" void g_socket_connection_factory_register_type (GType g_type, GSocketFamily family, GSocketType type, gint protocol);"
g;g_socket_connection_get_local_address;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnection.h;" GSocketAddress *g_socket_connection_get_local_address (GSocketConnection *connection, GError **error);"
g;g_socket_connection_get_remote_address;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnection.h;" GSocketAddress *g_socket_connection_get_remote_address (GSocketConnection *connection, GError **error);"
g;g_socket_connection_get_socket;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnection.h;" GSocket *g_socket_connection_get_socket (GSocketConnection *connection);"
g;g_socket_connection_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnection.h;"  GType g_socket_connection_get_type (void) G_GNUC_CONST;"
g;g_socket_connection_is_connected;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketconnection.h;" gboolean g_socket_connection_is_connected (GSocketConnection *connection);"
g;g_socket_control_message_deserialize;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketcontrolmessage.h;" GSocketControlMessage *g_socket_control_message_deserialize (int level, int type, gsize size, gpointer data);"
g;g_socket_control_message_get_level;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketcontrolmessage.h;" int g_socket_control_message_get_level (GSocketControlMessage *message);"
g;g_socket_control_message_get_msg_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketcontrolmessage.h;" int g_socket_control_message_get_msg_type (GSocketControlMessage *message);"
g;g_socket_control_message_get_size;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketcontrolmessage.h;" gsize g_socket_control_message_get_size (GSocketControlMessage *message);"
g;g_socket_control_message_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketcontrolmessage.h;"  GType g_socket_control_message_get_type (void) G_GNUC_CONST;"
g;g_socket_control_message_serialize;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketcontrolmessage.h;" void g_socket_control_message_serialize (GSocketControlMessage *message, gpointer data);"
g;g_socket_create_source;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" GSource * g_socket_create_source (GSocket *socket, GIOCondition condition, GCancellable *cancellable);"
g;g_socket_get_available_bytes;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gssize g_socket_get_available_bytes (GSocket *socket);"
g;g_socket_get_blocking;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_get_blocking (GSocket *socket);"
g;g_socket_get_broadcast;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_get_broadcast (GSocket *socket);"
g;g_socket_get_credentials;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" GCredentials *g_socket_get_credentials (GSocket *socket, GError **error);"
g;g_socket_get_family;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" GSocketFamily g_socket_get_family (GSocket *socket);"
g;g_socket_get_fd;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" int g_socket_get_fd (GSocket *socket);"
g;g_socket_get_keepalive;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_get_keepalive (GSocket *socket);"
g;g_socket_get_listen_backlog;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gint g_socket_get_listen_backlog (GSocket *socket);"
g;g_socket_get_local_address;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" GSocketAddress * g_socket_get_local_address (GSocket *socket, GError **error);"
g;g_socket_get_multicast_loopback;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_get_multicast_loopback (GSocket *socket);"
g;g_socket_get_multicast_ttl;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" guint g_socket_get_multicast_ttl (GSocket *socket);"
g;g_socket_get_option;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_get_option (GSocket *socket, gint level, gint optname, gint *value, GError **error);"
g;g_socket_get_protocol;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" GSocketProtocol g_socket_get_protocol (GSocket *socket);"
g;g_socket_get_remote_address;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" GSocketAddress * g_socket_get_remote_address (GSocket *socket, GError **error);"
g;g_socket_get_socket_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" GSocketType g_socket_get_socket_type (GSocket *socket);"
g;g_socket_get_timeout;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" guint g_socket_get_timeout (GSocket *socket);"
g;g_socket_get_ttl;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" guint g_socket_get_ttl (GSocket *socket);"
g;g_socket_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;"  GType g_socket_get_type (void) G_GNUC_CONST;"
g;g_socket_is_closed;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_is_closed (GSocket *socket);"
g;g_socket_is_connected;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_is_connected (GSocket *socket);"
g;g_socket_join_multicast_group;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_join_multicast_group (GSocket *socket, GInetAddress *group, gboolean source_specific, const gchar *iface, GError **error);"
g;g_socket_leave_multicast_group;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_leave_multicast_group (GSocket *socket, GInetAddress *group, gboolean source_specific, const gchar *iface, GError **error);"
g;g_socket_listen;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_listen (GSocket *socket, GError **error);"
g;g_socket_listener_accept;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" GSocketConnection * g_socket_listener_accept (GSocketListener *listener, GObject **source_object, GCancellable *cancellable, GError **error);"
g;g_socket_listener_accept_async;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" void g_socket_listener_accept_async (GSocketListener *listener, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_socket_listener_accept_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" GSocketConnection * g_socket_listener_accept_finish (GSocketListener *listener, GAsyncResult *result, GObject **source_object, GError **error);"
g;g_socket_listener_accept_socket;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" GSocket * g_socket_listener_accept_socket (GSocketListener *listener, GObject **source_object, GCancellable *cancellable, GError **error);"
g;g_socket_listener_accept_socket_async;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" void g_socket_listener_accept_socket_async (GSocketListener *listener, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_socket_listener_accept_socket_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" GSocket * g_socket_listener_accept_socket_finish (GSocketListener *listener, GAsyncResult *result, GObject **source_object, GError **error);"
g;g_socket_listener_add_address;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" gboolean g_socket_listener_add_address (GSocketListener *listener, GSocketAddress *address, GSocketType type, GSocketProtocol protocol, GObject *source_object, GSocketAddress **effective_address, GError **error);"
g;g_socket_listener_add_any_inet_port;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" guint16 g_socket_listener_add_any_inet_port (GSocketListener *listener, GObject *source_object, GError **error);"
g;g_socket_listener_add_inet_port;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" gboolean g_socket_listener_add_inet_port (GSocketListener *listener, guint16 port, GObject *source_object, GError **error);"
g;g_socket_listener_add_socket;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" gboolean g_socket_listener_add_socket (GSocketListener *listener, GSocket *socket, GObject *source_object, GError **error);"
g;g_socket_listener_close;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" void g_socket_listener_close (GSocketListener *listener);"
g;g_socket_listener_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;"  GType g_socket_listener_get_type (void) G_GNUC_CONST;"
g;g_socket_listener_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" GSocketListener * g_socket_listener_new (void);"
g;g_socket_listener_set_backlog;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketlistener.h;" void g_socket_listener_set_backlog (GSocketListener *listener, int listen_backlog);"
g;g_socket_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" GSocket * g_socket_new (GSocketFamily family, GSocketType type, GSocketProtocol protocol, GError **error);"
g;g_socket_new_from_fd;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" GSocket * g_socket_new_from_fd (gint fd, GError **error);"
g;g_socket_receive;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gssize g_socket_receive (GSocket *socket, gchar *buffer, gsize size, GCancellable *cancellable, GError **error);"
g;g_socket_receive_from;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gssize g_socket_receive_from (GSocket *socket, GSocketAddress **address, gchar *buffer, gsize size, GCancellable *cancellable, GError **error);"
g;g_socket_receive_message;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gssize g_socket_receive_message (GSocket *socket, GSocketAddress **address, GInputVector *vectors, gint num_vectors, GSocketControlMessage ***messages, gint *num_messages, gint *flags, GCancellable *cancellable, GError **error);"
g;g_socket_receive_messages;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gint g_socket_receive_messages (GSocket *socket, GInputMessage *messages, guint num_messages, gint flags, GCancellable *cancellable, GError **error);"
g;g_socket_receive_with_blocking;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gssize g_socket_receive_with_blocking (GSocket *socket, gchar *buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError **error);"
g;g_socket_send;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gssize g_socket_send (GSocket *socket, const gchar *buffer, gsize size, GCancellable *cancellable, GError **error);"
g;g_socket_send_message;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gssize g_socket_send_message (GSocket *socket, GSocketAddress *address, GOutputVector *vectors, gint num_vectors, GSocketControlMessage **messages, gint num_messages, gint flags, GCancellable *cancellable, GError **error);"
g;g_socket_send_messages;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gint g_socket_send_messages (GSocket *socket, GOutputMessage *messages, guint num_messages, gint flags, GCancellable *cancellable, GError **error);"
g;g_socket_send_to;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gssize g_socket_send_to (GSocket *socket, GSocketAddress *address, const gchar *buffer, gsize size, GCancellable *cancellable, GError **error);"
g;g_socket_send_with_blocking;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gssize g_socket_send_with_blocking (GSocket *socket, const gchar *buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError **error);"
g;g_socket_service_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketservice.h;"  GType g_socket_service_get_type (void);"
g;g_socket_service_is_active;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketservice.h;" gboolean g_socket_service_is_active (GSocketService *service);"
g;g_socket_service_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketservice.h;" GSocketService *g_socket_service_new (void);"
g;g_socket_service_start;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketservice.h;" void g_socket_service_start (GSocketService *service);"
g;g_socket_service_stop;glib-auto.f90;/usr/include/glib-2.0/gio/gsocketservice.h;" void g_socket_service_stop (GSocketService *service);"
g;g_socket_set_blocking;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" void g_socket_set_blocking (GSocket *socket, gboolean blocking);"
g;g_socket_set_broadcast;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" void g_socket_set_broadcast (GSocket *socket, gboolean broadcast);"
g;g_socket_set_keepalive;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" void g_socket_set_keepalive (GSocket *socket, gboolean keepalive);"
g;g_socket_set_listen_backlog;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" void g_socket_set_listen_backlog (GSocket *socket, gint backlog);"
g;g_socket_set_multicast_loopback;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" void g_socket_set_multicast_loopback (GSocket *socket, gboolean loopback);"
g;g_socket_set_multicast_ttl;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" void g_socket_set_multicast_ttl (GSocket *socket, guint ttl);"
g;g_socket_set_option;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_set_option (GSocket *socket, gint level, gint optname, gint value, GError **error);"
g;g_socket_set_timeout;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" void g_socket_set_timeout (GSocket *socket, guint timeout);"
g;g_socket_set_ttl;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" void g_socket_set_ttl (GSocket *socket, guint ttl);"
g;g_socket_shutdown;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_shutdown (GSocket *socket, gboolean shutdown_read, gboolean shutdown_write, GError **error);"
g;g_socket_speaks_ipv4;glib-auto.f90;/usr/include/glib-2.0/gio/gsocket.h;" gboolean g_socket_speaks_ipv4 (GSocket *socket);"
g;g_source_add_child_source;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_add_child_source (GSource *source, GSource *child_source);"
g;g_source_add_poll;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_add_poll (GSource *source, GPollFD *fd);"
g;g_source_add_unix_fd;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gpointer g_source_add_unix_fd (GSource *source, gint fd, GIOCondition events);"
g;g_source_attach;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" guint g_source_attach (GSource *source, GMainContext *context);"
g;g_source_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_destroy (GSource *source);"
g;g_source_get_can_recurse;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_source_get_can_recurse (GSource *source);"
g;g_source_get_context;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GMainContext *g_source_get_context (GSource *source);"
g;g_source_get_current_time;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_get_current_time (GSource *source, GTimeVal *timeval);"
g;g_source_get_id;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" guint g_source_get_id (GSource *source);"
g;g_source_get_name;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" const char * g_source_get_name (GSource *source);"
g;g_source_get_priority;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gint g_source_get_priority (GSource *source);"
g;g_source_get_ready_time;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gint64 g_source_get_ready_time (GSource *source);"
g;g_source_get_time;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gint64 g_source_get_time (GSource *source);"
g;g_source_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_source_get_type (void) G_GNUC_CONST;"
g;g_source_is_destroyed;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_source_is_destroyed (GSource *source);"
g;g_source_modify_unix_fd;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_modify_unix_fd (GSource *source, gpointer tag, GIOCondition new_events);"
g;g_source_new;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GSource *g_source_new (GSourceFuncs *source_funcs, guint struct_size);"
g;g_source_query_unix_fd;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GIOCondition g_source_query_unix_fd (GSource *source, gpointer tag);"
g;g_source_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GSource *g_source_ref (GSource *source);"
g;g_source_remove;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_source_remove (guint tag);"
g;g_source_remove_by_funcs_user_data;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_source_remove_by_funcs_user_data (GSourceFuncs *funcs, gpointer user_data);"
g;g_source_remove_by_user_data;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" gboolean g_source_remove_by_user_data (gpointer user_data);"
g;g_source_remove_child_source;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_remove_child_source (GSource *source, GSource *child_source);"
g;g_source_remove_poll;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_remove_poll (GSource *source, GPollFD *fd);"
g;g_source_remove_unix_fd;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_remove_unix_fd (GSource *source, gpointer tag);"
g;g_source_set_callback;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_set_callback (GSource *source, GSourceFunc func, gpointer data, GDestroyNotify notify);"
g;g_source_set_callback_indirect;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_set_callback_indirect (GSource *source, gpointer callback_data, GSourceCallbackFuncs *callback_funcs);"
g;g_source_set_can_recurse;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_set_can_recurse (GSource *source, gboolean can_recurse);"
g;g_source_set_closure;glib-auto.f90;/usr/include/glib-2.0/gobject/gsourceclosure.h;"  void g_source_set_closure (GSource *source, GClosure *closure);"
g;g_source_set_dummy_callback;glib-auto.f90;/usr/include/glib-2.0/gobject/gsourceclosure.h;" void g_source_set_dummy_callback (GSource *source);"
g;g_source_set_funcs;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_set_funcs (GSource *source, GSourceFuncs *funcs);"
g;g_source_set_name;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_set_name (GSource *source, const char *name);"
g;g_source_set_name_by_id;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_set_name_by_id (guint tag, const char *name);"
g;g_source_set_priority;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_set_priority (GSource *source, gint priority);"
g;g_source_set_ready_time;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_set_ready_time (GSource *source, gint64 ready_time);"
g;g_source_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" void g_source_unref (GSource *source);"
g;g_spaced_primes_closest;glib-auto.f90;/usr/include/glib-2.0/glib/gprimes.h;"  guint g_spaced_primes_closest (guint num) G_GNUC_CONST;"
g;g_spawn_async_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" gboolean g_spawn_async_utf8 (const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, GError **error);"
g;g_spawn_async_with_pipes_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" gboolean g_spawn_async_with_pipes_utf8 (const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint *standard_input, gint *standard_output, gint *standard_error, GError **error);"
g;g_spawn_check_exit_status;glib-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" gboolean g_spawn_check_exit_status (gint exit_status, GError **error);"
g;g_spawn_close_pid;glib-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" void g_spawn_close_pid (GPid pid);"
g;g_spawn_command_line_async_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" gboolean g_spawn_command_line_async_utf8 (const gchar *command_line, GError **error);"
g;g_spawn_command_line_sync_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" gboolean g_spawn_command_line_sync_utf8 (const gchar *command_line, gchar **standard_output, gchar **standard_error, gint *exit_status, GError **error);"
g;g_spawn_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;"  GQuark g_spawn_error_quark (void);"
g;g_spawn_exit_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" GQuark g_spawn_exit_error_quark (void);"
g;g_spawn_sync_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" gboolean g_spawn_sync_utf8 (const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gchar **standard_output, gchar **standard_error, gint *exit_status, GError **error);"
g;g_sprintf;glib-auto.f90;/usr/include/glib-2.0/glib/gprintf.h;" gint g_sprintf (gchar *string, gchar const *format, ...) G_GNUC_PRINTF (2, 3);"
g;g_srv_target_copy;glib-auto.f90;/usr/include/glib-2.0/gio/gsrvtarget.h;" GSrvTarget *g_srv_target_copy (GSrvTarget *target);"
g;g_srv_target_free;glib-auto.f90;/usr/include/glib-2.0/gio/gsrvtarget.h;" void g_srv_target_free (GSrvTarget *target);"
g;g_srv_target_get_hostname;glib-auto.f90;/usr/include/glib-2.0/gio/gsrvtarget.h;" const gchar *g_srv_target_get_hostname (GSrvTarget *target);"
g;g_srv_target_get_port;glib-auto.f90;/usr/include/glib-2.0/gio/gsrvtarget.h;" guint16 g_srv_target_get_port (GSrvTarget *target);"
g;g_srv_target_get_priority;glib-auto.f90;/usr/include/glib-2.0/gio/gsrvtarget.h;" guint16 g_srv_target_get_priority (GSrvTarget *target);"
g;g_srv_target_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsrvtarget.h;"  GType g_srv_target_get_type (void) G_GNUC_CONST;"
g;g_srv_target_get_weight;glib-auto.f90;/usr/include/glib-2.0/gio/gsrvtarget.h;" guint16 g_srv_target_get_weight (GSrvTarget *target);"
g;g_srv_target_list_sort;glib-auto.f90;/usr/include/glib-2.0/gio/gsrvtarget.h;" GList *g_srv_target_list_sort (GList *targets);"
g;g_srv_target_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsrvtarget.h;" GSrvTarget *g_srv_target_new (const gchar *hostname, guint16 port, guint16 priority, guint16 weight);"
g;g_static_mutex_free;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_mutex_free (GStaticMutex *mutex);"
g;g_static_mutex_get_mutex_impl;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" GMutex *g_static_mutex_get_mutex_impl (GStaticMutex *mutex);"
g;g_static_mutex_init;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_mutex_init (GStaticMutex *mutex);"
g;g_static_private_free;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_private_free (GStaticPrivate *private_key);"
g;g_static_private_get;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" gpointer g_static_private_get (GStaticPrivate *private_key);"
g;g_static_private_init;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_private_init (GStaticPrivate *private_key);"
g;g_static_private_set;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_private_set (GStaticPrivate *private_key, gpointer data, GDestroyNotify notify);"
g;g_static_rec_mutex_free;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_rec_mutex_free (GStaticRecMutex *mutex);"
g;g_static_rec_mutex_init;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_rec_mutex_init (GStaticRecMutex *mutex);"
g;g_static_rec_mutex_lock;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_rec_mutex_lock (GStaticRecMutex *mutex);"
g;g_static_rec_mutex_lock_full;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_rec_mutex_lock_full (GStaticRecMutex *mutex, guint depth);"
g;g_static_rec_mutex_trylock;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" gboolean g_static_rec_mutex_trylock (GStaticRecMutex *mutex);"
g;g_static_rec_mutex_unlock;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_rec_mutex_unlock (GStaticRecMutex *mutex);"
g;g_static_rec_mutex_unlock_full;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" guint g_static_rec_mutex_unlock_full (GStaticRecMutex *mutex);"
g;g_static_resource_fini;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" void g_static_resource_fini (GStaticResource *static_resource);"
g;g_static_resource_get_resource;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" GResource *g_static_resource_get_resource (GStaticResource *static_resource);"
g;g_static_resource_init;glib-auto.f90;/usr/include/glib-2.0/gio/gresource.h;" void g_static_resource_init (GStaticResource *static_resource);"
g;g_static_rw_lock_free;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_rw_lock_free (GStaticRWLock *lock);"
g;g_static_rw_lock_init;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_rw_lock_init (GStaticRWLock *lock);"
g;g_static_rw_lock_reader_lock;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_rw_lock_reader_lock (GStaticRWLock *lock);"
g;g_static_rw_lock_reader_trylock;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" gboolean g_static_rw_lock_reader_trylock (GStaticRWLock *lock);"
g;g_static_rw_lock_reader_unlock;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_rw_lock_reader_unlock (GStaticRWLock *lock);"
g;g_static_rw_lock_writer_lock;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_rw_lock_writer_lock (GStaticRWLock *lock);"
g;g_static_rw_lock_writer_trylock;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" gboolean g_static_rw_lock_writer_trylock (GStaticRWLock *lock);"
g;g_static_rw_lock_writer_unlock;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_static_rw_lock_writer_unlock (GStaticRWLock *lock);"
g;g_stpcpy;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_stpcpy (gchar *dest, const char *src);"
g;g_str_equal;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" gboolean g_str_equal (gconstpointer v1, gconstpointer v2);"
g;g_str_has_prefix;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gboolean g_str_has_prefix (const gchar *str, const gchar *prefix);"
g;g_str_has_suffix;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gboolean g_str_has_suffix (const gchar *str, const gchar *suffix);"
g;g_str_hash;glib-auto.f90;/usr/include/glib-2.0/glib/ghash.h;" guint g_str_hash (gconstpointer v);"
g;g_str_is_ascii;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gboolean g_str_is_ascii (const gchar *str);"
g;g_str_match_string;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gboolean g_str_match_string (const gchar *search_term, const gchar *potential_hit, gboolean accept_alternates);"
g;g_str_to_ascii;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar * g_str_to_ascii (const gchar *str, const gchar *from_locale);"
g;g_str_tokenize_and_fold;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar ** g_str_tokenize_and_fold (const gchar *string, const gchar *translit_locale, gchar ***ascii_alternates);"
g;g_strcanon;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strcanon (gchar *string, const gchar *valid_chars, gchar substitutor);"
g;g_strcasecmp;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gint g_strcasecmp (const gchar *s1, const gchar *s2);"
g;g_strchomp;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strchomp (gchar *string);"
g;g_strchug;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strchug (gchar *string);"
g;g_strcmp0;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;"  int g_strcmp0 (const char *str1, const char *str2);"
g;g_strcompress;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strcompress (const gchar *source) G_GNUC_MALLOC;"
g;g_strdelimit;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strdelimit (gchar *string, const gchar *delimiters, gchar new_delimiter);"
g;g_strdown;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strdown (gchar *string);"
g;g_strdup;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strdup (const gchar *str) G_GNUC_MALLOC;"
g;g_strdup_printf;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strdup_printf (const gchar *format, ...) G_GNUC_PRINTF (1, 2) G_GNUC_MALLOC;"
g;g_strdup_value_contents;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" gchar* g_strdup_value_contents (const GValue *value);"
g;g_strdup_vprintf;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strdup_vprintf (const gchar *format, va_list args) G_GNUC_PRINTF(1, 0) G_GNUC_MALLOC;"
g;g_strdupv;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar** g_strdupv (gchar **str_array) G_GNUC_MALLOC;"
g;g_strerror;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" const gchar * g_strerror (gint errnum) G_GNUC_CONST;"
g;g_strescape;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strescape (const gchar *source, const gchar *exceptions) G_GNUC_MALLOC;"
g;g_strfreev;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" void g_strfreev (gchar **str_array);"
g;g_string_append;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_append (GString *string, const gchar *val);"
g;g_string_append_c;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_append_c (GString *string, gchar c);"
g;g_string_append_c_inline;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" static inline GString* g_string_append_c_inline (GString *gstring, gchar c)  GString *g_string_down (GString *string);"
g;g_string_append_len;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_append_len (GString *string, const gchar *val, gssize len);"
g;g_string_append_printf;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" void g_string_append_printf (GString *string, const gchar *format, ...) G_GNUC_PRINTF (2, 3);"
g;g_string_append_unichar;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_append_unichar (GString *string, gunichar wc);"
g;g_string_append_uri_escaped;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_append_uri_escaped (GString *string, const gchar *unescaped, const gchar *reserved_chars_allowed, gboolean allow_utf8);"
g;g_string_append_vprintf;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" void g_string_append_vprintf (GString *string, const gchar *format, va_list args) G_GNUC_PRINTF(2, 0);"
g;g_string_ascii_down;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_ascii_down (GString *string);"
g;g_string_ascii_up;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_ascii_up (GString *string);"
g;g_string_assign;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_assign (GString *string, const gchar *rval);"
g;g_string_chunk_clear;glib-auto.f90;/usr/include/glib-2.0/glib/gstringchunk.h;" void g_string_chunk_clear (GStringChunk *chunk);"
g;g_string_chunk_free;glib-auto.f90;/usr/include/glib-2.0/glib/gstringchunk.h;" void g_string_chunk_free (GStringChunk *chunk);"
g;g_string_chunk_insert;glib-auto.f90;/usr/include/glib-2.0/glib/gstringchunk.h;" gchar* g_string_chunk_insert (GStringChunk *chunk, const gchar *string);"
g;g_string_chunk_insert_const;glib-auto.f90;/usr/include/glib-2.0/glib/gstringchunk.h;" gchar* g_string_chunk_insert_const (GStringChunk *chunk, const gchar *string);"
g;g_string_chunk_insert_len;glib-auto.f90;/usr/include/glib-2.0/glib/gstringchunk.h;" gchar* g_string_chunk_insert_len (GStringChunk *chunk, const gchar *string, gssize len);"
g;g_string_chunk_new;glib-auto.f90;/usr/include/glib-2.0/glib/gstringchunk.h;"  GStringChunk* g_string_chunk_new (gsize size);"
g;g_string_equal;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" gboolean g_string_equal (const GString *v, const GString *v2);"
g;g_string_erase;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_erase (GString *string, gssize pos, gssize len);"
g;g_string_free;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" gchar* g_string_free (GString *string, gboolean free_segment);"
g;g_string_free_to_bytes;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GBytes* g_string_free_to_bytes (GString *string);"
g;g_string_hash;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" guint g_string_hash (const GString *str);"
g;g_string_insert;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_insert (GString *string, gssize pos, const gchar *val);"
g;g_string_insert_c;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_insert_c (GString *string, gssize pos, gchar c);"
g;g_string_insert_len;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_insert_len (GString *string, gssize pos, const gchar *val, gssize len);"
g;g_string_insert_unichar;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_insert_unichar (GString *string, gssize pos, gunichar wc);"
g;g_string_new;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;"  GString* g_string_new (const gchar *init);"
g;g_string_new_len;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_new_len (const gchar *init, gssize len);"
g;g_string_overwrite;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_overwrite (GString *string, gsize pos, const gchar *val);"
g;g_string_overwrite_len;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_overwrite_len (GString *string, gsize pos, const gchar *val, gssize len);"
g;g_string_prepend;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_prepend (GString *string, const gchar *val);"
g;g_string_prepend_c;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_prepend_c (GString *string, gchar c);"
g;g_string_prepend_len;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_prepend_len (GString *string, const gchar *val, gssize len);"
g;g_string_prepend_unichar;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_prepend_unichar (GString *string, gunichar wc);"
g;g_string_printf;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" void g_string_printf (GString *string, const gchar *format, ...) G_GNUC_PRINTF (2, 3);"
g;g_string_set_size;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_set_size (GString *string, gsize len);"
g;g_string_sized_new;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_sized_new (gsize dfl_size);"
g;g_string_truncate;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString* g_string_truncate (GString *string, gsize len);"
g;g_string_up;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" GString *g_string_up (GString *string);"
g;g_string_vprintf;glib-auto.f90;/usr/include/glib-2.0/glib/gstring.h;" void g_string_vprintf (GString *string, const gchar *format, va_list args) G_GNUC_PRINTF(2, 0);"
g;g_strip_context;glib-auto.f90;/usr/include/glib-2.0/glib/ggettext.h;"  const gchar *g_strip_context (const gchar *msgid, const gchar *msgval) G_GNUC_FORMAT(1);"
g;g_strjoinv;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strjoinv (const gchar *separator, gchar **str_array) G_GNUC_MALLOC;"
g;g_strlcat;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gsize g_strlcat (gchar *dest, const gchar *src, gsize dest_size);"
g;g_strlcpy;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gsize g_strlcpy (gchar *dest, const gchar *src, gsize dest_size);"
g;g_strncasecmp;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gint g_strncasecmp (const gchar *s1, const gchar *s2, guint n);"
g;g_strndup;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strndup (const gchar *str, gsize n) G_GNUC_MALLOC;"
g;g_strnfill;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strnfill (gsize length, gchar fill_char) G_GNUC_MALLOC;"
g;g_strreverse;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar * g_strreverse (gchar *string);"
g;g_strrstr;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar * g_strrstr (const gchar *haystack, const gchar *needle);"
g;g_strrstr_len;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar * g_strrstr_len (const gchar *haystack, gssize haystack_len, const gchar *needle);"
g;g_strsignal;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" const gchar * g_strsignal (gint signum) G_GNUC_CONST;"
g;g_strsplit;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar** g_strsplit (const gchar *string, const gchar *delimiter, gint max_tokens) G_GNUC_MALLOC;"
g;g_strsplit_set;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar ** g_strsplit_set (const gchar *string, const gchar *delimiters, gint max_tokens) G_GNUC_MALLOC;"
g;g_strstr_len;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar * g_strstr_len (const gchar *haystack, gssize haystack_len, const gchar *needle);"
g;g_strtod;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gdouble g_strtod (const gchar *nptr, gchar **endptr);"
g;g_strup;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gchar* g_strup (gchar *string);"
g;g_strv_contains;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" gboolean g_strv_contains (const gchar * const *strv, const gchar *str);"
g;g_strv_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_strv_get_type (void) G_GNUC_CONST;"
g;g_strv_length;glib-auto.f90;/usr/include/glib-2.0/glib/gstrfuncs.h;" guint g_strv_length (gchar **str_array);"
g;g_subprocess_communicate;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gboolean g_subprocess_communicate (GSubprocess *subprocess, GBytes *stdin_buf, GCancellable *cancellable, GBytes **stdout_buf, GBytes **stderr_buf, GError **error);"
g;g_subprocess_communicate_async;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" void g_subprocess_communicate_async (GSubprocess *subprocess, GBytes *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_subprocess_communicate_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gboolean g_subprocess_communicate_finish (GSubprocess *subprocess, GAsyncResult *result, GBytes **stdout_buf, GBytes **stderr_buf, GError **error);"
g;g_subprocess_communicate_utf8;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gboolean g_subprocess_communicate_utf8 (GSubprocess *subprocess, const char *stdin_buf, GCancellable *cancellable, char **stdout_buf, char **stderr_buf, GError **error);"
g;g_subprocess_communicate_utf8_async;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" void g_subprocess_communicate_utf8_async (GSubprocess *subprocess, const char *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_subprocess_communicate_utf8_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gboolean g_subprocess_communicate_utf8_finish (GSubprocess *subprocess, GAsyncResult *result, char **stdout_buf, char **stderr_buf, GError **error);"
g;g_subprocess_force_exit;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" void g_subprocess_force_exit (GSubprocess *subprocess);"
g;g_subprocess_get_exit_status;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gint g_subprocess_get_exit_status (GSubprocess *subprocess);"
g;g_subprocess_get_identifier;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" const gchar * g_subprocess_get_identifier (GSubprocess *subprocess);"
g;g_subprocess_get_if_exited;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gboolean g_subprocess_get_if_exited (GSubprocess *subprocess);"
g;g_subprocess_get_if_signaled;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gboolean g_subprocess_get_if_signaled (GSubprocess *subprocess);"
g;g_subprocess_get_status;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gint g_subprocess_get_status (GSubprocess *subprocess);"
g;g_subprocess_get_stderr_pipe;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" GInputStream * g_subprocess_get_stderr_pipe (GSubprocess *subprocess);"
g;g_subprocess_get_stdin_pipe;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" GOutputStream * g_subprocess_get_stdin_pipe (GSubprocess *subprocess);"
g;g_subprocess_get_stdout_pipe;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" GInputStream * g_subprocess_get_stdout_pipe (GSubprocess *subprocess);"
g;g_subprocess_get_successful;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gboolean g_subprocess_get_successful (GSubprocess *subprocess);"
g;g_subprocess_get_term_sig;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gint g_subprocess_get_term_sig (GSubprocess *subprocess);"
g;g_subprocess_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;"  GType g_subprocess_get_type (void) G_GNUC_CONST;"
g;g_subprocess_launcher_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;"  GType g_subprocess_launcher_get_type (void) G_GNUC_CONST;"
g;g_subprocess_launcher_getenv;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" const gchar * g_subprocess_launcher_getenv (GSubprocessLauncher *self, const gchar *variable);"
g;g_subprocess_launcher_new;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" GSubprocessLauncher * g_subprocess_launcher_new (GSubprocessFlags flags);"
g;g_subprocess_launcher_set_child_setup;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_set_child_setup (GSubprocessLauncher *self, GSpawnChildSetupFunc child_setup, gpointer user_data, GDestroyNotify destroy_notify);"
g;g_subprocess_launcher_set_cwd;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_set_cwd (GSubprocessLauncher *self, const gchar *cwd);"
g;g_subprocess_launcher_set_environ;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_set_environ (GSubprocessLauncher *self, gchar **env);"
g;g_subprocess_launcher_set_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_set_flags (GSubprocessLauncher *self, GSubprocessFlags flags);"
g;g_subprocess_launcher_set_stderr_file_path;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_set_stderr_file_path (GSubprocessLauncher *self, const gchar *path);"
g;g_subprocess_launcher_set_stdin_file_path;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_set_stdin_file_path (GSubprocessLauncher *self, const gchar *path);"
g;g_subprocess_launcher_set_stdout_file_path;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_set_stdout_file_path (GSubprocessLauncher *self, const gchar *path);"
g;g_subprocess_launcher_setenv;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_setenv (GSubprocessLauncher *self, const gchar *variable, const gchar *value, gboolean overwrite);"
g;g_subprocess_launcher_spawnv;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" GSubprocess * g_subprocess_launcher_spawnv (GSubprocessLauncher *self, const gchar * const *argv, GError **error);"
g;g_subprocess_launcher_take_fd;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_take_fd (GSubprocessLauncher *self, gint source_fd, gint target_fd);"
g;g_subprocess_launcher_take_stderr_fd;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_take_stderr_fd (GSubprocessLauncher *self, gint fd);"
g;g_subprocess_launcher_take_stdin_fd;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_take_stdin_fd (GSubprocessLauncher *self, gint fd);"
g;g_subprocess_launcher_take_stdout_fd;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_take_stdout_fd (GSubprocessLauncher *self, gint fd);"
g;g_subprocess_launcher_unsetenv;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocesslauncher.h;" void g_subprocess_launcher_unsetenv (GSubprocessLauncher *self, const gchar *variable);"
g;g_subprocess_newv;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" GSubprocess * g_subprocess_newv (const gchar * const *argv, GSubprocessFlags flags, GError **error);"
g;g_subprocess_send_signal;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" void g_subprocess_send_signal (GSubprocess *subprocess, gint signal_num);"
g;g_subprocess_wait;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gboolean g_subprocess_wait (GSubprocess *subprocess, GCancellable *cancellable, GError **error);"
g;g_subprocess_wait_async;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" void g_subprocess_wait_async (GSubprocess *subprocess, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_subprocess_wait_check;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gboolean g_subprocess_wait_check (GSubprocess *subprocess, GCancellable *cancellable, GError **error);"
g;g_subprocess_wait_check_async;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" void g_subprocess_wait_check_async (GSubprocess *subprocess, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_subprocess_wait_check_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gboolean g_subprocess_wait_check_finish (GSubprocess *subprocess, GAsyncResult *result, GError **error);"
g;g_subprocess_wait_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gsubprocess.h;" gboolean g_subprocess_wait_finish (GSubprocess *subprocess, GAsyncResult *result, GError **error);"
g;g_task_attach_source;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_attach_source (GTask *task, GSource *source, GSourceFunc callback);"
g;g_task_get_cancellable;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" GCancellable *g_task_get_cancellable (GTask *task);"
g;g_task_get_check_cancellable;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gboolean g_task_get_check_cancellable (GTask *task);"
g;g_task_get_completed;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gboolean g_task_get_completed (GTask *task);"
g;g_task_get_context;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" GMainContext *g_task_get_context (GTask *task);"
g;g_task_get_priority;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gint g_task_get_priority (GTask *task);"
g;g_task_get_return_on_cancel;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gboolean g_task_get_return_on_cancel (GTask *task);"
g;g_task_get_source_object;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gpointer g_task_get_source_object (GTask *task);"
g;g_task_get_source_tag;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gpointer g_task_get_source_tag (GTask *task);"
g;g_task_get_task_data;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gpointer g_task_get_task_data (GTask *task);"
g;g_task_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;"  GType g_task_get_type (void) G_GNUC_CONST;"
g;g_task_had_error;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gboolean g_task_had_error (GTask *task);"
g;g_task_is_valid;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gboolean g_task_is_valid (gpointer result, gpointer source_object);"
g;g_task_new;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" GTask *g_task_new (gpointer source_object, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer callback_data);"
g;g_task_propagate_boolean;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gboolean g_task_propagate_boolean (GTask *task, GError **error);"
g;g_task_propagate_int;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gssize g_task_propagate_int (GTask *task, GError **error);"
g;g_task_propagate_pointer;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gpointer g_task_propagate_pointer (GTask *task, GError **error);"
g;g_task_report_error;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_report_error (gpointer source_object, GAsyncReadyCallback callback, gpointer callback_data, gpointer source_tag, GError *error);"
g;g_task_report_new_error;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_report_new_error (gpointer source_object, GAsyncReadyCallback callback, gpointer callback_data, gpointer source_tag, GQuark domain, gint code, const char *format, ...) G_GNUC_PRINTF(7, 8);"
g;g_task_return_boolean;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_return_boolean (GTask *task, gboolean result);"
g;g_task_return_error;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_return_error (GTask *task, GError *error);"
g;g_task_return_error_if_cancelled;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gboolean g_task_return_error_if_cancelled (GTask *task);"
g;g_task_return_int;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_return_int (GTask *task, gssize result);"
g;g_task_return_new_error;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_return_new_error (GTask *task, GQuark domain, gint code, const char *format, ...) G_GNUC_PRINTF (4, 5);"
g;g_task_return_pointer;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_return_pointer (GTask *task, gpointer result, GDestroyNotify result_destroy);"
g;g_task_run_in_thread;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_run_in_thread (GTask *task, GTaskThreadFunc task_func);"
g;g_task_run_in_thread_sync;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_run_in_thread_sync (GTask *task, GTaskThreadFunc task_func);"
g;g_task_set_check_cancellable;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_set_check_cancellable (GTask *task, gboolean check_cancellable);"
g;g_task_set_priority;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_set_priority (GTask *task, gint priority);"
g;g_task_set_return_on_cancel;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" gboolean g_task_set_return_on_cancel (GTask *task, gboolean return_on_cancel);"
g;g_task_set_source_tag;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_set_source_tag (GTask *task, gpointer source_tag);"
g;g_task_set_task_data;glib-auto.f90;/usr/include/glib-2.0/gio/gtask.h;" void g_task_set_task_data (GTask *task, gpointer task_data, GDestroyNotify task_data_destroy);"
g;g_tcp_connection_get_graceful_disconnect;glib-auto.f90;/usr/include/glib-2.0/gio/gtcpconnection.h;" gboolean g_tcp_connection_get_graceful_disconnect (GTcpConnection *connection);"
g;g_tcp_connection_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtcpconnection.h;"  GType g_tcp_connection_get_type (void) G_GNUC_CONST;"
g;g_tcp_connection_set_graceful_disconnect;glib-auto.f90;/usr/include/glib-2.0/gio/gtcpconnection.h;" void g_tcp_connection_set_graceful_disconnect (GTcpConnection *connection, gboolean graceful_disconnect);"
g;g_tcp_wrapper_connection_get_base_io_stream;glib-auto.f90;/usr/include/glib-2.0/gio/gtcpwrapperconnection.h;" GIOStream *g_tcp_wrapper_connection_get_base_io_stream (GTcpWrapperConnection *conn);"
g;g_tcp_wrapper_connection_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtcpwrapperconnection.h;"  GType g_tcp_wrapper_connection_get_type (void) G_GNUC_CONST;"
g;g_tcp_wrapper_connection_new;glib-auto.f90;/usr/include/glib-2.0/gio/gtcpwrapperconnection.h;" GSocketConnection *g_tcp_wrapper_connection_new (GIOStream *base_io_stream, GSocket *socket);"
g;g_test_add_data_func;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_add_data_func (const char *testpath, gconstpointer test_data, GTestDataFunc test_func);"
g;g_test_add_data_func_full;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_add_data_func_full (const char *testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func);"
g;g_test_add_func;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_add_func (const char *testpath, GTestFunc test_func);"
g;g_test_add_vtable;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_add_vtable (const char *testpath, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown);"
g;g_test_assert_expected_messages_internal;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_assert_expected_messages_internal (const char *domain, const char *file, int line, const char *func);"
g;g_test_bug;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_bug (const char *bug_uri_snippet);"
g;g_test_bug_base;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_bug_base (const char *uri_pattern);"
g;g_test_create_case;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" GTestCase* g_test_create_case (const char *test_name, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown);"
g;g_test_create_suite;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" GTestSuite* g_test_create_suite (const char *suite_name);"
g;g_test_dbus_add_service_dir;glib-auto.f90;/usr/include/glib-2.0/gio/gtestdbus.h;" void g_test_dbus_add_service_dir (GTestDBus *self, const gchar *path);"
g;g_test_dbus_down;glib-auto.f90;/usr/include/glib-2.0/gio/gtestdbus.h;" void g_test_dbus_down (GTestDBus *self);"
g;g_test_dbus_get_bus_address;glib-auto.f90;/usr/include/glib-2.0/gio/gtestdbus.h;" const gchar * g_test_dbus_get_bus_address (GTestDBus *self);"
g;g_test_dbus_get_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gtestdbus.h;" GTestDBusFlags g_test_dbus_get_flags (GTestDBus *self);"
g;g_test_dbus_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtestdbus.h;"  GType g_test_dbus_get_type (void) G_GNUC_CONST;"
g;g_test_dbus_new;glib-auto.f90;/usr/include/glib-2.0/gio/gtestdbus.h;" GTestDBus * g_test_dbus_new (GTestDBusFlags flags);"
g;g_test_dbus_stop;glib-auto.f90;/usr/include/glib-2.0/gio/gtestdbus.h;" void g_test_dbus_stop (GTestDBus *self);"
g;g_test_dbus_unset;glib-auto.f90;/usr/include/glib-2.0/gio/gtestdbus.h;" void g_test_dbus_unset (void);"
g;g_test_dbus_up;glib-auto.f90;/usr/include/glib-2.0/gio/gtestdbus.h;" void g_test_dbus_up (GTestDBus *self);"
g;g_test_expect_message;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_expect_message (const gchar *log_domain, GLogLevelFlags log_level, const gchar *pattern);"
g;g_test_fail;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_fail (void);"
g;g_test_failed;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" gboolean g_test_failed (void);"
g;g_test_get_dir;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" const gchar *g_test_get_dir (GTestFileType file_type);"
g;g_test_get_root;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" GTestSuite* g_test_get_root (void);"
g;g_test_incomplete;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_incomplete (const gchar *msg);"
g;g_test_log_buffer_free;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_log_buffer_free (GTestLogBuffer *tbuffer);"
g;g_test_log_buffer_new;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" GTestLogBuffer* g_test_log_buffer_new (void);"
g;g_test_log_buffer_pop;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" GTestLogMsg* g_test_log_buffer_pop (GTestLogBuffer *tbuffer);"
g;g_test_log_buffer_push;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_log_buffer_push (GTestLogBuffer *tbuffer, guint n_bytes, const guint8 *bytes);"
g;g_test_log_msg_free;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_log_msg_free (GTestLogMsg *tmsg);"
g;g_test_log_set_fatal_handler;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_log_set_fatal_handler (GTestLogFatalFunc log_func, gpointer user_data);"
g;g_test_log_type_name;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" const char* g_test_log_type_name (GTestLogType log_type);"
g;g_test_maximized_result;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_maximized_result (double maximized_quantity, const char *format, ...) G_GNUC_PRINTF (2, 3);"
g;g_test_message;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_message (const char *format, ...) G_GNUC_PRINTF (1, 2);"
g;g_test_minimized_result;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_minimized_result (double minimized_quantity, const char *format, ...) G_GNUC_PRINTF (2, 3);"
g;g_test_queue_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_queue_destroy (GDestroyNotify destroy_func, gpointer destroy_data);"
g;g_test_queue_free;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_queue_free (gpointer gfree_pointer);"
g;g_test_rand_double;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" double g_test_rand_double (void);"
g;g_test_rand_double_range;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" double g_test_rand_double_range (double range_start, double range_end);"
g;g_test_rand_int;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" gint32 g_test_rand_int (void);"
g;g_test_rand_int_range;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" gint32 g_test_rand_int_range (gint32 begin, gint32 end);"
g;g_test_run;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" int g_test_run (void);"
g;g_test_run_suite;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" int g_test_run_suite (GTestSuite *suite);"
g;g_test_set_nonfatal_assertions;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_set_nonfatal_assertions (void);"
g;g_test_skip;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_skip (const gchar *msg);"
g;g_test_subprocess;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" gboolean g_test_subprocess (void);"
g;g_test_suite_add;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_suite_add (GTestSuite *suite, GTestCase *test_case);"
g;g_test_suite_add_suite;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_suite_add_suite (GTestSuite *suite, GTestSuite *nestedsuite);"
g;g_test_timer_elapsed;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" double g_test_timer_elapsed (void);"
g;g_test_timer_last;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" double g_test_timer_last (void);"
g;g_test_timer_start;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_timer_start (void);"
g;g_test_trap_assertions;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_trap_assertions (const char *domain, const char *file, int line, const char *func, guint64 assertion_flags, const char *pattern);"
g;g_test_trap_fork;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" gboolean g_test_trap_fork (guint64 usec_timeout, GTestTrapFlags test_trap_flags);"
g;g_test_trap_has_passed;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" gboolean g_test_trap_has_passed (void);"
g;g_test_trap_reached_timeout;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" gboolean g_test_trap_reached_timeout (void);"
g;g_test_trap_subprocess;glib-auto.f90;/usr/include/glib-2.0/glib/gtestutils.h;" void g_test_trap_subprocess (const char *test_path, guint64 usec_timeout, GTestSubprocessFlags test_flags);"
g;g_themed_icon_append_name;glib-auto.f90;/usr/include/glib-2.0/gio/gthemedicon.h;" void g_themed_icon_append_name (GThemedIcon *icon, const char *iconname);"
g;g_themed_icon_get_names;glib-auto.f90;/usr/include/glib-2.0/gio/gthemedicon.h;" const gchar* const * g_themed_icon_get_names (GThemedIcon *icon);"
g;g_themed_icon_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gthemedicon.h;"  GType g_themed_icon_get_type (void) G_GNUC_CONST;"
g;g_themed_icon_new;glib-auto.f90;/usr/include/glib-2.0/gio/gthemedicon.h;" GIcon *g_themed_icon_new (const char *iconname);"
g;g_themed_icon_new_from_names;glib-auto.f90;/usr/include/glib-2.0/gio/gthemedicon.h;" GIcon *g_themed_icon_new_from_names (char **iconnames, int len);"
g;g_themed_icon_new_with_default_fallbacks;glib-auto.f90;/usr/include/glib-2.0/gio/gthemedicon.h;" GIcon *g_themed_icon_new_with_default_fallbacks (const char *iconname);"
g;g_themed_icon_prepend_name;glib-auto.f90;/usr/include/glib-2.0/gio/gthemedicon.h;" void g_themed_icon_prepend_name (GThemedIcon *icon, const char *iconname);"
g;g_thread_create;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" GThread *g_thread_create (GThreadFunc func, gpointer data, gboolean joinable, GError **error);"
g;g_thread_create_full;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" GThread *g_thread_create_full (GThreadFunc func, gpointer data, gulong stack_size, gboolean joinable, gboolean bound, GThreadPriority priority, GError **error);"
g;g_thread_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;"  GQuark g_thread_error_quark (void);"
g;g_thread_exit;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_thread_exit (gpointer retval);"
g;g_thread_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_thread_foreach (GFunc thread_func, gpointer user_data);"
g;g_thread_get_initialized;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" gboolean g_thread_get_initialized (void);"
g;g_thread_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_thread_get_type (void) G_GNUC_CONST;"
g;g_thread_init;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_thread_init (gpointer vtable);"
g;g_thread_init_with_errorcheck_mutexes;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_thread_init_with_errorcheck_mutexes (gpointer vtable);"
g;g_thread_join;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" gpointer g_thread_join (GThread *thread);"
g;g_thread_new;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" GThread * g_thread_new (const gchar *name, GThreadFunc func, gpointer data);"
g;g_thread_pool_free;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" void g_thread_pool_free (GThreadPool *pool, gboolean immediate, gboolean wait_);"
g;g_thread_pool_get_max_idle_time;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" guint g_thread_pool_get_max_idle_time (void);"
g;g_thread_pool_get_max_threads;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" gint g_thread_pool_get_max_threads (GThreadPool *pool);"
g;g_thread_pool_get_max_unused_threads;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" gint g_thread_pool_get_max_unused_threads (void);"
g;g_thread_pool_get_num_threads;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" guint g_thread_pool_get_num_threads (GThreadPool *pool);"
g;g_thread_pool_get_num_unused_threads;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" guint g_thread_pool_get_num_unused_threads (void);"
g;g_thread_pool_move_to_front;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" gboolean g_thread_pool_move_to_front (GThreadPool *pool, gpointer data);"
g;g_thread_pool_new;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;"  GThreadPool * g_thread_pool_new (GFunc func, gpointer user_data, gint max_threads, gboolean exclusive, GError **error);"
g;g_thread_pool_push;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" gboolean g_thread_pool_push (GThreadPool *pool, gpointer data, GError **error);"
g;g_thread_pool_set_max_idle_time;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" void g_thread_pool_set_max_idle_time (guint interval);"
g;g_thread_pool_set_max_threads;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" gboolean g_thread_pool_set_max_threads (GThreadPool *pool, gint max_threads, GError **error);"
g;g_thread_pool_set_max_unused_threads;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" void g_thread_pool_set_max_unused_threads (gint max_threads);"
g;g_thread_pool_set_sort_function;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" void g_thread_pool_set_sort_function (GThreadPool *pool, GCompareDataFunc func, gpointer user_data);"
g;g_thread_pool_stop_unused_threads;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" void g_thread_pool_stop_unused_threads (void);"
g;g_thread_pool_unprocessed;glib-auto.f90;/usr/include/glib-2.0/glib/gthreadpool.h;" guint g_thread_pool_unprocessed (GThreadPool *pool);"
g;g_thread_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" GThread * g_thread_ref (GThread *thread);"
g;g_thread_self;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" GThread * g_thread_self (void);"
g;g_thread_set_priority;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" void g_thread_set_priority (GThread *thread, GThreadPriority priority);"
g;g_thread_try_new;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" GThread * g_thread_try_new (const gchar *name, GThreadFunc func, gpointer data, GError **error);"
g;g_thread_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_thread_unref (GThread *thread);"
g;g_thread_yield;glib-auto.f90;/usr/include/glib-2.0/glib/gthread.h;" void g_thread_yield (void);"
g;g_threaded_socket_service_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gthreadedsocketservice.h;"  GType g_threaded_socket_service_get_type (void);"
g;g_threaded_socket_service_new;glib-auto.f90;/usr/include/glib-2.0/gio/gthreadedsocketservice.h;" GSocketService * g_threaded_socket_service_new (int max_threads);"
g;g_time_val_add;glib-auto.f90;/usr/include/glib-2.0/glib/gtimer.h;" void g_time_val_add (GTimeVal *time_, glong microseconds);"
g;g_time_val_from_iso8601;glib-auto.f90;/usr/include/glib-2.0/glib/gtimer.h;" gboolean g_time_val_from_iso8601 (const gchar *iso_date, GTimeVal *time_);"
g;g_time_val_to_iso8601;glib-auto.f90;/usr/include/glib-2.0/glib/gtimer.h;" gchar* g_time_val_to_iso8601 (GTimeVal *time_) G_GNUC_MALLOC;"
g;g_time_zone_adjust_time;glib-auto.f90;/usr/include/glib-2.0/glib/gtimezone.h;" gint g_time_zone_adjust_time (GTimeZone *tz, GTimeType type, gint64 *time_);"
g;g_time_zone_find_interval;glib-auto.f90;/usr/include/glib-2.0/glib/gtimezone.h;" gint g_time_zone_find_interval (GTimeZone *tz, GTimeType type, gint64 time_);"
g;g_time_zone_get_abbreviation;glib-auto.f90;/usr/include/glib-2.0/glib/gtimezone.h;" const gchar * g_time_zone_get_abbreviation (GTimeZone *tz, gint interval);"
g;g_time_zone_get_offset;glib-auto.f90;/usr/include/glib-2.0/glib/gtimezone.h;" gint32 g_time_zone_get_offset (GTimeZone *tz, gint interval);"
g;g_time_zone_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_time_zone_get_type (void) G_GNUC_CONST;"
g;g_time_zone_is_dst;glib-auto.f90;/usr/include/glib-2.0/glib/gtimezone.h;" gboolean g_time_zone_is_dst (GTimeZone *tz, gint interval);"
g;g_time_zone_new;glib-auto.f90;/usr/include/glib-2.0/glib/gtimezone.h;"  GTimeZone * g_time_zone_new (const gchar *identifier);"
g;g_time_zone_new_local;glib-auto.f90;/usr/include/glib-2.0/glib/gtimezone.h;" GTimeZone * g_time_zone_new_local (void);"
g;g_time_zone_new_utc;glib-auto.f90;/usr/include/glib-2.0/glib/gtimezone.h;" GTimeZone * g_time_zone_new_utc (void);"
g;g_time_zone_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gtimezone.h;" GTimeZone * g_time_zone_ref (GTimeZone *tz);"
g;g_time_zone_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gtimezone.h;" void g_time_zone_unref (GTimeZone *tz);"
g;g_timeout_add;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" guint g_timeout_add (guint interval, GSourceFunc function, gpointer data);"
g;g_timeout_add_full;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" guint g_timeout_add_full (gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);"
g;g_timeout_add_seconds;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" guint g_timeout_add_seconds (guint interval, GSourceFunc function, gpointer data);"
g;g_timeout_add_seconds_full;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" guint g_timeout_add_seconds_full (gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);"
g;g_timeout_source_new;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GSource *g_timeout_source_new (guint interval);"
g;g_timeout_source_new_seconds;glib-auto.f90;/usr/include/glib-2.0/glib/gmain.h;" GSource *g_timeout_source_new_seconds (guint interval);"
g;g_timer_continue;glib-auto.f90;/usr/include/glib-2.0/glib/gtimer.h;" void g_timer_continue (GTimer *timer);"
g;g_timer_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/gtimer.h;" void g_timer_destroy (GTimer *timer);"
g;g_timer_elapsed;glib-auto.f90;/usr/include/glib-2.0/glib/gtimer.h;" gdouble g_timer_elapsed (GTimer *timer, gulong *microseconds);"
g;g_timer_new;glib-auto.f90;/usr/include/glib-2.0/glib/gtimer.h;"  GTimer* g_timer_new (void);"
g;g_timer_reset;glib-auto.f90;/usr/include/glib-2.0/glib/gtimer.h;" void g_timer_reset (GTimer *timer);"
g;g_timer_start;glib-auto.f90;/usr/include/glib-2.0/glib/gtimer.h;" void g_timer_start (GTimer *timer);"
g;g_timer_stop;glib-auto.f90;/usr/include/glib-2.0/glib/gtimer.h;" void g_timer_stop (GTimer *timer);"
g;g_tls_backend_get_certificate_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsbackend.h;" GType g_tls_backend_get_certificate_type (GTlsBackend *backend);"
g;g_tls_backend_get_client_connection_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsbackend.h;" GType g_tls_backend_get_client_connection_type (GTlsBackend *backend);"
g;g_tls_backend_get_default;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsbackend.h;" GTlsBackend * g_tls_backend_get_default (void);"
g;g_tls_backend_get_default_database;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsbackend.h;" GTlsDatabase * g_tls_backend_get_default_database (GTlsBackend *backend);"
g;g_tls_backend_get_dtls_client_connection_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsbackend.h;" GType g_tls_backend_get_dtls_client_connection_type (GTlsBackend *backend);"
g;g_tls_backend_get_dtls_server_connection_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsbackend.h;" GType g_tls_backend_get_dtls_server_connection_type (GTlsBackend *backend);"
g;g_tls_backend_get_file_database_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsbackend.h;" GType g_tls_backend_get_file_database_type (GTlsBackend *backend);"
g;g_tls_backend_get_server_connection_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsbackend.h;" GType g_tls_backend_get_server_connection_type (GTlsBackend *backend);"
g;g_tls_backend_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsbackend.h;"  GType g_tls_backend_get_type (void) G_GNUC_CONST;"
g;g_tls_backend_supports_dtls;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsbackend.h;" gboolean g_tls_backend_supports_dtls (GTlsBackend *backend);"
g;g_tls_backend_supports_tls;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsbackend.h;" gboolean g_tls_backend_supports_tls (GTlsBackend *backend);"
g;g_tls_certificate_get_issuer;glib-auto.f90;/usr/include/glib-2.0/gio/gtlscertificate.h;" GTlsCertificate *g_tls_certificate_get_issuer (GTlsCertificate *cert);"
g;g_tls_certificate_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlscertificate.h;"  GType g_tls_certificate_get_type (void) G_GNUC_CONST;"
g;g_tls_certificate_is_same;glib-auto.f90;/usr/include/glib-2.0/gio/gtlscertificate.h;" gboolean g_tls_certificate_is_same (GTlsCertificate *cert_one, GTlsCertificate *cert_two);"
g;g_tls_certificate_list_new_from_file;glib-auto.f90;/usr/include/glib-2.0/gio/gtlscertificate.h;" GList *g_tls_certificate_list_new_from_file (const gchar *file, GError **error);"
g;g_tls_certificate_new_from_file;glib-auto.f90;/usr/include/glib-2.0/gio/gtlscertificate.h;" GTlsCertificate *g_tls_certificate_new_from_file (const gchar *file, GError **error);"
g;g_tls_certificate_new_from_files;glib-auto.f90;/usr/include/glib-2.0/gio/gtlscertificate.h;" GTlsCertificate *g_tls_certificate_new_from_files (const gchar *cert_file, const gchar *key_file, GError **error);"
g;g_tls_certificate_new_from_pem;glib-auto.f90;/usr/include/glib-2.0/gio/gtlscertificate.h;" GTlsCertificate *g_tls_certificate_new_from_pem (const gchar *data, gssize length, GError **error);"
g;g_tls_certificate_verify;glib-auto.f90;/usr/include/glib-2.0/gio/gtlscertificate.h;" GTlsCertificateFlags g_tls_certificate_verify (GTlsCertificate *cert, GSocketConnectable *identity, GTlsCertificate *trusted_ca);"
g;g_tls_client_connection_copy_session_state;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsclientconnection.h;" void g_tls_client_connection_copy_session_state (GTlsClientConnection *conn, GTlsClientConnection *source);"
g;g_tls_client_connection_get_accepted_cas;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsclientconnection.h;" GList * g_tls_client_connection_get_accepted_cas (GTlsClientConnection *conn);"
g;g_tls_client_connection_get_server_identity;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsclientconnection.h;" GSocketConnectable *g_tls_client_connection_get_server_identity (GTlsClientConnection *conn);"
g;g_tls_client_connection_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsclientconnection.h;"  GType g_tls_client_connection_get_type (void) G_GNUC_CONST;"
g;g_tls_client_connection_get_use_ssl3;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsclientconnection.h;" gboolean g_tls_client_connection_get_use_ssl3 (GTlsClientConnection *conn);"
g;g_tls_client_connection_get_validation_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsclientconnection.h;" GTlsCertificateFlags g_tls_client_connection_get_validation_flags (GTlsClientConnection *conn);"
g;g_tls_client_connection_new;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsclientconnection.h;" GIOStream * g_tls_client_connection_new (GIOStream *base_io_stream, GSocketConnectable *server_identity, GError **error);"
g;g_tls_client_connection_set_server_identity;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsclientconnection.h;" void g_tls_client_connection_set_server_identity (GTlsClientConnection *conn, GSocketConnectable *identity);"
g;g_tls_client_connection_set_use_ssl3;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsclientconnection.h;" void g_tls_client_connection_set_use_ssl3 (GTlsClientConnection *conn, gboolean use_ssl3);"
g;g_tls_client_connection_set_validation_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsclientconnection.h;" void g_tls_client_connection_set_validation_flags (GTlsClientConnection *conn, GTlsCertificateFlags flags);"
g;g_tls_connection_emit_accept_certificate;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" gboolean g_tls_connection_emit_accept_certificate (GTlsConnection *conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors);"
g;g_tls_connection_get_certificate;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" GTlsCertificate *g_tls_connection_get_certificate (GTlsConnection *conn);"
g;g_tls_connection_get_database;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" GTlsDatabase * g_tls_connection_get_database (GTlsConnection *conn);"
g;g_tls_connection_get_interaction;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" GTlsInteraction * g_tls_connection_get_interaction (GTlsConnection *conn);"
g;g_tls_connection_get_peer_certificate;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" GTlsCertificate *g_tls_connection_get_peer_certificate (GTlsConnection *conn);"
g;g_tls_connection_get_peer_certificate_errors;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors (GTlsConnection *conn);"
g;g_tls_connection_get_rehandshake_mode;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode (GTlsConnection *conn);"
g;g_tls_connection_get_require_close_notify;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" gboolean g_tls_connection_get_require_close_notify (GTlsConnection *conn);"
g;g_tls_connection_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;"  GType g_tls_connection_get_type (void) G_GNUC_CONST;"
g;g_tls_connection_get_use_system_certdb;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" gboolean g_tls_connection_get_use_system_certdb (GTlsConnection *conn);"
g;g_tls_connection_handshake;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" gboolean g_tls_connection_handshake (GTlsConnection *conn, GCancellable *cancellable, GError **error);"
g;g_tls_connection_handshake_async;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" void g_tls_connection_handshake_async (GTlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_tls_connection_handshake_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" gboolean g_tls_connection_handshake_finish (GTlsConnection *conn, GAsyncResult *result, GError **error);"
g;g_tls_connection_set_certificate;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" void g_tls_connection_set_certificate (GTlsConnection *conn, GTlsCertificate *certificate);"
g;g_tls_connection_set_database;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" void g_tls_connection_set_database (GTlsConnection *conn, GTlsDatabase *database);"
g;g_tls_connection_set_interaction;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" void g_tls_connection_set_interaction (GTlsConnection *conn, GTlsInteraction *interaction);"
g;g_tls_connection_set_rehandshake_mode;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" void g_tls_connection_set_rehandshake_mode (GTlsConnection *conn, GTlsRehandshakeMode mode);"
g;g_tls_connection_set_require_close_notify;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" void g_tls_connection_set_require_close_notify (GTlsConnection *conn, gboolean require_close_notify);"
g;g_tls_connection_set_use_system_certdb;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" void g_tls_connection_set_use_system_certdb (GTlsConnection *conn, gboolean use_system_certdb);"
g;g_tls_database_create_certificate_handle;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" gchar* g_tls_database_create_certificate_handle (GTlsDatabase *self, GTlsCertificate *certificate);"
g;g_tls_database_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;"  GType g_tls_database_get_type (void) G_GNUC_CONST;"
g;g_tls_database_lookup_certificate_for_handle;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" GTlsCertificate* g_tls_database_lookup_certificate_for_handle (GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error);"
g;g_tls_database_lookup_certificate_for_handle_async;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" void g_tls_database_lookup_certificate_for_handle_async (GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_tls_database_lookup_certificate_for_handle_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" GTlsCertificate* g_tls_database_lookup_certificate_for_handle_finish (GTlsDatabase *self, GAsyncResult *result, GError **error);"
g;g_tls_database_lookup_certificate_issuer;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" GTlsCertificate* g_tls_database_lookup_certificate_issuer (GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error);"
g;g_tls_database_lookup_certificate_issuer_async;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" void g_tls_database_lookup_certificate_issuer_async (GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_tls_database_lookup_certificate_issuer_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" GTlsCertificate* g_tls_database_lookup_certificate_issuer_finish (GTlsDatabase *self, GAsyncResult *result, GError **error);"
g;g_tls_database_lookup_certificates_issued_by;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" GList* g_tls_database_lookup_certificates_issued_by (GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error);"
g;g_tls_database_lookup_certificates_issued_by_async;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" void g_tls_database_lookup_certificates_issued_by_async (GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_tls_database_lookup_certificates_issued_by_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" GList* g_tls_database_lookup_certificates_issued_by_finish (GTlsDatabase *self, GAsyncResult *result, GError **error);"
g;g_tls_database_verify_chain;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" GTlsCertificateFlags g_tls_database_verify_chain (GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GError **error);"
g;g_tls_database_verify_chain_async;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" void g_tls_database_verify_chain_async (GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_tls_database_verify_chain_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsdatabase.h;" GTlsCertificateFlags g_tls_database_verify_chain_finish (GTlsDatabase *self, GAsyncResult *result, GError **error);"
g;g_tls_error_quark;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsconnection.h;" GQuark g_tls_error_quark (void);"
g;g_tls_file_database_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsfiledatabase.h;"  GType g_tls_file_database_get_type (void) G_GNUC_CONST;"
g;g_tls_file_database_new;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsfiledatabase.h;" GTlsDatabase* g_tls_file_database_new (const gchar *anchors, GError **error);"
g;g_tls_interaction_ask_password;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsinteraction.h;" GTlsInteractionResult g_tls_interaction_ask_password (GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error);"
g;g_tls_interaction_ask_password_async;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsinteraction.h;" void g_tls_interaction_ask_password_async (GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_tls_interaction_ask_password_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsinteraction.h;" GTlsInteractionResult g_tls_interaction_ask_password_finish (GTlsInteraction *interaction, GAsyncResult *result, GError **error);"
g;g_tls_interaction_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsinteraction.h;"  GType g_tls_interaction_get_type (void) G_GNUC_CONST;"
g;g_tls_interaction_invoke_ask_password;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsinteraction.h;" GTlsInteractionResult g_tls_interaction_invoke_ask_password (GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error);"
g;g_tls_interaction_invoke_request_certificate;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsinteraction.h;" GTlsInteractionResult g_tls_interaction_invoke_request_certificate (GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error);"
g;g_tls_interaction_request_certificate;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsinteraction.h;" GTlsInteractionResult g_tls_interaction_request_certificate (GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error);"
g;g_tls_interaction_request_certificate_async;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsinteraction.h;" void g_tls_interaction_request_certificate_async (GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_tls_interaction_request_certificate_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsinteraction.h;" GTlsInteractionResult g_tls_interaction_request_certificate_finish (GTlsInteraction *interaction, GAsyncResult *result, GError **error);"
g;g_tls_password_get_description;glib-auto.f90;/usr/include/glib-2.0/gio/gtlspassword.h;" const gchar* g_tls_password_get_description (GTlsPassword *password);"
g;g_tls_password_get_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gtlspassword.h;" GTlsPasswordFlags g_tls_password_get_flags (GTlsPassword *password);"
g;g_tls_password_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlspassword.h;"  GType g_tls_password_get_type (void) G_GNUC_CONST;"
g;g_tls_password_get_value;glib-auto.f90;/usr/include/glib-2.0/gio/gtlspassword.h;" const guchar * g_tls_password_get_value (GTlsPassword *password, gsize *length);"
g;g_tls_password_get_warning;glib-auto.f90;/usr/include/glib-2.0/gio/gtlspassword.h;" const gchar * g_tls_password_get_warning (GTlsPassword *password);"
g;g_tls_password_new;glib-auto.f90;/usr/include/glib-2.0/gio/gtlspassword.h;" GTlsPassword * g_tls_password_new (GTlsPasswordFlags flags, const gchar *description);"
g;g_tls_password_set_description;glib-auto.f90;/usr/include/glib-2.0/gio/gtlspassword.h;" void g_tls_password_set_description (GTlsPassword *password, const gchar *description);"
g;g_tls_password_set_flags;glib-auto.f90;/usr/include/glib-2.0/gio/gtlspassword.h;" void g_tls_password_set_flags (GTlsPassword *password, GTlsPasswordFlags flags);"
g;g_tls_password_set_value;glib-auto.f90;/usr/include/glib-2.0/gio/gtlspassword.h;" void g_tls_password_set_value (GTlsPassword *password, const guchar *value, gssize length);"
g;g_tls_password_set_value_full;glib-auto.f90;/usr/include/glib-2.0/gio/gtlspassword.h;" void g_tls_password_set_value_full (GTlsPassword *password, guchar *value, gssize length, GDestroyNotify destroy);"
g;g_tls_password_set_warning;glib-auto.f90;/usr/include/glib-2.0/gio/gtlspassword.h;" void g_tls_password_set_warning (GTlsPassword *password, const gchar *warning);"
g;g_tls_server_connection_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsserverconnection.h;"  GType g_tls_server_connection_get_type (void) G_GNUC_CONST;"
g;g_tls_server_connection_new;glib-auto.f90;/usr/include/glib-2.0/gio/gtlsserverconnection.h;" GIOStream * g_tls_server_connection_new (GIOStream *base_io_stream, GTlsCertificate *certificate, GError **error);"
g;g_trash_stack_height;glib-auto.f90;/usr/include/glib-2.0/glib/gtrashstack.h;" guint g_trash_stack_height (GTrashStack **stack_p);"
g;g_trash_stack_peek;glib-auto.f90;/usr/include/glib-2.0/glib/gtrashstack.h;" gpointer g_trash_stack_peek (GTrashStack **stack_p);"
g;g_trash_stack_pop;glib-auto.f90;/usr/include/glib-2.0/glib/gtrashstack.h;" gpointer g_trash_stack_pop (GTrashStack **stack_p);"
g;g_tree_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" void g_tree_destroy (GTree *tree);"
g;g_tree_foreach;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" void g_tree_foreach (GTree *tree, GTraverseFunc func, gpointer user_data);"
g;g_tree_height;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" gint g_tree_height (GTree *tree);"
g;g_tree_insert;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" void g_tree_insert (GTree *tree, gpointer key, gpointer value);"
g;g_tree_lookup;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" gpointer g_tree_lookup (GTree *tree, gconstpointer key);"
g;g_tree_lookup_extended;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" gboolean g_tree_lookup_extended (GTree *tree, gconstpointer lookup_key, gpointer *orig_key, gpointer *value);"
g;g_tree_new;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;"  GTree* g_tree_new (GCompareFunc key_compare_func);"
g;g_tree_new_full;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" GTree* g_tree_new_full (GCompareDataFunc key_compare_func, gpointer key_compare_data, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func);"
g;g_tree_new_with_data;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" GTree* g_tree_new_with_data (GCompareDataFunc key_compare_func, gpointer key_compare_data);"
g;g_tree_nnodes;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" gint g_tree_nnodes (GTree *tree);"
g;g_tree_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" GTree* g_tree_ref (GTree *tree);"
g;g_tree_remove;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" gboolean g_tree_remove (GTree *tree, gconstpointer key);"
g;g_tree_replace;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" void g_tree_replace (GTree *tree, gpointer key, gpointer value);"
g;g_tree_search;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" gpointer g_tree_search (GTree *tree, GCompareFunc search_func, gconstpointer user_data);"
g;g_tree_steal;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" gboolean g_tree_steal (GTree *tree, gconstpointer key);"
g;g_tree_traverse;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" void g_tree_traverse (GTree *tree, GTraverseFunc traverse_func, GTraverseType traverse_type, gpointer user_data);"
g;g_tree_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gtree.h;" void g_tree_unref (GTree *tree);"
g;g_try_malloc;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gpointer g_try_malloc (gsize n_bytes) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE(1);"
g;g_try_malloc0;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gpointer g_try_malloc0 (gsize n_bytes) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE(1);"
g;g_try_malloc0_n;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gpointer g_try_malloc0_n (gsize n_blocks, gsize n_block_bytes) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE2(1,2);"
g;g_try_malloc_n;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gpointer g_try_malloc_n (gsize n_blocks, gsize n_block_bytes) G_GNUC_MALLOC G_GNUC_ALLOC_SIZE2(1,2);"
g;g_try_realloc;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gpointer g_try_realloc (gpointer mem, gsize n_bytes) G_GNUC_WARN_UNUSED_RESULT;"
g;g_try_realloc_n;glib-auto.f90;/usr/include/glib-2.0/glib/gmem.h;" gpointer g_try_realloc_n (gpointer mem, gsize n_blocks, gsize n_block_bytes) G_GNUC_WARN_UNUSED_RESULT;"
g;g_tuples_destroy;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/grel.h;" void g_tuples_destroy (GTuples *tuples);"
g;g_tuples_index;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/grel.h;" gpointer g_tuples_index (GTuples *tuples, gint index_, gint field);"
g;g_type_add_class_cache_func;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_add_class_cache_func (gpointer cache_data, GTypeClassCacheFunc cache_func);"
g;g_type_add_class_private;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_add_class_private (GType class_type, gsize private_size);"
g;g_type_add_instance_private;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gint g_type_add_instance_private (GType class_type, gsize private_size);"
g;g_type_add_interface_check;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_add_interface_check (gpointer check_data, GTypeInterfaceCheckFunc check_func);"
g;g_type_add_interface_dynamic;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_add_interface_dynamic (GType instance_type, GType interface_type, GTypePlugin *plugin);"
g;g_type_add_interface_static;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_add_interface_static (GType instance_type, GType interface_type, const GInterfaceInfo *info);"
g;g_type_check_class_cast;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GTypeClass* g_type_check_class_cast (GTypeClass *g_class, GType is_a_type);"
g;g_type_check_class_is_a;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gboolean g_type_check_class_is_a (GTypeClass *g_class, GType is_a_type) G_GNUC_PURE;"
g;g_type_check_instance;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gboolean g_type_check_instance (GTypeInstance *instance) G_GNUC_PURE;"
g;g_type_check_instance_cast;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GTypeInstance* g_type_check_instance_cast (GTypeInstance *instance, GType iface_type);"
g;g_type_check_instance_is_a;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gboolean g_type_check_instance_is_a (GTypeInstance *instance, GType iface_type) G_GNUC_PURE;"
g;g_type_check_instance_is_fundamentally_a;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gboolean g_type_check_instance_is_fundamentally_a (GTypeInstance *instance, GType fundamental_type) G_GNUC_PURE;"
g;g_type_check_is_value_type;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gboolean g_type_check_is_value_type (GType type) G_GNUC_CONST;"
g;g_type_check_value;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gboolean g_type_check_value (GValue *value) G_GNUC_PURE;"
g;g_type_check_value_holds;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gboolean g_type_check_value_holds (GValue *value, GType type) G_GNUC_PURE;"
g;g_type_children;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GType* g_type_children (GType type, guint *n_children);"
g;g_type_class_add_private;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_class_add_private (gpointer g_class, gsize private_size);"
g;g_type_class_adjust_private_offset;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_class_adjust_private_offset (gpointer g_class, gint *private_size_or_offset);"
g;g_type_class_get_instance_private_offset;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gint g_type_class_get_instance_private_offset (gpointer g_class);"
g;g_type_class_get_private;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gpointer g_type_class_get_private (GTypeClass *klass, GType private_type);"
g;g_type_class_peek;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gpointer g_type_class_peek (GType type);"
g;g_type_class_peek_parent;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gpointer g_type_class_peek_parent (gpointer g_class);"
g;g_type_class_peek_static;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gpointer g_type_class_peek_static (GType type);"
g;g_type_class_ref;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gpointer g_type_class_ref (GType type);"
g;g_type_class_unref;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_class_unref (gpointer g_class);"
g;g_type_class_unref_uncached;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_class_unref_uncached (gpointer g_class);"
g;g_type_create_instance;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GTypeInstance* g_type_create_instance (GType type);"
g;g_type_default_interface_peek;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gpointer g_type_default_interface_peek (GType g_type);"
g;g_type_default_interface_ref;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gpointer g_type_default_interface_ref (GType g_type);"
g;g_type_default_interface_unref;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_default_interface_unref (gpointer g_iface);"
g;g_type_depth;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" guint g_type_depth (GType type);"
g;g_type_ensure;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_ensure (GType type);"
g;g_type_free_instance;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_free_instance (GTypeInstance *instance);"
g;g_type_from_name;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GType g_type_from_name (const gchar *name);"
g;g_type_fundamental;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GType g_type_fundamental (GType type_id);"
g;g_type_fundamental_next;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GType g_type_fundamental_next (void);"
g;g_type_get_instance_count;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" int g_type_get_instance_count (GType type);"
g;g_type_get_plugin;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GTypePlugin* g_type_get_plugin (GType type);"
g;g_type_get_qdata;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gpointer g_type_get_qdata (GType type, GQuark quark);"
g;g_type_get_type_registration_serial;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" guint g_type_get_type_registration_serial (void);"
g;g_type_init;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;"  void g_type_init (void);"
g;g_type_init_with_debug_flags;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_init_with_debug_flags (GTypeDebugFlags debug_flags);"
g;g_type_instance_get_private;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gpointer g_type_instance_get_private (GTypeInstance *instance, GType private_type);"
g;g_type_interface_add_prerequisite;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_interface_add_prerequisite (GType interface_type, GType prerequisite_type);"
g;g_type_interface_get_plugin;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GTypePlugin* g_type_interface_get_plugin (GType instance_type, GType interface_type);"
g;g_type_interface_peek;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gpointer g_type_interface_peek (gpointer instance_class, GType iface_type);"
g;g_type_interface_peek_parent;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gpointer g_type_interface_peek_parent (gpointer g_iface);"
g;g_type_interface_prerequisites;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GType*g_type_interface_prerequisites (GType interface_type, guint *n_prerequisites);"
g;g_type_interfaces;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GType* g_type_interfaces (GType type, guint *n_interfaces);"
g;g_type_is_a;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gboolean g_type_is_a (GType type, GType is_a_type);"
g;g_type_module_add_interface;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypemodule.h;" void g_type_module_add_interface (GTypeModule *module, GType instance_type, GType interface_type, const GInterfaceInfo *interface_info);"
g;g_type_module_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypemodule.h;"  GType g_type_module_get_type (void) G_GNUC_CONST;"
g;g_type_module_register_enum;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypemodule.h;" GType g_type_module_register_enum (GTypeModule *module, const gchar *name, const GEnumValue *const_static_values);"
g;g_type_module_register_flags;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypemodule.h;" GType g_type_module_register_flags (GTypeModule *module, const gchar *name, const GFlagsValue *const_static_values);"
g;g_type_module_register_type;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypemodule.h;" GType g_type_module_register_type (GTypeModule *module, GType parent_type, const gchar *type_name, const GTypeInfo *type_info, GTypeFlags flags);"
g;g_type_module_set_name;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypemodule.h;" void g_type_module_set_name (GTypeModule *module, const gchar *name);"
g;g_type_module_unuse;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypemodule.h;" void g_type_module_unuse (GTypeModule *module);"
g;g_type_module_use;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypemodule.h;" gboolean g_type_module_use (GTypeModule *module);"
g;g_type_name;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" const gchar * g_type_name (GType type);"
g;g_type_name_from_class;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" const gchar * g_type_name_from_class (GTypeClass *g_class);"
g;g_type_name_from_instance;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" const gchar * g_type_name_from_instance (GTypeInstance *instance);"
g;g_type_next_base;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GType g_type_next_base (GType leaf_type, GType root_type);"
g;g_type_parent;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GType g_type_parent (GType type);"
g;g_type_plugin_complete_interface_info;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypeplugin.h;" void g_type_plugin_complete_interface_info (GTypePlugin *plugin, GType instance_type, GType interface_type, GInterfaceInfo *info);"
g;g_type_plugin_complete_type_info;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypeplugin.h;" void g_type_plugin_complete_type_info (GTypePlugin *plugin, GType g_type, GTypeInfo *info, GTypeValueTable *value_table);"
g;g_type_plugin_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypeplugin.h;"  GType g_type_plugin_get_type (void) G_GNUC_CONST;"
g;g_type_plugin_unuse;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypeplugin.h;" void g_type_plugin_unuse (GTypePlugin *plugin);"
g;g_type_plugin_use;glib-auto.f90;/usr/include/glib-2.0/gobject/gtypeplugin.h;" void g_type_plugin_use (GTypePlugin *plugin);"
g;g_type_qname;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GQuark g_type_qname (GType type);"
g;g_type_query;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_query (GType type, GTypeQuery *query);"
g;g_type_register_dynamic;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;"  GType g_type_register_dynamic (GType parent_type, const gchar *type_name, GTypePlugin *plugin, GTypeFlags flags);"
g;g_type_register_fundamental;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GType g_type_register_fundamental (GType type_id, const gchar *type_name, const GTypeInfo *info, const GTypeFundamentalInfo *finfo, GTypeFlags flags);"
g;g_type_register_static;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GType g_type_register_static (GType parent_type, const gchar *type_name, const GTypeInfo *info, GTypeFlags flags);"
g;g_type_register_static_simple;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GType g_type_register_static_simple (GType parent_type, const gchar *type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags);"
g;g_type_remove_class_cache_func;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_remove_class_cache_func (gpointer cache_data, GTypeClassCacheFunc cache_func);"
g;g_type_remove_interface_check;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_remove_interface_check (gpointer check_data, GTypeInterfaceCheckFunc check_func);"
g;g_type_set_qdata;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" void g_type_set_qdata (GType type, GQuark quark, gpointer data);"
g;g_type_test_flags;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" gboolean g_type_test_flags (GType type, guint flags) G_GNUC_CONST;"
g;g_type_value_table_peek;glib-auto.f90;/usr/include/glib-2.0/gobject/gtype.h;" GTypeValueTable* g_type_value_table_peek (GType type);"
g;g_ucs4_to_utf16;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gunichar2 *g_ucs4_to_utf16 (const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error) G_GNUC_MALLOC;"
g;g_ucs4_to_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar* g_ucs4_to_utf8 (const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error) G_GNUC_MALLOC;"
g;g_unichar_break_type;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" GUnicodeBreakType g_unichar_break_type (gunichar c) G_GNUC_CONST;"
g;g_unichar_combining_class;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gint g_unichar_combining_class (gunichar uc) G_GNUC_CONST;"
g;g_unichar_compose;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_compose (gunichar a, gunichar b, gunichar *ch);"
g;g_unichar_decompose;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_decompose (gunichar ch, gunichar *a, gunichar *b);"
g;g_unichar_digit_value;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gint g_unichar_digit_value (gunichar c) G_GNUC_CONST;"
g;g_unichar_fully_decompose;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gsize g_unichar_fully_decompose (gunichar ch, gboolean compat, gunichar *result, gsize result_len);"
g;g_unichar_get_mirror_char;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_get_mirror_char (gunichar ch, gunichar *mirrored_ch);"
g;g_unichar_get_script;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" GUnicodeScript g_unichar_get_script (gunichar ch) G_GNUC_CONST;"
g;g_unichar_isalnum;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_isalnum (gunichar c) G_GNUC_CONST;"
g;g_unichar_isalpha;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_isalpha (gunichar c) G_GNUC_CONST;"
g;g_unichar_iscntrl;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_iscntrl (gunichar c) G_GNUC_CONST;"
g;g_unichar_isdefined;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_isdefined (gunichar c) G_GNUC_CONST;"
g;g_unichar_isdigit;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_isdigit (gunichar c) G_GNUC_CONST;"
g;g_unichar_isgraph;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_isgraph (gunichar c) G_GNUC_CONST;"
g;g_unichar_islower;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_islower (gunichar c) G_GNUC_CONST;"
g;g_unichar_ismark;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_ismark (gunichar c) G_GNUC_CONST;"
g;g_unichar_isprint;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_isprint (gunichar c) G_GNUC_CONST;"
g;g_unichar_ispunct;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_ispunct (gunichar c) G_GNUC_CONST;"
g;g_unichar_isspace;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_isspace (gunichar c) G_GNUC_CONST;"
g;g_unichar_istitle;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_istitle (gunichar c) G_GNUC_CONST;"
g;g_unichar_isupper;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_isupper (gunichar c) G_GNUC_CONST;"
g;g_unichar_iswide;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_iswide (gunichar c) G_GNUC_CONST;"
g;g_unichar_iswide_cjk;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_iswide_cjk(gunichar c) G_GNUC_CONST;"
g;g_unichar_isxdigit;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_isxdigit (gunichar c) G_GNUC_CONST;"
g;g_unichar_iszerowidth;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_iszerowidth(gunichar c) G_GNUC_CONST;"
g;g_unichar_to_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gint g_unichar_to_utf8 (gunichar c, gchar *outbuf);"
g;g_unichar_tolower;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gunichar g_unichar_tolower (gunichar c) G_GNUC_CONST;"
g;g_unichar_totitle;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gunichar g_unichar_totitle (gunichar c) G_GNUC_CONST;"
g;g_unichar_toupper;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gunichar g_unichar_toupper (gunichar c) G_GNUC_CONST;"
g;g_unichar_type;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" GUnicodeType g_unichar_type (gunichar c) G_GNUC_CONST;"
g;g_unichar_validate;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_unichar_validate (gunichar ch) G_GNUC_CONST;"
g;g_unichar_xdigit_value;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gint g_unichar_xdigit_value (gunichar c) G_GNUC_CONST;"
g;g_unicode_canonical_decomposition;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gunichar *g_unicode_canonical_decomposition (gunichar ch, gsize *result_len) G_GNUC_MALLOC;"
g;g_unicode_canonical_ordering;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" void g_unicode_canonical_ordering (gunichar *string, gsize len);"
g;g_unicode_script_from_iso15924;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" GUnicodeScript g_unicode_script_from_iso15924 (guint32 iso15924);"
g;g_unicode_script_to_iso15924;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;"  guint32 g_unicode_script_to_iso15924 (GUnicodeScript script);"
g;g_unix_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib-unix.h;"  GQuark g_unix_error_quark (void);"
g;g_unix_fd_add;glib-auto.f90;/usr/include/glib-2.0/glib-unix.h;" guint g_unix_fd_add (gint fd, GIOCondition condition, GUnixFDSourceFunc function, gpointer user_data);"
g;g_unix_fd_add_full;glib-auto.f90;/usr/include/glib-2.0/glib-unix.h;" guint g_unix_fd_add_full (gint priority, gint fd, GIOCondition condition, GUnixFDSourceFunc function, gpointer user_data, GDestroyNotify notify);"
g;g_unix_fd_source_new;glib-auto.f90;/usr/include/glib-2.0/glib-unix.h;" GSource *g_unix_fd_source_new (gint fd, GIOCondition condition);"
g;g_unix_open_pipe;glib-auto.f90;/usr/include/glib-2.0/glib-unix.h;" gboolean g_unix_open_pipe (gint *fds, gint flags, GError **error);"
g;g_unix_set_fd_nonblocking;glib-auto.f90;/usr/include/glib-2.0/glib-unix.h;" gboolean g_unix_set_fd_nonblocking (gint fd, gboolean nonblock, GError **error);"
g;g_unix_signal_add;glib-auto.f90;/usr/include/glib-2.0/glib-unix.h;" guint g_unix_signal_add (gint signum, GSourceFunc handler, gpointer user_data);"
g;g_unix_signal_add_full;glib-auto.f90;/usr/include/glib-2.0/glib-unix.h;" guint g_unix_signal_add_full (gint priority, gint signum, GSourceFunc handler, gpointer user_data, GDestroyNotify notify);"
g;g_unix_signal_source_new;glib-auto.f90;/usr/include/glib-2.0/glib-unix.h;" GSource *g_unix_signal_source_new (gint signum);"
g;g_unsetenv_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/genviron.h;" void g_unsetenv_utf8 (const gchar *variable);"
g;g_uri_escape_string;glib-auto.f90;/usr/include/glib-2.0/glib/gurifuncs.h;" char * g_uri_escape_string (const char *unescaped, const char *reserved_chars_allowed, gboolean allow_utf8);"
g;g_uri_list_extract_uris;glib-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar **g_uri_list_extract_uris (const gchar *uri_list) G_GNUC_MALLOC;"
g;g_uri_parse_scheme;glib-auto.f90;/usr/include/glib-2.0/glib/gurifuncs.h;" char * g_uri_parse_scheme (const char *uri);"
g;g_uri_unescape_segment;glib-auto.f90;/usr/include/glib-2.0/glib/gurifuncs.h;" char * g_uri_unescape_segment (const char *escaped_string, const char *escaped_string_end, const char *illegal_characters);"
g;g_uri_unescape_string;glib-auto.f90;/usr/include/glib-2.0/glib/gurifuncs.h;"  char * g_uri_unescape_string (const char *escaped_string, const char *illegal_characters);"
g;g_usleep;glib-auto.f90;/usr/include/glib-2.0/glib/gtimer.h;" void g_usleep (gulong microseconds);"
g;g_utf16_to_ucs4;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gunichar * g_utf16_to_ucs4 (const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error) G_GNUC_MALLOC;"
g;g_utf16_to_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar* g_utf16_to_utf8 (const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error) G_GNUC_MALLOC;"
g;g_utf8_casefold;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar *g_utf8_casefold (const gchar *str, gssize len) G_GNUC_MALLOC;"
g;g_utf8_collate;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gint g_utf8_collate (const gchar *str1, const gchar *str2) G_GNUC_PURE;"
g;g_utf8_collate_key;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar *g_utf8_collate_key (const gchar *str, gssize len) G_GNUC_MALLOC;"
g;g_utf8_collate_key_for_filename;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar *g_utf8_collate_key_for_filename (const gchar *str, gssize len) G_GNUC_MALLOC;"
g;g_utf8_find_next_char;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar* g_utf8_find_next_char (const gchar *p, const gchar *end) G_GNUC_PURE;"
g;g_utf8_find_prev_char;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar* g_utf8_find_prev_char (const gchar *str, const gchar *p) G_GNUC_PURE;"
g;g_utf8_get_char;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gunichar g_utf8_get_char (const gchar *p) G_GNUC_PURE;"
g;g_utf8_get_char_validated;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gunichar g_utf8_get_char_validated (const gchar *p, gssize max_len) G_GNUC_PURE;"
g;g_utf8_normalize;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar *g_utf8_normalize (const gchar *str, gssize len, GNormalizeMode mode) G_GNUC_MALLOC;"
g;g_utf8_offset_to_pointer;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar* g_utf8_offset_to_pointer (const gchar *str, glong offset) G_GNUC_PURE;"
g;g_utf8_pointer_to_offset;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" glong g_utf8_pointer_to_offset (const gchar *str, const gchar *pos) G_GNUC_PURE;"
g;g_utf8_prev_char;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar* g_utf8_prev_char (const gchar *p) G_GNUC_PURE;"
g;g_utf8_strchr;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar* g_utf8_strchr (const gchar *p, gssize len, gunichar c);"
g;g_utf8_strdown;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar *g_utf8_strdown (const gchar *str, gssize len) G_GNUC_MALLOC;"
g;g_utf8_strlen;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" glong g_utf8_strlen (const gchar *p, gssize max) G_GNUC_PURE;"
g;g_utf8_strncpy;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar *g_utf8_strncpy (gchar *dest, const gchar *src, gsize n);"
g;g_utf8_strrchr;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar* g_utf8_strrchr (const gchar *p, gssize len, gunichar c);"
g;g_utf8_strreverse;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar* g_utf8_strreverse (const gchar *str, gssize len);"
g;g_utf8_strup;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar *g_utf8_strup (const gchar *str, gssize len) G_GNUC_MALLOC;"
g;g_utf8_substring;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gchar *g_utf8_substring (const gchar *str, glong start_pos, glong end_pos) G_GNUC_MALLOC;"
g;g_utf8_to_ucs4;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gunichar * g_utf8_to_ucs4 (const gchar *str, glong len, glong *items_read, glong *items_written, GError **error) G_GNUC_MALLOC;"
g;g_utf8_to_ucs4_fast;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gunichar * g_utf8_to_ucs4_fast (const gchar *str, glong len, glong *items_written) G_GNUC_MALLOC;"
g;g_utf8_to_utf16;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gunichar2 *g_utf8_to_utf16 (const gchar *str, glong len, glong *items_read, glong *items_written, GError **error) G_GNUC_MALLOC;"
g;g_utf8_validate;glib-auto.f90;/usr/include/glib-2.0/glib/gunicode.h;" gboolean g_utf8_validate (const gchar *str, gssize max_len, const gchar **end);"
g;g_value_array_append;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluearray.h;" GValueArray* g_value_array_append (GValueArray *value_array, const GValue *value);"
g;g_value_array_copy;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluearray.h;" GValueArray* g_value_array_copy (const GValueArray *value_array);"
g;g_value_array_free;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluearray.h;" void g_value_array_free (GValueArray *value_array);"
g;g_value_array_get_nth;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluearray.h;" GValue* g_value_array_get_nth (GValueArray *value_array, guint index_);"
g;g_value_array_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluearray.h;"  GType g_value_array_get_type (void) G_GNUC_CONST;"
g;g_value_array_insert;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluearray.h;" GValueArray* g_value_array_insert (GValueArray *value_array, guint index_, const GValue *value);"
g;g_value_array_new;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluearray.h;" GValueArray* g_value_array_new (guint n_prealloced);"
g;g_value_array_prepend;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluearray.h;" GValueArray* g_value_array_prepend (GValueArray *value_array, const GValue *value);"
g;g_value_array_remove;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluearray.h;" GValueArray* g_value_array_remove (GValueArray *value_array, guint index_);"
g;g_value_array_sort;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluearray.h;" GValueArray* g_value_array_sort (GValueArray *value_array, GCompareFunc compare_func);"
g;g_value_array_sort_with_data;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluearray.h;" GValueArray* g_value_array_sort_with_data (GValueArray *value_array, GCompareDataFunc compare_func, gpointer user_data);"
g;g_value_copy;glib-auto.f90;/usr/include/glib-2.0/gobject/gvalue.h;" void g_value_copy (const GValue *src_value, GValue *dest_value);"
g;g_value_dup_boxed;glib-auto.f90;/usr/include/glib-2.0/gobject/gboxed.h;" gpointer g_value_dup_boxed (const GValue *value);"
g;g_value_dup_object;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gpointer g_value_dup_object (const GValue *value);"
g;g_value_dup_param;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" GParamSpec* g_value_dup_param (const GValue *value);"
g;g_value_dup_string;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" gchar* g_value_dup_string (const GValue *value);"
g;g_value_dup_variant;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" GVariant* g_value_dup_variant (const GValue *value);"
g;g_value_fits_pointer;glib-auto.f90;/usr/include/glib-2.0/gobject/gvalue.h;" gboolean g_value_fits_pointer (const GValue *value);"
g;g_value_get_boolean;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" gboolean g_value_get_boolean (const GValue *value);"
g;g_value_get_boxed;glib-auto.f90;/usr/include/glib-2.0/gobject/gboxed.h;" gpointer g_value_get_boxed (const GValue *value);"
g;g_value_get_char;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" gchar g_value_get_char (const GValue *value);"
g;g_value_get_double;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" gdouble g_value_get_double (const GValue *value);"
g;g_value_get_enum;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" gint g_value_get_enum (const GValue *value);"
g;g_value_get_flags;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" guint g_value_get_flags (const GValue *value);"
g;g_value_get_float;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" gfloat g_value_get_float (const GValue *value);"
g;g_value_get_gtype;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" GType g_value_get_gtype (const GValue *value);"
g;g_value_get_int;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" gint g_value_get_int (const GValue *value);"
g;g_value_get_int64;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" gint64 g_value_get_int64 (const GValue *value);"
g;g_value_get_long;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" glong g_value_get_long (const GValue *value);"
g;g_value_get_object;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gpointer g_value_get_object (const GValue *value);"
g;g_value_get_param;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" GParamSpec* g_value_get_param (const GValue *value);"
g;g_value_get_pointer;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" gpointer g_value_get_pointer (const GValue *value);"
g;g_value_get_schar;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" gint8 g_value_get_schar (const GValue *value);"
g;g_value_get_string;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" const gchar * g_value_get_string (const GValue *value);"
g;g_value_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/gboxed.h;" GType g_value_get_type (void) G_GNUC_CONST;"
g;g_value_get_uchar;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" guchar g_value_get_uchar (const GValue *value);"
g;g_value_get_uint;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" guint g_value_get_uint (const GValue *value);"
g;g_value_get_uint64;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" guint64 g_value_get_uint64 (const GValue *value);"
g;g_value_get_ulong;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" gulong g_value_get_ulong (const GValue *value);"
g;g_value_get_variant;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" GVariant* g_value_get_variant (const GValue *value);"
g;g_value_init;glib-auto.f90;/usr/include/glib-2.0/gobject/gvalue.h;"  union  GValue* g_value_init (GValue *value, GType g_type);"
g;g_value_init_from_instance;glib-auto.f90;/usr/include/glib-2.0/gobject/gvalue.h;" void g_value_init_from_instance (GValue *value, gpointer instance);"
g;g_value_peek_pointer;glib-auto.f90;/usr/include/glib-2.0/gobject/gvalue.h;" gpointer g_value_peek_pointer (const GValue *value);"
g;g_value_register_transform_func;glib-auto.f90;/usr/include/glib-2.0/gobject/gvalue.h;" void g_value_register_transform_func (GType src_type, GType dest_type, GValueTransform transform_func);"
g;g_value_reset;glib-auto.f90;/usr/include/glib-2.0/gobject/gvalue.h;" GValue* g_value_reset (GValue *value);"
g;g_value_set_boolean;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_boolean (GValue *value, gboolean v_boolean);"
g;g_value_set_boxed;glib-auto.f90;/usr/include/glib-2.0/gobject/gboxed.h;" void g_value_set_boxed (GValue *value, gconstpointer v_boxed);"
g;g_value_set_boxed_take_ownership;glib-auto.f90;/usr/include/glib-2.0/gobject/gboxed.h;" void g_value_set_boxed_take_ownership (GValue *value, gconstpointer v_boxed);"
g;g_value_set_char;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;"  void g_value_set_char (GValue *value, gchar v_char);"
g;g_value_set_double;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_double (GValue *value, gdouble v_double);"
g;g_value_set_enum;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" void g_value_set_enum (GValue *value, gint v_enum);"
g;g_value_set_flags;glib-auto.f90;/usr/include/glib-2.0/gobject/genums.h;" void g_value_set_flags (GValue *value, guint v_flags);"
g;g_value_set_float;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_float (GValue *value, gfloat v_float);"
g;g_value_set_gtype;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_gtype (GValue *value, GType v_gtype);"
g;g_value_set_instance;glib-auto.f90;/usr/include/glib-2.0/gobject/gvalue.h;" void g_value_set_instance (GValue *value, gpointer instance);"
g;g_value_set_int;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_int (GValue *value, gint v_int);"
g;g_value_set_int64;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_int64 (GValue *value, gint64 v_int64);"
g;g_value_set_long;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_long (GValue *value, glong v_long);"
g;g_value_set_object;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_value_set_object (GValue *value, gpointer v_object);"
g;g_value_set_object_take_ownership;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_value_set_object_take_ownership (GValue *value, gpointer v_object);"
g;g_value_set_param;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" void g_value_set_param (GValue *value, GParamSpec *param);"
g;g_value_set_param_take_ownership;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" void g_value_set_param_take_ownership (GValue *value, GParamSpec *param);"
g;g_value_set_pointer;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_pointer (GValue *value, gpointer v_pointer);"
g;g_value_set_schar;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_schar (GValue *value, gint8 v_char);"
g;g_value_set_static_boxed;glib-auto.f90;/usr/include/glib-2.0/gobject/gboxed.h;" void g_value_set_static_boxed (GValue *value, gconstpointer v_boxed);"
g;g_value_set_static_string;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_static_string (GValue *value, const gchar *v_string);"
g;g_value_set_string;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_string (GValue *value, const gchar *v_string);"
g;g_value_set_string_take_ownership;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_string_take_ownership (GValue *value, gchar *v_string);"
g;g_value_set_uchar;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_uchar (GValue *value, guchar v_uchar);"
g;g_value_set_uint;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_uint (GValue *value, guint v_uint);"
g;g_value_set_uint64;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_uint64 (GValue *value, guint64 v_uint64);"
g;g_value_set_ulong;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_ulong (GValue *value, gulong v_ulong);"
g;g_value_set_variant;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_set_variant (GValue *value, GVariant *variant);"
g;g_value_take_boxed;glib-auto.f90;/usr/include/glib-2.0/gobject/gboxed.h;" void g_value_take_boxed (GValue *value, gconstpointer v_boxed);"
g;g_value_take_object;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_value_take_object (GValue *value, gpointer v_object);"
g;g_value_take_param;glib-auto.f90;/usr/include/glib-2.0/gobject/gparam.h;" void g_value_take_param (GValue *value, GParamSpec *param);"
g;g_value_take_string;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_take_string (GValue *value, gchar *v_string);"
g;g_value_take_variant;glib-auto.f90;/usr/include/glib-2.0/gobject/gvaluetypes.h;" void g_value_take_variant (GValue *value, GVariant *variant);"
g;g_value_transform;glib-auto.f90;/usr/include/glib-2.0/gobject/gvalue.h;" gboolean g_value_transform (const GValue *src_value, GValue *dest_value);"
g;g_value_type_compatible;glib-auto.f90;/usr/include/glib-2.0/gobject/gvalue.h;" gboolean g_value_type_compatible (GType src_type, GType dest_type);"
g;g_value_type_transformable;glib-auto.f90;/usr/include/glib-2.0/gobject/gvalue.h;" gboolean g_value_type_transformable (GType src_type, GType dest_type);"
g;g_value_unset;glib-auto.f90;/usr/include/glib-2.0/gobject/gvalue.h;" void g_value_unset (GValue *value);"
g;g_variant_builder_add_value;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_builder_add_value (GVariantBuilder *builder, GVariant *value);"
g;g_variant_builder_clear;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_builder_clear (GVariantBuilder *builder);"
g;g_variant_builder_close;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_builder_close (GVariantBuilder *builder);"
g;g_variant_builder_end;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_builder_end (GVariantBuilder *builder);"
g;g_variant_builder_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_variant_builder_get_type (void) G_GNUC_CONST;"
g;g_variant_builder_init;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_builder_init (GVariantBuilder *builder, const GVariantType *type);"
g;g_variant_builder_new;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariantBuilder * g_variant_builder_new (const GVariantType *type);"
g;g_variant_builder_open;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_builder_open (GVariantBuilder *builder, const GVariantType *type);"
g;g_variant_builder_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariantBuilder * g_variant_builder_ref (GVariantBuilder *builder);"
g;g_variant_builder_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_builder_unref (GVariantBuilder *builder);"
g;g_variant_byteswap;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_byteswap (GVariant *value);"
g;g_variant_check_format_string;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gboolean g_variant_check_format_string (GVariant *value, const gchar *format_string, gboolean copy_only);"
g;g_variant_classify;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariantClass g_variant_classify (GVariant *value);"
g;g_variant_compare;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gint g_variant_compare (gconstpointer one, gconstpointer two);"
g;g_variant_dict_clear;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_dict_clear (GVariantDict *dict);"
g;g_variant_dict_contains;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gboolean g_variant_dict_contains (GVariantDict *dict, const gchar *key);"
g;g_variant_dict_end;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_dict_end (GVariantDict *dict);"
g;g_variant_dict_get_type;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_variant_dict_get_type (void) G_GNUC_CONST;"
g;g_variant_dict_init;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_dict_init (GVariantDict *dict, GVariant *from_asv);"
g;g_variant_dict_insert_value;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_dict_insert_value (GVariantDict *dict, const gchar *key, GVariant *value);"
g;g_variant_dict_lookup_value;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_dict_lookup_value (GVariantDict *dict, const gchar *key, const GVariantType *expected_type);"
g;g_variant_dict_new;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariantDict * g_variant_dict_new (GVariant *from_asv);"
g;g_variant_dict_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariantDict * g_variant_dict_ref (GVariantDict *dict);"
g;g_variant_dict_remove;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gboolean g_variant_dict_remove (GVariantDict *dict, const gchar *key);"
g;g_variant_dict_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_dict_unref (GVariantDict *dict);"
g;g_variant_dup_bytestring;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gchar * g_variant_dup_bytestring (GVariant *value, gsize *length);"
g;g_variant_dup_bytestring_array;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gchar ** g_variant_dup_bytestring_array (GVariant *value, gsize *length);"
g;g_variant_dup_objv;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gchar ** g_variant_dup_objv (GVariant *value, gsize *length);"
g;g_variant_dup_string;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gchar * g_variant_dup_string (GVariant *value, gsize *length);"
g;g_variant_dup_strv;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gchar ** g_variant_dup_strv (GVariant *value, gsize *length);"
g;g_variant_equal;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gboolean g_variant_equal (gconstpointer one, gconstpointer two);"
g;g_variant_get_boolean;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gboolean g_variant_get_boolean (GVariant *value);"
g;g_variant_get_byte;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" guchar g_variant_get_byte (GVariant *value);"
g;g_variant_get_bytestring;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" const gchar * g_variant_get_bytestring (GVariant *value);"
g;g_variant_get_bytestring_array;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" const gchar ** g_variant_get_bytestring_array (GVariant *value, gsize *length);"
g;g_variant_get_child_value;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_get_child_value (GVariant *value, gsize index_);"
g;g_variant_get_data;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gconstpointer g_variant_get_data (GVariant *value);"
g;g_variant_get_data_as_bytes;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GBytes * g_variant_get_data_as_bytes (GVariant *value);"
g;g_variant_get_double;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gdouble g_variant_get_double (GVariant *value);"
g;g_variant_get_fixed_array;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gconstpointer g_variant_get_fixed_array (GVariant *value, gsize *n_elements, gsize element_size);"
g;g_variant_get_gtype;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_variant_get_gtype (void) G_GNUC_CONST;"
g;g_variant_get_handle;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gint32 g_variant_get_handle (GVariant *value);"
g;g_variant_get_int16;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gint16 g_variant_get_int16 (GVariant *value);"
g;g_variant_get_int32;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gint32 g_variant_get_int32 (GVariant *value);"
g;g_variant_get_int64;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gint64 g_variant_get_int64 (GVariant *value);"
g;g_variant_get_maybe;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_get_maybe (GVariant *value);"
g;g_variant_get_normal_form;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_get_normal_form (GVariant *value);"
g;g_variant_get_objv;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" const gchar ** g_variant_get_objv (GVariant *value, gsize *length);"
g;g_variant_get_size;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gsize g_variant_get_size (GVariant *value);"
g;g_variant_get_string;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" const gchar * g_variant_get_string (GVariant *value, gsize *length);"
g;g_variant_get_strv;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" const gchar ** g_variant_get_strv (GVariant *value, gsize *length);"
g;g_variant_get_type;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" const GVariantType * g_variant_get_type (GVariant *value);"
g;g_variant_get_type_string;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" const gchar * g_variant_get_type_string (GVariant *value);"
g;g_variant_get_uint16;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" guint16 g_variant_get_uint16 (GVariant *value);"
g;g_variant_get_uint32;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" guint32 g_variant_get_uint32 (GVariant *value);"
g;g_variant_get_uint64;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" guint64 g_variant_get_uint64 (GVariant *value);"
g;g_variant_get_va;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_get_va (GVariant *value, const gchar *format_string, const gchar **endptr, va_list *app);"
g;g_variant_get_variant;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_get_variant (GVariant *value);"
g;g_variant_hash;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" guint g_variant_hash (gconstpointer value);"
g;g_variant_is_container;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gboolean g_variant_is_container (GVariant *value);"
g;g_variant_is_floating;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gboolean g_variant_is_floating (GVariant *value);"
g;g_variant_is_normal_form;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gboolean g_variant_is_normal_form (GVariant *value);"
g;g_variant_is_object_path;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gboolean g_variant_is_object_path (const gchar *string);"
g;g_variant_is_of_type;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gboolean g_variant_is_of_type (GVariant *value, const GVariantType *type);"
g;g_variant_is_signature;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gboolean g_variant_is_signature (const gchar *string);"
g;g_variant_iter_copy;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariantIter * g_variant_iter_copy (GVariantIter *iter);"
g;g_variant_iter_free;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_iter_free (GVariantIter *iter);"
g;g_variant_iter_init;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gsize g_variant_iter_init (GVariantIter *iter, GVariant *value);"
g;g_variant_iter_n_children;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gsize g_variant_iter_n_children (GVariantIter *iter);"
g;g_variant_iter_new;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariantIter * g_variant_iter_new (GVariant *value);"
g;g_variant_iter_next_value;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_iter_next_value (GVariantIter *iter);"
g;g_variant_lookup_value;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_lookup_value (GVariant *dictionary, const gchar *key, const GVariantType *expected_type);"
g;g_variant_n_children;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gsize g_variant_n_children (GVariant *value);"
g;g_variant_new_array;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_array (const GVariantType *child_type, GVariant * const *children, gsize n_children);"
g;g_variant_new_boolean;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_boolean (gboolean value);"
g;g_variant_new_byte;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_byte (guchar value);"
g;g_variant_new_bytestring;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_bytestring (const gchar *string);"
g;g_variant_new_bytestring_array;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_bytestring_array (const gchar * const *strv, gssize length);"
g;g_variant_new_dict_entry;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_dict_entry (GVariant *key, GVariant *value);"
g;g_variant_new_double;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_double (gdouble value);"
g;g_variant_new_fixed_array;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_fixed_array (const GVariantType *element_type, gconstpointer elements, gsize n_elements, gsize element_size);"
g;g_variant_new_from_bytes;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_from_bytes (const GVariantType *type, GBytes *bytes, gboolean trusted);"
g;g_variant_new_from_data;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_from_data (const GVariantType *type, gconstpointer data, gsize size, gboolean trusted, GDestroyNotify notify, gpointer user_data);"
g;g_variant_new_handle;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_handle (gint32 value);"
g;g_variant_new_int16;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_int16 (gint16 value);"
g;g_variant_new_int32;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_int32 (gint32 value);"
g;g_variant_new_int64;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_int64 (gint64 value);"
g;g_variant_new_maybe;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_maybe (const GVariantType *child_type, GVariant *child);"
g;g_variant_new_object_path;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_object_path (const gchar *object_path);"
g;g_variant_new_objv;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_objv (const gchar * const *strv, gssize length);"
g;g_variant_new_parsed_va;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_parsed_va (const gchar *format, va_list *app);"
g;g_variant_new_printf;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_printf (const gchar *format_string, ...) G_GNUC_PRINTF (1, 2);"
g;g_variant_new_signature;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_signature (const gchar *signature);"
g;g_variant_new_string;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_string (const gchar *string);"
g;g_variant_new_strv;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_strv (const gchar * const *strv, gssize length);"
g;g_variant_new_take_string;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_take_string (gchar *string);"
g;g_variant_new_tuple;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_tuple (GVariant * const *children, gsize n_children);"
g;g_variant_new_uint16;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_uint16 (guint16 value);"
g;g_variant_new_uint32;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_uint32 (guint32 value);"
g;g_variant_new_uint64;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_uint64 (guint64 value);"
g;g_variant_new_va;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_va (const gchar *format_string, const gchar **endptr, va_list *app);"
g;g_variant_new_variant;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_new_variant (GVariant *value);"
g;g_variant_parse;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_parse (const GVariantType *type, const gchar *text, const gchar *limit, const gchar **endptr, GError **error);"
g;g_variant_parse_error_print_context;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gchar * g_variant_parse_error_print_context (GError *error, const gchar *source_str);"
g;g_variant_parse_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GQuark g_variant_parse_error_quark (void);"
g;g_variant_parser_get_error_quark;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GQuark g_variant_parser_get_error_quark (void);"
g;g_variant_print;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" gchar * g_variant_print (GVariant *value, gboolean type_annotate);"
g;g_variant_print_string;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GString * g_variant_print_string (GVariant *value, GString *string, gboolean type_annotate);"
g;g_variant_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_ref (GVariant *value);"
g;g_variant_ref_sink;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_ref_sink (GVariant *value);"
g;g_variant_store;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" void g_variant_store (GVariant *value, gpointer data);"
g;g_variant_take_ref;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;" GVariant * g_variant_take_ref (GVariant *value);"
g;g_variant_type_checked_;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" const GVariantType * g_variant_type_checked_ (const gchar *);"
g;g_variant_type_copy;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" GVariantType * g_variant_type_copy (const GVariantType *type);"
g;g_variant_type_dup_string;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gchar * g_variant_type_dup_string (const GVariantType *type);"
g;g_variant_type_element;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" const GVariantType * g_variant_type_element (const GVariantType *type);"
g;g_variant_type_equal;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gboolean g_variant_type_equal (gconstpointer type1, gconstpointer type2);"
g;g_variant_type_first;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" const GVariantType * g_variant_type_first (const GVariantType *type);"
g;g_variant_type_free;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" void g_variant_type_free (GVariantType *type);"
g;g_variant_type_get_gtype;glib-auto.f90;/usr/include/glib-2.0/gobject/glib-types.h;" GType g_variant_type_get_gtype (void) G_GNUC_CONST;"
g;g_variant_type_get_string_length;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gsize g_variant_type_get_string_length (const GVariantType *type);"
g;g_variant_type_hash;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" guint g_variant_type_hash (gconstpointer type);"
g;g_variant_type_is_array;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gboolean g_variant_type_is_array (const GVariantType *type);"
g;g_variant_type_is_basic;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gboolean g_variant_type_is_basic (const GVariantType *type);"
g;g_variant_type_is_container;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gboolean g_variant_type_is_container (const GVariantType *type);"
g;g_variant_type_is_definite;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gboolean g_variant_type_is_definite (const GVariantType *type);"
g;g_variant_type_is_dict_entry;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gboolean g_variant_type_is_dict_entry (const GVariantType *type);"
g;g_variant_type_is_maybe;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gboolean g_variant_type_is_maybe (const GVariantType *type);"
g;g_variant_type_is_subtype_of;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gboolean g_variant_type_is_subtype_of (const GVariantType *type, const GVariantType *supertype);"
g;g_variant_type_is_tuple;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gboolean g_variant_type_is_tuple (const GVariantType *type);"
g;g_variant_type_is_variant;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gboolean g_variant_type_is_variant (const GVariantType *type);"
g;g_variant_type_key;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" const GVariantType * g_variant_type_key (const GVariantType *type);"
g;g_variant_type_n_items;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gsize g_variant_type_n_items (const GVariantType *type);"
g;g_variant_type_new;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" GVariantType * g_variant_type_new (const gchar *type_string);"
g;g_variant_type_new_array;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" GVariantType * g_variant_type_new_array (const GVariantType *element);"
g;g_variant_type_new_dict_entry;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" GVariantType * g_variant_type_new_dict_entry (const GVariantType *key, const GVariantType *value);"
g;g_variant_type_new_maybe;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" GVariantType * g_variant_type_new_maybe (const GVariantType *element);"
g;g_variant_type_new_tuple;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" GVariantType * g_variant_type_new_tuple (const GVariantType * const *items, gint length);"
g;g_variant_type_next;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" const GVariantType * g_variant_type_next (const GVariantType *type);"
g;g_variant_type_peek_string;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" const gchar * g_variant_type_peek_string (const GVariantType *type);"
g;g_variant_type_string_is_valid;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;"  gboolean g_variant_type_string_is_valid (const gchar *type_string);"
g;g_variant_type_string_scan;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" gboolean g_variant_type_string_scan (const gchar *string, const gchar *limit, const gchar **endptr);"
g;g_variant_type_value;glib-auto.f90;/usr/include/glib-2.0/glib/gvarianttype.h;" const GVariantType * g_variant_type_value (const GVariantType *type);"
g;g_variant_unref;glib-auto.f90;/usr/include/glib-2.0/glib/gvariant.h;"  void g_variant_unref (GVariant *value);"
g;g_vasprintf;glib-auto.f90;/usr/include/glib-2.0/glib/gprintf.h;" gint g_vasprintf (gchar **string, gchar const *format, va_list args) G_GNUC_PRINTF(2, 0);"
g;g_vfprintf;glib-auto.f90;/usr/include/glib-2.0/glib/gprintf.h;" gint g_vfprintf (FILE *file, gchar const *format, va_list args) G_GNUC_PRINTF(2, 0);"
g;g_vfs_get_default;glib-auto.f90;/usr/include/glib-2.0/gio/gvfs.h;" GVfs * g_vfs_get_default (void);"
g;g_vfs_get_file_for_path;glib-auto.f90;/usr/include/glib-2.0/gio/gvfs.h;" GFile * g_vfs_get_file_for_path (GVfs *vfs, const char *path);"
g;g_vfs_get_file_for_uri;glib-auto.f90;/usr/include/glib-2.0/gio/gvfs.h;" GFile * g_vfs_get_file_for_uri (GVfs *vfs, const char *uri);"
g;g_vfs_get_local;glib-auto.f90;/usr/include/glib-2.0/gio/gvfs.h;" GVfs * g_vfs_get_local (void);"
g;g_vfs_get_supported_uri_schemes;glib-auto.f90;/usr/include/glib-2.0/gio/gvfs.h;" const gchar* const * g_vfs_get_supported_uri_schemes (GVfs *vfs);"
g;g_vfs_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gvfs.h;"  GType g_vfs_get_type (void) G_GNUC_CONST;"
g;g_vfs_is_active;glib-auto.f90;/usr/include/glib-2.0/gio/gvfs.h;" gboolean g_vfs_is_active (GVfs *vfs);"
g;g_vfs_parse_name;glib-auto.f90;/usr/include/glib-2.0/gio/gvfs.h;" GFile * g_vfs_parse_name (GVfs *vfs, const char *parse_name);"
g;g_volume_can_eject;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" gboolean g_volume_can_eject (GVolume *volume);"
g;g_volume_can_mount;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" gboolean g_volume_can_mount (GVolume *volume);"
g;g_volume_eject;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" void g_volume_eject (GVolume *volume, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_volume_eject_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" gboolean g_volume_eject_finish (GVolume *volume, GAsyncResult *result, GError **error);"
g;g_volume_eject_with_operation;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" void g_volume_eject_with_operation (GVolume *volume, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_volume_eject_with_operation_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" gboolean g_volume_eject_with_operation_finish (GVolume *volume, GAsyncResult *result, GError **error);"
g;g_volume_enumerate_identifiers;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" char ** g_volume_enumerate_identifiers (GVolume *volume);"
g;g_volume_get_activation_root;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" GFile * g_volume_get_activation_root (GVolume *volume);"
g;g_volume_get_drive;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" GDrive * g_volume_get_drive (GVolume *volume);"
g;g_volume_get_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" GIcon * g_volume_get_icon (GVolume *volume);"
g;g_volume_get_identifier;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" char * g_volume_get_identifier (GVolume *volume, const char *kind);"
g;g_volume_get_mount;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" GMount * g_volume_get_mount (GVolume *volume);"
g;g_volume_get_name;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" char * g_volume_get_name (GVolume *volume);"
g;g_volume_get_sort_key;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" const gchar *g_volume_get_sort_key (GVolume *volume);"
g;g_volume_get_symbolic_icon;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" GIcon * g_volume_get_symbolic_icon (GVolume *volume);"
g;g_volume_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;"  GType g_volume_get_type (void) G_GNUC_CONST;"
g;g_volume_get_uuid;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" char * g_volume_get_uuid (GVolume *volume);"
g;g_volume_monitor_adopt_orphan_mount;glib-auto.f90;/usr/include/glib-2.0/gio/gvolumemonitor.h;" GVolume * g_volume_monitor_adopt_orphan_mount (GMount *mount);"
g;g_volume_monitor_get;glib-auto.f90;/usr/include/glib-2.0/gio/gvolumemonitor.h;" GVolumeMonitor *g_volume_monitor_get (void);"
g;g_volume_monitor_get_connected_drives;glib-auto.f90;/usr/include/glib-2.0/gio/gvolumemonitor.h;" GList * g_volume_monitor_get_connected_drives (GVolumeMonitor *volume_monitor);"
g;g_volume_monitor_get_mount_for_uuid;glib-auto.f90;/usr/include/glib-2.0/gio/gvolumemonitor.h;" GMount * g_volume_monitor_get_mount_for_uuid (GVolumeMonitor *volume_monitor, const char *uuid);"
g;g_volume_monitor_get_mounts;glib-auto.f90;/usr/include/glib-2.0/gio/gvolumemonitor.h;" GList * g_volume_monitor_get_mounts (GVolumeMonitor *volume_monitor);"
g;g_volume_monitor_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gvolumemonitor.h;"  GType g_volume_monitor_get_type (void) G_GNUC_CONST;"
g;g_volume_monitor_get_volume_for_uuid;glib-auto.f90;/usr/include/glib-2.0/gio/gvolumemonitor.h;" GVolume * g_volume_monitor_get_volume_for_uuid (GVolumeMonitor *volume_monitor, const char *uuid);"
g;g_volume_monitor_get_volumes;glib-auto.f90;/usr/include/glib-2.0/gio/gvolumemonitor.h;" GList * g_volume_monitor_get_volumes (GVolumeMonitor *volume_monitor);"
g;g_volume_mount;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" void g_volume_mount (GVolume *volume, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
g;g_volume_mount_finish;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" gboolean g_volume_mount_finish (GVolume *volume, GAsyncResult *result, GError **error);"
g;g_volume_should_automount;glib-auto.f90;/usr/include/glib-2.0/gio/gvolume.h;" gboolean g_volume_should_automount (GVolume *volume);"
g;g_vprintf;glib-auto.f90;/usr/include/glib-2.0/glib/gprintf.h;" gint g_vprintf (gchar const *format, va_list args) G_GNUC_PRINTF(1, 0);"
g;g_vsnprintf;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" gint g_vsnprintf (gchar *string, gulong n, gchar const *format, va_list args) G_GNUC_PRINTF(3, 0);"
g;g_vsprintf;glib-auto.f90;/usr/include/glib-2.0/glib/gprintf.h;" gint g_vsprintf (gchar *string, gchar const *format, va_list args) G_GNUC_PRINTF(2, 0);"
g;g_warn_message;glib-auto.f90;/usr/include/glib-2.0/glib/gmessages.h;" void g_warn_message (const char *domain, const char *file, int line, const char *func, const char *warnexpr) G_ANALYZER_NORETURN;"
g;g_weak_ref_clear;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_weak_ref_clear (GWeakRef *weak_ref);"
g;g_weak_ref_get;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" gpointer g_weak_ref_get (GWeakRef *weak_ref);"
g;g_weak_ref_init;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_weak_ref_init (GWeakRef *weak_ref, gpointer object);"
g;g_weak_ref_set;glib-auto.f90;/usr/include/glib-2.0/gobject/gobject.h;" void g_weak_ref_set (GWeakRef *weak_ref, gpointer object);"
g;g_win32_error_message;glib-auto.f90;/usr/include/glib-2.0/glib/gwin32.h;" gchar* g_win32_error_message (gint error);"
g;g_win32_ftruncate;glib-auto.f90;/usr/include/glib-2.0/glib/gwin32.h;"  gint g_win32_ftruncate (gint f, guint size);"
g;g_win32_get_command_line;glib-auto.f90;/usr/include/glib-2.0/glib/gwin32.h;" gchar ** g_win32_get_command_line (void);"
g;g_win32_get_package_installation_directory_of_module;glib-auto.f90;/usr/include/glib-2.0/glib/gwin32.h;" gchar* g_win32_get_package_installation_directory_of_module (gpointer hmodule);"
g;g_win32_get_package_installation_directory_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gwin32.h;" gchar *g_win32_get_package_installation_directory_utf8 (const gchar *package, const gchar *dll_name);"
g;g_win32_get_package_installation_subdirectory_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gwin32.h;" gchar *g_win32_get_package_installation_subdirectory_utf8 (const gchar *package, const gchar *dll_name, const gchar *subdir);"
g;g_win32_get_system_data_dirs_for_module;glib-auto.f90;/usr/include/glib-2.0/glib/gutils.h;" const gchar * const * g_win32_get_system_data_dirs_for_module (void (*address_of_function)(void));"
g;g_win32_get_windows_version;glib-auto.f90;/usr/include/glib-2.0/glib/gwin32.h;" guint g_win32_get_windows_version (void);"
g;g_win32_getlocale;glib-auto.f90;/usr/include/glib-2.0/glib/gwin32.h;" gchar* g_win32_getlocale (void);"
g;g_win32_locale_filename_from_utf8;glib-auto.f90;/usr/include/glib-2.0/glib/gwin32.h;" gchar* g_win32_locale_filename_from_utf8 (const gchar *utf8filename);"
g;g_zlib_compressor_get_file_info;glib-auto.f90;/usr/include/glib-2.0/gio/gzlibcompressor.h;" GFileInfo *g_zlib_compressor_get_file_info (GZlibCompressor *compressor);"
g;g_zlib_compressor_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gzlibcompressor.h;"  GType g_zlib_compressor_get_type (void) G_GNUC_CONST;"
g;g_zlib_compressor_new;glib-auto.f90;/usr/include/glib-2.0/gio/gzlibcompressor.h;" GZlibCompressor *g_zlib_compressor_new (GZlibCompressorFormat format, int level);"
g;g_zlib_compressor_set_file_info;glib-auto.f90;/usr/include/glib-2.0/gio/gzlibcompressor.h;" void g_zlib_compressor_set_file_info (GZlibCompressor *compressor, GFileInfo *file_info);"
g;g_zlib_decompressor_get_file_info;glib-auto.f90;/usr/include/glib-2.0/gio/gzlibdecompressor.h;" GFileInfo *g_zlib_decompressor_get_file_info (GZlibDecompressor *decompressor);"
g;g_zlib_decompressor_get_type;glib-auto.f90;/usr/include/glib-2.0/gio/gzlibdecompressor.h;"  GType g_zlib_decompressor_get_type (void) G_GNUC_CONST;"
g;g_zlib_decompressor_new;glib-auto.f90;/usr/include/glib-2.0/gio/gzlibdecompressor.h;" GZlibDecompressor *g_zlib_decompressor_new (GZlibCompressorFormat format);"
g;glib_check_version;glib-auto.f90;/usr/include/glib-2.0/glib/gversion.h;" const gchar * glib_check_version (guint required_major, guint required_minor, guint required_micro);"
g;guint64;glib-auto.f90;/usr/include/glib-2.0/glib/deprecated/gthread.h;" guint64 (*g_thread_gettime) (void);"
gdk;gdk_add_client_message_filter;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;" void gdk_add_client_message_filter (GdkAtom message_type, GdkFilterFunc func, gpointer data);"
gdk;gdk_add_option_entries_libgtk_only;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"void gdk_add_option_entries_libgtk_only (GOptionGroup *group);"
gdk;gdk_app_launch_context_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h;"  GType gdk_app_launch_context_get_type (void);"
gdk;gdk_app_launch_context_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h;" GdkAppLaunchContext *gdk_app_launch_context_new (void);"
gdk;gdk_app_launch_context_set_desktop;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h;"void gdk_app_launch_context_set_desktop (GdkAppLaunchContext *context, gint desktop);"
gdk;gdk_app_launch_context_set_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h;"void gdk_app_launch_context_set_display (GdkAppLaunchContext *context, GdkDisplay *display);"
gdk;gdk_app_launch_context_set_icon;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h;"void gdk_app_launch_context_set_icon (GdkAppLaunchContext *context, GIcon *icon);"
gdk;gdk_app_launch_context_set_icon_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h;"void gdk_app_launch_context_set_icon_name (GdkAppLaunchContext *context, const char *icon_name);"
gdk;gdk_app_launch_context_set_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h;"void gdk_app_launch_context_set_screen (GdkAppLaunchContext *context, GdkScreen *screen);"
gdk;gdk_app_launch_context_set_timestamp;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h;"void gdk_app_launch_context_set_timestamp (GdkAppLaunchContext *context, guint32 timestamp);"
gdk;gdk_atom_intern;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;"  GdkAtom gdk_atom_intern (const gchar *atom_name, gboolean only_if_exists);"
gdk;gdk_atom_intern_static_string;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;"GdkAtom gdk_atom_intern_static_string (const gchar *atom_name);"
gdk;gdk_atom_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;"gchar* gdk_atom_name (GdkAtom atom);"
gdk;gdk_axis_use_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_axis_use_get_type (void) G_GNUC_CONST;"
gdk;gdk_beep;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" void gdk_beep (void);"
gdk;gdk_bitmap_create_from_data;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;" GdkBitmap* gdk_bitmap_create_from_data (GdkDrawable *drawable, const gchar *data, gint width, gint height);"
gdk;gdk_byte_order_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_byte_order_get_type (void) G_GNUC_CONST;"
gdk;gdk_cairo_create;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcairo.h;"  cairo_t *gdk_cairo_create (GdkDrawable *drawable);"
gdk;gdk_cairo_rectangle;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcairo.h;" void gdk_cairo_rectangle (cairo_t *cr, const GdkRectangle *rectangle);"
gdk;gdk_cairo_region;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcairo.h;"void gdk_cairo_region (cairo_t *cr, const GdkRegion *region);"
gdk;gdk_cairo_reset_clip;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcairo.h;"void gdk_cairo_reset_clip (cairo_t *cr, GdkDrawable *drawable);"
gdk;gdk_cairo_set_source_color;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcairo.h;" void gdk_cairo_set_source_color (cairo_t *cr, const GdkColor *color);"
gdk;gdk_cairo_set_source_pixbuf;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcairo.h;"void gdk_cairo_set_source_pixbuf (cairo_t *cr, const GdkPixbuf *pixbuf, double pixbuf_x, double pixbuf_y);"
gdk;gdk_cairo_set_source_pixmap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcairo.h;"void gdk_cairo_set_source_pixmap (cairo_t *cr, GdkPixmap *pixmap, double pixmap_x, double pixmap_y);"
gdk;gdk_cairo_set_source_window;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcairo.h;"void gdk_cairo_set_source_window (cairo_t *cr, GdkWindow *window, double x, double y);"
gdk;gdk_cap_style_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_cap_style_get_type (void) G_GNUC_CONST;"
gdk;gdk_char_height;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"gint gdk_char_height (GdkFont *font, gchar character);"
gdk;gdk_char_measure;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"gint gdk_char_measure (GdkFont *font, gchar character);"
gdk;gdk_char_width;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"gint gdk_char_width (GdkFont *font, gchar character);"
gdk;gdk_char_width_wc;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"gint gdk_char_width_wc (GdkFont *font, GdkWChar character);"
gdk;gdk_color_alloc;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"gint gdk_color_alloc (GdkColormap *colormap, GdkColor *color);"
gdk;gdk_color_black;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"gint gdk_color_black (GdkColormap *colormap, GdkColor *color);"
gdk;gdk_color_change;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"gint gdk_color_change (GdkColormap *colormap, GdkColor *color);"
gdk;gdk_color_copy;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;" GdkColor *gdk_color_copy (const GdkColor *color);"
gdk;gdk_color_equal;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"gboolean gdk_color_equal (const GdkColor *colora, const GdkColor *colorb);"
gdk;gdk_color_free;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"void gdk_color_free (GdkColor *color);"
gdk;gdk_color_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;" GType gdk_color_get_type (void) G_GNUC_CONST;"
gdk;gdk_color_hash;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"guint gdk_color_hash (const GdkColor *colora);"
gdk;gdk_color_parse;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"gboolean gdk_color_parse (const gchar *spec, GdkColor *color);"
gdk;gdk_color_to_string;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"gchar * gdk_color_to_string (const GdkColor *color);"
gdk;gdk_color_white;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"gint gdk_color_white (GdkColormap *colormap, GdkColor *color);"
gdk;gdk_colormap_alloc_color;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"gboolean gdk_colormap_alloc_color (GdkColormap *colormap, GdkColor *color, gboolean writeable, gboolean best_match);"
gdk;gdk_colormap_alloc_colors;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;" gint gdk_colormap_alloc_colors (GdkColormap *colormap, GdkColor *colors, gint n_colors, gboolean writeable, gboolean best_match, gboolean *success);"
gdk;gdk_colormap_change;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;" void gdk_colormap_change (GdkColormap *colormap, gint ncolors);"
gdk;gdk_colormap_free_colors;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"void gdk_colormap_free_colors (GdkColormap *colormap, const GdkColor *colors, gint n_colors);"
gdk;gdk_colormap_get_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;" GdkScreen *gdk_colormap_get_screen (GdkColormap *cmap);"
gdk;gdk_colormap_get_system;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;" GdkColormap* gdk_colormap_get_system (void);"
gdk;gdk_colormap_get_system_size;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;" gint gdk_colormap_get_system_size (void);"
gdk;gdk_colormap_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"  GType gdk_colormap_get_type (void) G_GNUC_CONST;"
gdk;gdk_colormap_get_visual;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;" GdkVisual *gdk_colormap_get_visual (GdkColormap *colormap);"
gdk;gdk_colormap_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;" GdkColormap* gdk_colormap_new (GdkVisual *visual, gboolean allocate);"
gdk;gdk_colormap_query_color;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"void gdk_colormap_query_color (GdkColormap *colormap, gulong pixel, GdkColor *result);"
gdk;gdk_colormap_ref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;" GdkColormap* gdk_colormap_ref (GdkColormap *cmap);"
gdk;gdk_colormap_unref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"void gdk_colormap_unref (GdkColormap *cmap);"
gdk;gdk_colors_alloc;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;" gint gdk_colors_alloc (GdkColormap *colormap, gboolean contiguous, gulong *planes, gint nplanes, gulong *pixels, gint npixels);"
gdk;gdk_colors_free;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;"void gdk_colors_free (GdkColormap *colormap, gulong *pixels, gint npixels, gulong planes);"
gdk;gdk_colors_store;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcolor.h;" void gdk_colors_store (GdkColormap *colormap, GdkColor *colors, gint ncolors);"
gdk;gdk_crossing_mode_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_crossing_mode_get_type (void) G_GNUC_CONST;"
gdk;gdk_cursor_get_cursor_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcursor.h;"GdkCursorType gdk_cursor_get_cursor_type (GdkCursor *cursor);"
gdk;gdk_cursor_get_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcursor.h;"GdkDisplay* gdk_cursor_get_display (GdkCursor *cursor);"
gdk;gdk_cursor_get_image;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcursor.h;"GdkPixbuf* gdk_cursor_get_image (GdkCursor *cursor);"
gdk;gdk_cursor_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcursor.h;"  GType gdk_cursor_get_type (void) G_GNUC_CONST;"
gdk;gdk_cursor_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcursor.h;" GdkCursor* gdk_cursor_new (GdkCursorType cursor_type);"
gdk;gdk_cursor_new_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcursor.h;" GdkCursor* gdk_cursor_new_for_display (GdkDisplay *display, GdkCursorType cursor_type);"
gdk;gdk_cursor_new_from_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcursor.h;"GdkCursor* gdk_cursor_new_from_name (GdkDisplay *display, const gchar *name);"
gdk;gdk_cursor_new_from_pixbuf;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcursor.h;"GdkCursor* gdk_cursor_new_from_pixbuf (GdkDisplay *display, GdkPixbuf *pixbuf, gint x, gint y);"
gdk;gdk_cursor_new_from_pixmap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcursor.h;" GdkCursor* gdk_cursor_new_from_pixmap (GdkPixmap *source, GdkPixmap *mask, const GdkColor *fg, const GdkColor *bg, gint x, gint y);"
gdk;gdk_cursor_ref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcursor.h;"GdkCursor* gdk_cursor_ref (GdkCursor *cursor);"
gdk;gdk_cursor_type_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;"  GType gdk_cursor_type_get_type (void) G_GNUC_CONST;"
gdk;gdk_cursor_unref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkcursor.h;"void gdk_cursor_unref (GdkCursor *cursor);"
gdk;gdk_device_free_history;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;" void gdk_device_free_history (GdkTimeCoord **events, gint n_events);"
gdk;gdk_device_get_axis;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;"gboolean gdk_device_get_axis (GdkDevice *device, gdouble *axes, GdkAxisUse use, gdouble *value);"
gdk;gdk_device_get_axis_use;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;"GdkAxisUse gdk_device_get_axis_use (GdkDevice *device, guint index);"
gdk;gdk_device_get_core_pointer;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;" GdkDevice *gdk_device_get_core_pointer (void);"
gdk;gdk_device_get_has_cursor;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;"gboolean gdk_device_get_has_cursor (GdkDevice *device);"
gdk;gdk_device_get_history;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;" gboolean gdk_device_get_history (GdkDevice *device, GdkWindow *window, guint32 start, guint32 stop, GdkTimeCoord ***events, gint *n_events);"
gdk;gdk_device_get_key;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;" void gdk_device_get_key (GdkDevice *device, guint index, guint *keyval, GdkModifierType *modifiers);"
gdk;gdk_device_get_mode;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;"GdkInputMode gdk_device_get_mode (GdkDevice *device);"
gdk;gdk_device_get_n_axes;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;"gint gdk_device_get_n_axes (GdkDevice *device);"
gdk;gdk_device_get_n_keys;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;"gint gdk_device_get_n_keys (GdkDevice *device);"
gdk;gdk_device_get_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;" const gchar * gdk_device_get_name (GdkDevice *device);"
gdk;gdk_device_get_source;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;"GdkInputSource gdk_device_get_source (GdkDevice *device);"
gdk;gdk_device_get_state;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;" void gdk_device_get_state (GdkDevice *device, GdkWindow *window, gdouble *axes, GdkModifierType *mask);"
gdk;gdk_device_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;"  GType gdk_device_get_type (void) G_GNUC_CONST;"
gdk;gdk_device_set_axis_use;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;" void gdk_device_set_axis_use (GdkDevice *device, guint index_, GdkAxisUse use);"
gdk;gdk_device_set_key;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;" void gdk_device_set_key (GdkDevice *device, guint index_, guint keyval, GdkModifierType modifiers);"
gdk;gdk_device_set_mode;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;" gboolean gdk_device_set_mode (GdkDevice *device, GdkInputMode mode);"
gdk;gdk_device_set_source;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;" void gdk_device_set_source (GdkDevice *device, GdkInputSource source);"
gdk;gdk_devices_list;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;"  GList * gdk_devices_list (void);"
gdk;gdk_display_add_client_message_filter;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" void gdk_display_add_client_message_filter (GdkDisplay *display, GdkAtom message_type, GdkFilterFunc func, gpointer data);"
gdk;gdk_display_beep;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"void gdk_display_beep (GdkDisplay *display);"
gdk;gdk_display_close;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" void gdk_display_close (GdkDisplay *display);"
gdk;gdk_display_flush;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"void gdk_display_flush (GdkDisplay *display);"
gdk;gdk_display_get_core_pointer;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" GdkDevice *gdk_display_get_core_pointer (GdkDisplay *display);"
gdk;gdk_display_get_default;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" GdkDisplay *gdk_display_get_default (void);"
gdk;gdk_display_get_default_cursor_size;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"guint gdk_display_get_default_cursor_size (GdkDisplay *display);"
gdk;gdk_display_get_default_group;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" GdkWindow *gdk_display_get_default_group (GdkDisplay *display);"
gdk;gdk_display_get_default_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"GdkScreen * gdk_display_get_default_screen (GdkDisplay *display);"
gdk;gdk_display_get_event;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" GdkEvent* gdk_display_get_event (GdkDisplay *display);"
gdk;gdk_display_get_maximal_cursor_size;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"void gdk_display_get_maximal_cursor_size (GdkDisplay *display, guint *width, guint *height);"
gdk;gdk_display_get_n_screens;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" gint gdk_display_get_n_screens (GdkDisplay *display);"
gdk;gdk_display_get_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" const gchar * gdk_display_get_name (GdkDisplay *display);"
gdk;gdk_display_get_pointer;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" void gdk_display_get_pointer (GdkDisplay *display, GdkScreen **screen, gint *x, gint *y, GdkModifierType *mask);"
gdk;gdk_display_get_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"GdkScreen * gdk_display_get_screen (GdkDisplay *display, gint screen_num);"
gdk;gdk_display_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" GType gdk_display_get_type (void) G_GNUC_CONST;"
gdk;gdk_display_get_window_at_pointer;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"GdkWindow * gdk_display_get_window_at_pointer (GdkDisplay *display, gint *win_x, gint *win_y);"
gdk;gdk_display_is_closed;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"gboolean gdk_display_is_closed (GdkDisplay *display);"
gdk;gdk_display_keyboard_ungrab;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"void gdk_display_keyboard_ungrab (GdkDisplay *display, guint32 time_);"
gdk;gdk_display_list_devices;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" GList * gdk_display_list_devices (GdkDisplay *display);"
gdk;gdk_display_manager_get;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h;" GdkDisplayManager *gdk_display_manager_get (void);"
gdk;gdk_display_manager_get_default_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h;"GdkDisplay * gdk_display_manager_get_default_display (GdkDisplayManager *display_manager);"
gdk;gdk_display_manager_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h;"  GType gdk_display_manager_get_type (void) G_GNUC_CONST;"
gdk;gdk_display_manager_list_displays;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h;"GSList * gdk_display_manager_list_displays (GdkDisplayManager *display_manager);"
gdk;gdk_display_manager_set_default_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h;"void gdk_display_manager_set_default_display (GdkDisplayManager *display_manager, GdkDisplay *display);"
gdk;gdk_display_open;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"GdkDisplay *gdk_display_open (const gchar *display_name);"
gdk;gdk_display_open_default_libgtk_only;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" GdkDisplay *gdk_display_open_default_libgtk_only (void);"
gdk;gdk_display_peek_event;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"GdkEvent* gdk_display_peek_event (GdkDisplay *display);"
gdk;gdk_display_pointer_is_grabbed;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"gboolean gdk_display_pointer_is_grabbed (GdkDisplay *display);"
gdk;gdk_display_pointer_ungrab;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"void gdk_display_pointer_ungrab (GdkDisplay *display, guint32 time_);"
gdk;gdk_display_put_event;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"void gdk_display_put_event (GdkDisplay *display, const GdkEvent *event);"
gdk;gdk_display_request_selection_notification;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"gboolean gdk_display_request_selection_notification (GdkDisplay *display, GdkAtom selection);"
gdk;gdk_display_set_double_click_distance;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"void gdk_display_set_double_click_distance (GdkDisplay *display, guint distance);"
gdk;gdk_display_set_double_click_time;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" void gdk_display_set_double_click_time (GdkDisplay *display, guint msec);"
gdk;gdk_display_set_pointer_hooks;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" GdkDisplayPointerHooks *gdk_display_set_pointer_hooks (GdkDisplay *display, const GdkDisplayPointerHooks *new_hooks);"
gdk;gdk_display_store_clipboard;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"void gdk_display_store_clipboard (GdkDisplay *display, GdkWindow *clipboard_window, guint32 time_, const GdkAtom *targets, gint n_targets);"
gdk;gdk_display_supports_clipboard_persistence;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" gboolean gdk_display_supports_clipboard_persistence (GdkDisplay *display);"
gdk;gdk_display_supports_composite;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"gboolean gdk_display_supports_composite (GdkDisplay *display);"
gdk;gdk_display_supports_cursor_alpha;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" gboolean gdk_display_supports_cursor_alpha (GdkDisplay *display);"
gdk;gdk_display_supports_cursor_color;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"gboolean gdk_display_supports_cursor_color (GdkDisplay *display);"
gdk;gdk_display_supports_input_shapes;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"gboolean gdk_display_supports_input_shapes (GdkDisplay *display);"
gdk;gdk_display_supports_selection_notification;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" gboolean gdk_display_supports_selection_notification (GdkDisplay *display);"
gdk;gdk_display_supports_shapes;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;" gboolean gdk_display_supports_shapes (GdkDisplay *display);"
gdk;gdk_display_sync;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"void gdk_display_sync (GdkDisplay *display);"
gdk;gdk_display_warp_pointer;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdisplay.h;"void gdk_display_warp_pointer (GdkDisplay *display, GdkScreen *screen, gint x, gint y);"
gdk;gdk_drag_abort;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"void gdk_drag_abort (GdkDragContext *context, guint32 time_);"
gdk;gdk_drag_action_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_drag_action_get_type (void) G_GNUC_CONST;"
gdk;gdk_drag_begin;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;" GdkDragContext * gdk_drag_begin (GdkWindow *window, GList *targets);"
gdk;gdk_drag_context_get_actions;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"GdkDragAction gdk_drag_context_get_actions (GdkDragContext *context);"
gdk;gdk_drag_context_get_dest_window;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"GdkWindow *gdk_drag_context_get_dest_window (GdkDragContext *context);"
gdk;gdk_drag_context_get_protocol;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"GdkDragProtocol gdk_drag_context_get_protocol (GdkDragContext *context);"
gdk;gdk_drag_context_get_selected_action;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"GdkDragAction gdk_drag_context_get_selected_action (GdkDragContext *context);"
gdk;gdk_drag_context_get_source_window;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;" GdkWindow *gdk_drag_context_get_source_window (GdkDragContext *context);"
gdk;gdk_drag_context_get_suggested_action;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"GdkDragAction gdk_drag_context_get_suggested_action (GdkDragContext *context);"
gdk;gdk_drag_context_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"  GType gdk_drag_context_get_type (void) G_GNUC_CONST;"
gdk;gdk_drag_context_list_targets;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;" GList *gdk_drag_context_list_targets (GdkDragContext *context);"
gdk;gdk_drag_context_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;" GdkDragContext * gdk_drag_context_new (void);"
gdk;gdk_drag_context_ref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;" void gdk_drag_context_ref (GdkDragContext *context);"
gdk;gdk_drag_context_unref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"void gdk_drag_context_unref (GdkDragContext *context);"
gdk;gdk_drag_drop;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"void gdk_drag_drop (GdkDragContext *context, guint32 time_);"
gdk;gdk_drag_drop_succeeded;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"gboolean gdk_drag_drop_succeeded (GdkDragContext *context);"
gdk;gdk_drag_find_window;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;" void gdk_drag_find_window (GdkDragContext *context, GdkWindow *drag_window, gint x_root, gint y_root, GdkWindow **dest_window, GdkDragProtocol *protocol);"
gdk;gdk_drag_find_window_for_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;" void gdk_drag_find_window_for_screen (GdkDragContext *context, GdkWindow *drag_window, GdkScreen *screen, gint x_root, gint y_root, GdkWindow **dest_window, GdkDragProtocol *protocol);"
gdk;gdk_drag_get_protocol;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;" GdkNativeWindow gdk_drag_get_protocol (GdkNativeWindow xid, GdkDragProtocol *protocol);"
gdk;gdk_drag_get_protocol_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;" GdkNativeWindow gdk_drag_get_protocol_for_display (GdkDisplay *display, GdkNativeWindow xid, GdkDragProtocol *protocol);"
gdk;gdk_drag_get_selection;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"GdkAtom gdk_drag_get_selection (GdkDragContext *context);"
gdk;gdk_drag_motion;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;" gboolean gdk_drag_motion (GdkDragContext *context, GdkWindow *dest_window, GdkDragProtocol protocol, gint x_root, gint y_root, GdkDragAction suggested_action, GdkDragAction possible_actions, guint32 time_);"
gdk;gdk_drag_protocol_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_drag_protocol_get_type (void) G_GNUC_CONST;"
gdk;gdk_drag_status;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;" void gdk_drag_status (GdkDragContext *context, GdkDragAction action, guint32 time_);"
gdk;gdk_draw_arc;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_arc (GdkDrawable *drawable, GdkGC *gc, gboolean filled, gint x, gint y, gint width, gint height, gint angle1, gint angle2);"
gdk;gdk_draw_drawable;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_drawable (GdkDrawable *drawable, GdkGC *gc, GdkDrawable *src, gint xsrc, gint ysrc, gint xdest, gint ydest, gint width, gint height);"
gdk;gdk_draw_glyphs;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;" void gdk_draw_glyphs (GdkDrawable *drawable, GdkGC *gc, PangoFont *font, gint x, gint y, PangoGlyphString *glyphs);"
gdk;gdk_draw_glyphs_transformed;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;" void gdk_draw_glyphs_transformed (GdkDrawable *drawable, GdkGC *gc, const PangoMatrix *matrix, PangoFont *font, gint x, gint y, PangoGlyphString *glyphs);"
gdk;gdk_draw_gray_image;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"void gdk_draw_gray_image (GdkDrawable *drawable, GdkGC *gc, gint x, gint y, gint width, gint height, GdkRgbDither dith, const guchar *buf, gint rowstride);"
gdk;gdk_draw_image;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_image (GdkDrawable *drawable, GdkGC *gc, GdkImage *image, gint xsrc, gint ysrc, gint xdest, gint ydest, gint width, gint height);"
gdk;gdk_draw_indexed_image;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"void gdk_draw_indexed_image (GdkDrawable *drawable, GdkGC *gc, gint x, gint y, gint width, gint height, GdkRgbDither dith, const guchar *buf, gint rowstride, GdkRgbCmap *cmap);"
gdk;gdk_draw_layout;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_layout (GdkDrawable *drawable, GdkGC *gc, gint x, gint y, PangoLayout *layout);"
gdk;gdk_draw_layout_line;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_layout_line (GdkDrawable *drawable, GdkGC *gc, gint x, gint y, PangoLayoutLine *line);"
gdk;gdk_draw_layout_line_with_colors;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;" void gdk_draw_layout_line_with_colors (GdkDrawable *drawable, GdkGC *gc, gint x, gint y, PangoLayoutLine *line, const GdkColor *foreground, const GdkColor *background);"
gdk;gdk_draw_layout_with_colors;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_layout_with_colors (GdkDrawable *drawable, GdkGC *gc, gint x, gint y, PangoLayout *layout, const GdkColor *foreground, const GdkColor *background);"
gdk;gdk_draw_line;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_line (GdkDrawable *drawable, GdkGC *gc, gint x1_, gint y1_, gint x2_, gint y2_);"
gdk;gdk_draw_lines;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_lines (GdkDrawable *drawable, GdkGC *gc, const GdkPoint *points, gint n_points);"
gdk;gdk_draw_pixbuf;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_pixbuf (GdkDrawable *drawable, GdkGC *gc, const GdkPixbuf *pixbuf, gint src_x, gint src_y, gint dest_x, gint dest_y, gint width, gint height, GdkRgbDither dither, gint x_dither, gint y_dither);"
gdk;gdk_draw_point;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;" void gdk_draw_point (GdkDrawable *drawable, GdkGC *gc, gint x, gint y);"
gdk;gdk_draw_points;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_points (GdkDrawable *drawable, GdkGC *gc, const GdkPoint *points, gint n_points);"
gdk;gdk_draw_polygon;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_polygon (GdkDrawable *drawable, GdkGC *gc, gboolean filled, const GdkPoint *points, gint n_points);"
gdk;gdk_draw_rectangle;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_rectangle (GdkDrawable *drawable, GdkGC *gc, gboolean filled, gint x, gint y, gint width, gint height);"
gdk;gdk_draw_rgb_32_image;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"void gdk_draw_rgb_32_image (GdkDrawable *drawable, GdkGC *gc, gint x, gint y, gint width, gint height, GdkRgbDither dith, const guchar *buf, gint rowstride);"
gdk;gdk_draw_rgb_32_image_dithalign;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"void gdk_draw_rgb_32_image_dithalign (GdkDrawable *drawable, GdkGC *gc, gint x, gint y, gint width, gint height, GdkRgbDither dith, const guchar *buf, gint rowstride, gint xdith, gint ydith);"
gdk;gdk_draw_rgb_image;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;" void gdk_draw_rgb_image (GdkDrawable *drawable, GdkGC *gc, gint x, gint y, gint width, gint height, GdkRgbDither dith, const guchar *rgb_buf, gint rowstride);"
gdk;gdk_draw_rgb_image_dithalign;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"void gdk_draw_rgb_image_dithalign (GdkDrawable *drawable, GdkGC *gc, gint x, gint y, gint width, gint height, GdkRgbDither dith, const guchar *rgb_buf, gint rowstride, gint xdith, gint ydith);"
gdk;gdk_draw_segments;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_segments (GdkDrawable *drawable, GdkGC *gc, const GdkSegment *segs, gint n_segs);"
gdk;gdk_draw_string;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_string (GdkDrawable *drawable, GdkFont *font, GdkGC *gc, gint x, gint y, const gchar *string);"
gdk;gdk_draw_text;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_text (GdkDrawable *drawable, GdkFont *font, GdkGC *gc, gint x, gint y, const gchar *text, gint text_length);"
gdk;gdk_draw_text_wc;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_text_wc (GdkDrawable *drawable, GdkFont *font, GdkGC *gc, gint x, gint y, const GdkWChar *text, gint text_length);"
gdk;gdk_draw_trapezoids;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_draw_trapezoids (GdkDrawable *drawable, GdkGC *gc, const GdkTrapezoid *trapezoids, gint n_trapezoids);"
gdk;gdk_drawable_copy_to_image;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"GdkImage *gdk_drawable_copy_to_image (GdkDrawable *drawable, GdkImage *image, gint src_x, gint src_y, gint dest_x, gint dest_y, gint width, gint height);"
gdk;gdk_drawable_get_clip_region;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;" GdkRegion *gdk_drawable_get_clip_region (GdkDrawable *drawable);"
gdk;gdk_drawable_get_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"GdkColormap* gdk_drawable_get_colormap (GdkDrawable *drawable);"
gdk;gdk_drawable_get_data;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"gpointer gdk_drawable_get_data (GdkDrawable *drawable, const gchar *key);"
gdk;gdk_drawable_get_depth;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"gint gdk_drawable_get_depth (GdkDrawable *drawable);"
gdk;gdk_drawable_get_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"GdkDisplay* gdk_drawable_get_display (GdkDrawable *drawable);"
gdk;gdk_drawable_get_image;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;" GdkImage* gdk_drawable_get_image (GdkDrawable *drawable, gint x, gint y, gint width, gint height);"
gdk;gdk_drawable_get_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"GdkScreen* gdk_drawable_get_screen (GdkDrawable *drawable);"
gdk;gdk_drawable_get_size;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;" void gdk_drawable_get_size (GdkDrawable *drawable, gint *width, gint *height);"
gdk;gdk_drawable_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"    GType gdk_drawable_get_type (void) G_GNUC_CONST;"
gdk;gdk_drawable_get_visible_region;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"GdkRegion *gdk_drawable_get_visible_region (GdkDrawable *drawable);"
gdk;gdk_drawable_get_visual;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"GdkVisual* gdk_drawable_get_visual (GdkDrawable *drawable);"
gdk;gdk_drawable_ref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;" GdkDrawable* gdk_drawable_ref (GdkDrawable *drawable);"
gdk;gdk_drawable_set_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;" void gdk_drawable_set_colormap (GdkDrawable *drawable, GdkColormap *colormap);"
gdk;gdk_drawable_set_data;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;" void gdk_drawable_set_data (GdkDrawable *drawable, const gchar *key, gpointer data, GDestroyNotify destroy_func);"
gdk;gdk_drawable_unref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdrawable.h;"void gdk_drawable_unref (GdkDrawable *drawable);"
gdk;gdk_drop_finish;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"void gdk_drop_finish (GdkDragContext *context, gboolean success, guint32 time_);"
gdk;gdk_drop_reply;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkdnd.h;"void gdk_drop_reply (GdkDragContext *context, gboolean ok, guint32 time_);"
gdk;gdk_error_trap_pop;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"gint gdk_error_trap_pop (void);"
gdk;gdk_error_trap_push;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" void gdk_error_trap_push (void);"
gdk;gdk_event_copy;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;"GdkEvent* gdk_event_copy (const GdkEvent *event);"
gdk;gdk_event_free;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;"void gdk_event_free (GdkEvent *event);"
gdk;gdk_event_get;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;"GdkEvent* gdk_event_get (void);"
gdk;gdk_event_get_axis;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;"gboolean gdk_event_get_axis (const GdkEvent *event, GdkAxisUse axis_use, gdouble *value);"
gdk;gdk_event_get_coords;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;"gboolean gdk_event_get_coords (const GdkEvent *event, gdouble *x_win, gdouble *y_win);"
gdk;gdk_event_get_graphics_expose;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;" GdkEvent* gdk_event_get_graphics_expose (GdkWindow *window);"
gdk;gdk_event_get_root_coords;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;"gboolean gdk_event_get_root_coords (const GdkEvent *event, gdouble *x_root, gdouble *y_root);"
gdk;gdk_event_get_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;"GdkScreen *gdk_event_get_screen (const GdkEvent *event);"
gdk;gdk_event_get_state;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;"gboolean gdk_event_get_state (const GdkEvent *event, GdkModifierType *state);"
gdk;gdk_event_get_time;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;" guint32 gdk_event_get_time (const GdkEvent *event);"
gdk;gdk_event_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;" GType gdk_event_get_type (void) G_GNUC_CONST;"
gdk;gdk_event_handler_set;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;"void gdk_event_handler_set (GdkEventFunc func, gpointer data, GDestroyNotify notify);"
gdk;gdk_event_mask_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_event_mask_get_type (void) G_GNUC_CONST;"
gdk;gdk_event_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;" GdkEvent* gdk_event_new (GdkEventType type);"
gdk;gdk_event_peek;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;" GdkEvent* gdk_event_peek (void);"
gdk;gdk_event_put;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;" void gdk_event_put (const GdkEvent *event);"
gdk;gdk_event_request_motions;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;"void gdk_event_request_motions (const GdkEventMotion *event);"
gdk;gdk_event_send_client_message;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" gboolean gdk_event_send_client_message (GdkEvent *event, GdkNativeWindow winid);"
gdk;gdk_event_send_client_message_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" gboolean gdk_event_send_client_message_for_display (GdkDisplay *display, GdkEvent *event, GdkNativeWindow winid);"
gdk;gdk_event_send_clientmessage_toall;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"void gdk_event_send_clientmessage_toall (GdkEvent *event);"
gdk;gdk_event_set_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;" void gdk_event_set_screen (GdkEvent *event, GdkScreen *screen);"
gdk;gdk_event_type_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_event_type_get_type (void) G_GNUC_CONST;"
gdk;gdk_events_pending;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;" gboolean gdk_events_pending (void);"
gdk;gdk_exit;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" void gdk_exit (gint error_code);"
gdk;gdk_extension_mode_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_extension_mode_get_type (void) G_GNUC_CONST;"
gdk;gdk_fill_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_fill_get_type (void) G_GNUC_CONST;"
gdk;gdk_fill_rule_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_fill_rule_get_type (void) G_GNUC_CONST;"
gdk;gdk_filter_return_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_filter_return_get_type (void) G_GNUC_CONST;"
gdk;gdk_flush;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" void gdk_flush (void);"
gdk;gdk_font_equal;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"gboolean gdk_font_equal (const GdkFont *fonta, const GdkFont *fontb);"
gdk;gdk_font_from_description;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"GdkFont* gdk_font_from_description (PangoFontDescription *font_desc);"
gdk;gdk_font_from_description_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"GdkFont *gdk_font_from_description_for_display (GdkDisplay *display, PangoFontDescription *font_desc);"
gdk;gdk_font_get_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;" GdkDisplay * gdk_font_get_display (GdkFont *font);"
gdk;gdk_font_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"  GType gdk_font_get_type (void) G_GNUC_CONST;"
gdk;gdk_font_id;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"gint gdk_font_id (const GdkFont *font);"
gdk;gdk_font_load;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;" GdkFont* gdk_font_load (const gchar *font_name);"
gdk;gdk_font_load_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;" GdkFont *gdk_font_load_for_display (GdkDisplay *display, const gchar *font_name);"
gdk;gdk_font_ref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;" GdkFont* gdk_font_ref (GdkFont *font);"
gdk;gdk_font_type_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_font_type_get_type (void) G_GNUC_CONST;"
gdk;gdk_font_unref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"void gdk_font_unref (GdkFont *font);"
gdk;gdk_fontset_load;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"GdkFont* gdk_fontset_load (const gchar *fontset_name);"
gdk;gdk_fontset_load_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"GdkFont *gdk_fontset_load_for_display (GdkDisplay *display, const gchar *fontset_name);"
gdk;gdk_free_compound_text;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;"void gdk_free_compound_text (guchar *ctext);"
gdk;gdk_free_text_list;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;" void gdk_free_text_list (gchar **list);"
gdk;gdk_function_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_function_get_type (void) G_GNUC_CONST;"
gdk;gdk_gc_copy;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_copy (GdkGC *dst_gc, GdkGC *src_gc);"
gdk;gdk_gc_get_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"GdkColormap *gdk_gc_get_colormap (GdkGC *gc);"
gdk;gdk_gc_get_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"GdkScreen * gdk_gc_get_screen (GdkGC *gc);"
gdk;gdk_gc_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"  GType gdk_gc_get_type (void) G_GNUC_CONST;"
gdk;gdk_gc_get_values;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;" void gdk_gc_get_values (GdkGC *gc, GdkGCValues *values);"
gdk;gdk_gc_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"GdkGC *gdk_gc_new (GdkDrawable *drawable);"
gdk;gdk_gc_new_with_values;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"GdkGC *gdk_gc_new_with_values (GdkDrawable *drawable, GdkGCValues *values, GdkGCValuesMask values_mask);"
gdk;gdk_gc_offset;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_offset (GdkGC *gc, gint x_offset, gint y_offset);"
gdk;gdk_gc_ref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;" GdkGC *gdk_gc_ref (GdkGC *gc);"
gdk;gdk_gc_set_background;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_background (GdkGC *gc, const GdkColor *color);"
gdk;gdk_gc_set_clip_mask;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_clip_mask (GdkGC *gc, GdkBitmap *mask);"
gdk;gdk_gc_set_clip_origin;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_clip_origin (GdkGC *gc, gint x, gint y);"
gdk;gdk_gc_set_clip_rectangle;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_clip_rectangle (GdkGC *gc, const GdkRectangle *rectangle);"
gdk;gdk_gc_set_clip_region;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_clip_region (GdkGC *gc, const GdkRegion *region);"
gdk;gdk_gc_set_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;" void gdk_gc_set_colormap (GdkGC *gc, GdkColormap *colormap);"
gdk;gdk_gc_set_dashes;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_dashes (GdkGC *gc, gint dash_offset, gint8 dash_list[], gint n);"
gdk;gdk_gc_set_exposures;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_exposures (GdkGC *gc, gboolean exposures);"
gdk;gdk_gc_set_fill;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_fill (GdkGC *gc, GdkFill fill);"
gdk;gdk_gc_set_font;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_font (GdkGC *gc, GdkFont *font);"
gdk;gdk_gc_set_foreground;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_foreground (GdkGC *gc, const GdkColor *color);"
gdk;gdk_gc_set_function;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_function (GdkGC *gc, GdkFunction function);"
gdk;gdk_gc_set_line_attributes;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_line_attributes (GdkGC *gc, gint line_width, GdkLineStyle line_style, GdkCapStyle cap_style, GdkJoinStyle join_style);"
gdk;gdk_gc_set_rgb_bg_color;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_rgb_bg_color (GdkGC *gc, const GdkColor *color);"
gdk;gdk_gc_set_rgb_fg_color;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_rgb_fg_color (GdkGC *gc, const GdkColor *color);"
gdk;gdk_gc_set_stipple;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_stipple (GdkGC *gc, GdkPixmap *stipple);"
gdk;gdk_gc_set_subwindow;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_subwindow (GdkGC *gc, GdkSubwindowMode mode);"
gdk;gdk_gc_set_tile;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_tile (GdkGC *gc, GdkPixmap *tile);"
gdk;gdk_gc_set_ts_origin;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_ts_origin (GdkGC *gc, gint x, gint y);"
gdk;gdk_gc_set_values;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_set_values (GdkGC *gc, GdkGCValues *values, GdkGCValuesMask values_mask);"
gdk;gdk_gc_unref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkgc.h;"void gdk_gc_unref (GdkGC *gc);"
gdk;gdk_gc_values_mask_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_gc_values_mask_get_type (void) G_GNUC_CONST;"
gdk;gdk_get_default_root_window;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" GdkWindow *gdk_get_default_root_window (void);"
gdk;gdk_get_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" gchar* gdk_get_display (void);"
gdk;gdk_get_display_arg_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"const gchar* gdk_get_display_arg_name (void);"
gdk;gdk_get_program_class;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" const char * gdk_get_program_class (void);"
gdk;gdk_get_show_events;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;"gboolean gdk_get_show_events (void);"
gdk;gdk_get_use_xshm;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"gboolean gdk_get_use_xshm (void);"
gdk;gdk_grab_status_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_grab_status_get_type (void) G_GNUC_CONST;"
gdk;gdk_gravity_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_gravity_get_type (void) G_GNUC_CONST;"
gdk;gdk_image_get;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;" GdkImage* gdk_image_get (GdkDrawable *drawable, gint x, gint y, gint width, gint height);"
gdk;gdk_image_get_bits_per_pixel;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"guint16 gdk_image_get_bits_per_pixel (GdkImage *image);"
gdk;gdk_image_get_byte_order;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"GdkByteOrder gdk_image_get_byte_order (GdkImage *image);"
gdk;gdk_image_get_bytes_per_line;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"guint16 gdk_image_get_bytes_per_line (GdkImage *image);"
gdk;gdk_image_get_bytes_per_pixel;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"guint16 gdk_image_get_bytes_per_pixel(GdkImage *image);"
gdk;gdk_image_get_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"GdkColormap* gdk_image_get_colormap (GdkImage *image);"
gdk;gdk_image_get_depth;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"guint16 gdk_image_get_depth (GdkImage *image);"
gdk;gdk_image_get_height;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"gint gdk_image_get_height (GdkImage *image);"
gdk;gdk_image_get_image_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;" GdkImageType gdk_image_get_image_type (GdkImage *image);"
gdk;gdk_image_get_pixel;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"guint32 gdk_image_get_pixel (GdkImage *image, gint x, gint y);"
gdk;gdk_image_get_pixels;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"gpointer gdk_image_get_pixels (GdkImage *image);"
gdk;gdk_image_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"  GType gdk_image_get_type (void) G_GNUC_CONST;"
gdk;gdk_image_get_visual;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"GdkVisual *gdk_image_get_visual (GdkImage *image);"
gdk;gdk_image_get_width;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"gint gdk_image_get_width (GdkImage *image);"
gdk;gdk_image_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;" GdkImage* gdk_image_new (GdkImageType type, GdkVisual *visual, gint width, gint height);"
gdk;gdk_image_new_bitmap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;" GdkImage* gdk_image_new_bitmap (GdkVisual *visual, gpointer data, gint width, gint height);"
gdk;gdk_image_put_pixel;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;" void gdk_image_put_pixel (GdkImage *image, gint x, gint y, guint32 pixel);"
gdk;gdk_image_ref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;" GdkImage * gdk_image_ref (GdkImage *image);"
gdk;gdk_image_set_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;" void gdk_image_set_colormap (GdkImage *image, GdkColormap *colormap);"
gdk;gdk_image_type_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_image_type_get_type (void) G_GNUC_CONST;"
gdk;gdk_image_unref;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkimage.h;"void gdk_image_unref (GdkImage *image);"
gdk;gdk_init;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"void gdk_init (gint *argc, gchar ***argv);"
gdk;gdk_init_check;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"gboolean gdk_init_check (gint *argc, gchar ***argv);"
gdk;gdk_input_add;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"gint gdk_input_add (gint source, GdkInputCondition condition, GdkInputFunction function, gpointer data);"
gdk;gdk_input_add_full;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" gint gdk_input_add_full (gint source, GdkInputCondition condition, GdkInputFunction function, gpointer data, GDestroyNotify destroy);"
gdk;gdk_input_condition_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_input_condition_get_type (void) G_GNUC_CONST;"
gdk;gdk_input_mode_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_input_mode_get_type (void) G_GNUC_CONST;"
gdk;gdk_input_remove;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"void gdk_input_remove (gint tag);"
gdk;gdk_input_set_extension_events;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkinput.h;" void gdk_input_set_extension_events (GdkWindow *window, gint mask, GdkExtensionMode mode);"
gdk;gdk_input_source_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_input_source_get_type (void) G_GNUC_CONST;"
gdk;gdk_join_style_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_join_style_get_type (void) G_GNUC_CONST;"
gdk;gdk_keyboard_grab;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"GdkGrabStatus gdk_keyboard_grab (GdkWindow *window, gboolean owner_events, guint32 time_);"
gdk;gdk_keyboard_grab_info_libgtk_only;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"gboolean gdk_keyboard_grab_info_libgtk_only (GdkDisplay *display, GdkWindow **grab_window, gboolean *owner_events);"
gdk;gdk_keyboard_ungrab;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"void gdk_keyboard_ungrab (guint32 time_);"
gdk;gdk_keymap_add_virtual_modifiers;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"void gdk_keymap_add_virtual_modifiers (GdkKeymap *keymap, GdkModifierType *state);"
gdk;gdk_keymap_get_caps_lock_state;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"gboolean gdk_keymap_get_caps_lock_state (GdkKeymap *keymap);"
gdk;gdk_keymap_get_default;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;" GdkKeymap* gdk_keymap_get_default (void);"
gdk;gdk_keymap_get_direction;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"PangoDirection gdk_keymap_get_direction (GdkKeymap *keymap);"
gdk;gdk_keymap_get_entries_for_keycode;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"gboolean gdk_keymap_get_entries_for_keycode (GdkKeymap *keymap, guint hardware_keycode, GdkKeymapKey **keys, guint **keyvals, gint *n_entries);"
gdk;gdk_keymap_get_entries_for_keyval;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"gboolean gdk_keymap_get_entries_for_keyval (GdkKeymap *keymap, guint keyval, GdkKeymapKey **keys, gint *n_keys);"
gdk;gdk_keymap_get_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;" GdkKeymap* gdk_keymap_get_for_display (GdkDisplay *display);"
gdk;gdk_keymap_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"  GType gdk_keymap_get_type (void) G_GNUC_CONST;"
gdk;gdk_keymap_have_bidi_layouts;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"gboolean gdk_keymap_have_bidi_layouts (GdkKeymap *keymap);"
gdk;gdk_keymap_lookup_key;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;" guint gdk_keymap_lookup_key (GdkKeymap *keymap, const GdkKeymapKey *key);"
gdk;gdk_keymap_map_virtual_modifiers;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"gboolean gdk_keymap_map_virtual_modifiers (GdkKeymap *keymap, GdkModifierType *state);"
gdk;gdk_keymap_translate_keyboard_state;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"gboolean gdk_keymap_translate_keyboard_state (GdkKeymap *keymap, guint hardware_keycode, GdkModifierType state, gint group, guint *keyval, gint *effective_group, gint *level, GdkModifierType *consumed_modifiers);"
gdk;gdk_keyval_convert_case;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"void gdk_keyval_convert_case (guint symbol, guint *lower, guint *upper);"
gdk;gdk_keyval_from_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"guint gdk_keyval_from_name (const gchar *keyval_name);"
gdk;gdk_keyval_is_lower;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"gboolean gdk_keyval_is_lower (guint keyval) G_GNUC_CONST;"
gdk;gdk_keyval_is_upper;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"gboolean gdk_keyval_is_upper (guint keyval) G_GNUC_CONST;"
gdk;gdk_keyval_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;" gchar* gdk_keyval_name (guint keyval) G_GNUC_CONST;"
gdk;gdk_keyval_to_lower;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"guint gdk_keyval_to_lower (guint keyval) G_GNUC_CONST;"
gdk;gdk_keyval_to_unicode;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;" guint32 gdk_keyval_to_unicode (guint keyval) G_GNUC_CONST;"
gdk;gdk_keyval_to_upper;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"guint gdk_keyval_to_upper (guint keyval) G_GNUC_CONST;"
gdk;gdk_line_style_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_line_style_get_type (void) G_GNUC_CONST;"
gdk;gdk_list_visuals;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;" GList* gdk_list_visuals (void);"
gdk;gdk_mbstowcs;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"gint gdk_mbstowcs (GdkWChar *dest, const gchar *src, gint dest_max);"
gdk;gdk_modifier_type_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_modifier_type_get_type (void) G_GNUC_CONST;"
gdk;gdk_net_wm_supports;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"gboolean gdk_net_wm_supports (GdkAtom property);"
gdk;gdk_notify_startup_complete;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" void gdk_notify_startup_complete (void);"
gdk;gdk_notify_startup_complete_with_id;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" void gdk_notify_startup_complete_with_id (const gchar* startup_id);"
gdk;gdk_notify_type_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_notify_type_get_type (void) G_GNUC_CONST;"
gdk;gdk_offscreen_window_get_embedder;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkWindow *gdk_offscreen_window_get_embedder (GdkWindow *window);"
gdk;gdk_offscreen_window_get_pixmap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" GdkPixmap *gdk_offscreen_window_get_pixmap (GdkWindow *window);"
gdk;gdk_offscreen_window_set_embedder;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_offscreen_window_set_embedder (GdkWindow *window, GdkWindow *embedder);"
gdk;gdk_overlap_type_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_overlap_type_get_type (void) G_GNUC_CONST;"
gdk;gdk_owner_change_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_owner_change_get_type (void) G_GNUC_CONST;"
gdk;gdk_pango_attr_emboss_color_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;"PangoAttribute *gdk_pango_attr_emboss_color_new (const GdkColor *color);"
gdk;gdk_pango_attr_embossed_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;"PangoAttribute *gdk_pango_attr_embossed_new (gboolean embossed);"
gdk;gdk_pango_attr_stipple_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;" PangoAttribute *gdk_pango_attr_stipple_new (GdkBitmap *stipple);"
gdk;gdk_pango_context_get;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;" PangoContext *gdk_pango_context_get (void);"
gdk;gdk_pango_context_get_for_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;" PangoContext *gdk_pango_context_get_for_screen (GdkScreen *screen);"
gdk;gdk_pango_context_set_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;" void gdk_pango_context_set_colormap (PangoContext *context, GdkColormap *colormap);"
gdk;gdk_pango_layout_get_clip_region;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;"GdkRegion *gdk_pango_layout_get_clip_region (PangoLayout *layout, gint x_origin, gint y_origin, const gint *index_ranges, gint n_ranges);"
gdk;gdk_pango_layout_line_get_clip_region;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;" GdkRegion *gdk_pango_layout_line_get_clip_region (PangoLayoutLine *line, gint x_origin, gint y_origin, const gint *index_ranges, gint n_ranges);"
gdk;gdk_pango_renderer_get_default;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;"PangoRenderer *gdk_pango_renderer_get_default (GdkScreen *screen);"
gdk;gdk_pango_renderer_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;"  GType gdk_pango_renderer_get_type (void) G_GNUC_CONST;"
gdk;gdk_pango_renderer_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;" PangoRenderer *gdk_pango_renderer_new (GdkScreen *screen);"
gdk;gdk_pango_renderer_set_drawable;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;" void gdk_pango_renderer_set_drawable (GdkPangoRenderer *gdk_renderer, GdkDrawable *drawable);"
gdk;gdk_pango_renderer_set_gc;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;"void gdk_pango_renderer_set_gc (GdkPangoRenderer *gdk_renderer, GdkGC *gc);"
gdk;gdk_pango_renderer_set_override_color;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;"void gdk_pango_renderer_set_override_color (GdkPangoRenderer *gdk_renderer, PangoRenderPart part, const GdkColor *color);"
gdk;gdk_pango_renderer_set_stipple;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpango.h;"void gdk_pango_renderer_set_stipple (GdkPangoRenderer *gdk_renderer, PangoRenderPart part, GdkBitmap *stipple);"
gdk;gdk_parse_args;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"  void gdk_parse_args (gint *argc, gchar ***argv);"
gdk;gdk_pixbuf_get_from_drawable;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixbuf.h;" GdkPixbuf *gdk_pixbuf_get_from_drawable (GdkPixbuf *dest, GdkDrawable *src, GdkColormap *cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height);"
gdk;gdk_pixbuf_get_from_image;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixbuf.h;" GdkPixbuf *gdk_pixbuf_get_from_image (GdkPixbuf *dest, GdkImage *src, GdkColormap *cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height);"
gdk;gdk_pixbuf_render_pixmap_and_mask;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixbuf.h;" void gdk_pixbuf_render_pixmap_and_mask (GdkPixbuf *pixbuf, GdkPixmap **pixmap_return, GdkBitmap **mask_return, int alpha_threshold);"
gdk;gdk_pixbuf_render_pixmap_and_mask_for_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixbuf.h;" void gdk_pixbuf_render_pixmap_and_mask_for_colormap (GdkPixbuf *pixbuf, GdkColormap *colormap, GdkPixmap **pixmap_return, GdkBitmap **mask_return, int alpha_threshold);"
gdk;gdk_pixbuf_render_threshold_alpha;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixbuf.h;"  void gdk_pixbuf_render_threshold_alpha (GdkPixbuf *pixbuf, GdkBitmap *bitmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int alpha_threshold);"
gdk;gdk_pixbuf_render_to_drawable;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixbuf.h;" void gdk_pixbuf_render_to_drawable (GdkPixbuf *pixbuf, GdkDrawable *drawable, GdkGC *gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, GdkRgbDither dither, int x_dither, int y_dither);"
gdk;gdk_pixbuf_render_to_drawable_alpha;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixbuf.h;"void gdk_pixbuf_render_to_drawable_alpha (GdkPixbuf *pixbuf, GdkDrawable *drawable, int src_x, int src_y, int dest_x, int dest_y, int width, int height, GdkPixbufAlphaMode alpha_mode, int alpha_threshold, GdkRgbDither dither, int x_dither, int y_dither);"
gdk;gdk_pixmap_colormap_create_from_xpm;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;"GdkPixmap* gdk_pixmap_colormap_create_from_xpm (GdkDrawable *drawable, GdkColormap *colormap, GdkBitmap **mask, const GdkColor *transparent_color, const gchar *filename);"
gdk;gdk_pixmap_colormap_create_from_xpm_d;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;"GdkPixmap* gdk_pixmap_colormap_create_from_xpm_d (GdkDrawable *drawable, GdkColormap *colormap, GdkBitmap **mask, const GdkColor *transparent_color, gchar **data);"
gdk;gdk_pixmap_create_from_data;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;"GdkPixmap* gdk_pixmap_create_from_data (GdkDrawable *drawable, const gchar *data, gint width, gint height, gint depth, const GdkColor *fg, const GdkColor *bg);"
gdk;gdk_pixmap_create_from_xpm;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;" GdkPixmap* gdk_pixmap_create_from_xpm (GdkDrawable *drawable, GdkBitmap **mask, const GdkColor *transparent_color, const gchar *filename);"
gdk;gdk_pixmap_create_from_xpm_d;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;"GdkPixmap* gdk_pixmap_create_from_xpm_d (GdkDrawable *drawable, GdkBitmap **mask, const GdkColor *transparent_color, gchar **data);"
gdk;gdk_pixmap_foreign_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;" GdkPixmap* gdk_pixmap_foreign_new (GdkNativeWindow anid);"
gdk;gdk_pixmap_foreign_new_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;" GdkPixmap* gdk_pixmap_foreign_new_for_display (GdkDisplay *display, GdkNativeWindow anid);"
gdk;gdk_pixmap_foreign_new_for_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;"GdkPixmap* gdk_pixmap_foreign_new_for_screen (GdkScreen *screen, GdkNativeWindow anid, gint width, gint height, gint depth);"
gdk;gdk_pixmap_get_size;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;" void gdk_pixmap_get_size (GdkPixmap *pixmap, gint *width, gint *height);"
gdk;gdk_pixmap_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;"  GType gdk_pixmap_get_type (void) G_GNUC_CONST;"
gdk;gdk_pixmap_lookup;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;"GdkPixmap* gdk_pixmap_lookup (GdkNativeWindow anid);"
gdk;gdk_pixmap_lookup_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;"GdkPixmap* gdk_pixmap_lookup_for_display (GdkDisplay *display, GdkNativeWindow anid);"
gdk;gdk_pixmap_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkpixmap.h;" GdkPixmap* gdk_pixmap_new (GdkDrawable *drawable, gint width, gint height, gint depth);"
gdk;gdk_pointer_grab;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" GdkGrabStatus gdk_pointer_grab (GdkWindow *window, gboolean owner_events, GdkEventMask event_mask, GdkWindow *confine_to, GdkCursor *cursor, guint32 time_);"
gdk;gdk_pointer_grab_info_libgtk_only;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" gboolean gdk_pointer_grab_info_libgtk_only (GdkDisplay *display, GdkWindow **grab_window, gboolean *owner_events);"
gdk;gdk_pointer_is_grabbed;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"gboolean gdk_pointer_is_grabbed (void);"
gdk;gdk_pointer_ungrab;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" void gdk_pointer_ungrab (guint32 time_);"
gdk;gdk_pre_parse_libgtk_only;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"void gdk_pre_parse_libgtk_only (void);"
gdk;gdk_prop_mode_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_prop_mode_get_type (void) G_GNUC_CONST;"
gdk;gdk_property_change;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;"void gdk_property_change (GdkWindow *window, GdkAtom property, GdkAtom type, gint format, GdkPropMode mode, const guchar *data, gint nelements);"
gdk;gdk_property_delete;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;"void gdk_property_delete (GdkWindow *window, GdkAtom property);"
gdk;gdk_property_get;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;" gboolean gdk_property_get (GdkWindow *window, GdkAtom property, GdkAtom type, gulong offset, gulong length, gint pdelete, GdkAtom *actual_property_type, gint *actual_format, gint *actual_length, guchar **data);"
gdk;gdk_property_state_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_property_state_get_type (void) G_GNUC_CONST;"
gdk;gdk_query_depths;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;" void gdk_query_depths (gint **depths, gint *count);"
gdk;gdk_query_visual_types;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"void gdk_query_visual_types (GdkVisualType **visual_types, gint *count);"
gdk;gdk_rectangle_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" GType gdk_rectangle_get_type (void) G_GNUC_CONST;"
gdk;gdk_rectangle_intersect;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" gboolean gdk_rectangle_intersect (const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest);"
gdk;gdk_rectangle_union;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"void gdk_rectangle_union (const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest);"
gdk;gdk_region_copy;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;" GdkRegion * gdk_region_copy (const GdkRegion *region);"
gdk;gdk_region_destroy;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;"void gdk_region_destroy (GdkRegion *region);"
gdk;gdk_region_empty;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;" gboolean gdk_region_empty (const GdkRegion *region);"
gdk;gdk_region_equal;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;"gboolean gdk_region_equal (const GdkRegion *region1, const GdkRegion *region2);"
gdk;gdk_region_get_clipbox;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;" void gdk_region_get_clipbox (const GdkRegion *region, GdkRectangle *rectangle);"
gdk;gdk_region_get_rectangles;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;"void gdk_region_get_rectangles (const GdkRegion *region, GdkRectangle **rectangles, gint *n_rectangles);"
gdk;gdk_region_intersect;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;"void gdk_region_intersect (GdkRegion *source1, const GdkRegion *source2);"
gdk;gdk_region_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;"  GdkRegion * gdk_region_new (void);"
gdk;gdk_region_offset;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;" void gdk_region_offset (GdkRegion *region, gint dx, gint dy);"
gdk;gdk_region_point_in;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;" gboolean gdk_region_point_in (const GdkRegion *region, int x, int y);"
gdk;gdk_region_polygon;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;" GdkRegion * gdk_region_polygon (const GdkPoint *points, gint n_points, GdkFillRule fill_rule);"
gdk;gdk_region_rect_equal;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;" gboolean gdk_region_rect_equal (const GdkRegion *region, const GdkRectangle *rectangle);"
gdk;gdk_region_rect_in;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;"GdkOverlapType gdk_region_rect_in (const GdkRegion *region, const GdkRectangle *rectangle);"
gdk;gdk_region_rectangle;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;"GdkRegion * gdk_region_rectangle (const GdkRectangle *rectangle);"
gdk;gdk_region_shrink;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;" void gdk_region_shrink (GdkRegion *region, gint dx, gint dy);"
gdk;gdk_region_spans_intersect_foreach;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;" void gdk_region_spans_intersect_foreach (GdkRegion *region, const GdkSpan *spans, int n_spans, gboolean sorted, GdkSpanFunc function, gpointer data);"
gdk;gdk_region_subtract;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;"void gdk_region_subtract (GdkRegion *source1, const GdkRegion *source2);"
gdk;gdk_region_union;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;"void gdk_region_union (GdkRegion *source1, const GdkRegion *source2);"
gdk;gdk_region_union_with_rect;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;" void gdk_region_union_with_rect (GdkRegion *region, const GdkRectangle *rect);"
gdk;gdk_region_xor;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkregion.h;"void gdk_region_xor (GdkRegion *source1, const GdkRegion *source2);"
gdk;gdk_rgb_cmap_free;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"void gdk_rgb_cmap_free (GdkRgbCmap *cmap);"
gdk;gdk_rgb_cmap_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"GdkRgbCmap *gdk_rgb_cmap_new (guint32 *colors, gint n_colors);"
gdk;gdk_rgb_colormap_ditherable;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"gboolean gdk_rgb_colormap_ditherable (GdkColormap *cmap);"
gdk;gdk_rgb_dither_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_rgb_dither_get_type (void) G_GNUC_CONST;"
gdk;gdk_rgb_ditherable;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"gboolean gdk_rgb_ditherable (void);"
gdk;gdk_rgb_find_color;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;" void gdk_rgb_find_color (GdkColormap *colormap, GdkColor *color);"
gdk;gdk_rgb_gc_set_background;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"void gdk_rgb_gc_set_background (GdkGC *gc, guint32 rgb);"
gdk;gdk_rgb_gc_set_foreground;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"void gdk_rgb_gc_set_foreground (GdkGC *gc, guint32 rgb);"
gdk;gdk_rgb_get_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;" GdkColormap *gdk_rgb_get_colormap (void);"
gdk;gdk_rgb_get_visual;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"GdkVisual * gdk_rgb_get_visual (void);"
gdk;gdk_rgb_init;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"  void gdk_rgb_init (void);"
gdk;gdk_rgb_set_install;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;" void gdk_rgb_set_install (gboolean install);"
gdk;gdk_rgb_set_min_colors;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;"void gdk_rgb_set_min_colors (gint min_colors);"
gdk;gdk_rgb_set_verbose;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;" void gdk_rgb_set_verbose (gboolean verbose);"
gdk;gdk_rgb_xpixel_from_rgb;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkrgb.h;" gulong gdk_rgb_xpixel_from_rgb (guint32 rgb) G_GNUC_CONST;"
gdk;gdk_screen_broadcast_client_message;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;" void gdk_screen_broadcast_client_message (GdkScreen *screen, GdkEvent *event);"
gdk;gdk_screen_get_active_window;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;" GdkWindow *gdk_screen_get_active_window (GdkScreen *screen);"
gdk;gdk_screen_get_default;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;" GdkScreen *gdk_screen_get_default (void);"
gdk;gdk_screen_get_default_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"GdkColormap *gdk_screen_get_default_colormap (GdkScreen *screen);"
gdk;gdk_screen_get_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"GdkDisplay * gdk_screen_get_display (GdkScreen *screen);"
gdk;gdk_screen_get_font_options;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"const cairo_font_options_t *gdk_screen_get_font_options (GdkScreen *screen);"
gdk;gdk_screen_get_height;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gint gdk_screen_get_height (GdkScreen *screen);"
gdk;gdk_screen_get_height_mm;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gint gdk_screen_get_height_mm (GdkScreen *screen);"
gdk;gdk_screen_get_monitor_at_point;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gint gdk_screen_get_monitor_at_point (GdkScreen *screen, gint x, gint y);"
gdk;gdk_screen_get_monitor_at_window;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gint gdk_screen_get_monitor_at_window (GdkScreen *screen, GdkWindow *window);"
gdk;gdk_screen_get_monitor_geometry;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"void gdk_screen_get_monitor_geometry (GdkScreen *screen, gint monitor_num, GdkRectangle *dest);"
gdk;gdk_screen_get_monitor_height_mm;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gint gdk_screen_get_monitor_height_mm (GdkScreen *screen, gint monitor_num);"
gdk;gdk_screen_get_monitor_plug_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gchar * gdk_screen_get_monitor_plug_name (GdkScreen *screen, gint monitor_num);"
gdk;gdk_screen_get_monitor_width_mm;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gint gdk_screen_get_monitor_width_mm (GdkScreen *screen, gint monitor_num);"
gdk;gdk_screen_get_n_monitors;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;" gint gdk_screen_get_n_monitors (GdkScreen *screen);"
gdk;gdk_screen_get_number;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gint gdk_screen_get_number (GdkScreen *screen);"
gdk;gdk_screen_get_primary_monitor;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gint gdk_screen_get_primary_monitor (GdkScreen *screen);"
gdk;gdk_screen_get_resolution;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gdouble gdk_screen_get_resolution (GdkScreen *screen);"
gdk;gdk_screen_get_rgb_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"GdkColormap *gdk_screen_get_rgb_colormap (GdkScreen *screen);"
gdk;gdk_screen_get_rgb_visual;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"GdkVisual * gdk_screen_get_rgb_visual (GdkScreen *screen);"
gdk;gdk_screen_get_rgba_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"GdkColormap *gdk_screen_get_rgba_colormap (GdkScreen *screen);"
gdk;gdk_screen_get_rgba_visual;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"GdkVisual * gdk_screen_get_rgba_visual (GdkScreen *screen);"
gdk;gdk_screen_get_root_window;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;" GdkWindow * gdk_screen_get_root_window (GdkScreen *screen);"
gdk;gdk_screen_get_setting;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;" gboolean gdk_screen_get_setting (GdkScreen *screen, const gchar *name, GValue *value);"
gdk;gdk_screen_get_system_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"GdkColormap* gdk_screen_get_system_colormap (GdkScreen *screen);"
gdk;gdk_screen_get_system_visual;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"GdkVisual* gdk_screen_get_system_visual (GdkScreen *screen);"
gdk;gdk_screen_get_toplevel_windows;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"GList * gdk_screen_get_toplevel_windows (GdkScreen *screen);"
gdk;gdk_screen_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"  GType gdk_screen_get_type (void) G_GNUC_CONST;"
gdk;gdk_screen_get_width;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gint gdk_screen_get_width (GdkScreen *screen);"
gdk;gdk_screen_get_width_mm;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gint gdk_screen_get_width_mm (GdkScreen *screen);"
gdk;gdk_screen_get_window_stack;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"GList *gdk_screen_get_window_stack (GdkScreen *screen);"
gdk;gdk_screen_height;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"gint gdk_screen_height (void) G_GNUC_CONST;"
gdk;gdk_screen_height_mm;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"gint gdk_screen_height_mm (void) G_GNUC_CONST;"
gdk;gdk_screen_is_composited;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gboolean gdk_screen_is_composited (GdkScreen *screen);"
gdk;gdk_screen_list_visuals;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;" GList * gdk_screen_list_visuals (GdkScreen *screen);"
gdk;gdk_screen_make_display_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"gchar * gdk_screen_make_display_name (GdkScreen *screen);"
gdk;gdk_screen_set_default_colormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;"void gdk_screen_set_default_colormap (GdkScreen *screen, GdkColormap *colormap);"
gdk;gdk_screen_set_font_options;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;" void gdk_screen_set_font_options (GdkScreen *screen, const cairo_font_options_t *options);"
gdk;gdk_screen_set_resolution;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkscreen.h;" void gdk_screen_set_resolution (GdkScreen *screen, gdouble dpi);"
gdk;gdk_screen_width;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" gint gdk_screen_width (void) G_GNUC_CONST;"
gdk;gdk_screen_width_mm;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" gint gdk_screen_width_mm (void) G_GNUC_CONST;"
gdk;gdk_scroll_direction_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_scroll_direction_get_type (void) G_GNUC_CONST;"
gdk;gdk_selection_convert;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkselection.h;" void gdk_selection_convert (GdkWindow *requestor, GdkAtom selection, GdkAtom target, guint32 time_);"
gdk;gdk_selection_owner_get;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkselection.h;"GdkWindow* gdk_selection_owner_get (GdkAtom selection);"
gdk;gdk_selection_owner_get_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkselection.h;"GdkWindow *gdk_selection_owner_get_for_display (GdkDisplay *display, GdkAtom selection);"
gdk;gdk_selection_owner_set;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkselection.h;"  gboolean gdk_selection_owner_set (GdkWindow *owner, GdkAtom selection, guint32 time_, gboolean send_event);"
gdk;gdk_selection_owner_set_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkselection.h;" gboolean gdk_selection_owner_set_for_display (GdkDisplay *display, GdkWindow *owner, GdkAtom selection, guint32 time_, gboolean send_event);"
gdk;gdk_selection_property_get;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkselection.h;"gint gdk_selection_property_get (GdkWindow *requestor, guchar **data, GdkAtom *prop_type, gint *prop_format);"
gdk;gdk_selection_send_notify;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkselection.h;" void gdk_selection_send_notify (GdkNativeWindow requestor, GdkAtom selection, GdkAtom target, GdkAtom property, guint32 time_);"
gdk;gdk_selection_send_notify_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkselection.h;" void gdk_selection_send_notify_for_display (GdkDisplay *display, GdkNativeWindow requestor, GdkAtom selection, GdkAtom target, GdkAtom property, guint32 time_);"
gdk;gdk_set_double_click_time;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" void gdk_set_double_click_time (guint msec);"
gdk;gdk_set_locale;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"gchar* gdk_set_locale (void);"
gdk;gdk_set_pointer_hooks;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" GdkPointerHooks *gdk_set_pointer_hooks (const GdkPointerHooks *new_hooks);"
gdk;gdk_set_program_class;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"void gdk_set_program_class (const char *program_class);"
gdk;gdk_set_show_events;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;" void gdk_set_show_events (gboolean show_events);"
gdk;gdk_set_sm_client_id;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_set_sm_client_id (const gchar *sm_client_id);"
gdk;gdk_set_use_xshm;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" void gdk_set_use_xshm (gboolean use_xshm);"
gdk;gdk_setting_action_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_setting_action_get_type (void) G_GNUC_CONST;"
gdk;gdk_setting_get;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkevents.h;" gboolean gdk_setting_get (const gchar *name, GValue *value);"
gdk;gdk_spawn_command_line_on_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkspawn.h;" gboolean gdk_spawn_command_line_on_screen (GdkScreen *screen, const gchar *command_line, GError **error);"
gdk;gdk_spawn_on_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkspawn.h;"  gboolean gdk_spawn_on_screen (GdkScreen *screen, const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gint *child_pid, GError **error);"
gdk;gdk_spawn_on_screen_with_pipes;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkspawn.h;" gboolean gdk_spawn_on_screen_with_pipes (GdkScreen *screen, const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gint *child_pid, gint *standard_input, gint *standard_output, gint *standard_error, GError **error);"
gdk;gdk_status_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_status_get_type (void) G_GNUC_CONST;"
gdk;gdk_string_extents;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"void gdk_string_extents (GdkFont *font, const gchar *string, gint *lbearing, gint *rbearing, gint *width, gint *ascent, gint *descent);"
gdk;gdk_string_height;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"gint gdk_string_height (GdkFont *font, const gchar *string);"
gdk;gdk_string_measure;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"gint gdk_string_measure (GdkFont *font, const gchar *string);"
gdk;gdk_string_to_compound_text;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;"gint gdk_string_to_compound_text (const gchar *str, GdkAtom *encoding, gint *format, guchar **ctext, gint *length);"
gdk;gdk_string_to_compound_text_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;"gint gdk_string_to_compound_text_for_display (GdkDisplay *display, const gchar *str, GdkAtom *encoding, gint *format, guchar **ctext, gint *length);"
gdk;gdk_string_width;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;" gint gdk_string_width (GdkFont *font, const gchar *string);"
gdk;gdk_subwindow_mode_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_subwindow_mode_get_type (void) G_GNUC_CONST;"
gdk;gdk_synthesize_window_state;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkprivate.h;" void gdk_synthesize_window_state (GdkWindow *window, GdkWindowState unset_flags, GdkWindowState set_flags);"
gdk;gdk_test_render_sync;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdktestutils.h;"  void gdk_test_render_sync (GdkWindow *window);"
gdk;gdk_test_simulate_button;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdktestutils.h;"gboolean gdk_test_simulate_button (GdkWindow *window, gint x, gint y, guint button, GdkModifierType modifiers, GdkEventType button_pressrelease);"
gdk;gdk_test_simulate_key;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdktestutils.h;"gboolean gdk_test_simulate_key (GdkWindow *window, gint x, gint y, guint keyval, GdkModifierType modifiers, GdkEventType key_pressrelease);"
gdk;gdk_text_extents;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;" void gdk_text_extents (GdkFont *font, const gchar *text, gint text_length, gint *lbearing, gint *rbearing, gint *width, gint *ascent, gint *descent);"
gdk;gdk_text_extents_wc;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"void gdk_text_extents_wc (GdkFont *font, const GdkWChar *text, gint text_length, gint *lbearing, gint *rbearing, gint *width, gint *ascent, gint *descent);"
gdk;gdk_text_height;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"gint gdk_text_height (GdkFont *font, const gchar *text, gint text_length);"
gdk;gdk_text_measure;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"gint gdk_text_measure (GdkFont *font, const gchar *text, gint text_length);"
gdk;gdk_text_property_to_text_list;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;" gint gdk_text_property_to_text_list (GdkAtom encoding, gint format, const guchar *text, gint length, gchar ***list);"
gdk;gdk_text_property_to_text_list_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;" gint gdk_text_property_to_text_list_for_display (GdkDisplay *display, GdkAtom encoding, gint format, const guchar *text, gint length, gchar ***list);"
gdk;gdk_text_property_to_utf8_list;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;"gint gdk_text_property_to_utf8_list (GdkAtom encoding, gint format, const guchar *text, gint length, gchar ***list);"
gdk;gdk_text_property_to_utf8_list_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;" gint gdk_text_property_to_utf8_list_for_display (GdkDisplay *display, GdkAtom encoding, gint format, const guchar *text, gint length, gchar ***list);"
gdk;gdk_text_width;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"gint gdk_text_width (GdkFont *font, const gchar *text, gint text_length);"
gdk;gdk_text_width_wc;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkfont.h;"gint gdk_text_width_wc (GdkFont *font, const GdkWChar *text, gint text_length);"
gdk;gdk_threads_add_idle;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"guint gdk_threads_add_idle (GSourceFunc function, gpointer data);"
gdk;gdk_threads_add_idle_full;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" guint gdk_threads_add_idle_full (gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);"
gdk;gdk_threads_add_timeout;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"guint gdk_threads_add_timeout (guint interval, GSourceFunc function, gpointer data);"
gdk;gdk_threads_add_timeout_full;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"guint gdk_threads_add_timeout_full (gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);"
gdk;gdk_threads_add_timeout_seconds;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"guint gdk_threads_add_timeout_seconds (guint interval, GSourceFunc function, gpointer data);"
gdk;gdk_threads_add_timeout_seconds_full;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"guint gdk_threads_add_timeout_seconds_full (gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);"
gdk;gdk_threads_enter;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" void gdk_threads_enter (void);"
gdk;gdk_threads_init;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"void gdk_threads_init (void);"
gdk;gdk_threads_leave;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"void gdk_threads_leave (void);"
gdk;gdk_threads_set_lock_functions;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;"void gdk_threads_set_lock_functions (GCallback enter_fn, GCallback leave_fn);"
gdk;gdk_unicode_to_keyval;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkkeys.h;"guint gdk_unicode_to_keyval (guint32 wc) G_GNUC_CONST;"
gdk;gdk_utf8_to_compound_text;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;"gboolean gdk_utf8_to_compound_text (const gchar *str, GdkAtom *encoding, gint *format, guchar **ctext, gint *length);"
gdk;gdk_utf8_to_compound_text_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;"gboolean gdk_utf8_to_compound_text_for_display (GdkDisplay *display, const gchar *str, GdkAtom *encoding, gint *format, guchar **ctext, gint *length);"
gdk;gdk_utf8_to_string_target;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkproperty.h;" gchar *gdk_utf8_to_string_target (const gchar *str);"
gdk;gdk_visibility_state_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_visibility_state_get_type (void) G_GNUC_CONST;"
gdk;gdk_visual_get_best;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"GdkVisual* gdk_visual_get_best (void);"
gdk;gdk_visual_get_best_depth;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;" gint gdk_visual_get_best_depth (void);"
gdk;gdk_visual_get_best_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"GdkVisualType gdk_visual_get_best_type (void);"
gdk;gdk_visual_get_best_with_both;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"GdkVisual* gdk_visual_get_best_with_both (gint depth, GdkVisualType visual_type);"
gdk;gdk_visual_get_best_with_depth;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"GdkVisual* gdk_visual_get_best_with_depth (gint depth);"
gdk;gdk_visual_get_best_with_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"GdkVisual* gdk_visual_get_best_with_type (GdkVisualType visual_type);"
gdk;gdk_visual_get_bits_per_rgb;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"gint gdk_visual_get_bits_per_rgb (GdkVisual *visual);"
gdk;gdk_visual_get_blue_pixel_details;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"void gdk_visual_get_blue_pixel_details (GdkVisual *visual, guint32 *mask, gint *shift, gint *precision);"
gdk;gdk_visual_get_byte_order;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"GdkByteOrder gdk_visual_get_byte_order (GdkVisual *visual);"
gdk;gdk_visual_get_colormap_size;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"gint gdk_visual_get_colormap_size (GdkVisual *visual);"
gdk;gdk_visual_get_depth;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"gint gdk_visual_get_depth (GdkVisual *visual);"
gdk;gdk_visual_get_green_pixel_details;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"void gdk_visual_get_green_pixel_details (GdkVisual *visual, guint32 *mask, gint *shift, gint *precision);"
gdk;gdk_visual_get_red_pixel_details;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"void gdk_visual_get_red_pixel_details (GdkVisual *visual, guint32 *mask, gint *shift, gint *precision);"
gdk;gdk_visual_get_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;" GdkScreen *gdk_visual_get_screen (GdkVisual *visual);"
gdk;gdk_visual_get_system;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"GdkVisual* gdk_visual_get_system (void);"
gdk;gdk_visual_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;"  GType gdk_visual_get_type (void) G_GNUC_CONST;"
gdk;gdk_visual_get_visual_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkvisual.h;" GdkVisualType gdk_visual_get_visual_type (GdkVisual *visual);"
gdk;gdk_visual_type_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_visual_type_get_type (void) G_GNUC_CONST;"
gdk;gdk_wcstombs;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdk.h;" gchar *gdk_wcstombs (const GdkWChar *src);"
gdk;gdk_window_add_filter;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_add_filter (GdkWindow *window, GdkFilterFunc function, gpointer data);"
gdk;gdk_window_at_pointer;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" GdkWindow* gdk_window_at_pointer (gint *win_x, gint *win_y);"
gdk;gdk_window_attributes_type_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_window_attributes_type_get_type (void) G_GNUC_CONST;"
gdk;gdk_window_beep;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_beep (GdkWindow *window);"
gdk;gdk_window_begin_move_drag;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_begin_move_drag (GdkWindow *window, gint button, gint root_x, gint root_y, guint32 timestamp);"
gdk;gdk_window_begin_paint_rect;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_begin_paint_rect (GdkWindow *window, const GdkRectangle *rectangle);"
gdk;gdk_window_begin_paint_region;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_begin_paint_region (GdkWindow *window, const GdkRegion *region);"
gdk;gdk_window_begin_resize_drag;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_begin_resize_drag (GdkWindow *window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp);"
gdk;gdk_window_class_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_window_class_get_type (void) G_GNUC_CONST;"
gdk;gdk_window_clear;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_clear (GdkWindow *window);"
gdk;gdk_window_clear_area;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_clear_area (GdkWindow *window, gint x, gint y, gint width, gint height);"
gdk;gdk_window_clear_area_e;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_clear_area_e (GdkWindow *window, gint x, gint y, gint width, gint height);"
gdk;gdk_window_configure_finished;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_configure_finished (GdkWindow *window);"
gdk;gdk_window_constrain_size;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_constrain_size (GdkGeometry *geometry, guint flags, gint width, gint height, gint *new_width, gint *new_height);"
gdk;gdk_window_coords_from_parent;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_coords_from_parent (GdkWindow *window, gdouble parent_x, gdouble parent_y, gdouble *x, gdouble *y);"
gdk;gdk_window_coords_to_parent;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_coords_to_parent (GdkWindow *window, gdouble x, gdouble y, gdouble *parent_x, gdouble *parent_y);"
gdk;gdk_window_create_similar_surface;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" cairo_surface_t * gdk_window_create_similar_surface (GdkWindow *window, cairo_content_t content, int width, int height);"
gdk;gdk_window_deiconify;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_deiconify (GdkWindow *window);"
gdk;gdk_window_destroy;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_destroy (GdkWindow *window);"
gdk;gdk_window_destroy_notify;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkprivate.h;"  void gdk_window_destroy_notify (GdkWindow *window);"
gdk;gdk_window_edge_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_window_edge_get_type (void) G_GNUC_CONST;"
gdk;gdk_window_enable_synchronized_configure;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_enable_synchronized_configure (GdkWindow *window);"
gdk;gdk_window_end_paint;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_end_paint (GdkWindow *window);"
gdk;gdk_window_ensure_native;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"gboolean gdk_window_ensure_native (GdkWindow *window);"
gdk;gdk_window_flush;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_flush (GdkWindow *window);"
gdk;gdk_window_focus;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_focus (GdkWindow *window, guint32 timestamp);"
gdk;gdk_window_foreign_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"   GdkWindow* gdk_window_foreign_new (GdkNativeWindow anid);"
gdk;gdk_window_foreign_new_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" GdkWindow *gdk_window_foreign_new_for_display (GdkDisplay *display, GdkNativeWindow anid);"
gdk;gdk_window_freeze_toplevel_updates_libgtk_only;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_freeze_toplevel_updates_libgtk_only (GdkWindow *window);"
gdk;gdk_window_freeze_updates;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_freeze_updates (GdkWindow *window);"
gdk;gdk_window_fullscreen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_fullscreen (GdkWindow *window);"
gdk;gdk_window_geometry_changed;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_geometry_changed (GdkWindow *window);"
gdk;gdk_window_get_accept_focus;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"gboolean gdk_window_get_accept_focus (GdkWindow *window);"
gdk;gdk_window_get_background_pattern;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"cairo_pattern_t *gdk_window_get_background_pattern (GdkWindow *window);"
gdk;gdk_window_get_children;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" GList * gdk_window_get_children (GdkWindow *window);"
gdk;gdk_window_get_composited;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" gboolean gdk_window_get_composited (GdkWindow *window);"
gdk;gdk_window_get_cursor;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkCursor *gdk_window_get_cursor (GdkWindow *window);"
gdk;gdk_window_get_decorations;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"gboolean gdk_window_get_decorations (GdkWindow *window, GdkWMDecoration *decorations);"
gdk;gdk_window_get_deskrelative_origin;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" gboolean gdk_window_get_deskrelative_origin (GdkWindow *window, gint *x, gint *y);"
gdk;gdk_window_get_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkDisplay* gdk_window_get_display (GdkWindow *window);"
gdk;gdk_window_get_effective_parent;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" GdkWindow * gdk_window_get_effective_parent (GdkWindow *window);"
gdk;gdk_window_get_effective_toplevel;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkWindow * gdk_window_get_effective_toplevel (GdkWindow *window);"
gdk;gdk_window_get_events;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkEventMask gdk_window_get_events (GdkWindow *window);"
gdk;gdk_window_get_focus_on_map;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"gboolean gdk_window_get_focus_on_map (GdkWindow *window);"
gdk;gdk_window_get_frame_extents;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_get_frame_extents (GdkWindow *window, GdkRectangle *rect);"
gdk;gdk_window_get_geometry;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_get_geometry (GdkWindow *window, gint *x, gint *y, gint *width, gint *height, gint *depth);"
gdk;gdk_window_get_group;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkWindow* gdk_window_get_group (GdkWindow *window);"
gdk;gdk_window_get_height;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"int gdk_window_get_height (GdkWindow *window);"
gdk;gdk_window_get_internal_paint_info;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_get_internal_paint_info (GdkWindow *window, GdkDrawable **real_drawable, gint *x_offset, gint *y_offset);"
gdk;gdk_window_get_modal_hint;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" gboolean gdk_window_get_modal_hint (GdkWindow *window);"
gdk;gdk_window_get_origin;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"gint gdk_window_get_origin (GdkWindow *window, gint *x, gint *y);"
gdk;gdk_window_get_parent;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkWindow * gdk_window_get_parent (GdkWindow *window);"
gdk;gdk_window_get_pointer;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkWindow* gdk_window_get_pointer (GdkWindow *window, gint *x, gint *y, GdkModifierType *mask);"
gdk;gdk_window_get_position;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_get_position (GdkWindow *window, gint *x, gint *y);"
gdk;gdk_window_get_root_coords;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_get_root_coords (GdkWindow *window, gint x, gint y, gint *root_x, gint *root_y);"
gdk;gdk_window_get_root_origin;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_get_root_origin (GdkWindow *window, gint *x, gint *y);"
gdk;gdk_window_get_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" GdkScreen* gdk_window_get_screen (GdkWindow *window);"
gdk;gdk_window_get_state;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" GdkWindowState gdk_window_get_state (GdkWindow *window);"
gdk;gdk_window_get_toplevel;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkWindow * gdk_window_get_toplevel (GdkWindow *window);"
gdk;gdk_window_get_toplevels;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" GList * gdk_window_get_toplevels (void);"
gdk;gdk_window_get_type_hint;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkWindowTypeHint gdk_window_get_type_hint (GdkWindow *window);"
gdk;gdk_window_get_update_area;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkRegion *gdk_window_get_update_area (GdkWindow *window);"
gdk;gdk_window_get_user_data;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_get_user_data (GdkWindow *window, gpointer *data);"
gdk;gdk_window_get_visual;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkVisual* gdk_window_get_visual (GdkWindow *window);"
gdk;gdk_window_get_width;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"int gdk_window_get_width (GdkWindow *window);"
gdk;gdk_window_get_window_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkWindowType gdk_window_get_window_type (GdkWindow *window);"
gdk;gdk_window_has_native;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" gboolean gdk_window_has_native (GdkWindow *window);"
gdk;gdk_window_hide;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_hide (GdkWindow *window);"
gdk;gdk_window_hints_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_window_hints_get_type (void) G_GNUC_CONST;"
gdk;gdk_window_iconify;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_iconify (GdkWindow *window);"
gdk;gdk_window_input_shape_combine_mask;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_input_shape_combine_mask (GdkWindow *window, GdkBitmap *mask, gint x, gint y);"
gdk;gdk_window_input_shape_combine_region;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_input_shape_combine_region (GdkWindow *window, const GdkRegion *shape_region, gint offset_x, gint offset_y);"
gdk;gdk_window_invalidate_maybe_recurse;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_invalidate_maybe_recurse (GdkWindow *window, const GdkRegion *region, gboolean (*child_func) (GdkWindow *, gpointer), gpointer user_data);"
gdk;gdk_window_invalidate_rect;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_invalidate_rect (GdkWindow *window, const GdkRectangle *rect, gboolean invalidate_children);"
gdk;gdk_window_invalidate_region;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_invalidate_region (GdkWindow *window, const GdkRegion *region, gboolean invalidate_children);"
gdk;gdk_window_is_destroyed;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"gboolean gdk_window_is_destroyed (GdkWindow *window);"
gdk;gdk_window_is_input_only;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"gboolean gdk_window_is_input_only (GdkWindow *window);"
gdk;gdk_window_is_shaped;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"gboolean gdk_window_is_shaped (GdkWindow *window);"
gdk;gdk_window_is_viewable;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"gboolean gdk_window_is_viewable (GdkWindow *window);"
gdk;gdk_window_is_visible;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" gboolean gdk_window_is_visible (GdkWindow *window);"
gdk;gdk_window_lookup;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkWindow* gdk_window_lookup (GdkNativeWindow anid);"
gdk;gdk_window_lookup_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkWindow* gdk_window_lookup_for_display (GdkDisplay *display, GdkNativeWindow anid);"
gdk;gdk_window_lower;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_lower (GdkWindow *window);"
gdk;gdk_window_maximize;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_maximize (GdkWindow *window);"
gdk;gdk_window_merge_child_input_shapes;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_merge_child_input_shapes (GdkWindow *window);"
gdk;gdk_window_merge_child_shapes;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_merge_child_shapes (GdkWindow *window);"
gdk;gdk_window_move;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_move (GdkWindow *window, gint x, gint y);"
gdk;gdk_window_move_region;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_move_region (GdkWindow *window, const GdkRegion *region, gint dx, gint dy);"
gdk;gdk_window_move_resize;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_move_resize (GdkWindow *window, gint x, gint y, gint width, gint height);"
gdk;gdk_window_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GdkWindow* gdk_window_new (GdkWindow *parent, GdkWindowAttr *attributes, gint attributes_mask);"
gdk;gdk_window_object_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"  GType gdk_window_object_get_type (void) G_GNUC_CONST;"
gdk;gdk_window_peek_children;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"GList * gdk_window_peek_children (GdkWindow *window);"
gdk;gdk_window_process_all_updates;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_process_all_updates (void);"
gdk;gdk_window_process_updates;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_process_updates (GdkWindow *window, gboolean update_children);"
gdk;gdk_window_raise;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_raise (GdkWindow *window);"
gdk;gdk_window_redirect_to_drawable;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_redirect_to_drawable (GdkWindow *window, GdkDrawable *drawable, gint src_x, gint src_y, gint dest_x, gint dest_y, gint width, gint height);"
gdk;gdk_window_register_dnd;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_register_dnd (GdkWindow *window);"
gdk;gdk_window_remove_filter;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_remove_filter (GdkWindow *window, GdkFilterFunc function, gpointer data);"
gdk;gdk_window_remove_redirection;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_remove_redirection (GdkWindow *window);"
gdk;gdk_window_reparent;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_reparent (GdkWindow *window, GdkWindow *new_parent, gint x, gint y);"
gdk;gdk_window_resize;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_resize (GdkWindow *window, gint width, gint height);"
gdk;gdk_window_restack;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_restack (GdkWindow *window, GdkWindow *sibling, gboolean above);"
gdk;gdk_window_scroll;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_scroll (GdkWindow *window, gint dx, gint dy);"
gdk;gdk_window_set_accept_focus;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_accept_focus (GdkWindow *window, gboolean accept_focus);"
gdk;gdk_window_set_back_pixmap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_back_pixmap (GdkWindow *window, GdkPixmap *pixmap, gboolean parent_relative);"
gdk;gdk_window_set_background;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_background (GdkWindow *window, const GdkColor *color);"
gdk;gdk_window_set_child_input_shapes;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_child_input_shapes (GdkWindow *window);"
gdk;gdk_window_set_child_shapes;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_set_child_shapes (GdkWindow *window);"
gdk;gdk_window_set_composited;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_composited (GdkWindow *window, gboolean composited);"
gdk;gdk_window_set_cursor;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_set_cursor (GdkWindow *window, GdkCursor *cursor);"
gdk;gdk_window_set_debug_updates;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_set_debug_updates (gboolean setting);"
gdk;gdk_window_set_decorations;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_decorations (GdkWindow *window, GdkWMDecoration decorations);"
gdk;gdk_window_set_events;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_events (GdkWindow *window, GdkEventMask event_mask);"
gdk;gdk_window_set_focus_on_map;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_focus_on_map (GdkWindow *window, gboolean focus_on_map);"
gdk;gdk_window_set_functions;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_functions (GdkWindow *window, GdkWMFunction functions);"
gdk;gdk_window_set_geometry_hints;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_set_geometry_hints (GdkWindow *window, const GdkGeometry *geometry, GdkWindowHints geom_mask);"
gdk;gdk_window_set_group;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_group (GdkWindow *window, GdkWindow *leader);"
gdk;gdk_window_set_hints;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_set_hints (GdkWindow *window, gint x, gint y, gint min_width, gint min_height, gint max_width, gint max_height, gint flags);"
gdk;gdk_window_set_icon;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_icon (GdkWindow *window, GdkWindow *icon_window, GdkPixmap *pixmap, GdkBitmap *mask);"
gdk;gdk_window_set_icon_list;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_set_icon_list (GdkWindow *window, GList *pixbufs);"
gdk;gdk_window_set_icon_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_icon_name (GdkWindow *window, const gchar *name);"
gdk;gdk_window_set_keep_above;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_keep_above (GdkWindow *window, gboolean setting);"
gdk;gdk_window_set_keep_below;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_keep_below (GdkWindow *window, gboolean setting);"
gdk;gdk_window_set_modal_hint;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_modal_hint (GdkWindow *window, gboolean modal);"
gdk;gdk_window_set_opacity;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_opacity (GdkWindow *window, gdouble opacity);"
gdk;gdk_window_set_override_redirect;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_override_redirect (GdkWindow *window, gboolean override_redirect);"
gdk;gdk_window_set_role;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_role (GdkWindow *window, const gchar *role);"
gdk;gdk_window_set_skip_pager_hint;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_skip_pager_hint (GdkWindow *window, gboolean skips_pager);"
gdk;gdk_window_set_skip_taskbar_hint;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_set_skip_taskbar_hint (GdkWindow *window, gboolean skips_taskbar);"
gdk;gdk_window_set_startup_id;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_startup_id (GdkWindow *window, const gchar *startup_id);"
gdk;gdk_window_set_static_gravities;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" gboolean gdk_window_set_static_gravities (GdkWindow *window, gboolean use_static);"
gdk;gdk_window_set_title;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_set_title (GdkWindow *window, const gchar *title);"
gdk;gdk_window_set_transient_for;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_transient_for (GdkWindow *window, GdkWindow *parent);"
gdk;gdk_window_set_type_hint;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_set_type_hint (GdkWindow *window, GdkWindowTypeHint hint);"
gdk;gdk_window_set_urgency_hint;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_urgency_hint (GdkWindow *window, gboolean urgent);"
gdk;gdk_window_set_user_data;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_set_user_data (GdkWindow *window, gpointer user_data);"
gdk;gdk_window_shape_combine_mask;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;" void gdk_window_shape_combine_mask (GdkWindow *window, GdkBitmap *mask, gint x, gint y);"
gdk;gdk_window_shape_combine_region;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_shape_combine_region (GdkWindow *window, const GdkRegion *shape_region, gint offset_x, gint offset_y);"
gdk;gdk_window_show;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_show (GdkWindow *window);"
gdk;gdk_window_show_unraised;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_show_unraised (GdkWindow *window);"
gdk;gdk_window_state_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_window_state_get_type (void) G_GNUC_CONST;"
gdk;gdk_window_stick;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_stick (GdkWindow *window);"
gdk;gdk_window_thaw_toplevel_updates_libgtk_only;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_thaw_toplevel_updates_libgtk_only (GdkWindow *window);"
gdk;gdk_window_thaw_updates;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_thaw_updates (GdkWindow *window);"
gdk;gdk_window_type_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_window_type_get_type (void) G_GNUC_CONST;"
gdk;gdk_window_type_hint_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_window_type_hint_get_type (void) G_GNUC_CONST;"
gdk;gdk_window_unfullscreen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_unfullscreen (GdkWindow *window);"
gdk;gdk_window_unmaximize;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_unmaximize (GdkWindow *window);"
gdk;gdk_window_unstick;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_unstick (GdkWindow *window);"
gdk;gdk_window_withdraw;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkwindow.h;"void gdk_window_withdraw (GdkWindow *window);"
gdk;gdk_wm_decoration_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_wm_decoration_get_type (void) G_GNUC_CONST;"
gdk;gdk_wm_function_get_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkenumtypes.h;" GType gdk_wm_function_get_type (void) G_GNUC_CONST;"
gdk;gdk_x11_atom_to_xatom;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" Atom gdk_x11_atom_to_xatom (GdkAtom atom);"
gdk;gdk_x11_atom_to_xatom_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" Atom gdk_x11_atom_to_xatom_for_display (GdkDisplay *display, GdkAtom atom);"
gdk;gdk_x11_colormap_foreign_new;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" GdkColormap *gdk_x11_colormap_foreign_new (GdkVisual *visual, Colormap xcolormap);"
gdk;gdk_x11_colormap_get_xcolormap;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"Colormap gdk_x11_colormap_get_xcolormap (GdkColormap *colormap);"
gdk;gdk_x11_colormap_get_xdisplay;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"Display *gdk_x11_colormap_get_xdisplay (GdkColormap *colormap);"
gdk;gdk_x11_cursor_get_xcursor;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"Cursor gdk_x11_cursor_get_xcursor (GdkCursor *cursor);"
gdk;gdk_x11_cursor_get_xdisplay;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"Display *gdk_x11_cursor_get_xdisplay (GdkCursor *cursor);"
gdk;gdk_x11_display_get_startup_notification_id;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" const gchar * gdk_x11_display_get_startup_notification_id (GdkDisplay *display);"
gdk;gdk_x11_display_get_user_time;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"guint32 gdk_x11_display_get_user_time (GdkDisplay *display);"
gdk;gdk_x11_display_get_xdisplay;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"Display *gdk_x11_display_get_xdisplay (GdkDisplay *display);"
gdk;gdk_x11_display_grab;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" void gdk_x11_display_grab (GdkDisplay *display);"
gdk;gdk_x11_display_string_to_compound_text;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"gint gdk_x11_display_string_to_compound_text (GdkDisplay *display, const gchar *str, GdkAtom *encoding, gint *format, guchar **ctext, gint *length);"
gdk;gdk_x11_display_text_property_to_text_list;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" gint gdk_x11_display_text_property_to_text_list (GdkDisplay *display, GdkAtom encoding, gint format, const guchar *text, gint length, gchar ***list);"
gdk;gdk_x11_display_ungrab;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"void gdk_x11_display_ungrab (GdkDisplay *display);"
gdk;gdk_x11_display_utf8_to_compound_text;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"gboolean gdk_x11_display_utf8_to_compound_text (GdkDisplay *display, const gchar *str, GdkAtom *encoding, gint *format, guchar **ctext, gint *length);"
gdk;gdk_x11_drawable_get_xdisplay;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" Display *gdk_x11_drawable_get_xdisplay (GdkDrawable *drawable);"
gdk;gdk_x11_drawable_get_xid;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"XID gdk_x11_drawable_get_xid (GdkDrawable *drawable);"
gdk;gdk_x11_font_get_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"const char * gdk_x11_font_get_name (GdkFont *font);"
gdk;gdk_x11_font_get_xdisplay;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" Display * gdk_x11_font_get_xdisplay (GdkFont *font);"
gdk;gdk_x11_font_get_xfont;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" gpointer gdk_x11_font_get_xfont (GdkFont *font);"
gdk;gdk_x11_free_compound_text;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"void gdk_x11_free_compound_text (guchar *ctext);"
gdk;gdk_x11_free_text_list;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"void gdk_x11_free_text_list (gchar **list);"
gdk;gdk_x11_gc_get_xdisplay;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" Display *gdk_x11_gc_get_xdisplay (GdkGC *gc);"
gdk;gdk_x11_gc_get_xgc;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"GC gdk_x11_gc_get_xgc (GdkGC *gc);"
gdk;gdk_x11_get_default_root_xwindow;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" Window gdk_x11_get_default_root_xwindow (void);"
gdk;gdk_x11_get_default_screen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"gint gdk_x11_get_default_screen (void);"
gdk;gdk_x11_get_default_xdisplay;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"Display *gdk_x11_get_default_xdisplay (void);"
gdk;gdk_x11_get_server_time;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" guint32 gdk_x11_get_server_time (GdkWindow *window);"
gdk;gdk_x11_get_xatom_by_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"Atom gdk_x11_get_xatom_by_name (const gchar *atom_name);"
gdk;gdk_x11_get_xatom_by_name_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"Atom gdk_x11_get_xatom_by_name_for_display (GdkDisplay *display, const gchar *atom_name);"
gdk;gdk_x11_get_xatom_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"const gchar * gdk_x11_get_xatom_name (Atom xatom);"
gdk;gdk_x11_get_xatom_name_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"const gchar * gdk_x11_get_xatom_name_for_display (GdkDisplay *display, Atom xatom);"
gdk;gdk_x11_grab_server;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" void gdk_x11_grab_server (void);"
gdk;gdk_x11_image_get_xdisplay;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"Display *gdk_x11_image_get_xdisplay (GdkImage *image);"
gdk;gdk_x11_image_get_ximage;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"XImage *gdk_x11_image_get_ximage (GdkImage *image);"
gdk;gdk_x11_lookup_xdisplay;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" GdkDisplay *gdk_x11_lookup_xdisplay (Display *xdisplay);"
gdk;gdk_x11_pixmap_get_drawable_impl;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"GdkDrawable *gdk_x11_pixmap_get_drawable_impl (GdkPixmap *pixmap);"
gdk;gdk_x11_register_standard_event_type;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"void gdk_x11_register_standard_event_type (GdkDisplay *display, gint event_base, gint n_events);"
gdk;gdk_x11_screen_get_monitor_output;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" XID gdk_x11_screen_get_monitor_output (GdkScreen *screen, gint monitor_num);"
gdk;gdk_x11_screen_get_screen_number;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"int gdk_x11_screen_get_screen_number (GdkScreen *screen);"
gdk;gdk_x11_screen_get_window_manager_name;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" const char* gdk_x11_screen_get_window_manager_name (GdkScreen *screen);"
gdk;gdk_x11_screen_get_xscreen;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" Screen * gdk_x11_screen_get_xscreen (GdkScreen *screen);"
gdk;gdk_x11_screen_lookup_visual;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" GdkVisual* gdk_x11_screen_lookup_visual (GdkScreen *screen, VisualID xvisualid);"
gdk;gdk_x11_screen_supports_net_wm_hint;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" gboolean gdk_x11_screen_supports_net_wm_hint (GdkScreen *screen, GdkAtom property);"
gdk;gdk_x11_set_sm_client_id;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" void gdk_x11_set_sm_client_id (const gchar *sm_client_id);"
gdk;gdk_x11_ungrab_server;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"void gdk_x11_ungrab_server (void);"
gdk;gdk_x11_visual_get_xvisual;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"Visual * gdk_x11_visual_get_xvisual (GdkVisual *visual);"
gdk;gdk_x11_window_foreign_new_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" GdkWindow *gdk_x11_window_foreign_new_for_display (GdkDisplay *display, Window window);"
gdk;gdk_x11_window_get_drawable_impl;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"GdkDrawable *gdk_x11_window_get_drawable_impl (GdkWindow *window);"
gdk;gdk_x11_window_lookup_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"GdkWindow *gdk_x11_window_lookup_for_display (GdkDisplay *display, Window window);"
gdk;gdk_x11_window_move_to_current_desktop;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"void gdk_x11_window_move_to_current_desktop (GdkWindow *window);"
gdk;gdk_x11_window_set_user_time;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"void gdk_x11_window_set_user_time (GdkWindow *window, guint32 timestamp);"
gdk;gdk_x11_xatom_to_atom;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"GdkAtom gdk_x11_xatom_to_atom (Atom xatom);"
gdk;gdk_x11_xatom_to_atom_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;"GdkAtom gdk_x11_xatom_to_atom_for_display (GdkDisplay *display, Atom xatom);"
gdk;gdk_xid_table_lookup;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" gpointer gdk_xid_table_lookup (XID xid);"
gdk;gdk_xid_table_lookup_for_display;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" gpointer gdk_xid_table_lookup_for_display (GdkDisplay *display, XID xid);"
gdk;gdkx_colormap_get;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" GdkColormap* gdkx_colormap_get (Colormap xcolormap);"
gdk;gdkx_visual_get;gdk-auto.f90;/usr/include/gtk-2.0/gdk/gdkx.h;" GdkVisual* gdkx_visual_get (VisualID xvisualid);"
gdk_pixbuf;gdk_colorspace_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h;" GType gdk_colorspace_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_interp_type_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h;" GType gdk_interp_type_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_pixbuf_add_alpha;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf *gdk_pixbuf_add_alpha (const GdkPixbuf *pixbuf, gboolean substitute_color, guchar r, guchar g, guchar b);"
gdk_pixbuf;gdk_pixbuf_alpha_mode_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h;"  GType gdk_pixbuf_alpha_mode_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_pixbuf_animation_get_height;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"int gdk_pixbuf_animation_get_height (GdkPixbufAnimation *animation);"
gdk_pixbuf;gdk_pixbuf_animation_get_iter;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;" GdkPixbufAnimationIter *gdk_pixbuf_animation_get_iter (GdkPixbufAnimation *animation, const GTimeVal *start_time);"
gdk_pixbuf;gdk_pixbuf_animation_get_static_image;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"GdkPixbuf *gdk_pixbuf_animation_get_static_image (GdkPixbufAnimation *animation);"
gdk_pixbuf;gdk_pixbuf_animation_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"  GType gdk_pixbuf_animation_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_pixbuf_animation_get_width;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;" int gdk_pixbuf_animation_get_width (GdkPixbufAnimation *animation);"
gdk_pixbuf;gdk_pixbuf_animation_is_static_image;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"gboolean gdk_pixbuf_animation_is_static_image (GdkPixbufAnimation *animation);"
gdk_pixbuf;gdk_pixbuf_animation_iter_advance;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"gboolean gdk_pixbuf_animation_iter_advance (GdkPixbufAnimationIter *iter, const GTimeVal *current_time);"
gdk_pixbuf;gdk_pixbuf_animation_iter_get_delay_time;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"int gdk_pixbuf_animation_iter_get_delay_time (GdkPixbufAnimationIter *iter);"
gdk_pixbuf;gdk_pixbuf_animation_iter_get_pixbuf;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"GdkPixbuf *gdk_pixbuf_animation_iter_get_pixbuf (GdkPixbufAnimationIter *iter);"
gdk_pixbuf;gdk_pixbuf_animation_iter_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"GType gdk_pixbuf_animation_iter_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_pixbuf_animation_iter_on_currently_loading_frame;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame (GdkPixbufAnimationIter *iter);"
gdk_pixbuf;gdk_pixbuf_animation_new_from_resource;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"GdkPixbufAnimation *gdk_pixbuf_animation_new_from_resource(const char *resource_path, GError **error);"
gdk_pixbuf;gdk_pixbuf_animation_new_from_stream;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream (GInputStream *stream, GCancellable *cancellable, GError **error);"
gdk_pixbuf;gdk_pixbuf_animation_new_from_stream_async;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"void gdk_pixbuf_animation_new_from_stream_async (GInputStream *stream, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
gdk_pixbuf;gdk_pixbuf_animation_new_from_stream_finish;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream_finish (GAsyncResult*async_result, GError **error);"
gdk_pixbuf;gdk_pixbuf_animation_ref;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;" GdkPixbufAnimation *gdk_pixbuf_animation_ref (GdkPixbufAnimation *animation);"
gdk_pixbuf;gdk_pixbuf_animation_unref;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;" void gdk_pixbuf_animation_unref (GdkPixbufAnimation *animation);"
gdk_pixbuf;gdk_pixbuf_apply_embedded_orientation;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf *gdk_pixbuf_apply_embedded_orientation (GdkPixbuf *src);"
gdk_pixbuf;gdk_pixbuf_composite;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h;"void gdk_pixbuf_composite (const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type, int overall_alpha);"
gdk_pixbuf;gdk_pixbuf_composite_color;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h;"void gdk_pixbuf_composite_color (const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type, int overall_alpha, int check_x, int check_y, int check_size, guint32 color1, guint32 color2);"
gdk_pixbuf;gdk_pixbuf_composite_color_simple;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h;" GdkPixbuf *gdk_pixbuf_composite_color_simple (const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type, int overall_alpha, int check_size, guint32 color1, guint32 color2);"
gdk_pixbuf;gdk_pixbuf_copy;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf *gdk_pixbuf_copy (const GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_copy_area;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" void gdk_pixbuf_copy_area (const GdkPixbuf *src_pixbuf, int src_x, int src_y, int width, int height, GdkPixbuf *dest_pixbuf, int dest_x, int dest_y);"
gdk_pixbuf;gdk_pixbuf_error_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h;" GType gdk_pixbuf_error_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_pixbuf_error_quark;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"  GQuark gdk_pixbuf_error_quark (void);"
gdk_pixbuf;gdk_pixbuf_fill;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" void gdk_pixbuf_fill (GdkPixbuf *pixbuf, guint32 pixel);"
gdk_pixbuf;gdk_pixbuf_flip;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h;"GdkPixbuf *gdk_pixbuf_flip (const GdkPixbuf *src, gboolean horizontal);"
gdk_pixbuf;gdk_pixbuf_format_copy;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;" GdkPixbufFormat *gdk_pixbuf_format_copy (const GdkPixbufFormat *format);"
gdk_pixbuf;gdk_pixbuf_format_free;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"void gdk_pixbuf_format_free (GdkPixbufFormat *format);"
gdk_pixbuf;gdk_pixbuf_format_get_description;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"gchar *gdk_pixbuf_format_get_description (GdkPixbufFormat *format);"
gdk_pixbuf;gdk_pixbuf_format_get_extensions;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"gchar **gdk_pixbuf_format_get_extensions (GdkPixbufFormat *format);"
gdk_pixbuf;gdk_pixbuf_format_get_license;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"gchar *gdk_pixbuf_format_get_license (GdkPixbufFormat *format);"
gdk_pixbuf;gdk_pixbuf_format_get_mime_types;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"gchar **gdk_pixbuf_format_get_mime_types (GdkPixbufFormat *format);"
gdk_pixbuf;gdk_pixbuf_format_get_name;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"gchar *gdk_pixbuf_format_get_name (GdkPixbufFormat *format);"
gdk_pixbuf;gdk_pixbuf_format_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"   GType gdk_pixbuf_format_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_pixbuf_format_is_disabled;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"gboolean gdk_pixbuf_format_is_disabled (GdkPixbufFormat *format);"
gdk_pixbuf;gdk_pixbuf_format_is_scalable;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"gboolean gdk_pixbuf_format_is_scalable (GdkPixbufFormat *format);"
gdk_pixbuf;gdk_pixbuf_format_is_writable;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"gboolean gdk_pixbuf_format_is_writable (GdkPixbufFormat *format);"
gdk_pixbuf;gdk_pixbuf_format_set_disabled;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"void gdk_pixbuf_format_set_disabled (GdkPixbufFormat *format, gboolean disabled);"
gdk_pixbuf;gdk_pixbuf_from_pixdata;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixdata.h;" GdkPixbuf* gdk_pixbuf_from_pixdata (const GdkPixdata *pixdata, gboolean copy_pixels, GError **error);"
gdk_pixbuf;gdk_pixbuf_get_bits_per_sample;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"int gdk_pixbuf_get_bits_per_sample (const GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_get_byte_length;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"gsize gdk_pixbuf_get_byte_length (const GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_get_colorspace;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkColorspace gdk_pixbuf_get_colorspace (const GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_get_file_info;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;" GdkPixbufFormat *gdk_pixbuf_get_file_info (const gchar *filename, gint *width, gint *height);"
gdk_pixbuf;gdk_pixbuf_get_file_info_async;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"void gdk_pixbuf_get_file_info_async (const gchar *filename, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
gdk_pixbuf;gdk_pixbuf_get_file_info_finish;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"GdkPixbufFormat *gdk_pixbuf_get_file_info_finish (GAsyncResult *async_result, gint *width, gint *height, GError **error);"
gdk_pixbuf;gdk_pixbuf_get_formats;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;" GSList *gdk_pixbuf_get_formats (void);"
gdk_pixbuf;gdk_pixbuf_get_has_alpha;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"gboolean gdk_pixbuf_get_has_alpha (const GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_get_height;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"int gdk_pixbuf_get_height (const GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_get_n_channels;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"int gdk_pixbuf_get_n_channels (const GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_get_option;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" const gchar * gdk_pixbuf_get_option (GdkPixbuf *pixbuf, const gchar *key);"
gdk_pixbuf;gdk_pixbuf_get_options;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"GHashTable * gdk_pixbuf_get_options (GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_get_pixels;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"guchar *gdk_pixbuf_get_pixels (const GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_get_pixels_with_length;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" guchar *gdk_pixbuf_get_pixels_with_length (const GdkPixbuf *pixbuf, guint *length);"
gdk_pixbuf;gdk_pixbuf_get_rowstride;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"int gdk_pixbuf_get_rowstride (const GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"    GType gdk_pixbuf_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_pixbuf_get_width;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"int gdk_pixbuf_get_width (const GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_loader_close;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h;"gboolean gdk_pixbuf_loader_close (GdkPixbufLoader *loader, GError **error);"
gdk_pixbuf;gdk_pixbuf_loader_get_animation;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h;"GdkPixbufAnimation * gdk_pixbuf_loader_get_animation (GdkPixbufLoader *loader);"
gdk_pixbuf;gdk_pixbuf_loader_get_format;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h;"GdkPixbufFormat *gdk_pixbuf_loader_get_format (GdkPixbufLoader *loader);"
gdk_pixbuf;gdk_pixbuf_loader_get_pixbuf;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h;"GdkPixbuf * gdk_pixbuf_loader_get_pixbuf (GdkPixbufLoader *loader);"
gdk_pixbuf;gdk_pixbuf_loader_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h;"  GType gdk_pixbuf_loader_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_pixbuf_loader_new;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h;"GdkPixbufLoader * gdk_pixbuf_loader_new (void);"
gdk_pixbuf;gdk_pixbuf_loader_new_with_mime_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h;"GdkPixbufLoader * gdk_pixbuf_loader_new_with_mime_type (const char *mime_type, GError **error);"
gdk_pixbuf;gdk_pixbuf_loader_new_with_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h;"GdkPixbufLoader * gdk_pixbuf_loader_new_with_type (const char *image_type, GError **error);"
gdk_pixbuf;gdk_pixbuf_loader_set_size;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h;"void gdk_pixbuf_loader_set_size (GdkPixbufLoader *loader, int width, int height);"
gdk_pixbuf;gdk_pixbuf_loader_write;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h;"gboolean gdk_pixbuf_loader_write (GdkPixbufLoader *loader, const guchar *buf, gsize count, GError **error);"
gdk_pixbuf;gdk_pixbuf_loader_write_bytes;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h;"gboolean gdk_pixbuf_loader_write_bytes (GdkPixbufLoader *loader, GBytes *buffer, GError **error);"
gdk_pixbuf;gdk_pixbuf_new;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"    GdkPixbuf *gdk_pixbuf_new (GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height);"
gdk_pixbuf;gdk_pixbuf_new_from_bytes;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf *gdk_pixbuf_new_from_bytes (GBytes *data, GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height, int rowstride);"
gdk_pixbuf;gdk_pixbuf_new_from_data;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf *gdk_pixbuf_new_from_data (const guchar *data, GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height, int rowstride, GdkPixbufDestroyNotify destroy_fn, gpointer destroy_fn_data);"
gdk_pixbuf;gdk_pixbuf_new_from_inline;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf* gdk_pixbuf_new_from_inline (gint data_length, const guint8 *data, gboolean copy_pixels, GError **error);"
gdk_pixbuf;gdk_pixbuf_new_from_resource;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"GdkPixbuf *gdk_pixbuf_new_from_resource (const char *resource_path, GError **error);"
gdk_pixbuf;gdk_pixbuf_new_from_resource_at_scale;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"GdkPixbuf *gdk_pixbuf_new_from_resource_at_scale (const char *resource_path, int width, int height, gboolean preserve_aspect_ratio, GError **error);"
gdk_pixbuf;gdk_pixbuf_new_from_stream;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf *gdk_pixbuf_new_from_stream (GInputStream *stream, GCancellable *cancellable, GError **error);"
gdk_pixbuf;gdk_pixbuf_new_from_stream_async;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" void gdk_pixbuf_new_from_stream_async (GInputStream *stream, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
gdk_pixbuf;gdk_pixbuf_new_from_stream_at_scale;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf *gdk_pixbuf_new_from_stream_at_scale (GInputStream *stream, gint width, gint height, gboolean preserve_aspect_ratio, GCancellable *cancellable, GError **error);"
gdk_pixbuf;gdk_pixbuf_new_from_stream_at_scale_async;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" void gdk_pixbuf_new_from_stream_at_scale_async (GInputStream *stream, gint width, gint height, gboolean preserve_aspect_ratio, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);"
gdk_pixbuf;gdk_pixbuf_new_from_stream_finish;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf *gdk_pixbuf_new_from_stream_finish (GAsyncResult *async_result, GError **error);"
gdk_pixbuf;gdk_pixbuf_new_from_xpm_data;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf *gdk_pixbuf_new_from_xpm_data (const char **data);"
gdk_pixbuf;gdk_pixbuf_new_subpixbuf;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf *gdk_pixbuf_new_subpixbuf (GdkPixbuf *src_pixbuf, int src_x, int src_y, int width, int height);"
gdk_pixbuf;gdk_pixbuf_non_anim_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"         GType gdk_pixbuf_non_anim_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_pixbuf_non_anim_new;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;"GdkPixbufAnimation* gdk_pixbuf_non_anim_new (GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_read_pixel_bytes;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"GBytes * gdk_pixbuf_read_pixel_bytes (const GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_read_pixels;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" const guint8* gdk_pixbuf_read_pixels (const GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_ref;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf *gdk_pixbuf_ref (GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_rotate_simple;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h;" GdkPixbuf *gdk_pixbuf_rotate_simple (const GdkPixbuf *src, GdkPixbufRotation angle);"
gdk_pixbuf;gdk_pixbuf_rotation_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h;" GType gdk_pixbuf_rotation_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_pixbuf_saturate_and_pixelate;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" void gdk_pixbuf_saturate_and_pixelate (const GdkPixbuf *src, GdkPixbuf *dest, gfloat saturation, gboolean pixelate);"
gdk_pixbuf;gdk_pixbuf_save_to_bufferv;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" gboolean gdk_pixbuf_save_to_bufferv (GdkPixbuf *pixbuf, gchar **buffer, gsize *buffer_size, const char *type, char **option_keys, char **option_values, GError **error);"
gdk_pixbuf;gdk_pixbuf_save_to_callbackv;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" gboolean gdk_pixbuf_save_to_callbackv (GdkPixbuf *pixbuf, GdkPixbufSaveFunc save_func, gpointer user_data, const char *type, char **option_keys, char **option_values, GError **error);"
gdk_pixbuf;gdk_pixbuf_save_to_stream_finish;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" gboolean gdk_pixbuf_save_to_stream_finish (GAsyncResult *async_result, GError **error);"
gdk_pixbuf;gdk_pixbuf_scale;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h;"  void gdk_pixbuf_scale (const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type);"
gdk_pixbuf;gdk_pixbuf_scale_simple;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h;" GdkPixbuf *gdk_pixbuf_scale_simple (const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type);"
gdk_pixbuf;gdk_pixbuf_set_option;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h;"    gboolean gdk_pixbuf_set_option (GdkPixbuf *pixbuf, const gchar *key, const gchar *value);"
gdk_pixbuf;gdk_pixbuf_simple_anim_add_frame;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h;"void gdk_pixbuf_simple_anim_add_frame (GdkPixbufSimpleAnim *animation, GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_simple_anim_get_loop;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h;"gboolean gdk_pixbuf_simple_anim_get_loop (GdkPixbufSimpleAnim *animation);"
gdk_pixbuf;gdk_pixbuf_simple_anim_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h;"  GType gdk_pixbuf_simple_anim_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_pixbuf_simple_anim_iter_get_type;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h;"GType gdk_pixbuf_simple_anim_iter_get_type (void) G_GNUC_CONST;"
gdk_pixbuf;gdk_pixbuf_simple_anim_new;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h;" GdkPixbufSimpleAnim *gdk_pixbuf_simple_anim_new (gint width, gint height, gfloat rate);"
gdk_pixbuf;gdk_pixbuf_simple_anim_set_loop;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h;"void gdk_pixbuf_simple_anim_set_loop (GdkPixbufSimpleAnim *animation, gboolean loop);"
gdk_pixbuf;gdk_pixbuf_unref;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" void gdk_pixbuf_unref (GdkPixbuf *pixbuf);"
gdk_pixbuf;gdk_pixbuf_xlib_get_from_drawable;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlib.h;"    GdkPixbuf *gdk_pixbuf_xlib_get_from_drawable (GdkPixbuf *dest, Drawable src, Colormap cmap, Visual *visual, int src_x, int src_y, int dest_x, int dest_y, int width, int height);"
gdk_pixbuf;gdk_pixbuf_xlib_init;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlib.h;"     void gdk_pixbuf_xlib_init (Display *display, int screen_num);"
gdk_pixbuf;gdk_pixbuf_xlib_init_with_depth;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlib.h;" void gdk_pixbuf_xlib_init_with_depth (Display *display, int screen_num, int prefDepth);"
gdk_pixbuf;gdk_pixbuf_xlib_render_pixmap_and_mask;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlib.h;" void gdk_pixbuf_xlib_render_pixmap_and_mask (GdkPixbuf *pixbuf, Pixmap *pixmap_return, Pixmap *mask_return, int alpha_threshold);"
gdk_pixbuf;gdk_pixbuf_xlib_render_threshold_alpha;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlib.h;"    void gdk_pixbuf_xlib_render_threshold_alpha (GdkPixbuf *pixbuf, Pixmap bitmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int alpha_threshold);"
gdk_pixbuf;gdk_pixbuf_xlib_render_to_drawable;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlib.h;" void gdk_pixbuf_xlib_render_to_drawable (GdkPixbuf *pixbuf, Drawable drawable, GC gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, XlibRgbDither dither, int x_dither, int y_dither);"
gdk_pixbuf;gdk_pixbuf_xlib_render_to_drawable_alpha;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlib.h;" void gdk_pixbuf_xlib_render_to_drawable_alpha (GdkPixbuf *pixbuf, Drawable drawable, int src_x, int src_y, int dest_x, int dest_y, int width, int height, GdkPixbufAlphaMode alpha_mode, int alpha_threshold, XlibRgbDither dither, int x_dither, int y_dither);"
gdk_pixbuf;gdk_pixdata_deserialize;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixdata.h;" gboolean gdk_pixdata_deserialize (GdkPixdata *pixdata, guint stream_length, const guint8 *stream, GError **error);"
gdk_pixbuf;gdk_pixdata_from_pixbuf;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixdata.h;" gpointer gdk_pixdata_from_pixbuf (GdkPixdata *pixdata, const GdkPixbuf *pixbuf, gboolean use_rle);"
gdk_pixbuf;gdk_pixdata_serialize;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixdata.h;"  guint8* gdk_pixdata_serialize (const GdkPixdata *pixdata, guint *stream_length_p);"
gdk_pixbuf;gdk_pixdata_to_csource;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixdata.h;"   GString* gdk_pixdata_to_csource (GdkPixdata *pixdata, const gchar *name, GdkPixdataDumpType dump_type);"
gdk_pixbuf;xlib_draw_gray_image;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" void xlib_draw_gray_image (Drawable drawable, GC gc, int x, int y, int width, int height, XlibRgbDither dith, unsigned char *buf, int rowstride);"
gdk_pixbuf;xlib_draw_indexed_image;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" void xlib_draw_indexed_image (Drawable drawable, GC gc, int x, int y, int width, int height, XlibRgbDither dith, unsigned char *buf, int rowstride, XlibRgbCmap *cmap);"
gdk_pixbuf;xlib_draw_rgb_32_image;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" void xlib_draw_rgb_32_image (Drawable drawable, GC gc, int x, int y, int width, int height, XlibRgbDither dith, unsigned char *buf, int rowstride);"
gdk_pixbuf;xlib_draw_rgb_image;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" void xlib_draw_rgb_image (Drawable drawable, GC gc, int x, int y, int width, int height, XlibRgbDither dith, unsigned char *rgb_buf, int rowstride);"
gdk_pixbuf;xlib_draw_rgb_image_dithalign;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" void xlib_draw_rgb_image_dithalign (Drawable drawable, GC gc, int x, int y, int width, int height, XlibRgbDither dith, unsigned char *rgb_buf, int rowstride, int xdith, int ydith);"
gdk_pixbuf;xlib_rgb_cmap_free;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" void xlib_rgb_cmap_free (XlibRgbCmap *cmap);"
gdk_pixbuf;xlib_rgb_cmap_new;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" XlibRgbCmap * xlib_rgb_cmap_new (guint32 *colors, int n_colors);"
gdk_pixbuf;xlib_rgb_ditherable;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" Bool xlib_rgb_ditherable (void);"
gdk_pixbuf;xlib_rgb_gc_set_background;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" void xlib_rgb_gc_set_background (GC gc, guint32 rgb);"
gdk_pixbuf;xlib_rgb_gc_set_foreground;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" void xlib_rgb_gc_set_foreground (GC gc, guint32 rgb);"
gdk_pixbuf;xlib_rgb_get_cmap;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" Colormap xlib_rgb_get_cmap (void);"
gdk_pixbuf;xlib_rgb_get_depth;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" int xlib_rgb_get_depth (void);"
gdk_pixbuf;xlib_rgb_get_display;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" Display * xlib_rgb_get_display (void);"
gdk_pixbuf;xlib_rgb_get_screen;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" Screen * xlib_rgb_get_screen (void);"
gdk_pixbuf;xlib_rgb_get_visual;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" Visual * xlib_rgb_get_visual (void);"
gdk_pixbuf;xlib_rgb_get_visual_info;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" XVisualInfo * xlib_rgb_get_visual_info (void);"
gdk_pixbuf;xlib_rgb_init;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;"  void xlib_rgb_init (Display *display, Screen *screen);"
gdk_pixbuf;xlib_rgb_init_with_depth;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;"void xlib_rgb_init_with_depth (Display *display, Screen *screen, int prefDepth);"
gdk_pixbuf;xlib_rgb_set_install;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" void xlib_rgb_set_install (Bool install);"
gdk_pixbuf;xlib_rgb_set_min_colors;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" void xlib_rgb_set_min_colors (int min_colors);"
gdk_pixbuf;xlib_rgb_set_verbose;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" void xlib_rgb_set_verbose (Bool verbose);"
gdk_pixbuf;xlib_rgb_xpixel_from_rgb;gdk-pixbuf-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf-xlib/gdk-pixbuf-xlibrgb.h;" unsigned long xlib_rgb_xpixel_from_rgb (guint32 rgb);"
gtk;GSEAL;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;" GtkImageType GSEAL (storage_type);"
gtk;gtk_about_dialog_get_artists;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"const gchar* const * gtk_about_dialog_get_artists (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_authors;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"const gchar* const * gtk_about_dialog_get_authors (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_comments;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"const gchar * gtk_about_dialog_get_comments (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_copyright;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"const gchar * gtk_about_dialog_get_copyright (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_documenters;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"const gchar* const * gtk_about_dialog_get_documenters (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_license;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"const gchar * gtk_about_dialog_get_license (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_logo;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"GdkPixbuf *gtk_about_dialog_get_logo (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_logo_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"const gchar * gtk_about_dialog_get_logo_icon_name (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;" const gchar * gtk_about_dialog_get_name (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_program_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;" const gchar * gtk_about_dialog_get_program_name (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_translator_credits;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"const gchar * gtk_about_dialog_get_translator_credits (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"  GType gtk_about_dialog_get_type (void) G_GNUC_CONST;"
gtk;gtk_about_dialog_get_version;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"const gchar * gtk_about_dialog_get_version (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_website;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;" const gchar * gtk_about_dialog_get_website (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_website_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"const gchar * gtk_about_dialog_get_website_label (GtkAboutDialog *about);"
gtk;gtk_about_dialog_get_wrap_license;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;" gboolean gtk_about_dialog_get_wrap_license (GtkAboutDialog *about);"
gtk;gtk_about_dialog_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"GtkWidget *gtk_about_dialog_new (void);"
gtk;gtk_about_dialog_set_artists;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_artists (GtkAboutDialog *about, const gchar **artists);"
gtk;gtk_about_dialog_set_authors;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_authors (GtkAboutDialog *about, const gchar **authors);"
gtk;gtk_about_dialog_set_comments;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_comments (GtkAboutDialog *about, const gchar *comments);"
gtk;gtk_about_dialog_set_copyright;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_copyright (GtkAboutDialog *about, const gchar *copyright);"
gtk;gtk_about_dialog_set_documenters;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_documenters (GtkAboutDialog *about, const gchar **documenters);"
gtk;gtk_about_dialog_set_email_hook;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;" GtkAboutDialogActivateLinkFunc gtk_about_dialog_set_email_hook (GtkAboutDialogActivateLinkFunc func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_about_dialog_set_license;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_license (GtkAboutDialog *about, const gchar *license);"
gtk;gtk_about_dialog_set_logo;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_logo (GtkAboutDialog *about, GdkPixbuf *logo);"
gtk;gtk_about_dialog_set_logo_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_logo_icon_name (GtkAboutDialog *about, const gchar *icon_name);"
gtk;gtk_about_dialog_set_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_name (GtkAboutDialog *about, const gchar *name);"
gtk;gtk_about_dialog_set_program_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_program_name (GtkAboutDialog *about, const gchar *name);"
gtk;gtk_about_dialog_set_translator_credits;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_translator_credits (GtkAboutDialog *about, const gchar *translator_credits);"
gtk;gtk_about_dialog_set_url_hook;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"GtkAboutDialogActivateLinkFunc gtk_about_dialog_set_url_hook (GtkAboutDialogActivateLinkFunc func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_about_dialog_set_version;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_version (GtkAboutDialog *about, const gchar *version);"
gtk;gtk_about_dialog_set_website;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_website (GtkAboutDialog *about, const gchar *website);"
gtk;gtk_about_dialog_set_website_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_website_label (GtkAboutDialog *about, const gchar *website_label);"
gtk;gtk_about_dialog_set_wrap_license;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaboutdialog.h;"void gtk_about_dialog_set_wrap_license (GtkAboutDialog *about, gboolean wrap_license);"
gtk;gtk_accel_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;"  GType gtk_accel_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_accel_group_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"gboolean gtk_accel_group_activate (GtkAccelGroup *accel_group, GQuark accel_quark, GObject *acceleratable, guint accel_key, GdkModifierType accel_mods);"
gtk;gtk_accel_group_connect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"void gtk_accel_group_connect (GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags, GClosure *closure);"
gtk;gtk_accel_group_connect_by_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"void gtk_accel_group_connect_by_path (GtkAccelGroup *accel_group, const gchar *accel_path, GClosure *closure);"
gtk;gtk_accel_group_disconnect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"gboolean gtk_accel_group_disconnect (GtkAccelGroup *accel_group, GClosure *closure);"
gtk;gtk_accel_group_disconnect_key;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"gboolean gtk_accel_group_disconnect_key (GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods);"
gtk;gtk_accel_group_find;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"GtkAccelKey* gtk_accel_group_find (GtkAccelGroup *accel_group, GtkAccelGroupFindFunc find_func, gpointer data);"
gtk;gtk_accel_group_from_accel_closure;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"GtkAccelGroup* gtk_accel_group_from_accel_closure (GClosure *closure);"
gtk;gtk_accel_group_get_is_locked;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"gboolean gtk_accel_group_get_is_locked (GtkAccelGroup *accel_group);"
gtk;gtk_accel_group_get_modifier_mask;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"GdkModifierType gtk_accel_group_get_modifier_mask (GtkAccelGroup *accel_group);"
gtk;gtk_accel_group_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"  GType gtk_accel_group_get_type (void) G_GNUC_CONST;"
gtk;gtk_accel_group_lock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"void gtk_accel_group_lock (GtkAccelGroup *accel_group);"
gtk;gtk_accel_group_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"GtkAccelGroup* gtk_accel_group_new (void);"
gtk;gtk_accel_group_query;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;" GtkAccelGroupEntry* gtk_accel_group_query (GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, guint *n_entries);"
gtk;gtk_accel_group_unlock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"void gtk_accel_group_unlock (GtkAccelGroup *accel_group);"
gtk;gtk_accel_groups_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"gboolean gtk_accel_groups_activate (GObject *object, guint accel_key, GdkModifierType accel_mods);"
gtk;gtk_accel_groups_from_object;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"GSList* gtk_accel_groups_from_object (GObject *object);"
gtk;gtk_accel_label_get_accel_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccellabel.h;"GtkWidget* gtk_accel_label_get_accel_widget (GtkAccelLabel *accel_label);"
gtk;gtk_accel_label_get_accel_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccellabel.h;"guint gtk_accel_label_get_accel_width (GtkAccelLabel *accel_label);"
gtk;gtk_accel_label_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccellabel.h;"  GType gtk_accel_label_get_type (void) G_GNUC_CONST;"
gtk;gtk_accel_label_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccellabel.h;"GtkWidget* gtk_accel_label_new (const gchar *string);"
gtk;gtk_accel_label_refetch;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccellabel.h;"gboolean gtk_accel_label_refetch (GtkAccelLabel *accel_label);"
gtk;gtk_accel_label_set_accel_closure;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccellabel.h;"void gtk_accel_label_set_accel_closure (GtkAccelLabel *accel_label, GClosure *accel_closure);"
gtk;gtk_accel_label_set_accel_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccellabel.h;"void gtk_accel_label_set_accel_widget (GtkAccelLabel *accel_label, GtkWidget *accel_widget);"
gtk;gtk_accel_map_add_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;"  void gtk_accel_map_add_entry (const gchar *accel_path, guint accel_key, GdkModifierType accel_mods);"
gtk;gtk_accel_map_add_filter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;" void gtk_accel_map_add_filter (const gchar *filter_pattern);"
gtk;gtk_accel_map_change_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;"gboolean gtk_accel_map_change_entry (const gchar *accel_path, guint accel_key, GdkModifierType accel_mods, gboolean replace);"
gtk;gtk_accel_map_foreach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;"void gtk_accel_map_foreach (gpointer data, GtkAccelMapForeach foreach_func);"
gtk;gtk_accel_map_foreach_unfiltered;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;"void gtk_accel_map_foreach_unfiltered (gpointer data, GtkAccelMapForeach foreach_func);"
gtk;gtk_accel_map_get;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;"GtkAccelMap *gtk_accel_map_get (void);"
gtk;gtk_accel_map_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;" GType gtk_accel_map_get_type (void) G_GNUC_CONST;"
gtk;gtk_accel_map_load_fd;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;"void gtk_accel_map_load_fd (gint fd);"
gtk;gtk_accel_map_load_scanner;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;"void gtk_accel_map_load_scanner (GScanner *scanner);"
gtk;gtk_accel_map_lock_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;" void gtk_accel_map_lock_path (const gchar *accel_path);"
gtk;gtk_accel_map_lookup_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;"gboolean gtk_accel_map_lookup_entry (const gchar *accel_path, GtkAccelKey *key);"
gtk;gtk_accel_map_save_fd;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;"void gtk_accel_map_save_fd (gint fd);"
gtk;gtk_accel_map_unlock_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;"void gtk_accel_map_unlock_path (const gchar *accel_path);"
gtk;gtk_accelerator_get_default_mod_mask;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"guint gtk_accelerator_get_default_mod_mask (void);"
gtk;gtk_accelerator_get_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"gchar* gtk_accelerator_get_label (guint accelerator_key, GdkModifierType accelerator_mods);"
gtk;gtk_accelerator_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"gchar* gtk_accelerator_name (guint accelerator_key, GdkModifierType accelerator_mods);"
gtk;gtk_accelerator_parse;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"void gtk_accelerator_parse (const gchar *accelerator, guint *accelerator_key, GdkModifierType *accelerator_mods);"
gtk;gtk_accelerator_set_default_mod_mask;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;"void gtk_accelerator_set_default_mod_mask (GdkModifierType default_mod_mask);"
gtk;gtk_accelerator_valid;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelgroup.h;" gboolean gtk_accelerator_valid (guint keyval, GdkModifierType modifiers) G_GNUC_CONST;"
gtk;gtk_accessible_connect_widget_destroyed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccessible.h;"void gtk_accessible_connect_widget_destroyed (GtkAccessible *accessible);"
gtk;gtk_accessible_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccessible.h;"    GType gtk_accessible_get_type (void) G_GNUC_CONST;"
gtk;gtk_accessible_get_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccessible.h;"GtkWidget* gtk_accessible_get_widget (GtkAccessible *accessible);"
gtk;gtk_accessible_set_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccessible.h;" void gtk_accessible_set_widget (GtkAccessible *accessible, GtkWidget *widget);"
gtk;gtk_action_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_activate (GtkAction *action);"
gtk;gtk_action_block_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;" void gtk_action_block_activate (GtkAction *action);"
gtk;gtk_action_block_activate_from;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_block_activate_from (GtkAction *action, GtkWidget *proxy);"
gtk;gtk_action_connect_accelerator;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_connect_accelerator (GtkAction *action);"
gtk;gtk_action_connect_proxy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_connect_proxy (GtkAction *action, GtkWidget *proxy);"
gtk;gtk_action_create_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"GtkWidget * gtk_action_create_icon (GtkAction *action, GtkIconSize icon_size);"
gtk;gtk_action_create_menu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"GtkWidget * gtk_action_create_menu (GtkAction *action);"
gtk;gtk_action_create_menu_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"GtkWidget * gtk_action_create_menu_item (GtkAction *action);"
gtk;gtk_action_create_tool_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"GtkWidget * gtk_action_create_tool_item (GtkAction *action);"
gtk;gtk_action_disconnect_accelerator;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_disconnect_accelerator (GtkAction *action);"
gtk;gtk_action_disconnect_proxy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_disconnect_proxy (GtkAction *action, GtkWidget *proxy);"
gtk;gtk_action_get_accel_closure;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"GClosure *gtk_action_get_accel_closure (GtkAction *action);"
gtk;gtk_action_get_accel_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"const gchar *gtk_action_get_accel_path (GtkAction *action);"
gtk;gtk_action_get_always_show_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"gboolean gtk_action_get_always_show_image (GtkAction *action);"
gtk;gtk_action_get_gicon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"GIcon *gtk_action_get_gicon (GtkAction *action);"
gtk;gtk_action_get_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"const gchar * gtk_action_get_icon_name (GtkAction *action);"
gtk;gtk_action_get_is_important;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"gboolean gtk_action_get_is_important (GtkAction *action);"
gtk;gtk_action_get_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"const gchar * gtk_action_get_label (GtkAction *action);"
gtk;gtk_action_get_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"const gchar* gtk_action_get_name (GtkAction *action);"
gtk;gtk_action_get_proxies;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"GSList * gtk_action_get_proxies (GtkAction *action);"
gtk;gtk_action_get_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"gboolean gtk_action_get_sensitive (GtkAction *action);"
gtk;gtk_action_get_short_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"const gchar * gtk_action_get_short_label (GtkAction *action);"
gtk;gtk_action_get_stock_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"const gchar * gtk_action_get_stock_id (GtkAction *action);"
gtk;gtk_action_get_tooltip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"const gchar * gtk_action_get_tooltip (GtkAction *action);"
gtk;gtk_action_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"  GType gtk_action_get_type (void) G_GNUC_CONST;"
gtk;gtk_action_get_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"gboolean gtk_action_get_visible (GtkAction *action);"
gtk;gtk_action_get_visible_horizontal;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"gboolean gtk_action_get_visible_horizontal (GtkAction *action);"
gtk;gtk_action_get_visible_vertical;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"gboolean gtk_action_get_visible_vertical (GtkAction *action);"
gtk;gtk_action_group_add_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_add_action (GtkActionGroup *action_group, GtkAction *action);"
gtk;gtk_action_group_add_action_with_accel;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_add_action_with_accel (GtkActionGroup *action_group, GtkAction *action, const gchar *accelerator);"
gtk;gtk_action_group_add_actions;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_add_actions (GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data);"
gtk;gtk_action_group_add_actions_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_add_actions_full (GtkActionGroup *action_group, const GtkActionEntry *entries, guint n_entries, gpointer user_data, GDestroyNotify destroy);"
gtk;gtk_action_group_add_radio_actions;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_add_radio_actions (GtkActionGroup *action_group, const GtkRadioActionEntry *entries, guint n_entries, gint value, GCallback on_change, gpointer user_data);"
gtk;gtk_action_group_add_radio_actions_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_add_radio_actions_full (GtkActionGroup *action_group, const GtkRadioActionEntry *entries, guint n_entries, gint value, GCallback on_change, gpointer user_data, GDestroyNotify destroy);"
gtk;gtk_action_group_add_toggle_actions;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_add_toggle_actions (GtkActionGroup *action_group, const GtkToggleActionEntry *entries, guint n_entries, gpointer user_data);"
gtk;gtk_action_group_add_toggle_actions_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_add_toggle_actions_full (GtkActionGroup *action_group, const GtkToggleActionEntry *entries, guint n_entries, gpointer user_data, GDestroyNotify destroy);"
gtk;gtk_action_group_get_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"GtkAction *gtk_action_group_get_action (GtkActionGroup *action_group, const gchar *action_name);"
gtk;gtk_action_group_get_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"const gchar *gtk_action_group_get_name (GtkActionGroup *action_group);"
gtk;gtk_action_group_get_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"gboolean gtk_action_group_get_sensitive (GtkActionGroup *action_group);"
gtk;gtk_action_group_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"  GType gtk_action_group_get_type (void) G_GNUC_CONST;"
gtk;gtk_action_group_get_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"gboolean gtk_action_group_get_visible (GtkActionGroup *action_group);"
gtk;gtk_action_group_list_actions;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"GList *gtk_action_group_list_actions (GtkActionGroup *action_group);"
gtk;gtk_action_group_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"GtkActionGroup *gtk_action_group_new (const gchar *name);"
gtk;gtk_action_group_remove_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_remove_action (GtkActionGroup *action_group, GtkAction *action);"
gtk;gtk_action_group_set_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_set_sensitive (GtkActionGroup *action_group, gboolean sensitive);"
gtk;gtk_action_group_set_translate_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_set_translate_func (GtkActionGroup *action_group, GtkTranslateFunc func, gpointer data, GDestroyNotify notify);"
gtk;gtk_action_group_set_translation_domain;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_set_translation_domain (GtkActionGroup *action_group, const gchar *domain);"
gtk;gtk_action_group_set_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"void gtk_action_group_set_visible (GtkActionGroup *action_group, gboolean visible);"
gtk;gtk_action_group_translate_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactiongroup.h;"const gchar *gtk_action_group_translate_string (GtkActionGroup *action_group, const gchar *string);"
gtk;gtk_action_is_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"gboolean gtk_action_is_sensitive (GtkAction *action);"
gtk;gtk_action_is_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"gboolean gtk_action_is_visible (GtkAction *action);"
gtk;gtk_action_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"GtkAction *gtk_action_new (const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id);"
gtk;gtk_action_set_accel_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_set_accel_group (GtkAction *action, GtkAccelGroup *accel_group);"
gtk;gtk_action_set_accel_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;" void gtk_action_set_accel_path (GtkAction *action, const gchar *accel_path);"
gtk;gtk_action_set_always_show_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_set_always_show_image (GtkAction *action, gboolean always_show);"
gtk;gtk_action_set_gicon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_set_gicon (GtkAction *action, GIcon *icon);"
gtk;gtk_action_set_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_set_icon_name (GtkAction *action, const gchar *icon_name);"
gtk;gtk_action_set_is_important;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_set_is_important (GtkAction *action, gboolean is_important);"
gtk;gtk_action_set_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;" void gtk_action_set_label (GtkAction *action, const gchar *label);"
gtk;gtk_action_set_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_set_sensitive (GtkAction *action, gboolean sensitive);"
gtk;gtk_action_set_short_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_set_short_label (GtkAction *action, const gchar *short_label);"
gtk;gtk_action_set_stock_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_set_stock_id (GtkAction *action, const gchar *stock_id);"
gtk;gtk_action_set_tooltip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_set_tooltip (GtkAction *action, const gchar *tooltip);"
gtk;gtk_action_set_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_set_visible (GtkAction *action, gboolean visible);"
gtk;gtk_action_set_visible_horizontal;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_set_visible_horizontal (GtkAction *action, gboolean visible_horizontal);"
gtk;gtk_action_set_visible_vertical;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_set_visible_vertical (GtkAction *action, gboolean visible_vertical);"
gtk;gtk_action_unblock_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_unblock_activate (GtkAction *action);"
gtk;gtk_action_unblock_activate_from;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;"void gtk_action_unblock_activate_from (GtkAction *action, GtkWidget *proxy);"
gtk;gtk_activatable_do_set_related_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactivatable.h;" void gtk_activatable_do_set_related_action (GtkActivatable *activatable, GtkAction *action);"
gtk;gtk_activatable_get_related_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactivatable.h;"GtkAction *gtk_activatable_get_related_action (GtkActivatable *activatable);"
gtk;gtk_activatable_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactivatable.h;"  GType gtk_activatable_get_type (void) G_GNUC_CONST;"
gtk;gtk_activatable_get_use_action_appearance;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactivatable.h;"gboolean gtk_activatable_get_use_action_appearance (GtkActivatable *activatable);"
gtk;gtk_activatable_set_related_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactivatable.h;" void gtk_activatable_set_related_action (GtkActivatable *activatable, GtkAction *action);"
gtk;gtk_activatable_set_use_action_appearance;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactivatable.h;" void gtk_activatable_set_use_action_appearance (GtkActivatable *activatable, gboolean use_appearance);"
gtk;gtk_activatable_sync_action_properties;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkactivatable.h;" void gtk_activatable_sync_action_properties (GtkActivatable *activatable, GtkAction *action);"
gtk;gtk_adjustment_changed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;" void gtk_adjustment_changed (GtkAdjustment *adjustment);"
gtk;gtk_adjustment_clamp_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"void gtk_adjustment_clamp_page (GtkAdjustment *adjustment, gdouble lower, gdouble upper);"
gtk;gtk_adjustment_configure;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;" void gtk_adjustment_configure (GtkAdjustment *adjustment, gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size);"
gtk;gtk_adjustment_get_lower;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"gdouble gtk_adjustment_get_lower (GtkAdjustment *adjustment);"
gtk;gtk_adjustment_get_page_increment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"gdouble gtk_adjustment_get_page_increment (GtkAdjustment *adjustment);"
gtk;gtk_adjustment_get_page_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"gdouble gtk_adjustment_get_page_size (GtkAdjustment *adjustment);"
gtk;gtk_adjustment_get_step_increment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"gdouble gtk_adjustment_get_step_increment (GtkAdjustment *adjustment);"
gtk;gtk_adjustment_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"  GType gtk_adjustment_get_type (void) G_GNUC_CONST;"
gtk;gtk_adjustment_get_upper;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"gdouble gtk_adjustment_get_upper (GtkAdjustment *adjustment);"
gtk;gtk_adjustment_get_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;" gdouble gtk_adjustment_get_value (GtkAdjustment *adjustment);"
gtk;gtk_adjustment_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"GtkObject* gtk_adjustment_new (gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size);"
gtk;gtk_adjustment_set_lower;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"void gtk_adjustment_set_lower (GtkAdjustment *adjustment, gdouble lower);"
gtk;gtk_adjustment_set_page_increment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"void gtk_adjustment_set_page_increment (GtkAdjustment *adjustment, gdouble page_increment);"
gtk;gtk_adjustment_set_page_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"void gtk_adjustment_set_page_size (GtkAdjustment *adjustment, gdouble page_size);"
gtk;gtk_adjustment_set_step_increment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"void gtk_adjustment_set_step_increment (GtkAdjustment *adjustment, gdouble step_increment);"
gtk;gtk_adjustment_set_upper;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"void gtk_adjustment_set_upper (GtkAdjustment *adjustment, gdouble upper);"
gtk;gtk_adjustment_set_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"void gtk_adjustment_set_value (GtkAdjustment *adjustment, gdouble value);"
gtk;gtk_adjustment_value_changed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkadjustment.h;"void gtk_adjustment_value_changed (GtkAdjustment *adjustment);"
gtk;gtk_alignment_get_padding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkalignment.h;" void gtk_alignment_get_padding (GtkAlignment *alignment, guint *padding_top, guint *padding_bottom, guint *padding_left, guint *padding_right);"
gtk;gtk_alignment_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkalignment.h;"  GType gtk_alignment_get_type (void) G_GNUC_CONST;"
gtk;gtk_alignment_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkalignment.h;"GtkWidget* gtk_alignment_new (gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale);"
gtk;gtk_alignment_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkalignment.h;"void gtk_alignment_set (GtkAlignment *alignment, gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale);"
gtk;gtk_alignment_set_padding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkalignment.h;" void gtk_alignment_set_padding (GtkAlignment *alignment, guint padding_top, guint padding_bottom, guint padding_left, guint padding_right);"
gtk;gtk_alternative_dialog_button_order;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;" gboolean gtk_alternative_dialog_button_order (GdkScreen *screen);"
gtk;gtk_anchor_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_anchor_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_arg_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_arg_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_arrow_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkarrow.h;"  GType gtk_arrow_get_type (void) G_GNUC_CONST;"
gtk;gtk_arrow_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkarrow.h;"GtkWidget* gtk_arrow_new (GtkArrowType arrow_type, GtkShadowType shadow_type);"
gtk;gtk_arrow_placement_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_arrow_placement_get_type (void) G_GNUC_CONST;"
gtk;gtk_arrow_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkarrow.h;"void gtk_arrow_set (GtkArrow *arrow, GtkArrowType arrow_type, GtkShadowType shadow_type);"
gtk;gtk_arrow_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_arrow_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_aspect_frame_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaspectframe.h;"  GType gtk_aspect_frame_get_type (void) G_GNUC_CONST;"
gtk;gtk_aspect_frame_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaspectframe.h;"GtkWidget* gtk_aspect_frame_new (const gchar *label, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child);"
gtk;gtk_aspect_frame_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaspectframe.h;"void gtk_aspect_frame_set (GtkAspectFrame *aspect_frame, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child);"
gtk;gtk_assistant_add_action_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"void gtk_assistant_add_action_widget (GtkAssistant *assistant, GtkWidget *child);"
gtk;gtk_assistant_append_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"gint gtk_assistant_append_page (GtkAssistant *assistant, GtkWidget *page);"
gtk;gtk_assistant_commit;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"void gtk_assistant_commit (GtkAssistant *assistant);"
gtk;gtk_assistant_get_current_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"gint gtk_assistant_get_current_page (GtkAssistant *assistant);"
gtk;gtk_assistant_get_n_pages;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"gint gtk_assistant_get_n_pages (GtkAssistant *assistant);"
gtk;gtk_assistant_get_nth_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"GtkWidget *gtk_assistant_get_nth_page (GtkAssistant *assistant, gint page_num);"
gtk;gtk_assistant_get_page_complete;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"gboolean gtk_assistant_get_page_complete (GtkAssistant *assistant, GtkWidget *page);"
gtk;gtk_assistant_get_page_header_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"GdkPixbuf *gtk_assistant_get_page_header_image (GtkAssistant *assistant, GtkWidget *page);"
gtk;gtk_assistant_get_page_side_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"GdkPixbuf *gtk_assistant_get_page_side_image (GtkAssistant *assistant, GtkWidget *page);"
gtk;gtk_assistant_get_page_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"const gchar * gtk_assistant_get_page_title (GtkAssistant *assistant, GtkWidget *page);"
gtk;gtk_assistant_get_page_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"GtkAssistantPageType gtk_assistant_get_page_type (GtkAssistant *assistant, GtkWidget *page);"
gtk;gtk_assistant_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"  GType gtk_assistant_get_type (void) G_GNUC_CONST;"
gtk;gtk_assistant_insert_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"gint gtk_assistant_insert_page (GtkAssistant *assistant, GtkWidget *page, gint position);"
gtk;gtk_assistant_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"GtkWidget *gtk_assistant_new (void);"
gtk;gtk_assistant_page_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_assistant_page_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_assistant_prepend_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"gint gtk_assistant_prepend_page (GtkAssistant *assistant, GtkWidget *page);"
gtk;gtk_assistant_remove_action_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"void gtk_assistant_remove_action_widget (GtkAssistant *assistant, GtkWidget *child);"
gtk;gtk_assistant_set_current_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"void gtk_assistant_set_current_page (GtkAssistant *assistant, gint page_num);"
gtk;gtk_assistant_set_forward_page_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"void gtk_assistant_set_forward_page_func (GtkAssistant *assistant, GtkAssistantPageFunc page_func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_assistant_set_page_complete;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"void gtk_assistant_set_page_complete (GtkAssistant *assistant, GtkWidget *page, gboolean complete);"
gtk;gtk_assistant_set_page_header_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"void gtk_assistant_set_page_header_image (GtkAssistant *assistant, GtkWidget *page, GdkPixbuf *pixbuf);"
gtk;gtk_assistant_set_page_side_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"void gtk_assistant_set_page_side_image (GtkAssistant *assistant, GtkWidget *page, GdkPixbuf *pixbuf);"
gtk;gtk_assistant_set_page_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"void gtk_assistant_set_page_title (GtkAssistant *assistant, GtkWidget *page, const gchar *title);"
gtk;gtk_assistant_set_page_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;"void gtk_assistant_set_page_type (GtkAssistant *assistant, GtkWidget *page, GtkAssistantPageType type);"
gtk;gtk_assistant_update_buttons_state;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkassistant.h;" void gtk_assistant_update_buttons_state (GtkAssistant *assistant);"
gtk;gtk_attach_options_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_attach_options_get_type (void) G_GNUC_CONST;"
gtk;gtk_bin_get_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbin.h;" GtkWidget *gtk_bin_get_child (GtkBin *bin);"
gtk;gtk_bin_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbin.h;"  GType gtk_bin_get_type (void) G_GNUC_CONST;"
gtk;gtk_binding_entry_add_signall;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbindings.h;"void gtk_binding_entry_add_signall (GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, const gchar *signal_name, GSList *binding_args);"
gtk;gtk_binding_entry_clear;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbindings.h;" void gtk_binding_entry_clear (GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers);"
gtk;gtk_binding_entry_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbindings.h;"void gtk_binding_entry_remove (GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers);"
gtk;gtk_binding_entry_skip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbindings.h;" void gtk_binding_entry_skip (GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers);"
gtk;gtk_binding_parse_binding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbindings.h;"guint gtk_binding_parse_binding (GScanner *scanner);"
gtk;gtk_binding_set_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbindings.h;"gboolean gtk_binding_set_activate (GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, GtkObject *object);"
gtk;gtk_binding_set_add_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbindings.h;" void gtk_binding_set_add_path (GtkBindingSet *binding_set, GtkPathType path_type, const gchar *path_pattern, GtkPathPriorityType priority);"
gtk;gtk_binding_set_by_class;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbindings.h;"GtkBindingSet* gtk_binding_set_by_class(gpointer object_class);"
gtk;gtk_binding_set_find;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbindings.h;"GtkBindingSet* gtk_binding_set_find (const gchar *set_name);"
gtk;gtk_binding_set_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbindings.h;" GtkBindingSet* gtk_binding_set_new (const gchar *set_name);"
gtk;gtk_bindings_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbindings.h;"gboolean gtk_bindings_activate (GtkObject *object, guint keyval, GdkModifierType modifiers);"
gtk;gtk_bindings_activate_event;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbindings.h;"gboolean gtk_bindings_activate_event (GtkObject *object, GdkEventKey *event);"
gtk;gtk_border_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"GtkBorder *gtk_border_copy (const GtkBorder *border_);"
gtk;gtk_border_free;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_border_free (GtkBorder *border_);"
gtk;gtk_border_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;" GType gtk_border_get_type (void) G_GNUC_CONST;"
gtk;gtk_border_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"GtkBorder *gtk_border_new (void) G_GNUC_MALLOC;"
gtk;gtk_box_get_homogeneous;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbox.h;"gboolean gtk_box_get_homogeneous (GtkBox *box);"
gtk;gtk_box_get_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbox.h;"gint gtk_box_get_spacing (GtkBox *box);"
gtk;gtk_box_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbox.h;"  GType gtk_box_get_type (void) G_GNUC_CONST;"
gtk;gtk_box_pack_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbox.h;"void gtk_box_pack_end (GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding);"
gtk;gtk_box_pack_end_defaults;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbox.h;"void gtk_box_pack_end_defaults (GtkBox *box, GtkWidget *widget);"
gtk;gtk_box_pack_start;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbox.h;" void gtk_box_pack_start (GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding);"
gtk;gtk_box_pack_start_defaults;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbox.h;" void gtk_box_pack_start_defaults (GtkBox *box, GtkWidget *widget);"
gtk;gtk_box_query_child_packing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbox.h;" void gtk_box_query_child_packing (GtkBox *box, GtkWidget *child, gboolean *expand, gboolean *fill, guint *padding, GtkPackType *pack_type);"
gtk;gtk_box_reorder_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbox.h;" void gtk_box_reorder_child (GtkBox *box, GtkWidget *child, gint position);"
gtk;gtk_box_set_child_packing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbox.h;"void gtk_box_set_child_packing (GtkBox *box, GtkWidget *child, gboolean expand, gboolean fill, guint padding, GtkPackType pack_type);"
gtk;gtk_box_set_homogeneous;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbox.h;" void gtk_box_set_homogeneous (GtkBox *box, gboolean homogeneous);"
gtk;gtk_box_set_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbox.h;"void gtk_box_set_spacing (GtkBox *box, gint spacing);"
gtk;gtk_buildable_add_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuildable.h;"void gtk_buildable_add_child (GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *type);"
gtk;gtk_buildable_construct_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuildable.h;"GObject * gtk_buildable_construct_child (GtkBuildable *buildable, GtkBuilder *builder, const gchar *name);"
gtk;gtk_buildable_custom_finished;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuildable.h;"void gtk_buildable_custom_finished (GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer data);"
gtk;gtk_buildable_custom_tag_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuildable.h;"void gtk_buildable_custom_tag_end (GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer *data);"
gtk;gtk_buildable_custom_tag_start;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuildable.h;"gboolean gtk_buildable_custom_tag_start (GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, GMarkupParser *parser, gpointer *data);"
gtk;gtk_buildable_get_internal_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuildable.h;"GObject * gtk_buildable_get_internal_child (GtkBuildable *buildable, GtkBuilder *builder, const gchar *childname);"
gtk;gtk_buildable_get_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuildable.h;"const gchar * gtk_buildable_get_name (GtkBuildable *buildable);"
gtk;gtk_buildable_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuildable.h;"  GType gtk_buildable_get_type (void) G_GNUC_CONST;"
gtk;gtk_buildable_parser_finished;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuildable.h;"void gtk_buildable_parser_finished (GtkBuildable *buildable, GtkBuilder *builder);"
gtk;gtk_buildable_set_buildable_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuildable.h;"void gtk_buildable_set_buildable_property (GtkBuildable *buildable, GtkBuilder *builder, const gchar *name, const GValue *value);"
gtk;gtk_buildable_set_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuildable.h;" void gtk_buildable_set_name (GtkBuildable *buildable, const gchar *name);"
gtk;gtk_builder_add_from_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;" guint gtk_builder_add_from_file (GtkBuilder *builder, const gchar *filename, GError **error);"
gtk;gtk_builder_add_from_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"guint gtk_builder_add_from_string (GtkBuilder *builder, const gchar *buffer, gsize length, GError **error);"
gtk;gtk_builder_add_objects_from_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"guint gtk_builder_add_objects_from_file (GtkBuilder *builder, const gchar *filename, gchar **object_ids, GError **error);"
gtk;gtk_builder_add_objects_from_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"guint gtk_builder_add_objects_from_string (GtkBuilder *builder, const gchar *buffer, gsize length, gchar **object_ids, GError **error);"
gtk;gtk_builder_connect_signals;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"void gtk_builder_connect_signals (GtkBuilder *builder, gpointer user_data);"
gtk;gtk_builder_connect_signals_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"void gtk_builder_connect_signals_full (GtkBuilder *builder, GtkBuilderConnectFunc func, gpointer user_data);"
gtk;gtk_builder_error_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_builder_error_get_type (void) G_GNUC_CONST;"
gtk;gtk_builder_error_quark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"  GQuark gtk_builder_error_quark (void);"
gtk;gtk_builder_get_object;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"GObject* gtk_builder_get_object (GtkBuilder *builder, const gchar *name);"
gtk;gtk_builder_get_objects;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"GSList* gtk_builder_get_objects (GtkBuilder *builder);"
gtk;gtk_builder_get_translation_domain;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"const gchar* gtk_builder_get_translation_domain (GtkBuilder *builder);"
gtk;gtk_builder_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;" GType gtk_builder_get_type (void) G_GNUC_CONST;"
gtk;gtk_builder_get_type_from_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"GType gtk_builder_get_type_from_name (GtkBuilder *builder, const char *type_name);"
gtk;gtk_builder_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"GtkBuilder* gtk_builder_new (void);"
gtk;gtk_builder_set_translation_domain;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"void gtk_builder_set_translation_domain (GtkBuilder *builder, const gchar *domain);"
gtk;gtk_builder_value_from_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;" gboolean gtk_builder_value_from_string (GtkBuilder *builder, GParamSpec *pspec, const gchar *string, GValue *value, GError **error);"
gtk;gtk_builder_value_from_string_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbuilder.h;"gboolean gtk_builder_value_from_string_type (GtkBuilder *builder, GType type, const gchar *string, GValue *value, GError **error);"
gtk;gtk_button_action_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_button_action_get_type (void) G_GNUC_CONST;"
gtk;gtk_button_box_get_child_ipadding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbbox.h;"void gtk_button_box_get_child_ipadding (GtkButtonBox *widget, gint *ipad_x, gint *ipad_y);"
gtk;gtk_button_box_get_child_secondary;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbbox.h;"gboolean gtk_button_box_get_child_secondary (GtkButtonBox *widget, GtkWidget *child);"
gtk;gtk_button_box_get_child_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbbox.h;"void gtk_button_box_get_child_size (GtkButtonBox *widget, gint *min_width, gint *min_height);"
gtk;gtk_button_box_get_layout;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbbox.h;" GtkButtonBoxStyle gtk_button_box_get_layout (GtkButtonBox *widget);"
gtk;gtk_button_box_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbbox.h;"      GType gtk_button_box_get_type (void) G_GNUC_CONST;"
gtk;gtk_button_box_set_child_ipadding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbbox.h;"void gtk_button_box_set_child_ipadding (GtkButtonBox *widget, gint ipad_x, gint ipad_y);"
gtk;gtk_button_box_set_child_secondary;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbbox.h;"void gtk_button_box_set_child_secondary (GtkButtonBox *widget, GtkWidget *child, gboolean is_secondary);"
gtk;gtk_button_box_set_child_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbbox.h;" void gtk_button_box_set_child_size (GtkButtonBox *widget, gint min_width, gint min_height);"
gtk;gtk_button_box_set_layout;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbbox.h;"void gtk_button_box_set_layout (GtkButtonBox *widget, GtkButtonBoxStyle layout_style);"
gtk;gtk_button_box_style_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_button_box_style_get_type (void) G_GNUC_CONST;"
gtk;gtk_button_clicked;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;" void gtk_button_clicked (GtkButton *button);"
gtk;gtk_button_enter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;" void gtk_button_enter (GtkButton *button);"
gtk;gtk_button_get_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"void gtk_button_get_alignment (GtkButton *button, gfloat *xalign, gfloat *yalign);"
gtk;gtk_button_get_event_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;" GdkWindow* gtk_button_get_event_window (GtkButton *button);"
gtk;gtk_button_get_focus_on_click;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"gboolean gtk_button_get_focus_on_click (GtkButton *button);"
gtk;gtk_button_get_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"GtkWidget* gtk_button_get_image (GtkButton *button);"
gtk;gtk_button_get_image_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"GtkPositionType gtk_button_get_image_position (GtkButton *button);"
gtk;gtk_button_get_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"const gchar * gtk_button_get_label (GtkButton *button);"
gtk;gtk_button_get_relief;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"GtkReliefStyle gtk_button_get_relief (GtkButton *button);"
gtk;gtk_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"  GType gtk_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_button_get_use_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"gboolean gtk_button_get_use_stock (GtkButton *button);"
gtk;gtk_button_get_use_underline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"gboolean gtk_button_get_use_underline (GtkButton *button);"
gtk;gtk_button_leave;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"void gtk_button_leave (GtkButton *button);"
gtk;gtk_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"GtkWidget* gtk_button_new (void);"
gtk;gtk_button_new_from_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"GtkWidget* gtk_button_new_from_stock (const gchar *stock_id);"
gtk;gtk_button_new_with_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"GtkWidget* gtk_button_new_with_label (const gchar *label);"
gtk;gtk_button_new_with_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"GtkWidget* gtk_button_new_with_mnemonic (const gchar *label);"
gtk;gtk_button_pressed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;" void gtk_button_pressed (GtkButton *button);"
gtk;gtk_button_released;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"void gtk_button_released (GtkButton *button);"
gtk;gtk_button_set_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"void gtk_button_set_alignment (GtkButton *button, gfloat xalign, gfloat yalign);"
gtk;gtk_button_set_focus_on_click;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"void gtk_button_set_focus_on_click (GtkButton *button, gboolean focus_on_click);"
gtk;gtk_button_set_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"void gtk_button_set_image (GtkButton *button, GtkWidget *image);"
gtk;gtk_button_set_image_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"void gtk_button_set_image_position (GtkButton *button, GtkPositionType position);"
gtk;gtk_button_set_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"void gtk_button_set_label (GtkButton *button, const gchar *label);"
gtk;gtk_button_set_relief;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;" void gtk_button_set_relief (GtkButton *button, GtkReliefStyle newstyle);"
gtk;gtk_button_set_use_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"void gtk_button_set_use_stock (GtkButton *button, gboolean use_stock);"
gtk;gtk_button_set_use_underline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkbutton.h;"void gtk_button_set_use_underline (GtkButton *button, gboolean use_underline);"
gtk;gtk_buttons_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_buttons_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_calendar_clear_marks;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;"void gtk_calendar_clear_marks (GtkCalendar *calendar);"
gtk;gtk_calendar_display_options;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;" void gtk_calendar_display_options (GtkCalendar *calendar, GtkCalendarDisplayOptions flags);"
gtk;gtk_calendar_display_options_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_calendar_display_options_get_type (void) G_GNUC_CONST;"
gtk;gtk_calendar_freeze;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;" void gtk_calendar_freeze (GtkCalendar *calendar);"
gtk;gtk_calendar_get_date;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;" void gtk_calendar_get_date (GtkCalendar *calendar, guint *year, guint *month, guint *day);"
gtk;gtk_calendar_get_detail_height_rows;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;"gint gtk_calendar_get_detail_height_rows (GtkCalendar *calendar);"
gtk;gtk_calendar_get_detail_width_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;" gint gtk_calendar_get_detail_width_chars (GtkCalendar *calendar);"
gtk;gtk_calendar_get_display_options;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;"GtkCalendarDisplayOptions gtk_calendar_get_display_options (GtkCalendar *calendar);"
gtk;gtk_calendar_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;"  GType gtk_calendar_get_type (void) G_GNUC_CONST;"
gtk;gtk_calendar_mark_day;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;" gboolean gtk_calendar_mark_day (GtkCalendar *calendar, guint day);"
gtk;gtk_calendar_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;"GtkWidget* gtk_calendar_new (void);"
gtk;gtk_calendar_select_day;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;"void gtk_calendar_select_day (GtkCalendar *calendar, guint day);"
gtk;gtk_calendar_select_month;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;" gboolean gtk_calendar_select_month (GtkCalendar *calendar, guint month, guint year);"
gtk;gtk_calendar_set_detail_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;" void gtk_calendar_set_detail_func (GtkCalendar *calendar, GtkCalendarDetailFunc func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_calendar_set_detail_height_rows;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;"void gtk_calendar_set_detail_height_rows (GtkCalendar *calendar, gint rows);"
gtk;gtk_calendar_set_detail_width_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;" void gtk_calendar_set_detail_width_chars (GtkCalendar *calendar, gint chars);"
gtk;gtk_calendar_set_display_options;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;" void gtk_calendar_set_display_options (GtkCalendar *calendar, GtkCalendarDisplayOptions flags);"
gtk;gtk_calendar_thaw;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;"void gtk_calendar_thaw (GtkCalendar *calendar);"
gtk;gtk_calendar_unmark_day;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcalendar.h;"gboolean gtk_calendar_unmark_day (GtkCalendar *calendar, guint day);"
gtk;gtk_cell_editable_editing_done;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelleditable.h;"void gtk_cell_editable_editing_done (GtkCellEditable *cell_editable);"
gtk;gtk_cell_editable_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelleditable.h;"  GType gtk_cell_editable_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_editable_remove_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelleditable.h;"void gtk_cell_editable_remove_widget (GtkCellEditable *cell_editable);"
gtk;gtk_cell_editable_start_editing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelleditable.h;" void gtk_cell_editable_start_editing (GtkCellEditable *cell_editable, GdkEvent *event);"
gtk;gtk_cell_layout_add_attribute;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelllayout.h;"void gtk_cell_layout_add_attribute (GtkCellLayout *cell_layout, GtkCellRenderer *cell, const gchar *attribute, gint column);"
gtk;gtk_cell_layout_clear;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelllayout.h;"void gtk_cell_layout_clear (GtkCellLayout *cell_layout);"
gtk;gtk_cell_layout_clear_attributes;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelllayout.h;"void gtk_cell_layout_clear_attributes (GtkCellLayout *cell_layout, GtkCellRenderer *cell);"
gtk;gtk_cell_layout_get_cells;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelllayout.h;"GList *gtk_cell_layout_get_cells (GtkCellLayout *cell_layout);"
gtk;gtk_cell_layout_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelllayout.h;"  GType gtk_cell_layout_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_layout_pack_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelllayout.h;"void gtk_cell_layout_pack_end (GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand);"
gtk;gtk_cell_layout_pack_start;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelllayout.h;"void gtk_cell_layout_pack_start (GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand);"
gtk;gtk_cell_layout_reorder;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelllayout.h;"void gtk_cell_layout_reorder (GtkCellLayout *cell_layout, GtkCellRenderer *cell, gint position);"
gtk;gtk_cell_layout_set_cell_data_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcelllayout.h;"void gtk_cell_layout_set_cell_data_func (GtkCellLayout *cell_layout, GtkCellRenderer *cell, GtkCellLayoutDataFunc func, gpointer func_data, GDestroyNotify destroy);"
gtk;gtk_cell_renderer_accel_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrendereraccel.h;"  GType gtk_cell_renderer_accel_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_renderer_accel_mode_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_cell_renderer_accel_mode_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_renderer_accel_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrendereraccel.h;"GtkCellRenderer *gtk_cell_renderer_accel_new (void);"
gtk;gtk_cell_renderer_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;"gboolean gtk_cell_renderer_activate (GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const gchar *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags);"
gtk;gtk_cell_renderer_combo_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderercombo.h;"  GType gtk_cell_renderer_combo_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_renderer_combo_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderercombo.h;"GtkCellRenderer *gtk_cell_renderer_combo_new (void);"
gtk;gtk_cell_renderer_editing_canceled;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;" void gtk_cell_renderer_editing_canceled (GtkCellRenderer *cell);"
gtk;gtk_cell_renderer_get_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;"void gtk_cell_renderer_get_alignment (GtkCellRenderer *cell, gfloat *xalign, gfloat *yalign);"
gtk;gtk_cell_renderer_get_fixed_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;"void gtk_cell_renderer_get_fixed_size (GtkCellRenderer *cell, gint *width, gint *height);"
gtk;gtk_cell_renderer_get_padding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;"void gtk_cell_renderer_get_padding (GtkCellRenderer *cell, gint *xpad, gint *ypad);"
gtk;gtk_cell_renderer_get_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;"gboolean gtk_cell_renderer_get_sensitive (GtkCellRenderer *cell);"
gtk;gtk_cell_renderer_get_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;" void gtk_cell_renderer_get_size (GtkCellRenderer *cell, GtkWidget *widget, const GdkRectangle *cell_area, gint *x_offset, gint *y_offset, gint *width, gint *height);"
gtk;gtk_cell_renderer_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;"  GType gtk_cell_renderer_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_renderer_get_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;"gboolean gtk_cell_renderer_get_visible (GtkCellRenderer *cell);"
gtk;gtk_cell_renderer_mode_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_cell_renderer_mode_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_renderer_pixbuf_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h;"  GType gtk_cell_renderer_pixbuf_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_renderer_pixbuf_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h;"GtkCellRenderer *gtk_cell_renderer_pixbuf_new (void);"
gtk;gtk_cell_renderer_progress_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrendererprogress.h;"  GType gtk_cell_renderer_progress_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_renderer_progress_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrendererprogress.h;"GtkCellRenderer* gtk_cell_renderer_progress_new (void);"
gtk;gtk_cell_renderer_render;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;"void gtk_cell_renderer_render (GtkCellRenderer *cell, GdkWindow *window, GtkWidget *widget, const GdkRectangle *background_area, const GdkRectangle *cell_area, const GdkRectangle *expose_area, GtkCellRendererState flags);"
gtk;gtk_cell_renderer_set_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;" void gtk_cell_renderer_set_alignment (GtkCellRenderer *cell, gfloat xalign, gfloat yalign);"
gtk;gtk_cell_renderer_set_fixed_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;" void gtk_cell_renderer_set_fixed_size (GtkCellRenderer *cell, gint width, gint height);"
gtk;gtk_cell_renderer_set_padding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;" void gtk_cell_renderer_set_padding (GtkCellRenderer *cell, gint xpad, gint ypad);"
gtk;gtk_cell_renderer_set_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;" void gtk_cell_renderer_set_sensitive (GtkCellRenderer *cell, gboolean sensitive);"
gtk;gtk_cell_renderer_set_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;" void gtk_cell_renderer_set_visible (GtkCellRenderer *cell, gboolean visible);"
gtk;gtk_cell_renderer_spin_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrendererspin.h;"  GType gtk_cell_renderer_spin_get_type (void);"
gtk;gtk_cell_renderer_spin_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrendererspin.h;"GtkCellRenderer *gtk_cell_renderer_spin_new (void);"
gtk;gtk_cell_renderer_spinner_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrendererspinner.h;"  GType gtk_cell_renderer_spinner_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_renderer_spinner_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrendererspinner.h;"GtkCellRenderer *gtk_cell_renderer_spinner_new (void);"
gtk;gtk_cell_renderer_start_editing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;"GtkCellEditable *gtk_cell_renderer_start_editing (GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const gchar *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags);"
gtk;gtk_cell_renderer_state_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_cell_renderer_state_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_renderer_stop_editing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderer.h;" void gtk_cell_renderer_stop_editing (GtkCellRenderer *cell, gboolean canceled);"
gtk;gtk_cell_renderer_text_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderertext.h;"  GType gtk_cell_renderer_text_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_renderer_text_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderertext.h;"GtkCellRenderer *gtk_cell_renderer_text_new (void);"
gtk;gtk_cell_renderer_text_set_fixed_height_from_font;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderertext.h;" void gtk_cell_renderer_text_set_fixed_height_from_font (GtkCellRendererText *renderer, gint number_of_rows);"
gtk;gtk_cell_renderer_toggle_get_activatable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h;" gboolean gtk_cell_renderer_toggle_get_activatable (GtkCellRendererToggle *toggle);"
gtk;gtk_cell_renderer_toggle_get_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h;" gboolean gtk_cell_renderer_toggle_get_active (GtkCellRendererToggle *toggle);"
gtk;gtk_cell_renderer_toggle_get_radio;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h;" gboolean gtk_cell_renderer_toggle_get_radio (GtkCellRendererToggle *toggle);"
gtk;gtk_cell_renderer_toggle_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h;"  GType gtk_cell_renderer_toggle_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_renderer_toggle_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h;"GtkCellRenderer *gtk_cell_renderer_toggle_new (void);"
gtk;gtk_cell_renderer_toggle_set_activatable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h;"void gtk_cell_renderer_toggle_set_activatable (GtkCellRendererToggle *toggle, gboolean setting);"
gtk;gtk_cell_renderer_toggle_set_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h;"void gtk_cell_renderer_toggle_set_active (GtkCellRendererToggle *toggle, gboolean setting);"
gtk;gtk_cell_renderer_toggle_set_radio;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h;"void gtk_cell_renderer_toggle_set_radio (GtkCellRendererToggle *toggle, gboolean radio);"
gtk;gtk_cell_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_cell_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_view_get_cell_renderers;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellview.h;" GList *gtk_cell_view_get_cell_renderers (GtkCellView *cell_view);"
gtk;gtk_cell_view_get_displayed_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellview.h;"GtkTreePath *gtk_cell_view_get_displayed_row (GtkCellView *cell_view);"
gtk;gtk_cell_view_get_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellview.h;"GtkTreeModel *gtk_cell_view_get_model (GtkCellView *cell_view);"
gtk;gtk_cell_view_get_size_of_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellview.h;"gboolean gtk_cell_view_get_size_of_row (GtkCellView *cell_view, GtkTreePath *path, GtkRequisition *requisition);"
gtk;gtk_cell_view_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellview.h;"  GType gtk_cell_view_get_type (void) G_GNUC_CONST;"
gtk;gtk_cell_view_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellview.h;"GtkWidget *gtk_cell_view_new (void);"
gtk;gtk_cell_view_new_with_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellview.h;"GtkWidget *gtk_cell_view_new_with_markup (const gchar *markup);"
gtk;gtk_cell_view_new_with_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellview.h;"GtkWidget *gtk_cell_view_new_with_pixbuf (GdkPixbuf *pixbuf);"
gtk;gtk_cell_view_new_with_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellview.h;"GtkWidget *gtk_cell_view_new_with_text (const gchar *text);"
gtk;gtk_cell_view_set_background_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellview.h;" void gtk_cell_view_set_background_color (GtkCellView *cell_view, const GdkColor *color);"
gtk;gtk_cell_view_set_displayed_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellview.h;"void gtk_cell_view_set_displayed_row (GtkCellView *cell_view, GtkTreePath *path);"
gtk;gtk_cell_view_set_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcellview.h;" void gtk_cell_view_set_model (GtkCellView *cell_view, GtkTreeModel *model);"
gtk;gtk_check_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckbutton.h;"  GType gtk_check_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_check_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckbutton.h;"GtkWidget* gtk_check_button_new (void);"
gtk;gtk_check_button_new_with_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckbutton.h;"GtkWidget* gtk_check_button_new_with_label (const gchar *label);"
gtk;gtk_check_button_new_with_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckbutton.h;"GtkWidget* gtk_check_button_new_with_mnemonic (const gchar *label);"
gtk;gtk_check_menu_item_get_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h;"gboolean gtk_check_menu_item_get_active (GtkCheckMenuItem *check_menu_item);"
gtk;gtk_check_menu_item_get_draw_as_radio;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h;"gboolean gtk_check_menu_item_get_draw_as_radio (GtkCheckMenuItem *check_menu_item);"
gtk;gtk_check_menu_item_get_inconsistent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h;"gboolean gtk_check_menu_item_get_inconsistent (GtkCheckMenuItem *check_menu_item);"
gtk;gtk_check_menu_item_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h;"  GType gtk_check_menu_item_get_type (void) G_GNUC_CONST;"
gtk;gtk_check_menu_item_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h;" GtkWidget* gtk_check_menu_item_new (void);"
gtk;gtk_check_menu_item_new_with_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h;"GtkWidget* gtk_check_menu_item_new_with_label (const gchar *label);"
gtk;gtk_check_menu_item_new_with_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h;"GtkWidget* gtk_check_menu_item_new_with_mnemonic (const gchar *label);"
gtk;gtk_check_menu_item_set_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h;"void gtk_check_menu_item_set_active (GtkCheckMenuItem *check_menu_item, gboolean is_active);"
gtk;gtk_check_menu_item_set_draw_as_radio;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h;"void gtk_check_menu_item_set_draw_as_radio (GtkCheckMenuItem *check_menu_item, gboolean draw_as_radio);"
gtk;gtk_check_menu_item_set_inconsistent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h;"void gtk_check_menu_item_set_inconsistent (GtkCheckMenuItem *check_menu_item, gboolean setting);"
gtk;gtk_check_menu_item_set_show_toggle;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h;" void gtk_check_menu_item_set_show_toggle (GtkCheckMenuItem *menu_item, gboolean always);"
gtk;gtk_check_menu_item_toggled;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h;"void gtk_check_menu_item_toggled (GtkCheckMenuItem *check_menu_item);"
gtk;gtk_check_version;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"const gchar* gtk_check_version (guint required_major, guint required_minor, guint required_micro);"
gtk;gtk_clipboard_clear;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"void gtk_clipboard_clear (GtkClipboard *clipboard);"
gtk;gtk_clipboard_get;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;" GtkClipboard *gtk_clipboard_get (GdkAtom selection);"
gtk;gtk_clipboard_get_display;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;" GdkDisplay *gtk_clipboard_get_display (GtkClipboard *clipboard);"
gtk;gtk_clipboard_get_for_display;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;" GtkClipboard *gtk_clipboard_get_for_display (GdkDisplay *display, GdkAtom selection);"
gtk;gtk_clipboard_get_owner;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"GObject *gtk_clipboard_get_owner (GtkClipboard *clipboard);"
gtk;gtk_clipboard_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"  GType gtk_clipboard_get_type (void) G_GNUC_CONST;"
gtk;gtk_clipboard_request_contents;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;" void gtk_clipboard_request_contents (GtkClipboard *clipboard, GdkAtom target, GtkClipboardReceivedFunc callback, gpointer user_data);"
gtk;gtk_clipboard_request_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"void gtk_clipboard_request_image (GtkClipboard *clipboard, GtkClipboardImageReceivedFunc callback, gpointer user_data);"
gtk;gtk_clipboard_request_rich_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"void gtk_clipboard_request_rich_text (GtkClipboard *clipboard, GtkTextBuffer *buffer, GtkClipboardRichTextReceivedFunc callback, gpointer user_data);"
gtk;gtk_clipboard_request_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"void gtk_clipboard_request_targets (GtkClipboard *clipboard, GtkClipboardTargetsReceivedFunc callback, gpointer user_data);"
gtk;gtk_clipboard_request_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"void gtk_clipboard_request_text (GtkClipboard *clipboard, GtkClipboardTextReceivedFunc callback, gpointer user_data);"
gtk;gtk_clipboard_request_uris;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"void gtk_clipboard_request_uris (GtkClipboard *clipboard, GtkClipboardURIReceivedFunc callback, gpointer user_data);"
gtk;gtk_clipboard_set_can_store;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;" void gtk_clipboard_set_can_store (GtkClipboard *clipboard, const GtkTargetEntry *targets, gint n_targets);"
gtk;gtk_clipboard_set_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"void gtk_clipboard_set_image (GtkClipboard *clipboard, GdkPixbuf *pixbuf);"
gtk;gtk_clipboard_set_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"void gtk_clipboard_set_text (GtkClipboard *clipboard, const gchar *text, gint len);"
gtk;gtk_clipboard_set_with_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;" gboolean gtk_clipboard_set_with_data (GtkClipboard *clipboard, const GtkTargetEntry *targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, gpointer user_data);"
gtk;gtk_clipboard_set_with_owner;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"gboolean gtk_clipboard_set_with_owner (GtkClipboard *clipboard, const GtkTargetEntry *targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, GObject *owner);"
gtk;gtk_clipboard_store;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;" void gtk_clipboard_store (GtkClipboard *clipboard);"
gtk;gtk_clipboard_wait_for_contents;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;" GtkSelectionData *gtk_clipboard_wait_for_contents (GtkClipboard *clipboard, GdkAtom target);"
gtk;gtk_clipboard_wait_for_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"GdkPixbuf * gtk_clipboard_wait_for_image (GtkClipboard *clipboard);"
gtk;gtk_clipboard_wait_for_rich_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"guint8 * gtk_clipboard_wait_for_rich_text (GtkClipboard *clipboard, GtkTextBuffer *buffer, GdkAtom *format, gsize *length);"
gtk;gtk_clipboard_wait_for_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"gboolean gtk_clipboard_wait_for_targets (GtkClipboard *clipboard, GdkAtom **targets, gint *n_targets);"
gtk;gtk_clipboard_wait_for_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"gchar * gtk_clipboard_wait_for_text (GtkClipboard *clipboard);"
gtk;gtk_clipboard_wait_for_uris;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"gchar ** gtk_clipboard_wait_for_uris (GtkClipboard *clipboard);"
gtk;gtk_clipboard_wait_is_image_available;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"gboolean gtk_clipboard_wait_is_image_available (GtkClipboard *clipboard);"
gtk;gtk_clipboard_wait_is_rich_text_available;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"gboolean gtk_clipboard_wait_is_rich_text_available (GtkClipboard *clipboard, GtkTextBuffer *buffer);"
gtk;gtk_clipboard_wait_is_target_available;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"gboolean gtk_clipboard_wait_is_target_available (GtkClipboard *clipboard, GdkAtom target);"
gtk;gtk_clipboard_wait_is_text_available;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;" gboolean gtk_clipboard_wait_is_text_available (GtkClipboard *clipboard);"
gtk;gtk_clipboard_wait_is_uris_available;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclipboard.h;"gboolean gtk_clipboard_wait_is_uris_available (GtkClipboard *clipboard);"
gtk;gtk_clist_append;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"gint gtk_clist_append (GtkCList *clist, gchar *text[]);"
gtk;gtk_clist_clear;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_clear (GtkCList *clist);"
gtk;gtk_clist_column_title_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_column_title_active (GtkCList *clist, gint column);"
gtk;gtk_clist_column_title_passive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"void gtk_clist_column_title_passive (GtkCList *clist, gint column);"
gtk;gtk_clist_column_titles_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"void gtk_clist_column_titles_active (GtkCList *clist);"
gtk;gtk_clist_column_titles_hide;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"void gtk_clist_column_titles_hide (GtkCList *clist);"
gtk;gtk_clist_column_titles_passive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"void gtk_clist_column_titles_passive (GtkCList *clist);"
gtk;gtk_clist_column_titles_show;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_column_titles_show (GtkCList *clist);"
gtk;gtk_clist_columns_autosize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" gint gtk_clist_columns_autosize (GtkCList *clist);"
gtk;gtk_clist_drag_pos_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_clist_drag_pos_get_type (void) G_GNUC_CONST;"
gtk;gtk_clist_find_row_from_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" gint gtk_clist_find_row_from_data (GtkCList *clist, gpointer data);"
gtk;gtk_clist_freeze;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_freeze (GtkCList *clist);"
gtk;gtk_clist_get_cell_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" GtkStyle *gtk_clist_get_cell_style (GtkCList *clist, gint row, gint column);"
gtk;gtk_clist_get_cell_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" GtkCellType gtk_clist_get_cell_type (GtkCList *clist, gint row, gint column);"
gtk;gtk_clist_get_column_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" gchar * gtk_clist_get_column_title (GtkCList *clist, gint column);"
gtk;gtk_clist_get_column_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" GtkWidget * gtk_clist_get_column_widget (GtkCList *clist, gint column);"
gtk;gtk_clist_get_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" GtkAdjustment* gtk_clist_get_hadjustment (GtkCList *clist);"
gtk;gtk_clist_get_pixmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" gint gtk_clist_get_pixmap (GtkCList *clist, gint row, gint column, GdkPixmap **pixmap, GdkBitmap **mask);"
gtk;gtk_clist_get_pixtext;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" gint gtk_clist_get_pixtext (GtkCList *clist, gint row, gint column, gchar **text, guint8 *spacing, GdkPixmap **pixmap, GdkBitmap **mask);"
gtk;gtk_clist_get_row_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" gpointer gtk_clist_get_row_data (GtkCList *clist, gint row);"
gtk;gtk_clist_get_row_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" GtkStyle *gtk_clist_get_row_style (GtkCList *clist, gint row);"
gtk;gtk_clist_get_selectable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"gboolean gtk_clist_get_selectable (GtkCList *clist, gint row);"
gtk;gtk_clist_get_selection_info;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" gint gtk_clist_get_selection_info (GtkCList *clist, gint x, gint y, gint *row, gint *column);"
gtk;gtk_clist_get_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" gint gtk_clist_get_text (GtkCList *clist, gint row, gint column, gchar **text);"
gtk;gtk_clist_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" GType gtk_clist_get_type (void) G_GNUC_CONST;"
gtk;gtk_clist_get_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"GtkAdjustment* gtk_clist_get_vadjustment (GtkCList *clist);"
gtk;gtk_clist_insert;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" gint gtk_clist_insert (GtkCList *clist, gint row, gchar *text[]);"
gtk;gtk_clist_moveto;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_moveto (GtkCList *clist, gint row, gint column, gfloat row_align, gfloat col_align);"
gtk;gtk_clist_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" GtkWidget* gtk_clist_new (gint columns);"
gtk;gtk_clist_new_with_titles;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"GtkWidget* gtk_clist_new_with_titles (gint columns, gchar *titles[]);"
gtk;gtk_clist_optimal_column_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" gint gtk_clist_optimal_column_width (GtkCList *clist, gint column);"
gtk;gtk_clist_prepend;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" gint gtk_clist_prepend (GtkCList *clist, gchar *text[]);"
gtk;gtk_clist_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_remove (GtkCList *clist, gint row);"
gtk;gtk_clist_row_is_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" GtkVisibility gtk_clist_row_is_visible (GtkCList *clist, gint row);"
gtk;gtk_clist_row_move;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_row_move (GtkCList *clist, gint source_row, gint dest_row);"
gtk;gtk_clist_select_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_select_all (GtkCList *clist);"
gtk;gtk_clist_select_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_select_row (GtkCList *clist, gint row, gint column);"
gtk;gtk_clist_set_auto_sort;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_auto_sort (GtkCList *clist, gboolean auto_sort);"
gtk;gtk_clist_set_background;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_background (GtkCList *clist, gint row, const GdkColor *color);"
gtk;gtk_clist_set_button_actions;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"void gtk_clist_set_button_actions (GtkCList *clist, guint button, guint8 button_actions);"
gtk;gtk_clist_set_cell_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_cell_style (GtkCList *clist, gint row, gint column, GtkStyle *style);"
gtk;gtk_clist_set_column_auto_resize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_column_auto_resize (GtkCList *clist, gint column, gboolean auto_resize);"
gtk;gtk_clist_set_column_justification;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_column_justification (GtkCList *clist, gint column, GtkJustification justification);"
gtk;gtk_clist_set_column_max_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"void gtk_clist_set_column_max_width (GtkCList *clist, gint column, gint max_width);"
gtk;gtk_clist_set_column_min_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_column_min_width (GtkCList *clist, gint column, gint min_width);"
gtk;gtk_clist_set_column_resizeable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_column_resizeable (GtkCList *clist, gint column, gboolean resizeable);"
gtk;gtk_clist_set_column_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_column_title (GtkCList *clist, gint column, const gchar *title);"
gtk;gtk_clist_set_column_visibility;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_column_visibility (GtkCList *clist, gint column, gboolean visible);"
gtk;gtk_clist_set_column_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_column_widget (GtkCList *clist, gint column, GtkWidget *widget);"
gtk;gtk_clist_set_column_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_column_width (GtkCList *clist, gint column, gint width);"
gtk;gtk_clist_set_compare_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_compare_func (GtkCList *clist, GtkCListCompareFunc cmp_func);"
gtk;gtk_clist_set_foreground;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_foreground (GtkCList *clist, gint row, const GdkColor *color);"
gtk;gtk_clist_set_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_hadjustment (GtkCList *clist, GtkAdjustment *adjustment);"
gtk;gtk_clist_set_pixmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_pixmap (GtkCList *clist, gint row, gint column, GdkPixmap *pixmap, GdkBitmap *mask);"
gtk;gtk_clist_set_pixtext;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_pixtext (GtkCList *clist, gint row, gint column, const gchar *text, guint8 spacing, GdkPixmap *pixmap, GdkBitmap *mask);"
gtk;gtk_clist_set_reorderable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_reorderable (GtkCList *clist, gboolean reorderable);"
gtk;gtk_clist_set_row_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_row_data (GtkCList *clist, gint row, gpointer data);"
gtk;gtk_clist_set_row_data_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_row_data_full (GtkCList *clist, gint row, gpointer data, GDestroyNotify destroy);"
gtk;gtk_clist_set_row_height;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_row_height (GtkCList *clist, guint height);"
gtk;gtk_clist_set_row_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_row_style (GtkCList *clist, gint row, GtkStyle *style);"
gtk;gtk_clist_set_selectable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_selectable (GtkCList *clist, gint row, gboolean selectable);"
gtk;gtk_clist_set_selection_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_selection_mode (GtkCList *clist, GtkSelectionMode mode);"
gtk;gtk_clist_set_shadow_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_shadow_type (GtkCList *clist, GtkShadowType type);"
gtk;gtk_clist_set_shift;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_shift (GtkCList *clist, gint row, gint column, gint vertical, gint horizontal);"
gtk;gtk_clist_set_sort_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_sort_column (GtkCList *clist, gint column);"
gtk;gtk_clist_set_sort_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_sort_type (GtkCList *clist, GtkSortType sort_type);"
gtk;gtk_clist_set_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_set_text (GtkCList *clist, gint row, gint column, const gchar *text);"
gtk;gtk_clist_set_use_drag_icons;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"void gtk_clist_set_use_drag_icons (GtkCList *clist, gboolean use_icons);"
gtk;gtk_clist_set_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"void gtk_clist_set_vadjustment (GtkCList *clist, GtkAdjustment *adjustment);"
gtk;gtk_clist_sort;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_sort (GtkCList *clist);"
gtk;gtk_clist_swap_rows;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_swap_rows (GtkCList *clist, gint row1, gint row2);"
gtk;gtk_clist_thaw;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;"void gtk_clist_thaw (GtkCList *clist);"
gtk;gtk_clist_undo_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_undo_selection (GtkCList *clist);"
gtk;gtk_clist_unselect_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_unselect_all (GtkCList *clist);"
gtk;gtk_clist_unselect_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkclist.h;" void gtk_clist_unselect_row (GtkCList *clist, gint row, gint column);"
gtk;gtk_color_button_get_alpha;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorbutton.h;"guint16 gtk_color_button_get_alpha (GtkColorButton *color_button);"
gtk;gtk_color_button_get_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorbutton.h;"void gtk_color_button_get_color (GtkColorButton *color_button, GdkColor *color);"
gtk;gtk_color_button_get_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorbutton.h;"const gchar *gtk_color_button_get_title (GtkColorButton *color_button);"
gtk;gtk_color_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorbutton.h;"  GType gtk_color_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_color_button_get_use_alpha;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorbutton.h;"gboolean gtk_color_button_get_use_alpha (GtkColorButton *color_button);"
gtk;gtk_color_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorbutton.h;"GtkWidget *gtk_color_button_new (void);"
gtk;gtk_color_button_new_with_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorbutton.h;"GtkWidget *gtk_color_button_new_with_color (const GdkColor *color);"
gtk;gtk_color_button_set_alpha;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorbutton.h;"void gtk_color_button_set_alpha (GtkColorButton *color_button, guint16 alpha);"
gtk;gtk_color_button_set_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorbutton.h;"void gtk_color_button_set_color (GtkColorButton *color_button, const GdkColor *color);"
gtk;gtk_color_button_set_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorbutton.h;"void gtk_color_button_set_title (GtkColorButton *color_button, const gchar *title);"
gtk;gtk_color_button_set_use_alpha;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorbutton.h;"void gtk_color_button_set_use_alpha (GtkColorButton *color_button, gboolean use_alpha);"
gtk;gtk_color_selection_dialog_get_color_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorseldialog.h;"GtkWidget* gtk_color_selection_dialog_get_color_selection (GtkColorSelectionDialog *colorsel);"
gtk;gtk_color_selection_dialog_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorseldialog.h;"  GType gtk_color_selection_dialog_get_type (void) G_GNUC_CONST;"
gtk;gtk_color_selection_dialog_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorseldialog.h;"GtkWidget* gtk_color_selection_dialog_new (const gchar *title);"
gtk;gtk_color_selection_get_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"void gtk_color_selection_get_color (GtkColorSelection *colorsel, gdouble *color);"
gtk;gtk_color_selection_get_current_alpha;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"guint16 gtk_color_selection_get_current_alpha (GtkColorSelection *colorsel);"
gtk;gtk_color_selection_get_current_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"void gtk_color_selection_get_current_color (GtkColorSelection *colorsel, GdkColor *color);"
gtk;gtk_color_selection_get_has_opacity_control;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"gboolean gtk_color_selection_get_has_opacity_control (GtkColorSelection *colorsel);"
gtk;gtk_color_selection_get_has_palette;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"gboolean gtk_color_selection_get_has_palette (GtkColorSelection *colorsel);"
gtk;gtk_color_selection_get_previous_alpha;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"guint16 gtk_color_selection_get_previous_alpha (GtkColorSelection *colorsel);"
gtk;gtk_color_selection_get_previous_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"void gtk_color_selection_get_previous_color (GtkColorSelection *colorsel, GdkColor *color);"
gtk;gtk_color_selection_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"  GType gtk_color_selection_get_type (void) G_GNUC_CONST;"
gtk;gtk_color_selection_is_adjusting;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;" gboolean gtk_color_selection_is_adjusting (GtkColorSelection *colorsel);"
gtk;gtk_color_selection_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"GtkWidget *gtk_color_selection_new (void);"
gtk;gtk_color_selection_palette_from_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;" gboolean gtk_color_selection_palette_from_string (const gchar *str, GdkColor **colors, gint *n_colors);"
gtk;gtk_color_selection_palette_to_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"gchar* gtk_color_selection_palette_to_string (const GdkColor *colors, gint n_colors);"
gtk;gtk_color_selection_set_change_palette_hook;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;" GtkColorSelectionChangePaletteFunc gtk_color_selection_set_change_palette_hook (GtkColorSelectionChangePaletteFunc func);"
gtk;gtk_color_selection_set_change_palette_with_screen_hook;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;" GtkColorSelectionChangePaletteWithScreenFunc gtk_color_selection_set_change_palette_with_screen_hook (GtkColorSelectionChangePaletteWithScreenFunc func);"
gtk;gtk_color_selection_set_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;" void gtk_color_selection_set_color (GtkColorSelection *colorsel, gdouble *color);"
gtk;gtk_color_selection_set_current_alpha;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"void gtk_color_selection_set_current_alpha (GtkColorSelection *colorsel, guint16 alpha);"
gtk;gtk_color_selection_set_current_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;" void gtk_color_selection_set_current_color (GtkColorSelection *colorsel, const GdkColor *color);"
gtk;gtk_color_selection_set_has_opacity_control;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"void gtk_color_selection_set_has_opacity_control (GtkColorSelection *colorsel, gboolean has_opacity);"
gtk;gtk_color_selection_set_has_palette;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"void gtk_color_selection_set_has_palette (GtkColorSelection *colorsel, gboolean has_palette);"
gtk;gtk_color_selection_set_previous_alpha;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"void gtk_color_selection_set_previous_alpha (GtkColorSelection *colorsel, guint16 alpha);"
gtk;gtk_color_selection_set_previous_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"void gtk_color_selection_set_previous_color (GtkColorSelection *colorsel, const GdkColor *color);"
gtk;gtk_color_selection_set_update_policy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcolorsel.h;"void gtk_color_selection_set_update_policy (GtkColorSelection *colorsel, GtkUpdateType policy);"
gtk;gtk_combo_box_append_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_append_text (GtkComboBox *combo_box, const gchar *text);"
gtk;gtk_combo_box_entry_get_text_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxentry.h;"gint gtk_combo_box_entry_get_text_column (GtkComboBoxEntry *entry_box);"
gtk;gtk_combo_box_entry_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxentry.h;"  GType gtk_combo_box_entry_get_type (void) G_GNUC_CONST;"
gtk;gtk_combo_box_entry_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxentry.h;"GtkWidget *gtk_combo_box_entry_new (void);"
gtk;gtk_combo_box_entry_new_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxentry.h;" GtkWidget *gtk_combo_box_entry_new_text (void);"
gtk;gtk_combo_box_entry_new_with_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxentry.h;"GtkWidget *gtk_combo_box_entry_new_with_model (GtkTreeModel *model, gint text_column);"
gtk;gtk_combo_box_entry_set_text_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxentry.h;" void gtk_combo_box_entry_set_text_column (GtkComboBoxEntry *entry_box, gint text_column);"
gtk;gtk_combo_box_get_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;" gint gtk_combo_box_get_active (GtkComboBox *combo_box);"
gtk;gtk_combo_box_get_active_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"gboolean gtk_combo_box_get_active_iter (GtkComboBox *combo_box, GtkTreeIter *iter);"
gtk;gtk_combo_box_get_active_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"gchar *gtk_combo_box_get_active_text (GtkComboBox *combo_box);"
gtk;gtk_combo_box_get_add_tearoffs;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;" gboolean gtk_combo_box_get_add_tearoffs (GtkComboBox *combo_box);"
gtk;gtk_combo_box_get_button_sensitivity;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"GtkSensitivityType gtk_combo_box_get_button_sensitivity (GtkComboBox *combo_box);"
gtk;gtk_combo_box_get_column_span_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"gint gtk_combo_box_get_column_span_column (GtkComboBox *combo_box);"
gtk;gtk_combo_box_get_entry_text_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"gint gtk_combo_box_get_entry_text_column (GtkComboBox *combo_box);"
gtk;gtk_combo_box_get_focus_on_click;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;" gboolean gtk_combo_box_get_focus_on_click (GtkComboBox *combo);"
gtk;gtk_combo_box_get_has_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;" gboolean gtk_combo_box_get_has_entry (GtkComboBox *combo_box);"
gtk;gtk_combo_box_get_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"GtkTreeModel *gtk_combo_box_get_model (GtkComboBox *combo_box);"
gtk;gtk_combo_box_get_popup_accessible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"AtkObject* gtk_combo_box_get_popup_accessible (GtkComboBox *combo_box);"
gtk;gtk_combo_box_get_row_separator_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;" GtkTreeViewRowSeparatorFunc gtk_combo_box_get_row_separator_func (GtkComboBox *combo_box);"
gtk;gtk_combo_box_get_row_span_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"gint gtk_combo_box_get_row_span_column (GtkComboBox *combo_box);"
gtk;gtk_combo_box_get_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;" const gchar * gtk_combo_box_get_title (GtkComboBox *combo_box);"
gtk;gtk_combo_box_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"  GType gtk_combo_box_get_type (void) G_GNUC_CONST;"
gtk;gtk_combo_box_get_wrap_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;" gint gtk_combo_box_get_wrap_width (GtkComboBox *combo_box);"
gtk;gtk_combo_box_insert_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_insert_text (GtkComboBox *combo_box, gint position, const gchar *text);"
gtk;gtk_combo_box_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"GtkWidget *gtk_combo_box_new (void);"
gtk;gtk_combo_box_new_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;" GtkWidget *gtk_combo_box_new_text (void);"
gtk;gtk_combo_box_new_with_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"GtkWidget *gtk_combo_box_new_with_entry (void);"
gtk;gtk_combo_box_new_with_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"GtkWidget *gtk_combo_box_new_with_model (GtkTreeModel *model);"
gtk;gtk_combo_box_new_with_model_and_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"GtkWidget *gtk_combo_box_new_with_model_and_entry (GtkTreeModel *model);"
gtk;gtk_combo_box_popdown;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_popdown (GtkComboBox *combo_box);"
gtk;gtk_combo_box_popup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;" void gtk_combo_box_popup (GtkComboBox *combo_box);"
gtk;gtk_combo_box_prepend_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_prepend_text (GtkComboBox *combo_box, const gchar *text);"
gtk;gtk_combo_box_remove_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_remove_text (GtkComboBox *combo_box, gint position);"
gtk;gtk_combo_box_set_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_set_active (GtkComboBox *combo_box, gint index_);"
gtk;gtk_combo_box_set_active_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_set_active_iter (GtkComboBox *combo_box, GtkTreeIter *iter);"
gtk;gtk_combo_box_set_add_tearoffs;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_set_add_tearoffs (GtkComboBox *combo_box, gboolean add_tearoffs);"
gtk;gtk_combo_box_set_button_sensitivity;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;" void gtk_combo_box_set_button_sensitivity (GtkComboBox *combo_box, GtkSensitivityType sensitivity);"
gtk;gtk_combo_box_set_column_span_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_set_column_span_column (GtkComboBox *combo_box, gint column_span);"
gtk;gtk_combo_box_set_entry_text_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_set_entry_text_column (GtkComboBox *combo_box, gint text_column);"
gtk;gtk_combo_box_set_focus_on_click;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_set_focus_on_click (GtkComboBox *combo, gboolean focus_on_click);"
gtk;gtk_combo_box_set_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;" void gtk_combo_box_set_model (GtkComboBox *combo_box, GtkTreeModel *model);"
gtk;gtk_combo_box_set_row_separator_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_set_row_separator_func (GtkComboBox *combo_box, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_combo_box_set_row_span_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_set_row_span_column (GtkComboBox *combo_box, gint row_span);"
gtk;gtk_combo_box_set_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_set_title (GtkComboBox *combo_box, const gchar *title);"
gtk;gtk_combo_box_set_wrap_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombobox.h;"void gtk_combo_box_set_wrap_width (GtkComboBox *combo_box, gint width);"
gtk;gtk_combo_box_text_append_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxtext.h;"void gtk_combo_box_text_append_text (GtkComboBoxText *combo_box, const gchar *text);"
gtk;gtk_combo_box_text_get_active_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxtext.h;"gchar *gtk_combo_box_text_get_active_text (GtkComboBoxText *combo_box);"
gtk;gtk_combo_box_text_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxtext.h;"  GType gtk_combo_box_text_get_type (void) G_GNUC_CONST;"
gtk;gtk_combo_box_text_insert_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxtext.h;"void gtk_combo_box_text_insert_text (GtkComboBoxText *combo_box, gint position, const gchar *text);"
gtk;gtk_combo_box_text_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxtext.h;"GtkWidget* gtk_combo_box_text_new (void);"
gtk;gtk_combo_box_text_new_with_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxtext.h;"GtkWidget* gtk_combo_box_text_new_with_entry (void);"
gtk;gtk_combo_box_text_prepend_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxtext.h;"void gtk_combo_box_text_prepend_text (GtkComboBoxText *combo_box, const gchar *text);"
gtk;gtk_combo_box_text_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcomboboxtext.h;"void gtk_combo_box_text_remove (GtkComboBoxText *combo_box, gint position);"
gtk;gtk_combo_disable_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombo.h;" void gtk_combo_disable_activate (GtkCombo* combo);"
gtk;gtk_combo_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombo.h;"  GType gtk_combo_get_type (void) G_GNUC_CONST;"
gtk;gtk_combo_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombo.h;" GtkWidget* gtk_combo_new (void);"
gtk;gtk_combo_set_case_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombo.h;" void gtk_combo_set_case_sensitive (GtkCombo* combo, gboolean val);"
gtk;gtk_combo_set_item_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombo.h;" void gtk_combo_set_item_string (GtkCombo* combo, GtkItem* item, const gchar* item_value);"
gtk;gtk_combo_set_popdown_strings;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombo.h;" void gtk_combo_set_popdown_strings (GtkCombo* combo, GList *strings);"
gtk;gtk_combo_set_use_arrows;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombo.h;" void gtk_combo_set_use_arrows (GtkCombo* combo, gboolean val);"
gtk;gtk_combo_set_use_arrows_always;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombo.h;" void gtk_combo_set_use_arrows_always (GtkCombo* combo, gboolean val);"
gtk;gtk_combo_set_value_in_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcombo.h;" void gtk_combo_set_value_in_list (GtkCombo* combo, gboolean val, gboolean ok_if_empty);"
gtk;gtk_container_add;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"void gtk_container_add (GtkContainer *container, GtkWidget *widget);"
gtk;gtk_container_check_resize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;" void gtk_container_check_resize (GtkContainer *container);"
gtk;gtk_container_child_get_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"void gtk_container_child_get_property (GtkContainer *container, GtkWidget *child, const gchar *property_name, GValue *value);"
gtk;gtk_container_child_get_valist;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"void gtk_container_child_get_valist (GtkContainer *container, GtkWidget *child, const gchar *first_property_name, va_list var_args);"
gtk;gtk_container_child_set_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"void gtk_container_child_set_property (GtkContainer *container, GtkWidget *child, const gchar *property_name, const GValue *value);"
gtk;gtk_container_child_set_valist;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"void gtk_container_child_set_valist (GtkContainer *container, GtkWidget *child, const gchar *first_property_name, va_list var_args);"
gtk;gtk_container_child_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;" GType gtk_container_child_type (GtkContainer *container);"
gtk;gtk_container_class_find_child_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"GParamSpec* gtk_container_class_find_child_property (GObjectClass *cclass, const gchar *property_name);"
gtk;gtk_container_class_install_child_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;" void gtk_container_class_install_child_property (GtkContainerClass *cclass, guint property_id, GParamSpec *pspec);"
gtk;gtk_container_class_list_child_properties;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"GParamSpec** gtk_container_class_list_child_properties (GObjectClass *cclass, guint *n_properties);"
gtk;gtk_container_forall;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;" void gtk_container_forall (GtkContainer *container, GtkCallback callback, gpointer callback_data);"
gtk;gtk_container_foreach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;" void gtk_container_foreach (GtkContainer *container, GtkCallback callback, gpointer callback_data);"
gtk;gtk_container_foreach_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;" void gtk_container_foreach_full (GtkContainer *container, GtkCallback callback, GtkCallbackMarshal marshal, gpointer callback_data, GDestroyNotify notify);"
gtk;gtk_container_get_border_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"guint gtk_container_get_border_width (GtkContainer *container);"
gtk;gtk_container_get_children;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;" GList* gtk_container_get_children (GtkContainer *container);"
gtk;gtk_container_get_focus_chain;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"gboolean gtk_container_get_focus_chain (GtkContainer *container, GList **focusable_widgets);"
gtk;gtk_container_get_focus_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"GtkWidget * gtk_container_get_focus_child (GtkContainer *container);"
gtk;gtk_container_get_focus_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"GtkAdjustment *gtk_container_get_focus_hadjustment (GtkContainer *container);"
gtk;gtk_container_get_focus_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"GtkAdjustment *gtk_container_get_focus_vadjustment (GtkContainer *container);"
gtk;gtk_container_get_resize_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"GtkResizeMode gtk_container_get_resize_mode (GtkContainer *container);"
gtk;gtk_container_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"  GType gtk_container_get_type (void) G_GNUC_CONST;"
gtk;gtk_container_propagate_expose;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;" void gtk_container_propagate_expose (GtkContainer *container, GtkWidget *child, GdkEventExpose *event);"
gtk;gtk_container_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"void gtk_container_remove (GtkContainer *container, GtkWidget *widget);"
gtk;gtk_container_resize_children;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;" void gtk_container_resize_children (GtkContainer *container);"
gtk;gtk_container_set_border_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"void gtk_container_set_border_width (GtkContainer *container, guint border_width);"
gtk;gtk_container_set_focus_chain;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;" void gtk_container_set_focus_chain (GtkContainer *container, GList *focusable_widgets);"
gtk;gtk_container_set_focus_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"void gtk_container_set_focus_child (GtkContainer *container, GtkWidget *child);"
gtk;gtk_container_set_focus_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"void gtk_container_set_focus_hadjustment (GtkContainer *container, GtkAdjustment *adjustment);"
gtk;gtk_container_set_focus_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"void gtk_container_set_focus_vadjustment (GtkContainer *container, GtkAdjustment *adjustment);"
gtk;gtk_container_set_reallocate_redraws;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;" void gtk_container_set_reallocate_redraws (GtkContainer *container, gboolean needs_redraws);"
gtk;gtk_container_set_resize_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;" void gtk_container_set_resize_mode (GtkContainer *container, GtkResizeMode resize_mode);"
gtk;gtk_container_unset_focus_chain;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcontainer.h;"void gtk_container_unset_focus_chain (GtkContainer *container);"
gtk;gtk_corner_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_corner_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_ctree_collapse;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_collapse (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_collapse_recursive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_collapse_recursive (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_collapse_to_depth;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_collapse_to_depth (GtkCTree *ctree, GtkCTreeNode *node, gint depth);"
gtk;gtk_ctree_expand;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_expand (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_expand_recursive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_expand_recursive (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_expand_to_depth;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_expand_to_depth (GtkCTree *ctree, GtkCTreeNode *node, gint depth);"
gtk;gtk_ctree_expander_style_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_ctree_expander_style_get_type (void) G_GNUC_CONST;"
gtk;gtk_ctree_expansion_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_ctree_expansion_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_ctree_export_to_gnode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GNode * gtk_ctree_export_to_gnode (GtkCTree *ctree, GNode *parent, GNode *sibling, GtkCTreeNode *node, GtkCTreeGNodeFunc func, gpointer data);"
gtk;gtk_ctree_find;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"gboolean gtk_ctree_find (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *child);"
gtk;gtk_ctree_find_all_by_row_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;" GList * gtk_ctree_find_all_by_row_data (GtkCTree *ctree, GtkCTreeNode *node, gpointer data);"
gtk;gtk_ctree_find_all_by_row_data_custom;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;" GList * gtk_ctree_find_all_by_row_data_custom (GtkCTree *ctree, GtkCTreeNode *node, gpointer data, GCompareFunc func);"
gtk;gtk_ctree_find_by_row_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkCTreeNode * gtk_ctree_find_by_row_data (GtkCTree *ctree, GtkCTreeNode *node, gpointer data);"
gtk;gtk_ctree_find_by_row_data_custom;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkCTreeNode * gtk_ctree_find_by_row_data_custom (GtkCTree *ctree, GtkCTreeNode *node, gpointer data, GCompareFunc func);"
gtk;gtk_ctree_find_node_ptr;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkCTreeNode * gtk_ctree_find_node_ptr (GtkCTree *ctree, GtkCTreeRow *ctree_row);"
gtk;gtk_ctree_get_node_info;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"gboolean gtk_ctree_get_node_info (GtkCTree *ctree, GtkCTreeNode *node, gchar **text, guint8 *spacing, GdkPixmap **pixmap_closed, GdkBitmap **mask_closed, GdkPixmap **pixmap_opened, GdkBitmap **mask_opened, gboolean *is_leaf, gboolean *expanded);"
gtk;gtk_ctree_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"  GType gtk_ctree_get_type (void) G_GNUC_CONST;"
gtk;gtk_ctree_insert_gnode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkCTreeNode * gtk_ctree_insert_gnode (GtkCTree *ctree, GtkCTreeNode *parent, GtkCTreeNode *sibling, GNode *gnode, GtkCTreeGNodeFunc func, gpointer data);"
gtk;gtk_ctree_insert_node;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkCTreeNode * gtk_ctree_insert_node (GtkCTree *ctree, GtkCTreeNode *parent, GtkCTreeNode *sibling, gchar *text[], guint8 spacing, GdkPixmap *pixmap_closed, GdkBitmap *mask_closed, GdkPixmap *pixmap_opened, GdkBitmap *mask_opened, gboolean is_leaf, gboolean expanded);"
gtk;gtk_ctree_is_ancestor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"gboolean gtk_ctree_is_ancestor (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *child);"
gtk;gtk_ctree_is_hot_spot;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"gboolean gtk_ctree_is_hot_spot (GtkCTree *ctree, gint x, gint y);"
gtk;gtk_ctree_is_viewable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"gboolean gtk_ctree_is_viewable (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_last;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkCTreeNode * gtk_ctree_last (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_line_style_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_ctree_line_style_get_type (void) G_GNUC_CONST;"
gtk;gtk_ctree_move;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;" void gtk_ctree_move (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeNode *new_parent, GtkCTreeNode *new_sibling);"
gtk;gtk_ctree_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkWidget * gtk_ctree_new (gint columns, gint tree_column);"
gtk;gtk_ctree_new_with_titles;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkWidget * gtk_ctree_new_with_titles (gint columns, gint tree_column, gchar *titles[]);"
gtk;gtk_ctree_node_get_cell_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkStyle * gtk_ctree_node_get_cell_style (GtkCTree *ctree, GtkCTreeNode *node, gint column);"
gtk;gtk_ctree_node_get_cell_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkCellType gtk_ctree_node_get_cell_type (GtkCTree *ctree, GtkCTreeNode *node, gint column);"
gtk;gtk_ctree_node_get_pixmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"gboolean gtk_ctree_node_get_pixmap (GtkCTree *ctree, GtkCTreeNode *node, gint column, GdkPixmap **pixmap, GdkBitmap **mask);"
gtk;gtk_ctree_node_get_pixtext;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"gboolean gtk_ctree_node_get_pixtext (GtkCTree *ctree, GtkCTreeNode *node, gint column, gchar **text, guint8 *spacing, GdkPixmap **pixmap, GdkBitmap **mask);"
gtk;gtk_ctree_node_get_row_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"gpointer gtk_ctree_node_get_row_data (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_node_get_row_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkStyle * gtk_ctree_node_get_row_style (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_node_get_selectable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"gboolean gtk_ctree_node_get_selectable (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_node_get_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"gboolean gtk_ctree_node_get_text (GtkCTree *ctree, GtkCTreeNode *node, gint column, gchar **text);"
gtk;gtk_ctree_node_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;" GType gtk_ctree_node_get_type (void) G_GNUC_CONST;"
gtk;gtk_ctree_node_is_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkVisibility gtk_ctree_node_is_visible (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_node_moveto;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_node_moveto (GtkCTree *ctree, GtkCTreeNode *node, gint column, gfloat row_align, gfloat col_align);"
gtk;gtk_ctree_node_nth;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"GtkCTreeNode * gtk_ctree_node_nth (GtkCTree *ctree, guint row);"
gtk;gtk_ctree_node_set_background;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_node_set_background (GtkCTree *ctree, GtkCTreeNode *node, const GdkColor *color);"
gtk;gtk_ctree_node_set_cell_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_node_set_cell_style (GtkCTree *ctree, GtkCTreeNode *node, gint column, GtkStyle *style);"
gtk;gtk_ctree_node_set_foreground;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_node_set_foreground (GtkCTree *ctree, GtkCTreeNode *node, const GdkColor *color);"
gtk;gtk_ctree_node_set_pixmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_node_set_pixmap (GtkCTree *ctree, GtkCTreeNode *node, gint column, GdkPixmap *pixmap, GdkBitmap *mask);"
gtk;gtk_ctree_node_set_pixtext;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_node_set_pixtext (GtkCTree *ctree, GtkCTreeNode *node, gint column, const gchar *text, guint8 spacing, GdkPixmap *pixmap, GdkBitmap *mask);"
gtk;gtk_ctree_node_set_row_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_node_set_row_data (GtkCTree *ctree, GtkCTreeNode *node, gpointer data);"
gtk;gtk_ctree_node_set_row_data_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_node_set_row_data_full (GtkCTree *ctree, GtkCTreeNode *node, gpointer data, GDestroyNotify destroy);"
gtk;gtk_ctree_node_set_row_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_node_set_row_style (GtkCTree *ctree, GtkCTreeNode *node, GtkStyle *style);"
gtk;gtk_ctree_node_set_selectable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_node_set_selectable (GtkCTree *ctree, GtkCTreeNode *node, gboolean selectable);"
gtk;gtk_ctree_node_set_shift;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_node_set_shift (GtkCTree *ctree, GtkCTreeNode *node, gint column, gint vertical, gint horizontal);"
gtk;gtk_ctree_node_set_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;" void gtk_ctree_node_set_text (GtkCTree *ctree, GtkCTreeNode *node, gint column, const gchar *text);"
gtk;gtk_ctree_pos_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_ctree_pos_get_type (void) G_GNUC_CONST;"
gtk;gtk_ctree_post_recursive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;" void gtk_ctree_post_recursive (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeFunc func, gpointer data);"
gtk;gtk_ctree_post_recursive_to_depth;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_post_recursive_to_depth (GtkCTree *ctree, GtkCTreeNode *node, gint depth, GtkCTreeFunc func, gpointer data);"
gtk;gtk_ctree_pre_recursive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_pre_recursive (GtkCTree *ctree, GtkCTreeNode *node, GtkCTreeFunc func, gpointer data);"
gtk;gtk_ctree_pre_recursive_to_depth;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_pre_recursive_to_depth (GtkCTree *ctree, GtkCTreeNode *node, gint depth, GtkCTreeFunc func, gpointer data);"
gtk;gtk_ctree_real_select_recursive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_real_select_recursive (GtkCTree *ctree, GtkCTreeNode *node, gint state);"
gtk;gtk_ctree_remove_node;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_remove_node (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_select;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_select (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_select_recursive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_select_recursive (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_set_drag_compare_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_set_drag_compare_func (GtkCTree *ctree, GtkCTreeCompareDragFunc cmp_func);"
gtk;gtk_ctree_set_expander_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_set_expander_style (GtkCTree *ctree, GtkCTreeExpanderStyle expander_style);"
gtk;gtk_ctree_set_indent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;" void gtk_ctree_set_indent (GtkCTree *ctree, gint indent);"
gtk;gtk_ctree_set_line_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_set_line_style (GtkCTree *ctree, GtkCTreeLineStyle line_style);"
gtk;gtk_ctree_set_node_info;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_set_node_info (GtkCTree *ctree, GtkCTreeNode *node, const gchar *text, guint8 spacing, GdkPixmap *pixmap_closed, GdkBitmap *mask_closed, GdkPixmap *pixmap_opened, GdkBitmap *mask_opened, gboolean is_leaf, gboolean expanded);"
gtk;gtk_ctree_set_show_stub;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_set_show_stub (GtkCTree *ctree, gboolean show_stub);"
gtk;gtk_ctree_set_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_set_spacing (GtkCTree *ctree, gint spacing);"
gtk;gtk_ctree_sort_node;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;" void gtk_ctree_sort_node (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_sort_recursive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_sort_recursive (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_toggle_expansion;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_toggle_expansion (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_toggle_expansion_recursive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_toggle_expansion_recursive (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_unselect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_unselect (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_ctree_unselect_recursive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkctree.h;"void gtk_ctree_unselect_recursive (GtkCTree *ctree, GtkCTreeNode *node);"
gtk;gtk_curve_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcurve.h;"  GType gtk_curve_get_type (void) G_GNUC_CONST;"
gtk;gtk_curve_get_vector;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcurve.h;"void gtk_curve_get_vector (GtkCurve *curve, int veclen, gfloat vector[]);"
gtk;gtk_curve_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcurve.h;"GtkWidget* gtk_curve_new (void);"
gtk;gtk_curve_reset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcurve.h;"void gtk_curve_reset (GtkCurve *curve);"
gtk;gtk_curve_set_curve_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcurve.h;"void gtk_curve_set_curve_type (GtkCurve *curve, GtkCurveType type);"
gtk;gtk_curve_set_gamma;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcurve.h;"void gtk_curve_set_gamma (GtkCurve *curve, gfloat gamma_);"
gtk;gtk_curve_set_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcurve.h;"void gtk_curve_set_range (GtkCurve *curve, gfloat min_x, gfloat max_x, gfloat min_y, gfloat max_y);"
gtk;gtk_curve_set_vector;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkcurve.h;"void gtk_curve_set_vector (GtkCurve *curve, int veclen, gfloat vector[]);"
gtk;gtk_curve_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_curve_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_debug_flag_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_debug_flag_get_type (void) G_GNUC_CONST;"
gtk;gtk_delete_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_delete_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_dest_defaults_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_dest_defaults_get_type (void) G_GNUC_CONST;"
gtk;gtk_dialog_add_action_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;" void gtk_dialog_add_action_widget (GtkDialog *dialog, GtkWidget *child, gint response_id);"
gtk;gtk_dialog_add_button;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;"GtkWidget* gtk_dialog_add_button (GtkDialog *dialog, const gchar *button_text, gint response_id);"
gtk;gtk_dialog_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_dialog_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_dialog_get_action_area;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;" GtkWidget * gtk_dialog_get_action_area (GtkDialog *dialog);"
gtk;gtk_dialog_get_content_area;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;"GtkWidget * gtk_dialog_get_content_area (GtkDialog *dialog);"
gtk;gtk_dialog_get_has_separator;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;"gboolean gtk_dialog_get_has_separator (GtkDialog *dialog);"
gtk;gtk_dialog_get_response_for_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;"gint gtk_dialog_get_response_for_widget (GtkDialog *dialog, GtkWidget *widget);"
gtk;gtk_dialog_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;"  GType gtk_dialog_get_type (void) G_GNUC_CONST;"
gtk;gtk_dialog_get_widget_for_response;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;"GtkWidget* gtk_dialog_get_widget_for_response (GtkDialog *dialog, gint response_id);"
gtk;gtk_dialog_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;"GtkWidget* gtk_dialog_new (void);"
gtk;gtk_dialog_response;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;" void gtk_dialog_response (GtkDialog *dialog, gint response_id);"
gtk;gtk_dialog_run;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;" gint gtk_dialog_run (GtkDialog *dialog);"
gtk;gtk_dialog_set_alternative_button_order_from_array;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;"void gtk_dialog_set_alternative_button_order_from_array (GtkDialog *dialog, gint n_params, gint *new_order);"
gtk;gtk_dialog_set_default_response;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;"void gtk_dialog_set_default_response (GtkDialog *dialog, gint response_id);"
gtk;gtk_dialog_set_has_separator;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;" void gtk_dialog_set_has_separator (GtkDialog *dialog, gboolean setting);"
gtk;gtk_dialog_set_response_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdialog.h;" void gtk_dialog_set_response_sensitive (GtkDialog *dialog, gint response_id, gboolean setting);"
gtk;gtk_direction_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_direction_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_disable_setlocale;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" void gtk_disable_setlocale (void);"
gtk;gtk_drag_begin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" GdkDragContext *gtk_drag_begin (GtkWidget *widget, GtkTargetList *targets, GdkDragAction actions, gint button, GdkEvent *event);"
gtk;gtk_drag_check_threshold;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" gboolean gtk_drag_check_threshold (GtkWidget *widget, gint start_x, gint start_y, gint current_x, gint current_y);"
gtk;gtk_drag_dest_add_image_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_dest_add_image_targets (GtkWidget *widget);"
gtk;gtk_drag_dest_add_text_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_dest_add_text_targets (GtkWidget *widget);"
gtk;gtk_drag_dest_add_uri_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_dest_add_uri_targets (GtkWidget *widget);"
gtk;gtk_drag_dest_find_target;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" GdkAtom gtk_drag_dest_find_target (GtkWidget *widget, GdkDragContext *context, GtkTargetList *target_list);"
gtk;gtk_drag_dest_get_target_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"GtkTargetList* gtk_drag_dest_get_target_list (GtkWidget *widget);"
gtk;gtk_drag_dest_get_track_motion;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"gboolean gtk_drag_dest_get_track_motion (GtkWidget *widget);"
gtk;gtk_drag_dest_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" void gtk_drag_dest_set (GtkWidget *widget, GtkDestDefaults flags, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions);"
gtk;gtk_drag_dest_set_proxy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" void gtk_drag_dest_set_proxy (GtkWidget *widget, GdkWindow *proxy_window, GdkDragProtocol protocol, gboolean use_coordinates);"
gtk;gtk_drag_dest_set_target_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_dest_set_target_list (GtkWidget *widget, GtkTargetList *target_list);"
gtk;gtk_drag_dest_set_track_motion;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" void gtk_drag_dest_set_track_motion (GtkWidget *widget, gboolean track_motion);"
gtk;gtk_drag_dest_unset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" void gtk_drag_dest_unset (GtkWidget *widget);"
gtk;gtk_drag_finish;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_finish (GdkDragContext *context, gboolean success, gboolean del, guint32 time_);"
gtk;gtk_drag_get_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"  void gtk_drag_get_data (GtkWidget *widget, GdkDragContext *context, GdkAtom target, guint32 time_);"
gtk;gtk_drag_get_source_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" GtkWidget *gtk_drag_get_source_widget (GdkDragContext *context);"
gtk;gtk_drag_highlight;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" void gtk_drag_highlight (GtkWidget *widget);"
gtk;gtk_drag_result_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_drag_result_get_type (void) G_GNUC_CONST;"
gtk;gtk_drag_set_default_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" void gtk_drag_set_default_icon (GdkColormap *colormap, GdkPixmap *pixmap, GdkBitmap *mask, gint hot_x, gint hot_y);"
gtk;gtk_drag_set_icon_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" void gtk_drag_set_icon_default (GdkDragContext *context);"
gtk;gtk_drag_set_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_set_icon_name (GdkDragContext *context, const gchar *icon_name, gint hot_x, gint hot_y);"
gtk;gtk_drag_set_icon_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_set_icon_pixbuf (GdkDragContext *context, GdkPixbuf *pixbuf, gint hot_x, gint hot_y);"
gtk;gtk_drag_set_icon_pixmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_set_icon_pixmap (GdkDragContext *context, GdkColormap *colormap, GdkPixmap *pixmap, GdkBitmap *mask, gint hot_x, gint hot_y);"
gtk;gtk_drag_set_icon_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_set_icon_stock (GdkDragContext *context, const gchar *stock_id, gint hot_x, gint hot_y);"
gtk;gtk_drag_set_icon_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" void gtk_drag_set_icon_widget (GdkDragContext *context, GtkWidget *widget, gint hot_x, gint hot_y);"
gtk;gtk_drag_source_add_image_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_source_add_image_targets (GtkWidget *widget);"
gtk;gtk_drag_source_add_text_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_source_add_text_targets (GtkWidget *widget);"
gtk;gtk_drag_source_add_uri_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_source_add_uri_targets (GtkWidget *widget);"
gtk;gtk_drag_source_get_target_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" GtkTargetList* gtk_drag_source_get_target_list (GtkWidget *widget);"
gtk;gtk_drag_source_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" void gtk_drag_source_set (GtkWidget *widget, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions);"
gtk;gtk_drag_source_set_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" void gtk_drag_source_set_icon (GtkWidget *widget, GdkColormap *colormap, GdkPixmap *pixmap, GdkBitmap *mask);"
gtk;gtk_drag_source_set_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_source_set_icon_name (GtkWidget *widget, const gchar *icon_name);"
gtk;gtk_drag_source_set_icon_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_source_set_icon_pixbuf (GtkWidget *widget, GdkPixbuf *pixbuf);"
gtk;gtk_drag_source_set_icon_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_source_set_icon_stock (GtkWidget *widget, const gchar *stock_id);"
gtk;gtk_drag_source_set_target_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_source_set_target_list (GtkWidget *widget, GtkTargetList *target_list);"
gtk;gtk_drag_source_unset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;" void gtk_drag_source_unset (GtkWidget *widget);"
gtk;gtk_drag_unhighlight;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdnd.h;"void gtk_drag_unhighlight (GtkWidget *widget);"
gtk;gtk_draw_arrow;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_arrow (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GtkArrowType arrow_type, gboolean fill, gint x, gint y, gint width, gint height);"
gtk;gtk_draw_box;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_box (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height);"
gtk;gtk_draw_box_gap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_box_gap (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width);"
gtk;gtk_draw_check;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_check (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height);"
gtk;gtk_draw_diamond;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_diamond (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height);"
gtk;gtk_draw_expander;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_expander (GtkStyle *style, GdkWindow *window, GtkStateType state_type, gint x, gint y, GtkExpanderStyle expander_style);"
gtk;gtk_draw_extension;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_extension (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height, GtkPositionType gap_side);"
gtk;gtk_draw_flat_box;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_flat_box (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height);"
gtk;gtk_draw_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_focus (GtkStyle *style, GdkWindow *window, gint x, gint y, gint width, gint height);"
gtk;gtk_draw_handle;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_handle (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height, GtkOrientation orientation);"
gtk;gtk_draw_hline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;" void gtk_draw_hline (GtkStyle *style, GdkWindow *window, GtkStateType state_type, gint x1, gint x2, gint y);"
gtk;gtk_draw_insertion_cursor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;" void gtk_draw_insertion_cursor (GtkWidget *widget, GdkDrawable *drawable, const GdkRectangle *area, const GdkRectangle *location, gboolean is_primary, GtkTextDirection direction, gboolean draw_arrow);"
gtk;gtk_draw_layout;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_layout (GtkStyle *style, GdkWindow *window, GtkStateType state_type, gboolean use_text, gint x, gint y, PangoLayout *layout);"
gtk;gtk_draw_option;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_option (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height);"
gtk;gtk_draw_polygon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_polygon (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, GdkPoint *points, gint npoints, gboolean fill);"
gtk;gtk_draw_resize_grip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_resize_grip (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GdkWindowEdge edge, gint x, gint y, gint width, gint height);"
gtk;gtk_draw_shadow;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_shadow (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height);"
gtk;gtk_draw_shadow_gap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_shadow_gap (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width);"
gtk;gtk_draw_slider;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_slider (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height, GtkOrientation orientation);"
gtk;gtk_draw_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;" void gtk_draw_string (GtkStyle *style, GdkWindow *window, GtkStateType state_type, gint x, gint y, const gchar *string);"
gtk;gtk_draw_tab;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_tab (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, gint x, gint y, gint width, gint height);"
gtk;gtk_draw_vline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_draw_vline (GtkStyle *style, GdkWindow *window, GtkStateType state_type, gint y1_, gint y2_, gint x);"
gtk;gtk_drawing_area_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdrawingarea.h;"  GType gtk_drawing_area_get_type (void) G_GNUC_CONST;"
gtk;gtk_drawing_area_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdrawingarea.h;"GtkWidget* gtk_drawing_area_new (void);"
gtk;gtk_drawing_area_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkdrawingarea.h;" void gtk_drawing_area_size (GtkDrawingArea *darea, gint width, gint height);"
gtk;gtk_editable_copy_clipboard;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"void gtk_editable_copy_clipboard (GtkEditable *editable);"
gtk;gtk_editable_cut_clipboard;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"void gtk_editable_cut_clipboard (GtkEditable *editable);"
gtk;gtk_editable_delete_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"void gtk_editable_delete_selection (GtkEditable *editable);"
gtk;gtk_editable_delete_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"void gtk_editable_delete_text (GtkEditable *editable, gint start_pos, gint end_pos);"
gtk;gtk_editable_get_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"gchar* gtk_editable_get_chars (GtkEditable *editable, gint start_pos, gint end_pos);"
gtk;gtk_editable_get_editable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"gboolean gtk_editable_get_editable (GtkEditable *editable);"
gtk;gtk_editable_get_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"gint gtk_editable_get_position (GtkEditable *editable);"
gtk;gtk_editable_get_selection_bounds;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"gboolean gtk_editable_get_selection_bounds (GtkEditable *editable, gint *start_pos, gint *end_pos);"
gtk;gtk_editable_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"  GType gtk_editable_get_type (void) G_GNUC_CONST;"
gtk;gtk_editable_insert_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"void gtk_editable_insert_text (GtkEditable *editable, const gchar *new_text, gint new_text_length, gint *position);"
gtk;gtk_editable_paste_clipboard;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"void gtk_editable_paste_clipboard (GtkEditable *editable);"
gtk;gtk_editable_select_region;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"void gtk_editable_select_region (GtkEditable *editable, gint start_pos, gint end_pos);"
gtk;gtk_editable_set_editable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"void gtk_editable_set_editable (GtkEditable *editable, gboolean is_editable);"
gtk;gtk_editable_set_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeditable.h;"void gtk_editable_set_position (GtkEditable *editable, gint position);"
gtk;gtk_entry_append_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_append_text (GtkEntry *entry, const gchar *text);"
gtk;gtk_entry_buffer_delete_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrybuffer.h;" guint gtk_entry_buffer_delete_text (GtkEntryBuffer *buffer, guint position, gint n_chars);"
gtk;gtk_entry_buffer_emit_deleted_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrybuffer.h;" void gtk_entry_buffer_emit_deleted_text (GtkEntryBuffer *buffer, guint position, guint n_chars);"
gtk;gtk_entry_buffer_emit_inserted_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrybuffer.h;" void gtk_entry_buffer_emit_inserted_text (GtkEntryBuffer *buffer, guint position, const gchar *chars, guint n_chars);"
gtk;gtk_entry_buffer_get_bytes;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrybuffer.h;" gsize gtk_entry_buffer_get_bytes (GtkEntryBuffer *buffer);"
gtk;gtk_entry_buffer_get_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrybuffer.h;" guint gtk_entry_buffer_get_length (GtkEntryBuffer *buffer);"
gtk;gtk_entry_buffer_get_max_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrybuffer.h;" gint gtk_entry_buffer_get_max_length (GtkEntryBuffer *buffer);"
gtk;gtk_entry_buffer_get_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrybuffer.h;" const gchar* gtk_entry_buffer_get_text (GtkEntryBuffer *buffer);"
gtk;gtk_entry_buffer_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrybuffer.h;"  GType gtk_entry_buffer_get_type (void) G_GNUC_CONST;"
gtk;gtk_entry_buffer_insert_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrybuffer.h;" guint gtk_entry_buffer_insert_text (GtkEntryBuffer *buffer, guint position, const gchar *chars, gint n_chars);"
gtk;gtk_entry_buffer_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrybuffer.h;" GtkEntryBuffer* gtk_entry_buffer_new (const gchar *initial_chars, gint n_initial_chars);"
gtk;gtk_entry_buffer_set_max_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrybuffer.h;" void gtk_entry_buffer_set_max_length (GtkEntryBuffer *buffer, gint max_length);"
gtk;gtk_entry_buffer_set_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrybuffer.h;" void gtk_entry_buffer_set_text (GtkEntryBuffer *buffer, const gchar *chars, gint n_chars);"
gtk;gtk_entry_completion_complete;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"void gtk_entry_completion_complete (GtkEntryCompletion *completion);"
gtk;gtk_entry_completion_delete_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"void gtk_entry_completion_delete_action (GtkEntryCompletion *completion, gint index_);"
gtk;gtk_entry_completion_get_completion_prefix;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;" const gchar *gtk_entry_completion_get_completion_prefix (GtkEntryCompletion *completion);"
gtk;gtk_entry_completion_get_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;" GtkWidget *gtk_entry_completion_get_entry (GtkEntryCompletion *completion);"
gtk;gtk_entry_completion_get_inline_completion;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"gboolean gtk_entry_completion_get_inline_completion (GtkEntryCompletion *completion);"
gtk;gtk_entry_completion_get_inline_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"gboolean gtk_entry_completion_get_inline_selection (GtkEntryCompletion *completion);"
gtk;gtk_entry_completion_get_minimum_key_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"gint gtk_entry_completion_get_minimum_key_length (GtkEntryCompletion *completion);"
gtk;gtk_entry_completion_get_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"GtkTreeModel *gtk_entry_completion_get_model (GtkEntryCompletion *completion);"
gtk;gtk_entry_completion_get_popup_completion;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"gboolean gtk_entry_completion_get_popup_completion (GtkEntryCompletion *completion);"
gtk;gtk_entry_completion_get_popup_set_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"gboolean gtk_entry_completion_get_popup_set_width (GtkEntryCompletion *completion);"
gtk;gtk_entry_completion_get_popup_single_match;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"gboolean gtk_entry_completion_get_popup_single_match (GtkEntryCompletion *completion);"
gtk;gtk_entry_completion_get_text_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"gint gtk_entry_completion_get_text_column (GtkEntryCompletion *completion);"
gtk;gtk_entry_completion_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"  GType gtk_entry_completion_get_type (void) G_GNUC_CONST;"
gtk;gtk_entry_completion_insert_action_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"void gtk_entry_completion_insert_action_markup (GtkEntryCompletion *completion, gint index_, const gchar *markup);"
gtk;gtk_entry_completion_insert_action_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;" void gtk_entry_completion_insert_action_text (GtkEntryCompletion *completion, gint index_, const gchar *text);"
gtk;gtk_entry_completion_insert_prefix;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"void gtk_entry_completion_insert_prefix (GtkEntryCompletion *completion);"
gtk;gtk_entry_completion_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"GtkEntryCompletion *gtk_entry_completion_new (void);"
gtk;gtk_entry_completion_set_inline_completion;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;" void gtk_entry_completion_set_inline_completion (GtkEntryCompletion *completion, gboolean inline_completion);"
gtk;gtk_entry_completion_set_inline_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"void gtk_entry_completion_set_inline_selection (GtkEntryCompletion *completion, gboolean inline_selection);"
gtk;gtk_entry_completion_set_match_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;" void gtk_entry_completion_set_match_func (GtkEntryCompletion *completion, GtkEntryCompletionMatchFunc func, gpointer func_data, GDestroyNotify func_notify);"
gtk;gtk_entry_completion_set_minimum_key_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"void gtk_entry_completion_set_minimum_key_length (GtkEntryCompletion *completion, gint length);"
gtk;gtk_entry_completion_set_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;" void gtk_entry_completion_set_model (GtkEntryCompletion *completion, GtkTreeModel *model);"
gtk;gtk_entry_completion_set_popup_completion;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"void gtk_entry_completion_set_popup_completion (GtkEntryCompletion *completion, gboolean popup_completion);"
gtk;gtk_entry_completion_set_popup_set_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"void gtk_entry_completion_set_popup_set_width (GtkEntryCompletion *completion, gboolean popup_set_width);"
gtk;gtk_entry_completion_set_popup_single_match;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;"void gtk_entry_completion_set_popup_single_match (GtkEntryCompletion *completion, gboolean popup_single_match);"
gtk;gtk_entry_completion_set_text_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentrycompletion.h;" void gtk_entry_completion_set_text_column (GtkEntryCompletion *completion, gint column);"
gtk;gtk_entry_get_activates_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gboolean gtk_entry_get_activates_default (GtkEntry *entry);"
gtk;gtk_entry_get_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gfloat gtk_entry_get_alignment (GtkEntry *entry);"
gtk;gtk_entry_get_buffer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" GtkEntryBuffer* gtk_entry_get_buffer (GtkEntry *entry);"
gtk;gtk_entry_get_completion;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"GtkEntryCompletion *gtk_entry_get_completion (GtkEntry *entry);"
gtk;gtk_entry_get_current_icon_drag_source;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gint gtk_entry_get_current_icon_drag_source (GtkEntry *entry);"
gtk;gtk_entry_get_cursor_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"GtkAdjustment* gtk_entry_get_cursor_hadjustment (GtkEntry *entry);"
gtk;gtk_entry_get_has_frame;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gboolean gtk_entry_get_has_frame (GtkEntry *entry);"
gtk;gtk_entry_get_icon_activatable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gboolean gtk_entry_get_icon_activatable (GtkEntry *entry, GtkEntryIconPosition icon_pos);"
gtk;gtk_entry_get_icon_at_pos;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gint gtk_entry_get_icon_at_pos (GtkEntry *entry, gint x, gint y);"
gtk;gtk_entry_get_icon_gicon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"GIcon* gtk_entry_get_icon_gicon (GtkEntry *entry, GtkEntryIconPosition icon_pos);"
gtk;gtk_entry_get_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"const gchar* gtk_entry_get_icon_name (GtkEntry *entry, GtkEntryIconPosition icon_pos);"
gtk;gtk_entry_get_icon_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"GdkPixbuf* gtk_entry_get_icon_pixbuf (GtkEntry *entry, GtkEntryIconPosition icon_pos);"
gtk;gtk_entry_get_icon_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gboolean gtk_entry_get_icon_sensitive (GtkEntry *entry, GtkEntryIconPosition icon_pos);"
gtk;gtk_entry_get_icon_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"const gchar* gtk_entry_get_icon_stock (GtkEntry *entry, GtkEntryIconPosition icon_pos);"
gtk;gtk_entry_get_icon_storage_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"GtkImageType gtk_entry_get_icon_storage_type (GtkEntry *entry, GtkEntryIconPosition icon_pos);"
gtk;gtk_entry_get_icon_tooltip_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gchar * gtk_entry_get_icon_tooltip_markup (GtkEntry *entry, GtkEntryIconPosition icon_pos);"
gtk;gtk_entry_get_icon_tooltip_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gchar * gtk_entry_get_icon_tooltip_text (GtkEntry *entry, GtkEntryIconPosition icon_pos);"
gtk;gtk_entry_get_icon_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" GdkWindow * gtk_entry_get_icon_window (GtkEntry *entry, GtkEntryIconPosition icon_pos);"
gtk;gtk_entry_get_inner_border;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"const GtkBorder* gtk_entry_get_inner_border (GtkEntry *entry);"
gtk;gtk_entry_get_invisible_char;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gunichar gtk_entry_get_invisible_char (GtkEntry *entry);"
gtk;gtk_entry_get_layout;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" PangoLayout* gtk_entry_get_layout (GtkEntry *entry);"
gtk;gtk_entry_get_layout_offsets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_get_layout_offsets (GtkEntry *entry, gint *x, gint *y);"
gtk;gtk_entry_get_max_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gint gtk_entry_get_max_length (GtkEntry *entry);"
gtk;gtk_entry_get_overwrite_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gboolean gtk_entry_get_overwrite_mode (GtkEntry *entry);"
gtk;gtk_entry_get_progress_fraction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gdouble gtk_entry_get_progress_fraction (GtkEntry *entry);"
gtk;gtk_entry_get_progress_pulse_step;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gdouble gtk_entry_get_progress_pulse_step (GtkEntry *entry);"
gtk;gtk_entry_get_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" const gchar* gtk_entry_get_text (GtkEntry *entry);"
gtk;gtk_entry_get_text_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"guint16 gtk_entry_get_text_length (GtkEntry *entry);"
gtk;gtk_entry_get_text_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" GdkWindow *gtk_entry_get_text_window (GtkEntry *entry);"
gtk;gtk_entry_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"  GType gtk_entry_get_type (void) G_GNUC_CONST;"
gtk;gtk_entry_get_visibility;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gboolean gtk_entry_get_visibility (GtkEntry *entry);"
gtk;gtk_entry_get_width_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gint gtk_entry_get_width_chars (GtkEntry *entry);"
gtk;gtk_entry_icon_position_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_entry_icon_position_get_type (void) G_GNUC_CONST;"
gtk;gtk_entry_im_context_filter_keypress;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" gboolean gtk_entry_im_context_filter_keypress (GtkEntry *entry, GdkEventKey *event);"
gtk;gtk_entry_layout_index_to_text_index;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" gint gtk_entry_layout_index_to_text_index (GtkEntry *entry, gint layout_index);"
gtk;gtk_entry_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"GtkWidget* gtk_entry_new (void);"
gtk;gtk_entry_new_with_buffer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"GtkWidget* gtk_entry_new_with_buffer (GtkEntryBuffer *buffer);"
gtk;gtk_entry_new_with_max_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" GtkWidget* gtk_entry_new_with_max_length (gint max);"
gtk;gtk_entry_prepend_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_prepend_text (GtkEntry *entry, const gchar *text);"
gtk;gtk_entry_progress_pulse;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_progress_pulse (GtkEntry *entry);"
gtk;gtk_entry_reset_im_context;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_reset_im_context (GtkEntry *entry);"
gtk;gtk_entry_select_region;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_select_region (GtkEntry *entry, gint start, gint end);"
gtk;gtk_entry_set_activates_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_activates_default (GtkEntry *entry, gboolean setting);"
gtk;gtk_entry_set_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_set_alignment (GtkEntry *entry, gfloat xalign);"
gtk;gtk_entry_set_buffer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_set_buffer (GtkEntry *entry, GtkEntryBuffer *buffer);"
gtk;gtk_entry_set_completion;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_completion (GtkEntry *entry, GtkEntryCompletion *completion);"
gtk;gtk_entry_set_cursor_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_cursor_hadjustment (GtkEntry *entry, GtkAdjustment *adjustment);"
gtk;gtk_entry_set_editable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_set_editable (GtkEntry *entry, gboolean editable);"
gtk;gtk_entry_set_has_frame;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_has_frame (GtkEntry *entry, gboolean setting);"
gtk;gtk_entry_set_icon_activatable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_set_icon_activatable (GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean activatable);"
gtk;gtk_entry_set_icon_drag_source;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_set_icon_drag_source (GtkEntry *entry, GtkEntryIconPosition icon_pos, GtkTargetList *target_list, GdkDragAction actions);"
gtk;gtk_entry_set_icon_from_gicon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_set_icon_from_gicon (GtkEntry *entry, GtkEntryIconPosition icon_pos, GIcon *icon);"
gtk;gtk_entry_set_icon_from_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_set_icon_from_icon_name (GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *icon_name);"
gtk;gtk_entry_set_icon_from_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_icon_from_pixbuf (GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkPixbuf *pixbuf);"
gtk;gtk_entry_set_icon_from_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_set_icon_from_stock (GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *stock_id);"
gtk;gtk_entry_set_icon_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_set_icon_sensitive (GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean sensitive);"
gtk;gtk_entry_set_icon_tooltip_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_set_icon_tooltip_markup (GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *tooltip);"
gtk;gtk_entry_set_icon_tooltip_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_set_icon_tooltip_text (GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *tooltip);"
gtk;gtk_entry_set_inner_border;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_inner_border (GtkEntry *entry, const GtkBorder *border);"
gtk;gtk_entry_set_invisible_char;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_invisible_char (GtkEntry *entry, gunichar ch);"
gtk;gtk_entry_set_max_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_max_length (GtkEntry *entry, gint max);"
gtk;gtk_entry_set_overwrite_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_overwrite_mode (GtkEntry *entry, gboolean overwrite);"
gtk;gtk_entry_set_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_set_position (GtkEntry *entry, gint position);"
gtk;gtk_entry_set_progress_fraction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_progress_fraction (GtkEntry *entry, gdouble fraction);"
gtk;gtk_entry_set_progress_pulse_step;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_progress_pulse_step (GtkEntry *entry, gdouble fraction);"
gtk;gtk_entry_set_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_text (GtkEntry *entry, const gchar *text);"
gtk;gtk_entry_set_visibility;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_visibility (GtkEntry *entry, gboolean visible);"
gtk;gtk_entry_set_width_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;" void gtk_entry_set_width_chars (GtkEntry *entry, gint n_chars);"
gtk;gtk_entry_text_index_to_layout_index;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"gint gtk_entry_text_index_to_layout_index (GtkEntry *entry, gint text_index);"
gtk;gtk_entry_unset_invisible_char;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkentry.h;"void gtk_entry_unset_invisible_char (GtkEntry *entry);"
gtk;gtk_event_box_get_above_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeventbox.h;"gboolean gtk_event_box_get_above_child (GtkEventBox *event_box);"
gtk;gtk_event_box_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeventbox.h;"  GType gtk_event_box_get_type (void) G_GNUC_CONST;"
gtk;gtk_event_box_get_visible_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeventbox.h;"gboolean gtk_event_box_get_visible_window (GtkEventBox *event_box);"
gtk;gtk_event_box_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeventbox.h;"GtkWidget* gtk_event_box_new (void);"
gtk;gtk_event_box_set_above_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeventbox.h;"void gtk_event_box_set_above_child (GtkEventBox *event_box, gboolean above_child);"
gtk;gtk_event_box_set_visible_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkeventbox.h;"void gtk_event_box_set_visible_window (GtkEventBox *event_box, gboolean visible_window);"
gtk;gtk_events_pending;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"gboolean gtk_events_pending (void);"
gtk;gtk_exit;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" void gtk_exit (gint error_code);"
gtk;gtk_expander_get_expanded;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;"gboolean gtk_expander_get_expanded (GtkExpander *expander);"
gtk;gtk_expander_get_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;"const gchar * gtk_expander_get_label (GtkExpander *expander);"
gtk;gtk_expander_get_label_fill;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;"gboolean gtk_expander_get_label_fill (GtkExpander *expander);"
gtk;gtk_expander_get_label_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;"GtkWidget *gtk_expander_get_label_widget (GtkExpander *expander);"
gtk;gtk_expander_get_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;"gint gtk_expander_get_spacing (GtkExpander *expander);"
gtk;gtk_expander_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;"  GType gtk_expander_get_type (void) G_GNUC_CONST;"
gtk;gtk_expander_get_use_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;"gboolean gtk_expander_get_use_markup (GtkExpander *expander);"
gtk;gtk_expander_get_use_underline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;"gboolean gtk_expander_get_use_underline (GtkExpander *expander);"
gtk;gtk_expander_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;" GtkWidget *gtk_expander_new (const gchar *label);"
gtk;gtk_expander_new_with_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;"GtkWidget *gtk_expander_new_with_mnemonic (const gchar *label);"
gtk;gtk_expander_set_expanded;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;" void gtk_expander_set_expanded (GtkExpander *expander, gboolean expanded);"
gtk;gtk_expander_set_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;" void gtk_expander_set_label (GtkExpander *expander, const gchar *label);"
gtk;gtk_expander_set_label_fill;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;"void gtk_expander_set_label_fill (GtkExpander *expander, gboolean label_fill);"
gtk;gtk_expander_set_label_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;" void gtk_expander_set_label_widget (GtkExpander *expander, GtkWidget *label_widget);"
gtk;gtk_expander_set_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;" void gtk_expander_set_spacing (GtkExpander *expander, gint spacing);"
gtk;gtk_expander_set_use_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;" void gtk_expander_set_use_markup (GtkExpander *expander, gboolean use_markup);"
gtk;gtk_expander_set_use_underline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkexpander.h;" void gtk_expander_set_use_underline (GtkExpander *expander, gboolean use_underline);"
gtk;gtk_expander_style_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_expander_style_get_type (void) G_GNUC_CONST;"
gtk;gtk_false;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"gboolean gtk_false (void) G_GNUC_CONST;"
gtk;gtk_file_chooser_action_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_file_chooser_action_get_type (void) G_GNUC_CONST;"
gtk;gtk_file_chooser_add_filter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" void gtk_file_chooser_add_filter (GtkFileChooser *chooser, GtkFileFilter *filter);"
gtk;gtk_file_chooser_add_shortcut_folder_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" gboolean gtk_file_chooser_add_shortcut_folder_uri (GtkFileChooser *chooser, const char *uri, GError **error);"
gtk;gtk_file_chooser_button_get_focus_on_click;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h;"gboolean gtk_file_chooser_button_get_focus_on_click (GtkFileChooserButton *button);"
gtk;gtk_file_chooser_button_get_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h;"const gchar * gtk_file_chooser_button_get_title (GtkFileChooserButton *button);"
gtk;gtk_file_chooser_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h;"  GType gtk_file_chooser_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_file_chooser_button_get_width_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h;"gint gtk_file_chooser_button_get_width_chars (GtkFileChooserButton *button);"
gtk;gtk_file_chooser_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h;"GtkWidget * gtk_file_chooser_button_new (const gchar *title, GtkFileChooserAction action);"
gtk;gtk_file_chooser_button_new_with_backend;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h;" GtkWidget * gtk_file_chooser_button_new_with_backend (const gchar *title, GtkFileChooserAction action, const gchar *backend);"
gtk;gtk_file_chooser_button_new_with_dialog;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h;" GtkWidget * gtk_file_chooser_button_new_with_dialog (GtkWidget *dialog);"
gtk;gtk_file_chooser_button_set_focus_on_click;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h;"void gtk_file_chooser_button_set_focus_on_click (GtkFileChooserButton *button, gboolean focus_on_click);"
gtk;gtk_file_chooser_button_set_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h;"void gtk_file_chooser_button_set_title (GtkFileChooserButton *button, const gchar *title);"
gtk;gtk_file_chooser_button_set_width_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h;"void gtk_file_chooser_button_set_width_chars (GtkFileChooserButton *button, gint n_chars);"
gtk;gtk_file_chooser_confirmation_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_file_chooser_confirmation_get_type (void) G_GNUC_CONST;"
gtk;gtk_file_chooser_dialog_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserdialog.h;"  GType gtk_file_chooser_dialog_get_type (void) G_GNUC_CONST;"
gtk;gtk_file_chooser_error_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_file_chooser_error_get_type (void) G_GNUC_CONST;"
gtk;gtk_file_chooser_error_quark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" GQuark gtk_file_chooser_error_quark (void);"
gtk;gtk_file_chooser_get_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"GtkFileChooserAction gtk_file_chooser_get_action (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_create_folders;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_get_create_folders (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_current_folder_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"GFile * gtk_file_chooser_get_current_folder_file (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_current_folder_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gchar * gtk_file_chooser_get_current_folder_uri (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_do_overwrite_confirmation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_get_do_overwrite_confirmation (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_extra_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"GtkWidget *gtk_file_chooser_get_extra_widget (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" GFile * gtk_file_chooser_get_file (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_files;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"GSList * gtk_file_chooser_get_files (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_filter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"GtkFileFilter *gtk_file_chooser_get_filter (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_local_only;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_get_local_only (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_preview_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"GFile *gtk_file_chooser_get_preview_file (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_preview_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"char *gtk_file_chooser_get_preview_uri (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_preview_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"GtkWidget *gtk_file_chooser_get_preview_widget (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_preview_widget_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_get_preview_widget_active (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_select_multiple;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_get_select_multiple (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_show_hidden;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_get_show_hidden (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"  GType gtk_file_chooser_get_type (void) G_GNUC_CONST;"
gtk;gtk_file_chooser_get_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" gchar * gtk_file_chooser_get_uri (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_uris;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"GSList * gtk_file_chooser_get_uris (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_get_use_preview_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_get_use_preview_label (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_list_filters;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"GSList *gtk_file_chooser_list_filters (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_list_shortcut_folder_uris;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"GSList *gtk_file_chooser_list_shortcut_folder_uris (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_remove_filter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"void gtk_file_chooser_remove_filter (GtkFileChooser *chooser, GtkFileFilter *filter);"
gtk;gtk_file_chooser_remove_shortcut_folder_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_remove_shortcut_folder_uri (GtkFileChooser *chooser, const char *uri, GError **error);"
gtk;gtk_file_chooser_select_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"void gtk_file_chooser_select_all (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_select_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_select_file (GtkFileChooser *chooser, GFile *file, GError **error);"
gtk;gtk_file_chooser_select_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_select_uri (GtkFileChooser *chooser, const char *uri);"
gtk;gtk_file_chooser_set_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" void gtk_file_chooser_set_action (GtkFileChooser *chooser, GtkFileChooserAction action);"
gtk;gtk_file_chooser_set_create_folders;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" void gtk_file_chooser_set_create_folders (GtkFileChooser *chooser, gboolean create_folders);"
gtk;gtk_file_chooser_set_current_folder_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_set_current_folder_file (GtkFileChooser *chooser, GFile *file, GError **error);"
gtk;gtk_file_chooser_set_current_folder_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_set_current_folder_uri (GtkFileChooser *chooser, const gchar *uri);"
gtk;gtk_file_chooser_set_current_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" void gtk_file_chooser_set_current_name (GtkFileChooser *chooser, const gchar *name);"
gtk;gtk_file_chooser_set_do_overwrite_confirmation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" void gtk_file_chooser_set_do_overwrite_confirmation (GtkFileChooser *chooser, gboolean do_overwrite_confirmation);"
gtk;gtk_file_chooser_set_extra_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" void gtk_file_chooser_set_extra_widget (GtkFileChooser *chooser, GtkWidget *extra_widget);"
gtk;gtk_file_chooser_set_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_set_file (GtkFileChooser *chooser, GFile *file, GError **error);"
gtk;gtk_file_chooser_set_filter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" void gtk_file_chooser_set_filter (GtkFileChooser *chooser, GtkFileFilter *filter);"
gtk;gtk_file_chooser_set_local_only;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"void gtk_file_chooser_set_local_only (GtkFileChooser *chooser, gboolean local_only);"
gtk;gtk_file_chooser_set_preview_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" void gtk_file_chooser_set_preview_widget (GtkFileChooser *chooser, GtkWidget *preview_widget);"
gtk;gtk_file_chooser_set_preview_widget_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"void gtk_file_chooser_set_preview_widget_active (GtkFileChooser *chooser, gboolean active);"
gtk;gtk_file_chooser_set_select_multiple;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"void gtk_file_chooser_set_select_multiple (GtkFileChooser *chooser, gboolean select_multiple);"
gtk;gtk_file_chooser_set_show_hidden;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"void gtk_file_chooser_set_show_hidden (GtkFileChooser *chooser, gboolean show_hidden);"
gtk;gtk_file_chooser_set_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_set_uri (GtkFileChooser *chooser, const char *uri);"
gtk;gtk_file_chooser_set_use_preview_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"void gtk_file_chooser_set_use_preview_label (GtkFileChooser *chooser, gboolean use_label);"
gtk;gtk_file_chooser_unselect_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"void gtk_file_chooser_unselect_all (GtkFileChooser *chooser);"
gtk;gtk_file_chooser_unselect_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"void gtk_file_chooser_unselect_file (GtkFileChooser *chooser, GFile *file);"
gtk;gtk_file_chooser_unselect_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"void gtk_file_chooser_unselect_uri (GtkFileChooser *chooser, const char *uri);"
gtk;gtk_file_chooser_widget_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserwidget.h;"  GType gtk_file_chooser_widget_get_type (void) G_GNUC_CONST;"
gtk;gtk_file_chooser_widget_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserwidget.h;"GtkWidget *gtk_file_chooser_widget_new (GtkFileChooserAction action);"
gtk;gtk_file_chooser_widget_new_with_backend;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooserwidget.h;" GtkWidget *gtk_file_chooser_widget_new_with_backend (GtkFileChooserAction action, const gchar *backend);"
gtk;gtk_file_filter_add_custom;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilefilter.h;"void gtk_file_filter_add_custom (GtkFileFilter *filter, GtkFileFilterFlags needed, GtkFileFilterFunc func, gpointer data, GDestroyNotify notify);"
gtk;gtk_file_filter_add_mime_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilefilter.h;" void gtk_file_filter_add_mime_type (GtkFileFilter *filter, const gchar *mime_type);"
gtk;gtk_file_filter_add_pattern;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilefilter.h;"void gtk_file_filter_add_pattern (GtkFileFilter *filter, const gchar *pattern);"
gtk;gtk_file_filter_add_pixbuf_formats;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilefilter.h;"void gtk_file_filter_add_pixbuf_formats (GtkFileFilter *filter);"
gtk;gtk_file_filter_filter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilefilter.h;"gboolean gtk_file_filter_filter (GtkFileFilter *filter, const GtkFileFilterInfo *filter_info);"
gtk;gtk_file_filter_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_file_filter_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_file_filter_get_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilefilter.h;"const gchar * gtk_file_filter_get_name (GtkFileFilter *filter);"
gtk;gtk_file_filter_get_needed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilefilter.h;" GtkFileFilterFlags gtk_file_filter_get_needed (GtkFileFilter *filter);"
gtk;gtk_file_filter_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilefilter.h;"  GType gtk_file_filter_get_type (void) G_GNUC_CONST;"
gtk;gtk_file_filter_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilefilter.h;" GtkFileFilter * gtk_file_filter_new (void);"
gtk;gtk_file_filter_set_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilefilter.h;"void gtk_file_filter_set_name (GtkFileFilter *filter, const gchar *name);"
gtk;gtk_file_selection_complete;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilesel.h;" void gtk_file_selection_complete (GtkFileSelection *filesel, const gchar *pattern);"
gtk;gtk_file_selection_get_select_multiple;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilesel.h;"gboolean gtk_file_selection_get_select_multiple (GtkFileSelection *filesel);"
gtk;gtk_file_selection_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilesel.h;"  GType gtk_file_selection_get_type (void) G_GNUC_CONST;"
gtk;gtk_file_selection_hide_fileop_buttons;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilesel.h;"void gtk_file_selection_hide_fileop_buttons (GtkFileSelection *filesel);"
gtk;gtk_file_selection_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilesel.h;"GtkWidget* gtk_file_selection_new (const gchar *title);"
gtk;gtk_file_selection_set_select_multiple;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilesel.h;" void gtk_file_selection_set_select_multiple (GtkFileSelection *filesel, gboolean select_multiple);"
gtk;gtk_file_selection_show_fileop_buttons;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilesel.h;"void gtk_file_selection_show_fileop_buttons (GtkFileSelection *filesel);"
gtk;gtk_fixed_get_has_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfixed.h;"gboolean gtk_fixed_get_has_window (GtkFixed *fixed);"
gtk;gtk_fixed_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfixed.h;"  GType gtk_fixed_get_type (void) G_GNUC_CONST;"
gtk;gtk_fixed_move;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfixed.h;"void gtk_fixed_move (GtkFixed *fixed, GtkWidget *widget, gint x, gint y);"
gtk;gtk_fixed_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfixed.h;"GtkWidget* gtk_fixed_new (void);"
gtk;gtk_fixed_put;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfixed.h;"void gtk_fixed_put (GtkFixed *fixed, GtkWidget *widget, gint x, gint y);"
gtk;gtk_fixed_set_has_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfixed.h;" void gtk_fixed_set_has_window (GtkFixed *fixed, gboolean has_window);"
gtk;gtk_font_button_get_font_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"const gchar * gtk_font_button_get_font_name (GtkFontButton *font_button);"
gtk;gtk_font_button_get_show_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"gboolean gtk_font_button_get_show_size (GtkFontButton *font_button);"
gtk;gtk_font_button_get_show_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"gboolean gtk_font_button_get_show_style (GtkFontButton *font_button);"
gtk;gtk_font_button_get_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;" const gchar * gtk_font_button_get_title (GtkFontButton *font_button);"
gtk;gtk_font_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"  GType gtk_font_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_font_button_get_use_font;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"gboolean gtk_font_button_get_use_font (GtkFontButton *font_button);"
gtk;gtk_font_button_get_use_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"gboolean gtk_font_button_get_use_size (GtkFontButton *font_button);"
gtk;gtk_font_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"GtkWidget *gtk_font_button_new (void);"
gtk;gtk_font_button_new_with_font;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"GtkWidget *gtk_font_button_new_with_font (const gchar *fontname);"
gtk;gtk_font_button_set_font_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"gboolean gtk_font_button_set_font_name (GtkFontButton *font_button, const gchar *fontname);"
gtk;gtk_font_button_set_show_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"void gtk_font_button_set_show_size (GtkFontButton *font_button, gboolean show_size);"
gtk;gtk_font_button_set_show_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"void gtk_font_button_set_show_style (GtkFontButton *font_button, gboolean show_style);"
gtk;gtk_font_button_set_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"void gtk_font_button_set_title (GtkFontButton *font_button, const gchar *title);"
gtk;gtk_font_button_set_use_font;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"void gtk_font_button_set_use_font (GtkFontButton *font_button, gboolean use_font);"
gtk;gtk_font_button_set_use_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontbutton.h;"void gtk_font_button_set_use_size (GtkFontButton *font_button, gboolean use_size);"
gtk;gtk_font_selection_dialog_get_apply_button;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;" GtkWidget *gtk_font_selection_dialog_get_apply_button (GtkFontSelectionDialog *fsd);"
gtk;gtk_font_selection_dialog_get_cancel_button;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;" GtkWidget *gtk_font_selection_dialog_get_cancel_button (GtkFontSelectionDialog *fsd);"
gtk;gtk_font_selection_dialog_get_font;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;" GdkFont* gtk_font_selection_dialog_get_font (GtkFontSelectionDialog *fsd);"
gtk;gtk_font_selection_dialog_get_font_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;" gchar* gtk_font_selection_dialog_get_font_name (GtkFontSelectionDialog *fsd);"
gtk;gtk_font_selection_dialog_get_font_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"GtkWidget *gtk_font_selection_dialog_get_font_selection (GtkFontSelectionDialog *fsd);"
gtk;gtk_font_selection_dialog_get_ok_button;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;" GtkWidget *gtk_font_selection_dialog_get_ok_button (GtkFontSelectionDialog *fsd);"
gtk;gtk_font_selection_dialog_get_preview_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;" const gchar* gtk_font_selection_dialog_get_preview_text (GtkFontSelectionDialog *fsd);"
gtk;gtk_font_selection_dialog_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;" GType gtk_font_selection_dialog_get_type (void) G_GNUC_CONST;"
gtk;gtk_font_selection_dialog_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"GtkWidget *gtk_font_selection_dialog_new (const gchar *title);"
gtk;gtk_font_selection_dialog_set_font_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;" gboolean gtk_font_selection_dialog_set_font_name (GtkFontSelectionDialog *fsd, const gchar *fontname);"
gtk;gtk_font_selection_dialog_set_preview_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;" void gtk_font_selection_dialog_set_preview_text (GtkFontSelectionDialog *fsd, const gchar *text);"
gtk;gtk_font_selection_get_face;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"PangoFontFace * gtk_font_selection_get_face (GtkFontSelection *fontsel);"
gtk;gtk_font_selection_get_face_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"GtkWidget * gtk_font_selection_get_face_list (GtkFontSelection *fontsel);"
gtk;gtk_font_selection_get_family;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"PangoFontFamily * gtk_font_selection_get_family (GtkFontSelection *fontsel);"
gtk;gtk_font_selection_get_family_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"GtkWidget * gtk_font_selection_get_family_list (GtkFontSelection *fontsel);"
gtk;gtk_font_selection_get_font;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;" GdkFont* gtk_font_selection_get_font (GtkFontSelection *fontsel);"
gtk;gtk_font_selection_get_font_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"gchar* gtk_font_selection_get_font_name (GtkFontSelection *fontsel);"
gtk;gtk_font_selection_get_preview_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"GtkWidget * gtk_font_selection_get_preview_entry (GtkFontSelection *fontsel);"
gtk;gtk_font_selection_get_preview_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"const gchar* gtk_font_selection_get_preview_text (GtkFontSelection *fontsel);"
gtk;gtk_font_selection_get_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"gint gtk_font_selection_get_size (GtkFontSelection *fontsel);"
gtk;gtk_font_selection_get_size_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"GtkWidget * gtk_font_selection_get_size_entry (GtkFontSelection *fontsel);"
gtk;gtk_font_selection_get_size_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"GtkWidget * gtk_font_selection_get_size_list (GtkFontSelection *fontsel);"
gtk;gtk_font_selection_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"  GType gtk_font_selection_get_type (void) G_GNUC_CONST;"
gtk;gtk_font_selection_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"GtkWidget * gtk_font_selection_new (void);"
gtk;gtk_font_selection_set_font_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;" gboolean gtk_font_selection_set_font_name (GtkFontSelection *fontsel, const gchar *fontname);"
gtk;gtk_font_selection_set_preview_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkfontsel.h;"void gtk_font_selection_set_preview_text (GtkFontSelection *fontsel, const gchar *text);"
gtk;gtk_frame_get_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkframe.h;"const gchar *gtk_frame_get_label (GtkFrame *frame);"
gtk;gtk_frame_get_label_align;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkframe.h;"void gtk_frame_get_label_align (GtkFrame *frame, gfloat *xalign, gfloat *yalign);"
gtk;gtk_frame_get_label_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkframe.h;"GtkWidget *gtk_frame_get_label_widget (GtkFrame *frame);"
gtk;gtk_frame_get_shadow_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkframe.h;"GtkShadowType gtk_frame_get_shadow_type (GtkFrame *frame);"
gtk;gtk_frame_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkframe.h;"  GType gtk_frame_get_type (void) G_GNUC_CONST;"
gtk;gtk_frame_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkframe.h;"GtkWidget* gtk_frame_new (const gchar *label);"
gtk;gtk_frame_set_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkframe.h;" void gtk_frame_set_label (GtkFrame *frame, const gchar *label);"
gtk;gtk_frame_set_label_align;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkframe.h;"void gtk_frame_set_label_align (GtkFrame *frame, gfloat xalign, gfloat yalign);"
gtk;gtk_frame_set_label_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkframe.h;" void gtk_frame_set_label_widget (GtkFrame *frame, GtkWidget *label_widget);"
gtk;gtk_frame_set_shadow_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkframe.h;"void gtk_frame_set_shadow_type (GtkFrame *frame, GtkShadowType type);"
gtk;gtk_gamma_curve_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkgamma.h;"  GType gtk_gamma_curve_get_type (void) G_GNUC_CONST;"
gtk;gtk_gamma_curve_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkgamma.h;"GtkWidget* gtk_gamma_curve_new (void);"
gtk;gtk_gc_get;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkgc.h;"  GdkGC* gtk_gc_get (gint depth, GdkColormap *colormap, GdkGCValues *values, GdkGCValuesMask values_mask);"
gtk;gtk_gc_release;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkgc.h;"void gtk_gc_release (GdkGC *gc);"
gtk;gtk_get_current_event;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" GdkEvent* gtk_get_current_event (void);"
gtk;gtk_get_current_event_state;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"gboolean gtk_get_current_event_state (GdkModifierType *state);"
gtk;gtk_get_current_event_time;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"guint32 gtk_get_current_event_time (void);"
gtk;gtk_get_default_language;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"PangoLanguage *gtk_get_default_language (void);"
gtk;gtk_get_event_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" GtkWidget* gtk_get_event_widget (GdkEvent *event);"
gtk;gtk_get_option_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" GOptionGroup *gtk_get_option_group (gboolean open_default_display);"
gtk;gtk_grab_add;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" void gtk_grab_add (GtkWidget *widget);"
gtk;gtk_grab_get_current;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"GtkWidget* gtk_grab_get_current (void);"
gtk;gtk_grab_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"void gtk_grab_remove (GtkWidget *widget);"
gtk;gtk_handle_box_get_child_detached;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhandlebox.h;"gboolean gtk_handle_box_get_child_detached (GtkHandleBox *handle_box);"
gtk;gtk_handle_box_get_handle_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhandlebox.h;"GtkPositionType gtk_handle_box_get_handle_position(GtkHandleBox *handle_box);"
gtk;gtk_handle_box_get_shadow_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhandlebox.h;"GtkShadowType gtk_handle_box_get_shadow_type (GtkHandleBox *handle_box);"
gtk;gtk_handle_box_get_snap_edge;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhandlebox.h;"GtkPositionType gtk_handle_box_get_snap_edge (GtkHandleBox *handle_box);"
gtk;gtk_handle_box_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhandlebox.h;"  GType gtk_handle_box_get_type (void) G_GNUC_CONST;"
gtk;gtk_handle_box_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhandlebox.h;"GtkWidget* gtk_handle_box_new (void);"
gtk;gtk_handle_box_set_handle_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhandlebox.h;"void gtk_handle_box_set_handle_position (GtkHandleBox *handle_box, GtkPositionType position);"
gtk;gtk_handle_box_set_shadow_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhandlebox.h;"void gtk_handle_box_set_shadow_type (GtkHandleBox *handle_box, GtkShadowType type);"
gtk;gtk_handle_box_set_snap_edge;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhandlebox.h;"void gtk_handle_box_set_snap_edge (GtkHandleBox *handle_box, GtkPositionType edge);"
gtk;gtk_hbox_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhbox.h;"  GType gtk_hbox_get_type (void) G_GNUC_CONST;"
gtk;gtk_hbox_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhbox.h;"GtkWidget * gtk_hbox_new (gboolean homogeneous, gint spacing);"
gtk;gtk_hbutton_box_get_layout_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhbbox.h;"GtkButtonBoxStyle gtk_hbutton_box_get_layout_default (void);"
gtk;gtk_hbutton_box_get_spacing_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhbbox.h;" gint gtk_hbutton_box_get_spacing_default (void);"
gtk;gtk_hbutton_box_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhbbox.h;"  GType gtk_hbutton_box_get_type (void) G_GNUC_CONST;"
gtk;gtk_hbutton_box_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhbbox.h;"GtkWidget* gtk_hbutton_box_new (void);"
gtk;gtk_hbutton_box_set_layout_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhbbox.h;"void gtk_hbutton_box_set_layout_default (GtkButtonBoxStyle layout);"
gtk;gtk_hbutton_box_set_spacing_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhbbox.h;" void gtk_hbutton_box_set_spacing_default (gint spacing);"
gtk;gtk_hpaned_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhpaned.h;"  GType gtk_hpaned_get_type (void) G_GNUC_CONST;"
gtk;gtk_hpaned_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhpaned.h;"GtkWidget * gtk_hpaned_new (void);"
gtk;gtk_hruler_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhruler.h;"  GType gtk_hruler_get_type (void) G_GNUC_CONST;"
gtk;gtk_hruler_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhruler.h;"GtkWidget* gtk_hruler_new (void);"
gtk;gtk_hscale_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhscale.h;"  GType gtk_hscale_get_type (void) G_GNUC_CONST;"
gtk;gtk_hscale_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhscale.h;"GtkWidget* gtk_hscale_new (GtkAdjustment *adjustment);"
gtk;gtk_hscale_new_with_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhscale.h;"GtkWidget* gtk_hscale_new_with_range (gdouble min, gdouble max, gdouble step);"
gtk;gtk_hscrollbar_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhscrollbar.h;"  GType gtk_hscrollbar_get_type (void) G_GNUC_CONST;"
gtk;gtk_hscrollbar_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhscrollbar.h;"GtkWidget* gtk_hscrollbar_new (GtkAdjustment *adjustment);"
gtk;gtk_hseparator_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhseparator.h;"  GType gtk_hseparator_get_type (void) G_GNUC_CONST;"
gtk;gtk_hseparator_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhseparator.h;"GtkWidget* gtk_hseparator_new (void);"
gtk;gtk_hsv_get_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhsv.h;"void gtk_hsv_get_color (GtkHSV *hsv, gdouble *h, gdouble *s, gdouble *v);"
gtk;gtk_hsv_get_metrics;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhsv.h;"void gtk_hsv_get_metrics (GtkHSV *hsv, gint *size, gint *ring_width);"
gtk;gtk_hsv_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhsv.h;"  GType gtk_hsv_get_type (void) G_GNUC_CONST;"
gtk;gtk_hsv_is_adjusting;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhsv.h;"gboolean gtk_hsv_is_adjusting (GtkHSV *hsv);"
gtk;gtk_hsv_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhsv.h;"GtkWidget* gtk_hsv_new (void);"
gtk;gtk_hsv_set_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhsv.h;"void gtk_hsv_set_color (GtkHSV *hsv, double h, double s, double v);"
gtk;gtk_hsv_set_metrics;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhsv.h;"void gtk_hsv_set_metrics (GtkHSV *hsv, gint size, gint ring_width);"
gtk;gtk_hsv_to_rgb;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhsv.h;" void gtk_hsv_to_rgb (gdouble h, gdouble s, gdouble v, gdouble *r, gdouble *g, gdouble *b);"
gtk;gtk_icon_factory_add;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"void gtk_icon_factory_add (GtkIconFactory *factory, const gchar *stock_id, GtkIconSet *icon_set);"
gtk;gtk_icon_factory_add_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" void gtk_icon_factory_add_default (GtkIconFactory *factory);"
gtk;gtk_icon_factory_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"  GType gtk_icon_factory_get_type (void) G_GNUC_CONST;"
gtk;gtk_icon_factory_lookup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GtkIconSet* gtk_icon_factory_lookup (GtkIconFactory *factory, const gchar *stock_id);"
gtk;gtk_icon_factory_lookup_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GtkIconSet* gtk_icon_factory_lookup_default (const gchar *stock_id);"
gtk;gtk_icon_factory_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GtkIconFactory* gtk_icon_factory_new (void);"
gtk;gtk_icon_factory_remove_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"void gtk_icon_factory_remove_default (GtkIconFactory *factory);"
gtk;gtk_icon_info_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"GtkIconInfo * gtk_icon_info_copy (GtkIconInfo *icon_info);"
gtk;gtk_icon_info_free;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"void gtk_icon_info_free (GtkIconInfo *icon_info);"
gtk;gtk_icon_info_get_attach_points;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"gboolean gtk_icon_info_get_attach_points (GtkIconInfo *icon_info, GdkPoint **points, gint *n_points);"
gtk;gtk_icon_info_get_base_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" gint gtk_icon_info_get_base_size (GtkIconInfo *icon_info);"
gtk;gtk_icon_info_get_builtin_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"GdkPixbuf * gtk_icon_info_get_builtin_pixbuf (GtkIconInfo *icon_info);"
gtk;gtk_icon_info_get_display_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"const gchar * gtk_icon_info_get_display_name (GtkIconInfo *icon_info);"
gtk;gtk_icon_info_get_embedded_rect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" gboolean gtk_icon_info_get_embedded_rect (GtkIconInfo *icon_info, GdkRectangle *rectangle);"
gtk;gtk_icon_info_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" GType gtk_icon_info_get_type (void) G_GNUC_CONST;"
gtk;gtk_icon_info_load_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"GdkPixbuf * gtk_icon_info_load_icon (GtkIconInfo *icon_info, GError **error);"
gtk;gtk_icon_info_new_for_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" GtkIconInfo * gtk_icon_info_new_for_pixbuf (GtkIconTheme *icon_theme, GdkPixbuf *pixbuf);"
gtk;gtk_icon_info_set_raw_coordinates;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"void gtk_icon_info_set_raw_coordinates (GtkIconInfo *icon_info, gboolean raw_coordinates);"
gtk;gtk_icon_lookup_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_icon_lookup_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_icon_set_add_source;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" void gtk_icon_set_add_source (GtkIconSet *icon_set, const GtkIconSource *source);"
gtk;gtk_icon_set_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GtkIconSet* gtk_icon_set_copy (GtkIconSet *icon_set);"
gtk;gtk_icon_set_get_sizes;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" void gtk_icon_set_get_sizes (GtkIconSet *icon_set, GtkIconSize **sizes, gint *n_sizes);"
gtk;gtk_icon_set_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" GType gtk_icon_set_get_type (void) G_GNUC_CONST;"
gtk;gtk_icon_set_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GtkIconSet* gtk_icon_set_new (void);"
gtk;gtk_icon_set_new_from_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GtkIconSet* gtk_icon_set_new_from_pixbuf (GdkPixbuf *pixbuf);"
gtk;gtk_icon_set_ref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" GtkIconSet* gtk_icon_set_ref (GtkIconSet *icon_set);"
gtk;gtk_icon_set_render_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" GdkPixbuf* gtk_icon_set_render_icon (GtkIconSet *icon_set, GtkStyle *style, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget *widget, const char *detail);"
gtk;gtk_icon_set_unref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"void gtk_icon_set_unref (GtkIconSet *icon_set);"
gtk;gtk_icon_size_from_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GtkIconSize gtk_icon_size_from_name (const gchar *name);"
gtk;gtk_icon_size_get_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"const gchar * gtk_icon_size_get_name (GtkIconSize size);"
gtk;gtk_icon_size_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_icon_size_get_type (void) G_GNUC_CONST;"
gtk;gtk_icon_size_lookup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" gboolean gtk_icon_size_lookup (GtkIconSize size, gint *width, gint *height);"
gtk;gtk_icon_size_lookup_for_settings;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" gboolean gtk_icon_size_lookup_for_settings (GtkSettings *settings, GtkIconSize size, gint *width, gint *height);"
gtk;gtk_icon_size_register;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" GtkIconSize gtk_icon_size_register (const gchar *name, gint width, gint height);"
gtk;gtk_icon_size_register_alias;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"void gtk_icon_size_register_alias (const gchar *alias, GtkIconSize target);"
gtk;gtk_icon_source_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GtkIconSource* gtk_icon_source_copy (const GtkIconSource *source);"
gtk;gtk_icon_source_free;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"void gtk_icon_source_free (GtkIconSource *source);"
gtk;gtk_icon_source_get_direction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GtkTextDirection gtk_icon_source_get_direction (const GtkIconSource *source);"
gtk;gtk_icon_source_get_direction_wildcarded;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"gboolean gtk_icon_source_get_direction_wildcarded (const GtkIconSource *source);"
gtk;gtk_icon_source_get_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"const gchar* gtk_icon_source_get_icon_name (const GtkIconSource *source);"
gtk;gtk_icon_source_get_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GdkPixbuf* gtk_icon_source_get_pixbuf (const GtkIconSource *source);"
gtk;gtk_icon_source_get_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GtkIconSize gtk_icon_source_get_size (const GtkIconSource *source);"
gtk;gtk_icon_source_get_size_wildcarded;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"gboolean gtk_icon_source_get_size_wildcarded (const GtkIconSource *source);"
gtk;gtk_icon_source_get_state;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GtkStateType gtk_icon_source_get_state (const GtkIconSource *source);"
gtk;gtk_icon_source_get_state_wildcarded;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"gboolean gtk_icon_source_get_state_wildcarded (const GtkIconSource *source);"
gtk;gtk_icon_source_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" GType gtk_icon_source_get_type (void) G_GNUC_CONST;"
gtk;gtk_icon_source_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"GtkIconSource* gtk_icon_source_new (void);"
gtk;gtk_icon_source_set_direction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"void gtk_icon_source_set_direction (GtkIconSource *source, GtkTextDirection direction);"
gtk;gtk_icon_source_set_direction_wildcarded;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" void gtk_icon_source_set_direction_wildcarded (GtkIconSource *source, gboolean setting);"
gtk;gtk_icon_source_set_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"void gtk_icon_source_set_icon_name (GtkIconSource *source, const gchar *icon_name);"
gtk;gtk_icon_source_set_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"void gtk_icon_source_set_pixbuf (GtkIconSource *source, GdkPixbuf *pixbuf);"
gtk;gtk_icon_source_set_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"void gtk_icon_source_set_size (GtkIconSource *source, GtkIconSize size);"
gtk;gtk_icon_source_set_size_wildcarded;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"void gtk_icon_source_set_size_wildcarded (GtkIconSource *source, gboolean setting);"
gtk;gtk_icon_source_set_state;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"void gtk_icon_source_set_state (GtkIconSource *source, GtkStateType state);"
gtk;gtk_icon_source_set_state_wildcarded;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;"void gtk_icon_source_set_state_wildcarded (GtkIconSource *source, gboolean setting);"
gtk;gtk_icon_theme_add_builtin_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" void gtk_icon_theme_add_builtin_icon (const gchar *icon_name, gint size, GdkPixbuf *pixbuf);"
gtk;gtk_icon_theme_choose_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"GtkIconInfo * gtk_icon_theme_choose_icon (GtkIconTheme *icon_theme, const gchar *icon_names[], gint size, GtkIconLookupFlags flags);"
gtk;gtk_icon_theme_error_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_icon_theme_error_get_type (void) G_GNUC_CONST;"
gtk;gtk_icon_theme_error_quark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"  GQuark gtk_icon_theme_error_quark (void);"
gtk;gtk_icon_theme_get_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"GtkIconTheme *gtk_icon_theme_get_default (void);"
gtk;gtk_icon_theme_get_example_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"char * gtk_icon_theme_get_example_icon_name (GtkIconTheme *icon_theme);"
gtk;gtk_icon_theme_get_for_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"GtkIconTheme *gtk_icon_theme_get_for_screen (GdkScreen *screen);"
gtk;gtk_icon_theme_get_icon_sizes;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"gint *gtk_icon_theme_get_icon_sizes (GtkIconTheme *icon_theme, const gchar *icon_name);"
gtk;gtk_icon_theme_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" GType gtk_icon_theme_get_type (void) G_GNUC_CONST;"
gtk;gtk_icon_theme_has_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" gboolean gtk_icon_theme_has_icon (GtkIconTheme *icon_theme, const gchar *icon_name);"
gtk;gtk_icon_theme_list_contexts;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"GList * gtk_icon_theme_list_contexts (GtkIconTheme *icon_theme);"
gtk;gtk_icon_theme_list_icons;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" GList * gtk_icon_theme_list_icons (GtkIconTheme *icon_theme, const gchar *context);"
gtk;gtk_icon_theme_load_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"GdkPixbuf * gtk_icon_theme_load_icon (GtkIconTheme *icon_theme, const gchar *icon_name, gint size, GtkIconLookupFlags flags, GError **error);"
gtk;gtk_icon_theme_lookup_by_gicon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" GtkIconInfo * gtk_icon_theme_lookup_by_gicon (GtkIconTheme *icon_theme, GIcon *icon, gint size, GtkIconLookupFlags flags);"
gtk;gtk_icon_theme_lookup_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"GtkIconInfo * gtk_icon_theme_lookup_icon (GtkIconTheme *icon_theme, const gchar *icon_name, gint size, GtkIconLookupFlags flags);"
gtk;gtk_icon_theme_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" GtkIconTheme *gtk_icon_theme_new (void);"
gtk;gtk_icon_theme_rescan_if_needed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" gboolean gtk_icon_theme_rescan_if_needed (GtkIconTheme *icon_theme);"
gtk;gtk_icon_theme_set_custom_theme;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" void gtk_icon_theme_set_custom_theme (GtkIconTheme *icon_theme, const gchar *theme_name);"
gtk;gtk_icon_theme_set_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"void gtk_icon_theme_set_screen (GtkIconTheme *icon_theme, GdkScreen *screen);"
gtk;gtk_icon_view_convert_widget_to_bin_window_coords;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;" void gtk_icon_view_convert_widget_to_bin_window_coords (GtkIconView *icon_view, gint wx, gint wy, gint *bx, gint *by);"
gtk;gtk_icon_view_create_drag_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"GdkPixmap *gtk_icon_view_create_drag_icon (GtkIconView *icon_view, GtkTreePath *path);"
gtk;gtk_icon_view_drop_position_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_icon_view_drop_position_get_type (void) G_GNUC_CONST;"
gtk;gtk_icon_view_enable_model_drag_dest;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_enable_model_drag_dest (GtkIconView *icon_view, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions);"
gtk;gtk_icon_view_enable_model_drag_source;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;" void gtk_icon_view_enable_model_drag_source (GtkIconView *icon_view, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions);"
gtk;gtk_icon_view_get_column_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_column_spacing (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_columns;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_columns (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_cursor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gboolean gtk_icon_view_get_cursor (GtkIconView *icon_view, GtkTreePath **path, GtkCellRenderer **cell);"
gtk;gtk_icon_view_get_dest_item_at_pos;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gboolean gtk_icon_view_get_dest_item_at_pos (GtkIconView *icon_view, gint drag_x, gint drag_y, GtkTreePath **path, GtkIconViewDropPosition *pos);"
gtk;gtk_icon_view_get_drag_dest_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_get_drag_dest_item (GtkIconView *icon_view, GtkTreePath **path, GtkIconViewDropPosition *pos);"
gtk;gtk_icon_view_get_item_at_pos;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gboolean gtk_icon_view_get_item_at_pos (GtkIconView *icon_view, gint x, gint y, GtkTreePath **path, GtkCellRenderer **cell);"
gtk;gtk_icon_view_get_item_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_item_column (GtkIconView *icon_view, GtkTreePath *path);"
gtk;gtk_icon_view_get_item_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"GtkOrientation gtk_icon_view_get_item_orientation (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_item_padding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_item_padding (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_item_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_item_row (GtkIconView *icon_view, GtkTreePath *path);"
gtk;gtk_icon_view_get_item_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_item_width (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_margin (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_markup_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_markup_column (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"GtkTreeModel * gtk_icon_view_get_model (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"GtkOrientation gtk_icon_view_get_orientation (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_path_at_pos;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;" GtkTreePath * gtk_icon_view_get_path_at_pos (GtkIconView *icon_view, gint x, gint y);"
gtk;gtk_icon_view_get_pixbuf_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_pixbuf_column (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_reorderable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gboolean gtk_icon_view_get_reorderable (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_row_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_row_spacing (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_selected_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"GList *gtk_icon_view_get_selected_items (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_selection_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"GtkSelectionMode gtk_icon_view_get_selection_mode (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_spacing (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_text_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_text_column (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_tooltip_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gint gtk_icon_view_get_tooltip_column (GtkIconView *icon_view);"
gtk;gtk_icon_view_get_tooltip_context;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gboolean gtk_icon_view_get_tooltip_context (GtkIconView *icon_view, gint *x, gint *y, gboolean keyboard_tip, GtkTreeModel **model, GtkTreePath **path, GtkTreeIter *iter);"
gtk;gtk_icon_view_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"  GType gtk_icon_view_get_type (void) G_GNUC_CONST;"
gtk;gtk_icon_view_get_visible_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gboolean gtk_icon_view_get_visible_range (GtkIconView *icon_view, GtkTreePath **start_path, GtkTreePath **end_path);"
gtk;gtk_icon_view_item_activated;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_item_activated (GtkIconView *icon_view, GtkTreePath *path);"
gtk;gtk_icon_view_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"GtkWidget * gtk_icon_view_new (void);"
gtk;gtk_icon_view_new_with_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"GtkWidget * gtk_icon_view_new_with_model (GtkTreeModel *model);"
gtk;gtk_icon_view_path_is_selected;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"gboolean gtk_icon_view_path_is_selected (GtkIconView *icon_view, GtkTreePath *path);"
gtk;gtk_icon_view_scroll_to_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_scroll_to_path (GtkIconView *icon_view, GtkTreePath *path, gboolean use_align, gfloat row_align, gfloat col_align);"
gtk;gtk_icon_view_select_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_select_all (GtkIconView *icon_view);"
gtk;gtk_icon_view_select_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_select_path (GtkIconView *icon_view, GtkTreePath *path);"
gtk;gtk_icon_view_selected_foreach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;" void gtk_icon_view_selected_foreach (GtkIconView *icon_view, GtkIconViewForeachFunc func, gpointer data);"
gtk;gtk_icon_view_set_column_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_column_spacing (GtkIconView *icon_view, gint column_spacing);"
gtk;gtk_icon_view_set_columns;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_columns (GtkIconView *icon_view, gint columns);"
gtk;gtk_icon_view_set_cursor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_cursor (GtkIconView *icon_view, GtkTreePath *path, GtkCellRenderer *cell, gboolean start_editing);"
gtk;gtk_icon_view_set_drag_dest_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;" void gtk_icon_view_set_drag_dest_item (GtkIconView *icon_view, GtkTreePath *path, GtkIconViewDropPosition pos);"
gtk;gtk_icon_view_set_item_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_item_orientation (GtkIconView *icon_view, GtkOrientation orientation);"
gtk;gtk_icon_view_set_item_padding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_item_padding (GtkIconView *icon_view, gint item_padding);"
gtk;gtk_icon_view_set_item_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_item_width (GtkIconView *icon_view, gint item_width);"
gtk;gtk_icon_view_set_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_margin (GtkIconView *icon_view, gint margin);"
gtk;gtk_icon_view_set_markup_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_markup_column (GtkIconView *icon_view, gint column);"
gtk;gtk_icon_view_set_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;" void gtk_icon_view_set_model (GtkIconView *icon_view, GtkTreeModel *model);"
gtk;gtk_icon_view_set_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;" void gtk_icon_view_set_orientation (GtkIconView *icon_view, GtkOrientation orientation);"
gtk;gtk_icon_view_set_pixbuf_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_pixbuf_column (GtkIconView *icon_view, gint column);"
gtk;gtk_icon_view_set_reorderable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_reorderable (GtkIconView *icon_view, gboolean reorderable);"
gtk;gtk_icon_view_set_row_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_row_spacing (GtkIconView *icon_view, gint row_spacing);"
gtk;gtk_icon_view_set_selection_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_selection_mode (GtkIconView *icon_view, GtkSelectionMode mode);"
gtk;gtk_icon_view_set_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_spacing (GtkIconView *icon_view, gint spacing);"
gtk;gtk_icon_view_set_text_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_text_column (GtkIconView *icon_view, gint column);"
gtk;gtk_icon_view_set_tooltip_cell;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_tooltip_cell (GtkIconView *icon_view, GtkTooltip *tooltip, GtkTreePath *path, GtkCellRenderer *cell);"
gtk;gtk_icon_view_set_tooltip_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_set_tooltip_column (GtkIconView *icon_view, gint column);"
gtk;gtk_icon_view_set_tooltip_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;" void gtk_icon_view_set_tooltip_item (GtkIconView *icon_view, GtkTooltip *tooltip, GtkTreePath *path);"
gtk;gtk_icon_view_unselect_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_unselect_all (GtkIconView *icon_view);"
gtk;gtk_icon_view_unselect_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_unselect_path (GtkIconView *icon_view, GtkTreePath *path);"
gtk;gtk_icon_view_unset_model_drag_dest;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_unset_model_drag_dest (GtkIconView *icon_view);"
gtk;gtk_icon_view_unset_model_drag_source;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconview.h;"void gtk_icon_view_unset_model_drag_source (GtkIconView *icon_view);"
gtk;gtk_identifier_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypeutils.h;"  GType gtk_identifier_get_type (void) G_GNUC_CONST;"
gtk;gtk_idle_add;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" guint gtk_idle_add (GtkFunction function, gpointer data);"
gtk;gtk_idle_add_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"guint gtk_idle_add_full (gint priority, GtkFunction function, GtkCallbackMarshal marshal, gpointer data, GDestroyNotify destroy);"
gtk;gtk_idle_add_priority;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"guint gtk_idle_add_priority (gint priority, GtkFunction function, gpointer data);"
gtk;gtk_idle_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"void gtk_idle_remove (guint idle_handler_id);"
gtk;gtk_idle_remove_by_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"void gtk_idle_remove_by_data (gpointer data);"
gtk;gtk_im_context_delete_surrounding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontext.h;"gboolean gtk_im_context_delete_surrounding (GtkIMContext *context, gint offset, gint n_chars);"
gtk;gtk_im_context_filter_keypress;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontext.h;"gboolean gtk_im_context_filter_keypress (GtkIMContext *context, GdkEventKey *event);"
gtk;gtk_im_context_focus_in;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontext.h;"void gtk_im_context_focus_in (GtkIMContext *context);"
gtk;gtk_im_context_focus_out;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontext.h;"void gtk_im_context_focus_out (GtkIMContext *context);"
gtk;gtk_im_context_get_preedit_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontext.h;"void gtk_im_context_get_preedit_string (GtkIMContext *context, gchar **str, PangoAttrList **attrs, gint *cursor_pos);"
gtk;gtk_im_context_get_surrounding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontext.h;"gboolean gtk_im_context_get_surrounding (GtkIMContext *context, gchar **text, gint *cursor_index);"
gtk;gtk_im_context_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontext.h;"  GType gtk_im_context_get_type (void) G_GNUC_CONST;"
gtk;gtk_im_context_reset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontext.h;"void gtk_im_context_reset (GtkIMContext *context);"
gtk;gtk_im_context_set_client_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontext.h;" void gtk_im_context_set_client_window (GtkIMContext *context, GdkWindow *window);"
gtk;gtk_im_context_set_cursor_location;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontext.h;"void gtk_im_context_set_cursor_location (GtkIMContext *context, const GdkRectangle *area);"
gtk;gtk_im_context_set_surrounding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontext.h;"void gtk_im_context_set_surrounding (GtkIMContext *context, const gchar *text, gint len, gint cursor_index);"
gtk;gtk_im_context_set_use_preedit;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontext.h;"void gtk_im_context_set_use_preedit (GtkIMContext *context, gboolean use_preedit);"
gtk;gtk_im_context_simple_add_table;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontextsimple.h;" void gtk_im_context_simple_add_table (GtkIMContextSimple *context_simple, guint16 *data, gint max_seq_len, gint n_seqs);"
gtk;gtk_im_context_simple_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontextsimple.h;"  GType gtk_im_context_simple_get_type (void) G_GNUC_CONST;"
gtk;gtk_im_context_simple_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimcontextsimple.h;"GtkIMContext *gtk_im_context_simple_new (void);"
gtk;gtk_im_multicontext_append_menuitems;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimmulticontext.h;" void gtk_im_multicontext_append_menuitems (GtkIMMulticontext *context, GtkMenuShell *menushell);"
gtk;gtk_im_multicontext_get_context_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimmulticontext.h;"const char * gtk_im_multicontext_get_context_id (GtkIMMulticontext *context);"
gtk;gtk_im_multicontext_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimmulticontext.h;"  GType gtk_im_multicontext_get_type (void) G_GNUC_CONST;"
gtk;gtk_im_multicontext_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimmulticontext.h;"GtkIMContext *gtk_im_multicontext_new (void);"
gtk;gtk_im_multicontext_set_context_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimmulticontext.h;" void gtk_im_multicontext_set_context_id (GtkIMMulticontext *context, const char *context_id);"
gtk;gtk_im_preedit_style_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_im_preedit_style_get_type (void) G_GNUC_CONST;"
gtk;gtk_im_status_style_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_im_status_style_get_type (void) G_GNUC_CONST;"
gtk;gtk_image_clear;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;" void gtk_image_clear (GtkImage *image);"
gtk;gtk_image_get;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_get (GtkImage *image, GdkImage **val, GdkBitmap **mask);"
gtk;gtk_image_get_animation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"GdkPixbufAnimation* gtk_image_get_animation (GtkImage *image);"
gtk;gtk_image_get_gicon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_get_gicon (GtkImage *image, GIcon **gicon, GtkIconSize *size);"
gtk;gtk_image_get_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_get_icon_name (GtkImage *image, const gchar **icon_name, GtkIconSize *size);"
gtk;gtk_image_get_icon_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_get_icon_set (GtkImage *image, GtkIconSet **icon_set, GtkIconSize *size);"
gtk;gtk_image_get_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_get_image (GtkImage *image, GdkImage **gdk_image, GdkBitmap **mask);"
gtk;gtk_image_get_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"GdkPixbuf* gtk_image_get_pixbuf (GtkImage *image);"
gtk;gtk_image_get_pixel_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"gint gtk_image_get_pixel_size (GtkImage *image);"
gtk;gtk_image_get_pixmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;" void gtk_image_get_pixmap (GtkImage *image, GdkPixmap **pixmap, GdkBitmap **mask);"
gtk;gtk_image_get_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_get_stock (GtkImage *image, gchar **stock_id, GtkIconSize *size);"
gtk;gtk_image_get_storage_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;" GtkImageType gtk_image_get_storage_type (GtkImage *image);"
gtk;gtk_image_menu_item_get_always_show_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h;"gboolean gtk_image_menu_item_get_always_show_image (GtkImageMenuItem *image_menu_item);"
gtk;gtk_image_menu_item_get_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h;"GtkWidget* gtk_image_menu_item_get_image (GtkImageMenuItem *image_menu_item);"
gtk;gtk_image_menu_item_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h;"  GType gtk_image_menu_item_get_type (void) G_GNUC_CONST;"
gtk;gtk_image_menu_item_get_use_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h;"gboolean gtk_image_menu_item_get_use_stock (GtkImageMenuItem *image_menu_item);"
gtk;gtk_image_menu_item_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h;"GtkWidget* gtk_image_menu_item_new (void);"
gtk;gtk_image_menu_item_new_from_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h;"GtkWidget* gtk_image_menu_item_new_from_stock (const gchar *stock_id, GtkAccelGroup *accel_group);"
gtk;gtk_image_menu_item_new_with_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h;"GtkWidget* gtk_image_menu_item_new_with_label (const gchar *label);"
gtk;gtk_image_menu_item_new_with_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h;"GtkWidget* gtk_image_menu_item_new_with_mnemonic (const gchar *label);"
gtk;gtk_image_menu_item_set_accel_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h;"void gtk_image_menu_item_set_accel_group (GtkImageMenuItem *image_menu_item, GtkAccelGroup *accel_group);"
gtk;gtk_image_menu_item_set_always_show_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h;"void gtk_image_menu_item_set_always_show_image (GtkImageMenuItem *image_menu_item, gboolean always_show);"
gtk;gtk_image_menu_item_set_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h;"void gtk_image_menu_item_set_image (GtkImageMenuItem *image_menu_item, GtkWidget *image);"
gtk;gtk_image_menu_item_set_use_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h;"void gtk_image_menu_item_set_use_stock (GtkImageMenuItem *image_menu_item, gboolean use_stock);"
gtk;gtk_image_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;" GtkWidget* gtk_image_new (void);"
gtk;gtk_image_new_from_animation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"GtkWidget* gtk_image_new_from_animation (GdkPixbufAnimation *animation);"
gtk;gtk_image_new_from_gicon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"GtkWidget* gtk_image_new_from_gicon (GIcon *icon, GtkIconSize size);"
gtk;gtk_image_new_from_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"GtkWidget* gtk_image_new_from_icon_name (const gchar *icon_name, GtkIconSize size);"
gtk;gtk_image_new_from_icon_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"GtkWidget* gtk_image_new_from_icon_set (GtkIconSet *icon_set, GtkIconSize size);"
gtk;gtk_image_new_from_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"GtkWidget* gtk_image_new_from_image (GdkImage *image, GdkBitmap *mask);"
gtk;gtk_image_new_from_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"GtkWidget* gtk_image_new_from_pixbuf (GdkPixbuf *pixbuf);"
gtk;gtk_image_new_from_pixmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"GtkWidget* gtk_image_new_from_pixmap (GdkPixmap *pixmap, GdkBitmap *mask);"
gtk;gtk_image_new_from_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"GtkWidget* gtk_image_new_from_stock (const gchar *stock_id, GtkIconSize size);"
gtk;gtk_image_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;" void gtk_image_set (GtkImage *image, GdkImage *val, GdkBitmap *mask);"
gtk;gtk_image_set_from_animation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_set_from_animation (GtkImage *image, GdkPixbufAnimation *animation);"
gtk;gtk_image_set_from_gicon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_set_from_gicon (GtkImage *image, GIcon *icon, GtkIconSize size);"
gtk;gtk_image_set_from_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_set_from_icon_name (GtkImage *image, const gchar *icon_name, GtkIconSize size);"
gtk;gtk_image_set_from_icon_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_set_from_icon_set (GtkImage *image, GtkIconSet *icon_set, GtkIconSize size);"
gtk;gtk_image_set_from_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_set_from_image (GtkImage *image, GdkImage *gdk_image, GdkBitmap *mask);"
gtk;gtk_image_set_from_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_set_from_pixbuf (GtkImage *image, GdkPixbuf *pixbuf);"
gtk;gtk_image_set_from_pixmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_set_from_pixmap (GtkImage *image, GdkPixmap *pixmap, GdkBitmap *mask);"
gtk;gtk_image_set_from_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_set_from_stock (GtkImage *image, const gchar *stock_id, GtkIconSize size);"
gtk;gtk_image_set_pixel_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_set_pixel_size (GtkImage *image, gint pixel_size);"
gtk;gtk_image_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_image_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_info_bar_add_action_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinfobar.h;"void gtk_info_bar_add_action_widget (GtkInfoBar *info_bar, GtkWidget *child, gint response_id);"
gtk;gtk_info_bar_add_button;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinfobar.h;"GtkWidget *gtk_info_bar_add_button (GtkInfoBar *info_bar, const gchar *button_text, gint response_id);"
gtk;gtk_info_bar_get_action_area;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinfobar.h;" GtkWidget *gtk_info_bar_get_action_area (GtkInfoBar *info_bar);"
gtk;gtk_info_bar_get_content_area;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinfobar.h;"GtkWidget *gtk_info_bar_get_content_area (GtkInfoBar *info_bar);"
gtk;gtk_info_bar_get_message_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinfobar.h;"GtkMessageType gtk_info_bar_get_message_type (GtkInfoBar *info_bar);"
gtk;gtk_info_bar_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinfobar.h;"  GType gtk_info_bar_get_type (void) G_GNUC_CONST;"
gtk;gtk_info_bar_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinfobar.h;"GtkWidget *gtk_info_bar_new (void);"
gtk;gtk_info_bar_response;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinfobar.h;" void gtk_info_bar_response (GtkInfoBar *info_bar, gint response_id);"
gtk;gtk_info_bar_set_default_response;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinfobar.h;"void gtk_info_bar_set_default_response (GtkInfoBar *info_bar, gint response_id);"
gtk;gtk_info_bar_set_message_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinfobar.h;" void gtk_info_bar_set_message_type (GtkInfoBar *info_bar, GtkMessageType message_type);"
gtk;gtk_info_bar_set_response_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinfobar.h;"void gtk_info_bar_set_response_sensitive (GtkInfoBar *info_bar, gint response_id, gboolean setting);"
gtk;gtk_init_abi_check;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"  void gtk_init_abi_check (int *argc, char ***argv, int num_checks, size_t sizeof_GtkWindow, size_t sizeof_GtkBox);"
gtk;gtk_init_add;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" void gtk_init_add (GtkFunction function, gpointer data);"
gtk;gtk_init_check;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" gboolean gtk_init_check (int *argc, char ***argv);"
gtk;gtk_init_check_abi_check;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"gboolean gtk_init_check_abi_check (int *argc, char ***argv, int num_checks, size_t sizeof_GtkWindow, size_t sizeof_GtkBox);"
gtk;gtk_init_with_args;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" gboolean gtk_init_with_args (int *argc, char ***argv, const char *parameter_string, GOptionEntry *entries, const char *translation_domain, GError **error);"
gtk;gtk_input_add_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"guint gtk_input_add_full (gint source, GdkInputCondition condition, GdkInputFunction function, GtkCallbackMarshal marshal, gpointer data, GDestroyNotify destroy);"
gtk;gtk_input_dialog_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinputdialog.h;"  GType gtk_input_dialog_get_type (void) G_GNUC_CONST;"
gtk;gtk_input_dialog_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinputdialog.h;"GtkWidget* gtk_input_dialog_new (void);"
gtk;gtk_input_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"void gtk_input_remove (guint input_handler_id);"
gtk;gtk_invisible_get_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinvisible.h;"GdkScreen* gtk_invisible_get_screen (GtkInvisible *invisible);"
gtk;gtk_invisible_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinvisible.h;"  GType gtk_invisible_get_type (void) G_GNUC_CONST;"
gtk;gtk_invisible_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinvisible.h;" GtkWidget* gtk_invisible_new (void);"
gtk;gtk_invisible_new_for_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinvisible.h;"GtkWidget* gtk_invisible_new_for_screen (GdkScreen *screen);"
gtk;gtk_invisible_set_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkinvisible.h;"void gtk_invisible_set_screen (GtkInvisible *invisible, GdkScreen *screen);"
gtk;gtk_item_deselect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitem.h;"void gtk_item_deselect (GtkItem *item);"
gtk;gtk_item_factories_path_delete;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"void gtk_item_factories_path_delete (const gchar *ifactory_path, const gchar *path);"
gtk;gtk_item_factory_add_foreign;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"  void gtk_item_factory_add_foreign (GtkWidget *accel_widget, const gchar *full_path, GtkAccelGroup *accel_group, guint keyval, GdkModifierType modifiers);"
gtk;gtk_item_factory_construct;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"void gtk_item_factory_construct (GtkItemFactory *ifactory, GType container_type, const gchar *path, GtkAccelGroup *accel_group);"
gtk;gtk_item_factory_create_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;" void gtk_item_factory_create_item (GtkItemFactory *ifactory, GtkItemFactoryEntry *entry, gpointer callback_data, guint callback_type);"
gtk;gtk_item_factory_create_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"void gtk_item_factory_create_items (GtkItemFactory *ifactory, guint n_entries, GtkItemFactoryEntry *entries, gpointer callback_data);"
gtk;gtk_item_factory_create_items_ac;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;" void gtk_item_factory_create_items_ac (GtkItemFactory *ifactory, guint n_entries, GtkItemFactoryEntry *entries, gpointer callback_data, guint callback_type);"
gtk;gtk_item_factory_create_menu_entries;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"void gtk_item_factory_create_menu_entries (guint n_entries, GtkMenuEntry *entries);"
gtk;gtk_item_factory_delete_entries;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"void gtk_item_factory_delete_entries (GtkItemFactory *ifactory, guint n_entries, GtkItemFactoryEntry *entries);"
gtk;gtk_item_factory_delete_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"void gtk_item_factory_delete_entry (GtkItemFactory *ifactory, GtkItemFactoryEntry *entry);"
gtk;gtk_item_factory_delete_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"void gtk_item_factory_delete_item (GtkItemFactory *ifactory, const gchar *path);"
gtk;gtk_item_factory_from_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;" GtkItemFactory* gtk_item_factory_from_path (const gchar *path);"
gtk;gtk_item_factory_from_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;" GtkItemFactory* gtk_item_factory_from_widget (GtkWidget *widget);"
gtk;gtk_item_factory_get_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;" GtkWidget* gtk_item_factory_get_item (GtkItemFactory *ifactory, const gchar *path);"
gtk;gtk_item_factory_get_item_by_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"GtkWidget* gtk_item_factory_get_item_by_action (GtkItemFactory *ifactory, guint action);"
gtk;gtk_item_factory_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"  GType gtk_item_factory_get_type (void) G_GNUC_CONST;"
gtk;gtk_item_factory_get_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"GtkWidget* gtk_item_factory_get_widget (GtkItemFactory *ifactory, const gchar *path);"
gtk;gtk_item_factory_get_widget_by_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"GtkWidget* gtk_item_factory_get_widget_by_action (GtkItemFactory *ifactory, guint action);"
gtk;gtk_item_factory_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;" GtkItemFactory* gtk_item_factory_new (GType container_type, const gchar *path, GtkAccelGroup *accel_group);"
gtk;gtk_item_factory_path_from_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"const gchar * gtk_item_factory_path_from_widget (GtkWidget *widget);"
gtk;gtk_item_factory_popup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"void gtk_item_factory_popup (GtkItemFactory *ifactory, guint x, guint y, guint mouse_button, guint32 time_);"
gtk;gtk_item_factory_popup_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"gpointer gtk_item_factory_popup_data (GtkItemFactory *ifactory);"
gtk;gtk_item_factory_popup_data_from_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"gpointer gtk_item_factory_popup_data_from_widget (GtkWidget *widget);"
gtk;gtk_item_factory_popup_with_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"void gtk_item_factory_popup_with_data(GtkItemFactory *ifactory, gpointer popup_data, GDestroyNotify destroy, guint x, guint y, guint mouse_button, guint32 time_);"
gtk;gtk_item_factory_set_translate_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitemfactory.h;"void gtk_item_factory_set_translate_func (GtkItemFactory *ifactory, GtkTranslateFunc func, gpointer data, GDestroyNotify notify);"
gtk;gtk_item_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitem.h;"  GType gtk_item_get_type (void) G_GNUC_CONST;"
gtk;gtk_item_select;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitem.h;" void gtk_item_select (GtkItem *item);"
gtk;gtk_item_toggle;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkitem.h;"void gtk_item_toggle (GtkItem *item);"
gtk;gtk_justification_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_justification_get_type (void) G_GNUC_CONST;"
gtk;gtk_key_snooper_install;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" guint gtk_key_snooper_install (GtkKeySnoopFunc snooper, gpointer func_data);"
gtk;gtk_key_snooper_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"void gtk_key_snooper_remove (guint snooper_handler_id);"
gtk;gtk_label_get;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;" void gtk_label_get (GtkLabel *label, gchar **str);"
gtk;gtk_label_get_angle;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"gdouble gtk_label_get_angle (GtkLabel *label);"
gtk;gtk_label_get_attributes;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"PangoAttrList *gtk_label_get_attributes (GtkLabel *label);"
gtk;gtk_label_get_current_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;" const gchar *gtk_label_get_current_uri (GtkLabel *label);"
gtk;gtk_label_get_ellipsize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"PangoEllipsizeMode gtk_label_get_ellipsize (GtkLabel *label);"
gtk;gtk_label_get_justify;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"GtkJustification gtk_label_get_justify (GtkLabel *label);"
gtk;gtk_label_get_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"const gchar * gtk_label_get_label (GtkLabel *label);"
gtk;gtk_label_get_layout;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;" PangoLayout *gtk_label_get_layout (GtkLabel *label);"
gtk;gtk_label_get_layout_offsets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_get_layout_offsets (GtkLabel *label, gint *x, gint *y);"
gtk;gtk_label_get_line_wrap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"gboolean gtk_label_get_line_wrap (GtkLabel *label);"
gtk;gtk_label_get_line_wrap_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"PangoWrapMode gtk_label_get_line_wrap_mode (GtkLabel *label);"
gtk;gtk_label_get_max_width_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"gint gtk_label_get_max_width_chars (GtkLabel *label);"
gtk;gtk_label_get_mnemonic_keyval;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"guint gtk_label_get_mnemonic_keyval (GtkLabel *label);"
gtk;gtk_label_get_mnemonic_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"GtkWidget *gtk_label_get_mnemonic_widget (GtkLabel *label);"
gtk;gtk_label_get_selectable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"gboolean gtk_label_get_selectable (GtkLabel *label);"
gtk;gtk_label_get_selection_bounds;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"gboolean gtk_label_get_selection_bounds (GtkLabel *label, gint *start, gint *end);"
gtk;gtk_label_get_single_line_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"gboolean gtk_label_get_single_line_mode (GtkLabel *label);"
gtk;gtk_label_get_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"const gchar * gtk_label_get_text (GtkLabel *label);"
gtk;gtk_label_get_track_visited_links;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"gboolean gtk_label_get_track_visited_links (GtkLabel *label);"
gtk;gtk_label_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"  GType gtk_label_get_type (void) G_GNUC_CONST;"
gtk;gtk_label_get_use_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"gboolean gtk_label_get_use_markup (GtkLabel *label);"
gtk;gtk_label_get_use_underline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"gboolean gtk_label_get_use_underline (GtkLabel *label);"
gtk;gtk_label_get_width_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"gint gtk_label_get_width_chars (GtkLabel *label);"
gtk;gtk_label_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"GtkWidget* gtk_label_new (const gchar *str);"
gtk;gtk_label_new_with_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"GtkWidget* gtk_label_new_with_mnemonic (const gchar *str);"
gtk;gtk_label_parse_uline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;" guint gtk_label_parse_uline (GtkLabel *label, const gchar *string);"
gtk;gtk_label_select_region;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_select_region (GtkLabel *label, gint start_offset, gint end_offset);"
gtk;gtk_label_set_angle;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_angle (GtkLabel *label, gdouble angle);"
gtk;gtk_label_set_attributes;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_attributes (GtkLabel *label, PangoAttrList *attrs);"
gtk;gtk_label_set_ellipsize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_ellipsize (GtkLabel *label, PangoEllipsizeMode mode);"
gtk;gtk_label_set_justify;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_justify (GtkLabel *label, GtkJustification jtype);"
gtk;gtk_label_set_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_label (GtkLabel *label, const gchar *str);"
gtk;gtk_label_set_line_wrap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_line_wrap (GtkLabel *label, gboolean wrap);"
gtk;gtk_label_set_line_wrap_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_line_wrap_mode (GtkLabel *label, PangoWrapMode wrap_mode);"
gtk;gtk_label_set_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_markup (GtkLabel *label, const gchar *str);"
gtk;gtk_label_set_markup_with_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;" void gtk_label_set_markup_with_mnemonic (GtkLabel *label, const gchar *str);"
gtk;gtk_label_set_max_width_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_max_width_chars (GtkLabel *label, gint n_chars);"
gtk;gtk_label_set_mnemonic_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_mnemonic_widget (GtkLabel *label, GtkWidget *widget);"
gtk;gtk_label_set_pattern;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_pattern (GtkLabel *label, const gchar *pattern);"
gtk;gtk_label_set_selectable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_selectable (GtkLabel *label, gboolean setting);"
gtk;gtk_label_set_single_line_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;" void gtk_label_set_single_line_mode (GtkLabel *label, gboolean single_line_mode);"
gtk;gtk_label_set_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_text (GtkLabel *label, const gchar *str);"
gtk;gtk_label_set_text_with_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_text_with_mnemonic (GtkLabel *label, const gchar *str);"
gtk;gtk_label_set_track_visited_links;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_track_visited_links (GtkLabel *label, gboolean track_links);"
gtk;gtk_label_set_use_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_use_markup (GtkLabel *label, gboolean setting);"
gtk;gtk_label_set_use_underline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_use_underline (GtkLabel *label, gboolean setting);"
gtk;gtk_label_set_width_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklabel.h;"void gtk_label_set_width_chars (GtkLabel *label, gint n_chars);"
gtk;gtk_layout_freeze;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;" void gtk_layout_freeze (GtkLayout *layout);"
gtk;gtk_layout_get_bin_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;"GdkWindow* gtk_layout_get_bin_window (GtkLayout *layout);"
gtk;gtk_layout_get_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;" GtkAdjustment* gtk_layout_get_hadjustment (GtkLayout *layout);"
gtk;gtk_layout_get_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;"void gtk_layout_get_size (GtkLayout *layout, guint *width, guint *height);"
gtk;gtk_layout_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;"  GType gtk_layout_get_type (void) G_GNUC_CONST;"
gtk;gtk_layout_get_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;"GtkAdjustment* gtk_layout_get_vadjustment (GtkLayout *layout);"
gtk;gtk_layout_move;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;" void gtk_layout_move (GtkLayout *layout, GtkWidget *child_widget, gint x, gint y);"
gtk;gtk_layout_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;"GtkWidget* gtk_layout_new (GtkAdjustment *hadjustment, GtkAdjustment *vadjustment);"
gtk;gtk_layout_put;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;"void gtk_layout_put (GtkLayout *layout, GtkWidget *child_widget, gint x, gint y);"
gtk;gtk_layout_set_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;"void gtk_layout_set_hadjustment (GtkLayout *layout, GtkAdjustment *adjustment);"
gtk;gtk_layout_set_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;" void gtk_layout_set_size (GtkLayout *layout, guint width, guint height);"
gtk;gtk_layout_set_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;"void gtk_layout_set_vadjustment (GtkLayout *layout, GtkAdjustment *adjustment);"
gtk;gtk_layout_thaw;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklayout.h;"void gtk_layout_thaw (GtkLayout *layout);"
gtk;gtk_link_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklinkbutton.h;"  GType gtk_link_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_link_button_get_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklinkbutton.h;" const gchar * gtk_link_button_get_uri (GtkLinkButton *link_button);"
gtk;gtk_link_button_get_visited;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklinkbutton.h;" gboolean gtk_link_button_get_visited (GtkLinkButton *link_button);"
gtk;gtk_link_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklinkbutton.h;" GtkWidget * gtk_link_button_new (const gchar *uri);"
gtk;gtk_link_button_new_with_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklinkbutton.h;"GtkWidget * gtk_link_button_new_with_label (const gchar *uri, const gchar *label);"
gtk;gtk_link_button_set_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklinkbutton.h;"void gtk_link_button_set_uri (GtkLinkButton *link_button, const gchar *uri);"
gtk;gtk_link_button_set_uri_hook;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklinkbutton.h;" GtkLinkButtonUriFunc gtk_link_button_set_uri_hook (GtkLinkButtonUriFunc func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_link_button_set_visited;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklinkbutton.h;"void gtk_link_button_set_visited (GtkLinkButton *link_button, gboolean visited);"
gtk;gtk_list_append_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_append_items (GtkList *list, GList *items);"
gtk;gtk_list_child_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"gint gtk_list_child_position (GtkList *list, GtkWidget *child);"
gtk;gtk_list_clear_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_clear_items (GtkList *list, gint start, gint end);"
gtk;gtk_list_end_drag_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_end_drag_selection (GtkList *list);"
gtk;gtk_list_end_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_end_selection (GtkList *list);"
gtk;gtk_list_extend_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;" void gtk_list_extend_selection (GtkList *list, GtkScrollType scroll_type, gfloat position, gboolean auto_start_selection);"
gtk;gtk_list_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"  GType gtk_list_get_type (void) G_GNUC_CONST;"
gtk;gtk_list_insert_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_insert_items (GtkList *list, GList *items, gint position);"
gtk;gtk_list_item_deselect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklistitem.h;"void gtk_list_item_deselect (GtkListItem *list_item);"
gtk;gtk_list_item_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklistitem.h;"  GType gtk_list_item_get_type (void) G_GNUC_CONST;"
gtk;gtk_list_item_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklistitem.h;"GtkWidget* gtk_list_item_new (void);"
gtk;gtk_list_item_new_with_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklistitem.h;"GtkWidget* gtk_list_item_new_with_label (const gchar *label);"
gtk;gtk_list_item_select;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklistitem.h;"void gtk_list_item_select (GtkListItem *list_item);"
gtk;gtk_list_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"GtkWidget* gtk_list_new (void);"
gtk;gtk_list_prepend_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_prepend_items (GtkList *list, GList *items);"
gtk;gtk_list_remove_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_remove_items (GtkList *list, GList *items);"
gtk;gtk_list_remove_items_no_unref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_remove_items_no_unref (GtkList *list, GList *items);"
gtk;gtk_list_scroll_horizontal;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_scroll_horizontal (GtkList *list, GtkScrollType scroll_type, gfloat position);"
gtk;gtk_list_scroll_vertical;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_scroll_vertical (GtkList *list, GtkScrollType scroll_type, gfloat position);"
gtk;gtk_list_select_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_select_all (GtkList *list);"
gtk;gtk_list_select_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_select_child (GtkList *list, GtkWidget *child);"
gtk;gtk_list_select_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_select_item (GtkList *list, gint item);"
gtk;gtk_list_set_selection_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_set_selection_mode (GtkList *list, GtkSelectionMode mode);"
gtk;gtk_list_start_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_start_selection (GtkList *list);"
gtk;gtk_list_store_append;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_append (GtkListStore *list_store, GtkTreeIter *iter);"
gtk;gtk_list_store_clear;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_clear (GtkListStore *list_store);"
gtk;gtk_list_store_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"  GType gtk_list_store_get_type (void) G_GNUC_CONST;"
gtk;gtk_list_store_insert;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_insert (GtkListStore *list_store, GtkTreeIter *iter, gint position);"
gtk;gtk_list_store_insert_after;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_insert_after (GtkListStore *list_store, GtkTreeIter *iter, GtkTreeIter *sibling);"
gtk;gtk_list_store_insert_before;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_insert_before (GtkListStore *list_store, GtkTreeIter *iter, GtkTreeIter *sibling);"
gtk;gtk_list_store_insert_with_valuesv;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_insert_with_valuesv (GtkListStore *list_store, GtkTreeIter *iter, gint position, gint *columns, GValue *values, gint n_values);"
gtk;gtk_list_store_iter_is_valid;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"gboolean gtk_list_store_iter_is_valid (GtkListStore *list_store, GtkTreeIter *iter);"
gtk;gtk_list_store_move_after;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_move_after (GtkListStore *store, GtkTreeIter *iter, GtkTreeIter *position);"
gtk;gtk_list_store_move_before;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_move_before (GtkListStore *store, GtkTreeIter *iter, GtkTreeIter *position);"
gtk;gtk_list_store_newv;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"GtkListStore *gtk_list_store_newv (gint n_columns, GType *types);"
gtk;gtk_list_store_prepend;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_prepend (GtkListStore *list_store, GtkTreeIter *iter);"
gtk;gtk_list_store_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"gboolean gtk_list_store_remove (GtkListStore *list_store, GtkTreeIter *iter);"
gtk;gtk_list_store_reorder;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_reorder (GtkListStore *store, gint *new_order);"
gtk;gtk_list_store_set_column_types;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_set_column_types (GtkListStore *list_store, gint n_columns, GType *types);"
gtk;gtk_list_store_set_valist;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_set_valist (GtkListStore *list_store, GtkTreeIter *iter, va_list var_args);"
gtk;gtk_list_store_set_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;" void gtk_list_store_set_value (GtkListStore *list_store, GtkTreeIter *iter, gint column, GValue *value);"
gtk;gtk_list_store_set_valuesv;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_set_valuesv (GtkListStore *list_store, GtkTreeIter *iter, gint *columns, GValue *values, gint n_values);"
gtk;gtk_list_store_swap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkliststore.h;"void gtk_list_store_swap (GtkListStore *store, GtkTreeIter *a, GtkTreeIter *b);"
gtk;gtk_list_toggle_add_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_toggle_add_mode (GtkList *list);"
gtk;gtk_list_toggle_focus_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_toggle_focus_row (GtkList *list);"
gtk;gtk_list_toggle_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_toggle_row (GtkList *list, GtkWidget *item);"
gtk;gtk_list_undo_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_undo_selection (GtkList *list);"
gtk;gtk_list_unselect_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_unselect_all (GtkList *list);"
gtk;gtk_list_unselect_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_unselect_child (GtkList *list, GtkWidget *child);"
gtk;gtk_list_unselect_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtklist.h;"void gtk_list_unselect_item (GtkList *list, gint item);"
gtk;gtk_main;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" void gtk_main (void);"
gtk;gtk_main_do_event;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" void gtk_main_do_event (GdkEvent *event);"
gtk;gtk_main_iteration;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"gboolean gtk_main_iteration (void);"
gtk;gtk_main_iteration_do;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" gboolean gtk_main_iteration_do (gboolean blocking);"
gtk;gtk_main_level;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"guint gtk_main_level (void);"
gtk;gtk_main_quit;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"void gtk_main_quit (void);"
gtk;gtk_marshal_BOOLEAN__POINTER;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_BOOLEAN__POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_BOOLEAN__POINTER_INT_INT;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_BOOLEAN__POINTER_INT_INT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_BOOLEAN__VOID;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;"  void gtk_marshal_BOOLEAN__VOID (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_ENUM__ENUM;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_ENUM__ENUM (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_INT__POINTER;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_INT__POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_INT__POINTER_CHAR_CHAR;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_INT__POINTER_CHAR_CHAR (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__ENUM_FLOAT;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__ENUM_FLOAT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__INT_INT;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__INT_INT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__INT_INT_POINTER;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__INT_INT_POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__POINTER_INT;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__POINTER_INT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__POINTER_POINTER;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__POINTER_POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__POINTER_POINTER_POINTER;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__POINTER_POINTER_POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__POINTER_POINTER_UINT_UINT;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__POINTER_POINTER_UINT_UINT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__POINTER_STRING_STRING;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__POINTER_STRING_STRING (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__POINTER_UINT;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__POINTER_UINT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__POINTER_UINT_ENUM;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__POINTER_UINT_ENUM (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__POINTER_UINT_UINT;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__POINTER_UINT_UINT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__STRING_INT_POINTER;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__STRING_INT_POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_marshal_VOID__UINT_STRING;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmarshal.h;" void gtk_marshal_VOID__UINT_STRING (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);"
gtk;gtk_match_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_match_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_menu_attach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" void gtk_menu_attach (GtkMenu *menu, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach);"
gtk;gtk_menu_attach_to_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" void gtk_menu_attach_to_widget (GtkMenu *menu, GtkWidget *attach_widget, GtkMenuDetachFunc detacher);"
gtk;gtk_menu_bar_get_child_pack_direction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenubar.h;"GtkPackDirection gtk_menu_bar_get_child_pack_direction (GtkMenuBar *menubar);"
gtk;gtk_menu_bar_get_pack_direction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenubar.h;" GtkPackDirection gtk_menu_bar_get_pack_direction (GtkMenuBar *menubar);"
gtk;gtk_menu_bar_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenubar.h;"  GType gtk_menu_bar_get_type (void) G_GNUC_CONST;"
gtk;gtk_menu_bar_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenubar.h;"GtkWidget* gtk_menu_bar_new (void);"
gtk;gtk_menu_bar_set_child_pack_direction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenubar.h;"void gtk_menu_bar_set_child_pack_direction (GtkMenuBar *menubar, GtkPackDirection child_pack_dir);"
gtk;gtk_menu_bar_set_pack_direction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenubar.h;"void gtk_menu_bar_set_pack_direction (GtkMenuBar *menubar, GtkPackDirection pack_dir);"
gtk;gtk_menu_detach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;"void gtk_menu_detach (GtkMenu *menu);"
gtk;gtk_menu_direction_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_menu_direction_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_menu_get_accel_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;"GtkAccelGroup* gtk_menu_get_accel_group (GtkMenu *menu);"
gtk;gtk_menu_get_accel_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;"const gchar* gtk_menu_get_accel_path (GtkMenu *menu);"
gtk;gtk_menu_get_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" GtkWidget* gtk_menu_get_active (GtkMenu *menu);"
gtk;gtk_menu_get_attach_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" GtkWidget* gtk_menu_get_attach_widget (GtkMenu *menu);"
gtk;gtk_menu_get_for_attach_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;"GList* gtk_menu_get_for_attach_widget (GtkWidget *widget);"
gtk;gtk_menu_get_monitor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;"gint gtk_menu_get_monitor (GtkMenu *menu);"
gtk;gtk_menu_get_reserve_toggle_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;"gboolean gtk_menu_get_reserve_toggle_size (GtkMenu *menu);"
gtk;gtk_menu_get_tearoff_state;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;"gboolean gtk_menu_get_tearoff_state (GtkMenu *menu);"
gtk;gtk_menu_get_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;"const gchar *gtk_menu_get_title (GtkMenu *menu);"
gtk;gtk_menu_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;"  GType gtk_menu_get_type (void) G_GNUC_CONST;"
gtk;gtk_menu_item_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"void gtk_menu_item_activate (GtkMenuItem *menu_item);"
gtk;gtk_menu_item_deselect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"void gtk_menu_item_deselect (GtkMenuItem *menu_item);"
gtk;gtk_menu_item_get_accel_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"const gchar* gtk_menu_item_get_accel_path (GtkMenuItem *menu_item);"
gtk;gtk_menu_item_get_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"const gchar *gtk_menu_item_get_label (GtkMenuItem *menu_item);"
gtk;gtk_menu_item_get_right_justified;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"gboolean gtk_menu_item_get_right_justified (GtkMenuItem *menu_item);"
gtk;gtk_menu_item_get_submenu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"GtkWidget* gtk_menu_item_get_submenu (GtkMenuItem *menu_item);"
gtk;gtk_menu_item_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"  GType gtk_menu_item_get_type (void) G_GNUC_CONST;"
gtk;gtk_menu_item_get_use_underline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"gboolean gtk_menu_item_get_use_underline (GtkMenuItem *menu_item);"
gtk;gtk_menu_item_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"GtkWidget* gtk_menu_item_new (void);"
gtk;gtk_menu_item_new_with_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"GtkWidget* gtk_menu_item_new_with_label (const gchar *label);"
gtk;gtk_menu_item_new_with_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"GtkWidget* gtk_menu_item_new_with_mnemonic (const gchar *label);"
gtk;gtk_menu_item_remove_submenu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;" void gtk_menu_item_remove_submenu (GtkMenuItem *menu_item);"
gtk;gtk_menu_item_select;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"void gtk_menu_item_select (GtkMenuItem *menu_item);"
gtk;gtk_menu_item_set_accel_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"void gtk_menu_item_set_accel_path (GtkMenuItem *menu_item, const gchar *accel_path);"
gtk;gtk_menu_item_set_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;" void gtk_menu_item_set_label (GtkMenuItem *menu_item, const gchar *label);"
gtk;gtk_menu_item_set_right_justified;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"void gtk_menu_item_set_right_justified (GtkMenuItem *menu_item, gboolean right_justified);"
gtk;gtk_menu_item_set_submenu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"void gtk_menu_item_set_submenu (GtkMenuItem *menu_item, GtkWidget *submenu);"
gtk;gtk_menu_item_set_use_underline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;" void gtk_menu_item_set_use_underline (GtkMenuItem *menu_item, gboolean setting);"
gtk;gtk_menu_item_toggle_size_allocate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"void gtk_menu_item_toggle_size_allocate (GtkMenuItem *menu_item, gint allocation);"
gtk;gtk_menu_item_toggle_size_request;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenuitem.h;"void gtk_menu_item_toggle_size_request (GtkMenuItem *menu_item, gint *requisition);"
gtk;gtk_menu_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;"GtkWidget* gtk_menu_new (void);"
gtk;gtk_menu_popdown;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" void gtk_menu_popdown (GtkMenu *menu);"
gtk;gtk_menu_popup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" void gtk_menu_popup (GtkMenu *menu, GtkWidget *parent_menu_shell, GtkWidget *parent_menu_item, GtkMenuPositionFunc func, gpointer data, guint button, guint32 activate_time);"
gtk;gtk_menu_reorder_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" void gtk_menu_reorder_child (GtkMenu *menu, GtkWidget *child, gint position);"
gtk;gtk_menu_reposition;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" void gtk_menu_reposition (GtkMenu *menu);"
gtk;gtk_menu_set_accel_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" void gtk_menu_set_accel_group (GtkMenu *menu, GtkAccelGroup *accel_group);"
gtk;gtk_menu_set_accel_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;"void gtk_menu_set_accel_path (GtkMenu *menu, const gchar *accel_path);"
gtk;gtk_menu_set_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;"void gtk_menu_set_active (GtkMenu *menu, guint index_);"
gtk;gtk_menu_set_monitor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" void gtk_menu_set_monitor (GtkMenu *menu, gint monitor_num);"
gtk;gtk_menu_set_reserve_toggle_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" void gtk_menu_set_reserve_toggle_size (GtkMenu *menu, gboolean reserve_toggle_size);"
gtk;gtk_menu_set_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" void gtk_menu_set_screen (GtkMenu *menu, GdkScreen *screen);"
gtk;gtk_menu_set_tearoff_state;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" void gtk_menu_set_tearoff_state (GtkMenu *menu, gboolean torn_off);"
gtk;gtk_menu_set_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenu.h;" void gtk_menu_set_title (GtkMenu *menu, const gchar *title);"
gtk;gtk_menu_shell_activate_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenushell.h;"void gtk_menu_shell_activate_item (GtkMenuShell *menu_shell, GtkWidget *menu_item, gboolean force_deactivate);"
gtk;gtk_menu_shell_append;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenushell.h;"void gtk_menu_shell_append (GtkMenuShell *menu_shell, GtkWidget *child);"
gtk;gtk_menu_shell_cancel;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenushell.h;"void gtk_menu_shell_cancel (GtkMenuShell *menu_shell);"
gtk;gtk_menu_shell_deactivate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenushell.h;"void gtk_menu_shell_deactivate (GtkMenuShell *menu_shell);"
gtk;gtk_menu_shell_deselect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenushell.h;"void gtk_menu_shell_deselect (GtkMenuShell *menu_shell);"
gtk;gtk_menu_shell_get_take_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenushell.h;" gboolean gtk_menu_shell_get_take_focus (GtkMenuShell *menu_shell);"
gtk;gtk_menu_shell_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenushell.h;"  GType gtk_menu_shell_get_type (void) G_GNUC_CONST;"
gtk;gtk_menu_shell_insert;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenushell.h;"void gtk_menu_shell_insert (GtkMenuShell *menu_shell, GtkWidget *child, gint position);"
gtk;gtk_menu_shell_prepend;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenushell.h;"void gtk_menu_shell_prepend (GtkMenuShell *menu_shell, GtkWidget *child);"
gtk;gtk_menu_shell_select_first;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenushell.h;"void gtk_menu_shell_select_first (GtkMenuShell *menu_shell, gboolean search_sensitive);"
gtk;gtk_menu_shell_select_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenushell.h;"void gtk_menu_shell_select_item (GtkMenuShell *menu_shell, GtkWidget *menu_item);"
gtk;gtk_menu_shell_set_take_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenushell.h;"void gtk_menu_shell_set_take_focus (GtkMenuShell *menu_shell, gboolean take_focus);"
gtk;gtk_menu_tool_button_get_menu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h;"GtkWidget *gtk_menu_tool_button_get_menu (GtkMenuToolButton *button);"
gtk;gtk_menu_tool_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h;"  GType gtk_menu_tool_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_menu_tool_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h;"GtkToolItem *gtk_menu_tool_button_new (GtkWidget *icon_widget, const gchar *label);"
gtk;gtk_menu_tool_button_new_from_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h;"GtkToolItem *gtk_menu_tool_button_new_from_stock (const gchar *stock_id);"
gtk;gtk_menu_tool_button_set_arrow_tooltip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h;" void gtk_menu_tool_button_set_arrow_tooltip (GtkMenuToolButton *button, GtkTooltips *tooltips, const gchar *tip_text, const gchar *tip_private);"
gtk;gtk_menu_tool_button_set_arrow_tooltip_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h;"void gtk_menu_tool_button_set_arrow_tooltip_markup (GtkMenuToolButton *button, const gchar *markup);"
gtk;gtk_menu_tool_button_set_arrow_tooltip_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h;" void gtk_menu_tool_button_set_arrow_tooltip_text (GtkMenuToolButton *button, const gchar *text);"
gtk;gtk_menu_tool_button_set_menu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h;" void gtk_menu_tool_button_set_menu (GtkMenuToolButton *button, GtkWidget *menu);"
gtk;gtk_message_dialog_format_secondary_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmessagedialog.h;" void gtk_message_dialog_format_secondary_markup (GtkMessageDialog *message_dialog, const gchar *message_format, ...) G_GNUC_PRINTF (2, 3);"
gtk;gtk_message_dialog_format_secondary_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmessagedialog.h;" void gtk_message_dialog_format_secondary_text (GtkMessageDialog *message_dialog, const gchar *message_format, ...) G_GNUC_PRINTF (2, 3);"
gtk;gtk_message_dialog_get_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmessagedialog.h;" GtkWidget * gtk_message_dialog_get_image (GtkMessageDialog *dialog);"
gtk;gtk_message_dialog_get_message_area;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmessagedialog.h;" GtkWidget *gtk_message_dialog_get_message_area (GtkMessageDialog *message_dialog);"
gtk;gtk_message_dialog_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmessagedialog.h;"  GType gtk_message_dialog_get_type (void) G_GNUC_CONST;"
gtk;gtk_message_dialog_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmessagedialog.h;" GtkWidget* gtk_message_dialog_new (GtkWindow *parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar *message_format, ...) G_GNUC_PRINTF (5, 6);"
gtk;gtk_message_dialog_new_with_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmessagedialog.h;" GtkWidget* gtk_message_dialog_new_with_markup (GtkWindow *parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar *message_format, ...) G_GNUC_PRINTF (5, 6);"
gtk;gtk_message_dialog_set_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmessagedialog.h;" void gtk_message_dialog_set_image (GtkMessageDialog *dialog, GtkWidget *image);"
gtk;gtk_message_dialog_set_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmessagedialog.h;" void gtk_message_dialog_set_markup (GtkMessageDialog *message_dialog, const gchar *str);"
gtk;gtk_message_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_message_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_metric_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_metric_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_misc_get_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmisc.h;"void gtk_misc_get_alignment (GtkMisc *misc, gfloat *xalign, gfloat *yalign);"
gtk;gtk_misc_get_padding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmisc.h;"void gtk_misc_get_padding (GtkMisc *misc, gint *xpad, gint *ypad);"
gtk;gtk_misc_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmisc.h;"  GType gtk_misc_get_type (void) G_GNUC_CONST;"
gtk;gtk_misc_set_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmisc.h;"void gtk_misc_set_alignment (GtkMisc *misc, gfloat xalign, gfloat yalign);"
gtk;gtk_misc_set_padding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmisc.h;"void gtk_misc_set_padding (GtkMisc *misc, gint xpad, gint ypad);"
gtk;gtk_mount_operation_get_parent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmountoperation.h;"GtkWindow * gtk_mount_operation_get_parent (GtkMountOperation *op);"
gtk;gtk_mount_operation_get_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmountoperation.h;"GdkScreen *gtk_mount_operation_get_screen (GtkMountOperation *op);"
gtk;gtk_mount_operation_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmountoperation.h;"  GType gtk_mount_operation_get_type (void);"
gtk;gtk_mount_operation_is_showing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmountoperation.h;"gboolean gtk_mount_operation_is_showing (GtkMountOperation *op);"
gtk;gtk_mount_operation_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmountoperation.h;"GMountOperation *gtk_mount_operation_new (GtkWindow *parent);"
gtk;gtk_mount_operation_set_parent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmountoperation.h;"void gtk_mount_operation_set_parent (GtkMountOperation *op, GtkWindow *parent);"
gtk;gtk_mount_operation_set_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmountoperation.h;"void gtk_mount_operation_set_screen (GtkMountOperation *op, GdkScreen *screen);"
gtk;gtk_movement_step_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_movement_step_get_type (void) G_GNUC_CONST;"
gtk;gtk_notebook_append_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gint gtk_notebook_append_page (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label);"
gtk;gtk_notebook_append_page_menu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gint gtk_notebook_append_page_menu (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label);"
gtk;gtk_notebook_get_action_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;" GtkWidget* gtk_notebook_get_action_widget (GtkNotebook *notebook, GtkPackType pack_type);"
gtk;gtk_notebook_get_current_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;" gint gtk_notebook_get_current_page (GtkNotebook *notebook);"
gtk;gtk_notebook_get_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gpointer gtk_notebook_get_group (GtkNotebook *notebook);"
gtk;gtk_notebook_get_group_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gint gtk_notebook_get_group_id (GtkNotebook *notebook);"
gtk;gtk_notebook_get_group_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"const gchar *gtk_notebook_get_group_name (GtkNotebook *notebook);"
gtk;gtk_notebook_get_menu_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"GtkWidget * gtk_notebook_get_menu_label (GtkNotebook *notebook, GtkWidget *child);"
gtk;gtk_notebook_get_menu_label_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"const gchar *gtk_notebook_get_menu_label_text (GtkNotebook *notebook, GtkWidget *child);"
gtk;gtk_notebook_get_n_pages;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gint gtk_notebook_get_n_pages (GtkNotebook *notebook);"
gtk;gtk_notebook_get_nth_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"GtkWidget* gtk_notebook_get_nth_page (GtkNotebook *notebook, gint page_num);"
gtk;gtk_notebook_get_scrollable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gboolean gtk_notebook_get_scrollable (GtkNotebook *notebook);"
gtk;gtk_notebook_get_show_border;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gboolean gtk_notebook_get_show_border (GtkNotebook *notebook);"
gtk;gtk_notebook_get_show_tabs;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gboolean gtk_notebook_get_show_tabs (GtkNotebook *notebook);"
gtk;gtk_notebook_get_tab_detachable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gboolean gtk_notebook_get_tab_detachable (GtkNotebook *notebook, GtkWidget *child);"
gtk;gtk_notebook_get_tab_hborder;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"guint16 gtk_notebook_get_tab_hborder (GtkNotebook *notebook);"
gtk;gtk_notebook_get_tab_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;" GtkWidget * gtk_notebook_get_tab_label (GtkNotebook *notebook, GtkWidget *child);"
gtk;gtk_notebook_get_tab_label_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"const gchar *gtk_notebook_get_tab_label_text (GtkNotebook *notebook, GtkWidget *child);"
gtk;gtk_notebook_get_tab_pos;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"GtkPositionType gtk_notebook_get_tab_pos (GtkNotebook *notebook);"
gtk;gtk_notebook_get_tab_reorderable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gboolean gtk_notebook_get_tab_reorderable (GtkNotebook *notebook, GtkWidget *child);"
gtk;gtk_notebook_get_tab_vborder;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"guint16 gtk_notebook_get_tab_vborder (GtkNotebook *notebook);"
gtk;gtk_notebook_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"  GType gtk_notebook_get_type (void) G_GNUC_CONST;"
gtk;gtk_notebook_insert_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gint gtk_notebook_insert_page (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, gint position);"
gtk;gtk_notebook_insert_page_menu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gint gtk_notebook_insert_page_menu (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label, gint position);"
gtk;gtk_notebook_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"GtkWidget * gtk_notebook_new (void);"
gtk;gtk_notebook_next_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_next_page (GtkNotebook *notebook);"
gtk;gtk_notebook_page_num;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gint gtk_notebook_page_num (GtkNotebook *notebook, GtkWidget *child);"
gtk;gtk_notebook_popup_disable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_popup_disable (GtkNotebook *notebook);"
gtk;gtk_notebook_popup_enable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;" void gtk_notebook_popup_enable (GtkNotebook *notebook);"
gtk;gtk_notebook_prepend_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gint gtk_notebook_prepend_page (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label);"
gtk;gtk_notebook_prepend_page_menu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"gint gtk_notebook_prepend_page_menu (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label);"
gtk;gtk_notebook_prev_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_prev_page (GtkNotebook *notebook);"
gtk;gtk_notebook_query_tab_label_packing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;" void gtk_notebook_query_tab_label_packing (GtkNotebook *notebook, GtkWidget *child, gboolean *expand, gboolean *fill, GtkPackType *pack_type);"
gtk;gtk_notebook_remove_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_remove_page (GtkNotebook *notebook, gint page_num);"
gtk;gtk_notebook_reorder_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;" void gtk_notebook_reorder_child (GtkNotebook *notebook, GtkWidget *child, gint position);"
gtk;gtk_notebook_set_action_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_action_widget (GtkNotebook *notebook, GtkWidget *widget, GtkPackType pack_type);"
gtk;gtk_notebook_set_current_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_current_page (GtkNotebook *notebook, gint page_num);"
gtk;gtk_notebook_set_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;" void gtk_notebook_set_group (GtkNotebook *notebook, gpointer group);"
gtk;gtk_notebook_set_group_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_group_id (GtkNotebook *notebook, gint group_id);"
gtk;gtk_notebook_set_group_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;" void gtk_notebook_set_group_name (GtkNotebook *notebook, const gchar *group_name);"
gtk;gtk_notebook_set_homogeneous_tabs;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;" void gtk_notebook_set_homogeneous_tabs (GtkNotebook *notebook, gboolean homogeneous);"
gtk;gtk_notebook_set_menu_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_menu_label (GtkNotebook *notebook, GtkWidget *child, GtkWidget *menu_label);"
gtk;gtk_notebook_set_menu_label_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_menu_label_text (GtkNotebook *notebook, GtkWidget *child, const gchar *menu_text);"
gtk;gtk_notebook_set_scrollable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;" void gtk_notebook_set_scrollable (GtkNotebook *notebook, gboolean scrollable);"
gtk;gtk_notebook_set_show_border;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;" void gtk_notebook_set_show_border (GtkNotebook *notebook, gboolean show_border);"
gtk;gtk_notebook_set_show_tabs;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_show_tabs (GtkNotebook *notebook, gboolean show_tabs);"
gtk;gtk_notebook_set_tab_border;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_tab_border (GtkNotebook *notebook, guint border_width);"
gtk;gtk_notebook_set_tab_detachable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_tab_detachable (GtkNotebook *notebook, GtkWidget *child, gboolean detachable);"
gtk;gtk_notebook_set_tab_hborder;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_tab_hborder (GtkNotebook *notebook, guint tab_hborder);"
gtk;gtk_notebook_set_tab_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_tab_label (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label);"
gtk;gtk_notebook_set_tab_label_packing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_tab_label_packing (GtkNotebook *notebook, GtkWidget *child, gboolean expand, gboolean fill, GtkPackType pack_type);"
gtk;gtk_notebook_set_tab_label_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_tab_label_text (GtkNotebook *notebook, GtkWidget *child, const gchar *tab_text);"
gtk;gtk_notebook_set_tab_pos;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_tab_pos (GtkNotebook *notebook, GtkPositionType pos);"
gtk;gtk_notebook_set_tab_reorderable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_tab_reorderable (GtkNotebook *notebook, GtkWidget *child, gboolean reorderable);"
gtk;gtk_notebook_set_tab_vborder;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;"void gtk_notebook_set_tab_vborder (GtkNotebook *notebook, guint tab_vborder);"
gtk;gtk_notebook_set_window_creation_hook;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtknotebook.h;" void gtk_notebook_set_window_creation_hook (GtkNotebookWindowCreationFunc func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_notebook_tab_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_notebook_tab_get_type (void) G_GNUC_CONST;"
gtk;gtk_number_up_layout_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_number_up_layout_get_type (void) G_GNUC_CONST;"
gtk;gtk_object_add_arg_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"void gtk_object_add_arg_type (const gchar *arg_name, GType arg_type, guint arg_flags, guint arg_id);"
gtk;gtk_object_destroy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;" void gtk_object_destroy (GtkObject *object);"
gtk;gtk_object_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_object_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_object_get_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"gpointer gtk_object_get_data (GtkObject *object, const gchar *key);"
gtk;gtk_object_get_data_by_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"gpointer gtk_object_get_data_by_id (GtkObject *object, GQuark data_id);"
gtk;gtk_object_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"  GType gtk_object_get_type (void) G_GNUC_CONST;"
gtk;gtk_object_get_user_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"gpointer gtk_object_get_user_data (GtkObject *object);"
gtk;gtk_object_ref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"GtkObject* gtk_object_ref (GtkObject *object);"
gtk;gtk_object_remove_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"void gtk_object_remove_data (GtkObject *object, const gchar *key);"
gtk;gtk_object_remove_data_by_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"void gtk_object_remove_data_by_id (GtkObject *object, GQuark data_id);"
gtk;gtk_object_remove_no_notify;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"void gtk_object_remove_no_notify (GtkObject *object, const gchar *key);"
gtk;gtk_object_remove_no_notify_by_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"void gtk_object_remove_no_notify_by_id (GtkObject *object, GQuark key_id);"
gtk;gtk_object_set_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;" void gtk_object_set_data (GtkObject *object, const gchar *key, gpointer data);"
gtk;gtk_object_set_data_by_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;" void gtk_object_set_data_by_id (GtkObject *object, GQuark data_id, gpointer data);"
gtk;gtk_object_set_data_by_id_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"void gtk_object_set_data_by_id_full (GtkObject *object, GQuark data_id, gpointer data, GDestroyNotify destroy);"
gtk;gtk_object_set_data_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"void gtk_object_set_data_full (GtkObject *object, const gchar *key, gpointer data, GDestroyNotify destroy);"
gtk;gtk_object_set_user_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;" void gtk_object_set_user_data (GtkObject *object, gpointer data);"
gtk;gtk_object_sink;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;" void gtk_object_sink (GtkObject *object);"
gtk;gtk_object_unref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"void gtk_object_unref (GtkObject *object);"
gtk;gtk_object_weakref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"void gtk_object_weakref (GtkObject *object, GDestroyNotify notify, gpointer data);"
gtk;gtk_object_weakunref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkobject.h;"void gtk_object_weakunref (GtkObject *object, GDestroyNotify notify, gpointer data);"
gtk;gtk_offscreen_window_get_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoffscreenwindow.h;"GdkPixbuf *gtk_offscreen_window_get_pixbuf (GtkOffscreenWindow *offscreen);"
gtk;gtk_offscreen_window_get_pixmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoffscreenwindow.h;"GdkPixmap *gtk_offscreen_window_get_pixmap (GtkOffscreenWindow *offscreen);"
gtk;gtk_offscreen_window_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoffscreenwindow.h;"  GType gtk_offscreen_window_get_type (void) G_GNUC_CONST;"
gtk;gtk_offscreen_window_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoffscreenwindow.h;" GtkWidget *gtk_offscreen_window_new (void);"
gtk;gtk_old_editable_changed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoldeditable.h;"void gtk_old_editable_changed (GtkOldEditable *old_editable);"
gtk;gtk_old_editable_claim_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoldeditable.h;"void gtk_old_editable_claim_selection (GtkOldEditable *old_editable, gboolean claim, guint32 time_);"
gtk;gtk_old_editable_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoldeditable.h;"  GType gtk_old_editable_get_type (void) G_GNUC_CONST;"
gtk;gtk_option_menu_get_history;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoptionmenu.h;"gint gtk_option_menu_get_history (GtkOptionMenu *option_menu);"
gtk;gtk_option_menu_get_menu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoptionmenu.h;"GtkWidget* gtk_option_menu_get_menu (GtkOptionMenu *option_menu);"
gtk;gtk_option_menu_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoptionmenu.h;"  GType gtk_option_menu_get_type (void) G_GNUC_CONST;"
gtk;gtk_option_menu_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoptionmenu.h;"GtkWidget* gtk_option_menu_new (void);"
gtk;gtk_option_menu_remove_menu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoptionmenu.h;"void gtk_option_menu_remove_menu (GtkOptionMenu *option_menu);"
gtk;gtk_option_menu_set_history;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoptionmenu.h;"void gtk_option_menu_set_history (GtkOptionMenu *option_menu, guint index_);"
gtk;gtk_option_menu_set_menu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkoptionmenu.h;"void gtk_option_menu_set_menu (GtkOptionMenu *option_menu, GtkWidget *menu);"
gtk;gtk_orientable_get_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkorientable.h;"GtkOrientation gtk_orientable_get_orientation (GtkOrientable *orientable);"
gtk;gtk_orientable_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkorientable.h;"  GType gtk_orientable_get_type (void) G_GNUC_CONST;"
gtk;gtk_orientable_set_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkorientable.h;" void gtk_orientable_set_orientation (GtkOrientable *orientable, GtkOrientation orientation);"
gtk;gtk_orientation_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_orientation_get_type (void) G_GNUC_CONST;"
gtk;gtk_pack_direction_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_pack_direction_get_type (void) G_GNUC_CONST;"
gtk;gtk_pack_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_pack_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_page_orientation_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_page_orientation_get_type (void) G_GNUC_CONST;"
gtk;gtk_page_set_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_page_set_get_type (void) G_GNUC_CONST;"
gtk;gtk_page_setup_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"GtkPageSetup * gtk_page_setup_copy (GtkPageSetup *other);"
gtk;gtk_page_setup_get_bottom_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"gdouble gtk_page_setup_get_bottom_margin (GtkPageSetup *setup, GtkUnit unit);"
gtk;gtk_page_setup_get_left_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"gdouble gtk_page_setup_get_left_margin (GtkPageSetup *setup, GtkUnit unit);"
gtk;gtk_page_setup_get_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"GtkPageOrientation gtk_page_setup_get_orientation (GtkPageSetup *setup);"
gtk;gtk_page_setup_get_page_height;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"gdouble gtk_page_setup_get_page_height (GtkPageSetup *setup, GtkUnit unit);"
gtk;gtk_page_setup_get_page_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;" gdouble gtk_page_setup_get_page_width (GtkPageSetup *setup, GtkUnit unit);"
gtk;gtk_page_setup_get_paper_height;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"gdouble gtk_page_setup_get_paper_height (GtkPageSetup *setup, GtkUnit unit);"
gtk;gtk_page_setup_get_paper_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"GtkPaperSize * gtk_page_setup_get_paper_size (GtkPageSetup *setup);"
gtk;gtk_page_setup_get_paper_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;" gdouble gtk_page_setup_get_paper_width (GtkPageSetup *setup, GtkUnit unit);"
gtk;gtk_page_setup_get_right_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"gdouble gtk_page_setup_get_right_margin (GtkPageSetup *setup, GtkUnit unit);"
gtk;gtk_page_setup_get_top_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"gdouble gtk_page_setup_get_top_margin (GtkPageSetup *setup, GtkUnit unit);"
gtk;gtk_page_setup_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"  GType gtk_page_setup_get_type (void) G_GNUC_CONST;"
gtk;gtk_page_setup_load_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"gboolean gtk_page_setup_load_file (GtkPageSetup *setup, const char *file_name, GError **error);"
gtk;gtk_page_setup_load_key_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"gboolean gtk_page_setup_load_key_file (GtkPageSetup *setup, GKeyFile *key_file, const gchar *group_name, GError **error);"
gtk;gtk_page_setup_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"GtkPageSetup * gtk_page_setup_new (void);"
gtk;gtk_page_setup_new_from_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;" GtkPageSetup *gtk_page_setup_new_from_file (const gchar *file_name, GError **error);"
gtk;gtk_page_setup_new_from_key_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"GtkPageSetup *gtk_page_setup_new_from_key_file (GKeyFile *key_file, const gchar *group_name, GError **error);"
gtk;gtk_page_setup_set_bottom_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"void gtk_page_setup_set_bottom_margin (GtkPageSetup *setup, gdouble margin, GtkUnit unit);"
gtk;gtk_page_setup_set_left_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"void gtk_page_setup_set_left_margin (GtkPageSetup *setup, gdouble margin, GtkUnit unit);"
gtk;gtk_page_setup_set_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"void gtk_page_setup_set_orientation (GtkPageSetup *setup, GtkPageOrientation orientation);"
gtk;gtk_page_setup_set_paper_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"void gtk_page_setup_set_paper_size (GtkPageSetup *setup, GtkPaperSize *size);"
gtk;gtk_page_setup_set_paper_size_and_default_margins;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;" void gtk_page_setup_set_paper_size_and_default_margins (GtkPageSetup *setup, GtkPaperSize *size);"
gtk;gtk_page_setup_set_right_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"void gtk_page_setup_set_right_margin (GtkPageSetup *setup, gdouble margin, GtkUnit unit);"
gtk;gtk_page_setup_set_top_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"void gtk_page_setup_set_top_margin (GtkPageSetup *setup, gdouble margin, GtkUnit unit);"
gtk;gtk_page_setup_to_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"gboolean gtk_page_setup_to_file (GtkPageSetup *setup, const char *file_name, GError **error);"
gtk;gtk_page_setup_to_key_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpagesetup.h;"void gtk_page_setup_to_key_file (GtkPageSetup *setup, GKeyFile *key_file, const gchar *group_name);"
gtk;gtk_paint_arrow;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_arrow (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, GtkArrowType arrow_type, gboolean fill, gint x, gint y, gint width, gint height);"
gtk;gtk_paint_box;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_box (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height);"
gtk;gtk_paint_box_gap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_box_gap (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width);"
gtk;gtk_paint_check;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_check (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height);"
gtk;gtk_paint_diamond;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_diamond (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height);"
gtk;gtk_paint_expander;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_expander (GtkStyle *style, GdkWindow *window, GtkStateType state_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, GtkExpanderStyle expander_style);"
gtk;gtk_paint_extension;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_extension (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side);"
gtk;gtk_paint_flat_box;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_flat_box (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height);"
gtk;gtk_paint_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_focus (GtkStyle *style, GdkWindow *window, GtkStateType state_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height);"
gtk;gtk_paint_handle;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_handle (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkOrientation orientation);"
gtk;gtk_paint_hline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;" void gtk_paint_hline (GtkStyle *style, GdkWindow *window, GtkStateType state_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x1, gint x2, gint y);"
gtk;gtk_paint_layout;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_layout (GtkStyle *style, GdkWindow *window, GtkStateType state_type, gboolean use_text, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, PangoLayout *layout);"
gtk;gtk_paint_option;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_option (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height);"
gtk;gtk_paint_polygon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_polygon (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, const GdkPoint *points, gint n_points, gboolean fill);"
gtk;gtk_paint_resize_grip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_resize_grip (GtkStyle *style, GdkWindow *window, GtkStateType state_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, GdkWindowEdge edge, gint x, gint y, gint width, gint height);"
gtk;gtk_paint_shadow;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_shadow (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height);"
gtk;gtk_paint_shadow_gap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_shadow_gap (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkPositionType gap_side, gint gap_x, gint gap_width);"
gtk;gtk_paint_slider;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_slider (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height, GtkOrientation orientation);"
gtk;gtk_paint_spinner;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_spinner (GtkStyle *style, GdkWindow *window, GtkStateType state_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, guint step, gint x, gint y, gint width, gint height);"
gtk;gtk_paint_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_string (GtkStyle *style, GdkWindow *window, GtkStateType state_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, const gchar *string);"
gtk;gtk_paint_tab;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_tab (GtkStyle *style, GdkWindow *window, GtkStateType state_type, GtkShadowType shadow_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height);"
gtk;gtk_paint_vline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_paint_vline (GtkStyle *style, GdkWindow *window, GtkStateType state_type, const GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint y1_, gint y2_, gint x);"
gtk;gtk_paned_add1;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpaned.h;"void gtk_paned_add1 (GtkPaned *paned, GtkWidget *child);"
gtk;gtk_paned_add2;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpaned.h;"void gtk_paned_add2 (GtkPaned *paned, GtkWidget *child);"
gtk;gtk_paned_compute_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpaned.h;" void gtk_paned_compute_position (GtkPaned *paned, gint allocation, gint child1_req, gint child2_req);"
gtk;gtk_paned_get_child1;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpaned.h;" GtkWidget * gtk_paned_get_child1 (GtkPaned *paned);"
gtk;gtk_paned_get_child2;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpaned.h;"GtkWidget * gtk_paned_get_child2 (GtkPaned *paned);"
gtk;gtk_paned_get_handle_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpaned.h;" GdkWindow * gtk_paned_get_handle_window (GtkPaned *paned);"
gtk;gtk_paned_get_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpaned.h;" gint gtk_paned_get_position (GtkPaned *paned);"
gtk;gtk_paned_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpaned.h;"  GType gtk_paned_get_type (void) G_GNUC_CONST;"
gtk;gtk_paned_pack1;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpaned.h;"void gtk_paned_pack1 (GtkPaned *paned, GtkWidget *child, gboolean resize, gboolean shrink);"
gtk;gtk_paned_pack2;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpaned.h;"void gtk_paned_pack2 (GtkPaned *paned, GtkWidget *child, gboolean resize, gboolean shrink);"
gtk;gtk_paned_set_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpaned.h;"void gtk_paned_set_position (GtkPaned *paned, gint position);"
gtk;gtk_paper_size_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"GtkPaperSize *gtk_paper_size_copy (GtkPaperSize *other);"
gtk;gtk_paper_size_free;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"void gtk_paper_size_free (GtkPaperSize *size);"
gtk;gtk_paper_size_get_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;" const gchar *gtk_paper_size_get_default (void);"
gtk;gtk_paper_size_get_default_bottom_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"gdouble gtk_paper_size_get_default_bottom_margin (GtkPaperSize *size, GtkUnit unit);"
gtk;gtk_paper_size_get_default_left_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"gdouble gtk_paper_size_get_default_left_margin (GtkPaperSize *size, GtkUnit unit);"
gtk;gtk_paper_size_get_default_right_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"gdouble gtk_paper_size_get_default_right_margin (GtkPaperSize *size, GtkUnit unit);"
gtk;gtk_paper_size_get_default_top_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;" gdouble gtk_paper_size_get_default_top_margin (GtkPaperSize *size, GtkUnit unit);"
gtk;gtk_paper_size_get_display_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"const gchar *gtk_paper_size_get_display_name (GtkPaperSize *size);"
gtk;gtk_paper_size_get_height;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"gdouble gtk_paper_size_get_height (GtkPaperSize *size, GtkUnit unit);"
gtk;gtk_paper_size_get_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;" const gchar *gtk_paper_size_get_name (GtkPaperSize *size);"
gtk;gtk_paper_size_get_paper_sizes;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;" GList *gtk_paper_size_get_paper_sizes (gboolean include_custom);"
gtk;gtk_paper_size_get_ppd_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"const gchar *gtk_paper_size_get_ppd_name (GtkPaperSize *size);"
gtk;gtk_paper_size_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"  GType gtk_paper_size_get_type (void) G_GNUC_CONST;"
gtk;gtk_paper_size_get_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;" gdouble gtk_paper_size_get_width (GtkPaperSize *size, GtkUnit unit);"
gtk;gtk_paper_size_is_custom;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"gboolean gtk_paper_size_is_custom (GtkPaperSize *size);"
gtk;gtk_paper_size_is_equal;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"gboolean gtk_paper_size_is_equal (GtkPaperSize *size1, GtkPaperSize *size2);"
gtk;gtk_paper_size_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;" GtkPaperSize *gtk_paper_size_new (const gchar *name);"
gtk;gtk_paper_size_new_custom;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"GtkPaperSize *gtk_paper_size_new_custom (const gchar *name, const gchar *display_name, gdouble width, gdouble height, GtkUnit unit);"
gtk;gtk_paper_size_new_from_key_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;" GtkPaperSize *gtk_paper_size_new_from_key_file (GKeyFile *key_file, const gchar *group_name, GError **error);"
gtk;gtk_paper_size_new_from_ppd;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"GtkPaperSize *gtk_paper_size_new_from_ppd (const gchar *ppd_name, const gchar *ppd_display_name, gdouble width, gdouble height);"
gtk;gtk_paper_size_set_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;" void gtk_paper_size_set_size (GtkPaperSize *size, gdouble width, gdouble height, GtkUnit unit);"
gtk;gtk_paper_size_to_key_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpapersize.h;"void gtk_paper_size_to_key_file (GtkPaperSize *size, GKeyFile *key_file, const gchar *group_name);"
gtk;gtk_parse_args;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" gboolean gtk_parse_args (int *argc, char ***argv);"
gtk;gtk_path_priority_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_path_priority_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_path_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_path_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_pixmap_get;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpixmap.h;"void gtk_pixmap_get (GtkPixmap *pixmap, GdkPixmap **val, GdkBitmap **mask);"
gtk;gtk_pixmap_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpixmap.h;"  GType gtk_pixmap_get_type (void) G_GNUC_CONST;"
gtk;gtk_pixmap_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpixmap.h;"GtkWidget* gtk_pixmap_new (GdkPixmap *pixmap, GdkBitmap *mask);"
gtk;gtk_pixmap_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpixmap.h;"void gtk_pixmap_set (GtkPixmap *pixmap, GdkPixmap *val, GdkBitmap *mask);"
gtk;gtk_pixmap_set_build_insensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpixmap.h;" void gtk_pixmap_set_build_insensitive (GtkPixmap *pixmap, gboolean build);"
gtk;gtk_plug_construct;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkplug.h;" void gtk_plug_construct (GtkPlug *plug, GdkNativeWindow socket_id);"
gtk;gtk_plug_construct_for_display;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkplug.h;" void gtk_plug_construct_for_display (GtkPlug *plug, GdkDisplay *display, GdkNativeWindow socket_id);"
gtk;gtk_plug_get_embedded;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkplug.h;" gboolean gtk_plug_get_embedded (GtkPlug *plug);"
gtk;gtk_plug_get_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkplug.h;" GdkNativeWindow gtk_plug_get_id (GtkPlug *plug);"
gtk;gtk_plug_get_socket_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkplug.h;" GdkWindow *gtk_plug_get_socket_window (GtkPlug *plug);"
gtk;gtk_plug_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkplug.h;"  GType gtk_plug_get_type (void) G_GNUC_CONST;"
gtk;gtk_plug_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkplug.h;"GtkWidget* gtk_plug_new (GdkNativeWindow socket_id);"
gtk;gtk_plug_new_for_display;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkplug.h;"GtkWidget* gtk_plug_new_for_display (GdkDisplay *display, GdkNativeWindow socket_id);"
gtk;gtk_policy_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_policy_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_position_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_position_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_preview_draw_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"void gtk_preview_draw_row (GtkPreview *preview, guchar *data, gint x, gint y, gint w);"
gtk;gtk_preview_get_cmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"GdkColormap* gtk_preview_get_cmap (void);"
gtk;gtk_preview_get_info;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"GtkPreviewInfo* gtk_preview_get_info (void);"
gtk;gtk_preview_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"  GType gtk_preview_get_type (void) G_GNUC_CONST;"
gtk;gtk_preview_get_visual;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"GdkVisual* gtk_preview_get_visual (void);"
gtk;gtk_preview_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"GtkWidget* gtk_preview_new (GtkPreviewType type);"
gtk;gtk_preview_put;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"void gtk_preview_put (GtkPreview *preview, GdkWindow *window, GdkGC *gc, gint srcx, gint srcy, gint destx, gint desty, gint width, gint height);"
gtk;gtk_preview_reset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;" void gtk_preview_reset (void);"
gtk;gtk_preview_set_color_cube;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"void gtk_preview_set_color_cube (guint nred_shades, guint ngreen_shades, guint nblue_shades, guint ngray_shades);"
gtk;gtk_preview_set_dither;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"void gtk_preview_set_dither (GtkPreview *preview, GdkRgbDither dither);"
gtk;gtk_preview_set_expand;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"void gtk_preview_set_expand (GtkPreview *preview, gboolean expand);"
gtk;gtk_preview_set_gamma;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;" void gtk_preview_set_gamma (double gamma_);"
gtk;gtk_preview_set_install_cmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"void gtk_preview_set_install_cmap (gint install_cmap);"
gtk;gtk_preview_set_reserved;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"void gtk_preview_set_reserved (gint nreserved);"
gtk;gtk_preview_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"void gtk_preview_size (GtkPreview *preview, gint width, gint height);"
gtk;gtk_preview_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_preview_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_preview_uninit;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkpreview.h;"void gtk_preview_uninit (void);"
gtk;gtk_print_context_create_pango_context;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintcontext.h;"PangoContext *gtk_print_context_create_pango_context (GtkPrintContext *context);"
gtk;gtk_print_context_create_pango_layout;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintcontext.h;"PangoLayout *gtk_print_context_create_pango_layout (GtkPrintContext *context);"
gtk;gtk_print_context_get_cairo_context;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintcontext.h;" cairo_t *gtk_print_context_get_cairo_context (GtkPrintContext *context);"
gtk;gtk_print_context_get_dpi_x;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintcontext.h;"gdouble gtk_print_context_get_dpi_x (GtkPrintContext *context);"
gtk;gtk_print_context_get_dpi_y;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintcontext.h;"gdouble gtk_print_context_get_dpi_y (GtkPrintContext *context);"
gtk;gtk_print_context_get_hard_margins;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintcontext.h;"gboolean gtk_print_context_get_hard_margins (GtkPrintContext *context, gdouble *top, gdouble *bottom, gdouble *left, gdouble *right);"
gtk;gtk_print_context_get_height;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintcontext.h;"gdouble gtk_print_context_get_height (GtkPrintContext *context);"
gtk;gtk_print_context_get_page_setup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintcontext.h;" GtkPageSetup *gtk_print_context_get_page_setup (GtkPrintContext *context);"
gtk;gtk_print_context_get_pango_fontmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintcontext.h;" PangoFontMap *gtk_print_context_get_pango_fontmap (GtkPrintContext *context);"
gtk;gtk_print_context_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintcontext.h;"  GType gtk_print_context_get_type (void) G_GNUC_CONST;"
gtk;gtk_print_context_get_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintcontext.h;"gdouble gtk_print_context_get_width (GtkPrintContext *context);"
gtk;gtk_print_context_set_cairo_context;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintcontext.h;" void gtk_print_context_set_cairo_context (GtkPrintContext *context, cairo_t *cr, double dpi_x, double dpi_y);"
gtk;gtk_print_duplex_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_print_duplex_get_type (void) G_GNUC_CONST;"
gtk;gtk_print_error_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_print_error_get_type (void) G_GNUC_CONST;"
gtk;gtk_print_error_quark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"  GQuark gtk_print_error_quark (void);"
gtk;gtk_print_operation_action_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_print_operation_action_get_type (void) G_GNUC_CONST;"
gtk;gtk_print_operation_cancel;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_cancel (GtkPrintOperation *op);"
gtk;gtk_print_operation_draw_page_finish;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_draw_page_finish (GtkPrintOperation *op);"
gtk;gtk_print_operation_get_default_page_setup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"GtkPageSetup * gtk_print_operation_get_default_page_setup (GtkPrintOperation *op);"
gtk;gtk_print_operation_get_embed_page_setup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"gboolean gtk_print_operation_get_embed_page_setup (GtkPrintOperation *op);"
gtk;gtk_print_operation_get_error;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_get_error (GtkPrintOperation *op, GError **error);"
gtk;gtk_print_operation_get_has_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"gboolean gtk_print_operation_get_has_selection (GtkPrintOperation *op);"
gtk;gtk_print_operation_get_n_pages_to_print;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"gint gtk_print_operation_get_n_pages_to_print (GtkPrintOperation *op);"
gtk;gtk_print_operation_get_print_settings;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"GtkPrintSettings * gtk_print_operation_get_print_settings (GtkPrintOperation *op);"
gtk;gtk_print_operation_get_status;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"GtkPrintStatus gtk_print_operation_get_status (GtkPrintOperation *op);"
gtk;gtk_print_operation_get_status_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"const gchar * gtk_print_operation_get_status_string (GtkPrintOperation *op);"
gtk;gtk_print_operation_get_support_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"gboolean gtk_print_operation_get_support_selection (GtkPrintOperation *op);"
gtk;gtk_print_operation_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;" GType gtk_print_operation_get_type (void) G_GNUC_CONST;"
gtk;gtk_print_operation_is_finished;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"gboolean gtk_print_operation_is_finished (GtkPrintOperation *op);"
gtk;gtk_print_operation_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"GtkPrintOperation * gtk_print_operation_new (void);"
gtk;gtk_print_operation_preview_end_preview;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperationpreview.h;"void gtk_print_operation_preview_end_preview (GtkPrintOperationPreview *preview);"
gtk;gtk_print_operation_preview_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperationpreview.h;"  GType gtk_print_operation_preview_get_type (void) G_GNUC_CONST;"
gtk;gtk_print_operation_preview_is_selected;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperationpreview.h;"gboolean gtk_print_operation_preview_is_selected (GtkPrintOperationPreview *preview, gint page_nr);"
gtk;gtk_print_operation_preview_render_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperationpreview.h;" void gtk_print_operation_preview_render_page (GtkPrintOperationPreview *preview, gint page_nr);"
gtk;gtk_print_operation_result_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_print_operation_result_get_type (void) G_GNUC_CONST;"
gtk;gtk_print_operation_run;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"GtkPrintOperationResult gtk_print_operation_run (GtkPrintOperation *op, GtkPrintOperationAction action, GtkWindow *parent, GError **error);"
gtk;gtk_print_operation_set_allow_async;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_allow_async (GtkPrintOperation *op, gboolean allow_async);"
gtk;gtk_print_operation_set_current_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_current_page (GtkPrintOperation *op, gint current_page);"
gtk;gtk_print_operation_set_custom_tab_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_custom_tab_label (GtkPrintOperation *op, const gchar *label);"
gtk;gtk_print_operation_set_default_page_setup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_default_page_setup (GtkPrintOperation *op, GtkPageSetup *default_page_setup);"
gtk;gtk_print_operation_set_defer_drawing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_defer_drawing (GtkPrintOperation *op);"
gtk;gtk_print_operation_set_embed_page_setup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_embed_page_setup (GtkPrintOperation *op, gboolean embed);"
gtk;gtk_print_operation_set_export_filename;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_export_filename (GtkPrintOperation *op, const gchar *filename);"
gtk;gtk_print_operation_set_has_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_has_selection (GtkPrintOperation *op, gboolean has_selection);"
gtk;gtk_print_operation_set_job_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_job_name (GtkPrintOperation *op, const gchar *job_name);"
gtk;gtk_print_operation_set_n_pages;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_n_pages (GtkPrintOperation *op, gint n_pages);"
gtk;gtk_print_operation_set_print_settings;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_print_settings (GtkPrintOperation *op, GtkPrintSettings *print_settings);"
gtk;gtk_print_operation_set_show_progress;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_show_progress (GtkPrintOperation *op, gboolean show_progress);"
gtk;gtk_print_operation_set_support_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_support_selection (GtkPrintOperation *op, gboolean support_selection);"
gtk;gtk_print_operation_set_track_print_status;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_track_print_status (GtkPrintOperation *op, gboolean track_status);"
gtk;gtk_print_operation_set_unit;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_unit (GtkPrintOperation *op, GtkUnit unit);"
gtk;gtk_print_operation_set_use_full_page;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;"void gtk_print_operation_set_use_full_page (GtkPrintOperation *op, gboolean full_page);"
gtk;gtk_print_pages_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_print_pages_get_type (void) G_GNUC_CONST;"
gtk;gtk_print_quality_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_print_quality_get_type (void) G_GNUC_CONST;"
gtk;gtk_print_run_page_setup_dialog;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;" GtkPageSetup *gtk_print_run_page_setup_dialog (GtkWindow *parent, GtkPageSetup *page_setup, GtkPrintSettings *settings);"
gtk;gtk_print_run_page_setup_dialog_async;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintoperation.h;" void gtk_print_run_page_setup_dialog_async (GtkWindow *parent, GtkPageSetup *page_setup, GtkPrintSettings *settings, GtkPageSetupDoneFunc done_cb, gpointer data);"
gtk;gtk_print_settings_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;" GtkPrintSettings *gtk_print_settings_copy (GtkPrintSettings *other);"
gtk;gtk_print_settings_foreach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_foreach (GtkPrintSettings *settings, GtkPrintSettingsFunc func, gpointer user_data);"
gtk;gtk_print_settings_get;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"const gchar * gtk_print_settings_get (GtkPrintSettings *settings, const gchar *key);"
gtk;gtk_print_settings_get_bool;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gboolean gtk_print_settings_get_bool (GtkPrintSettings *settings, const gchar *key);"
gtk;gtk_print_settings_get_collate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gboolean gtk_print_settings_get_collate (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_default_source;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"const gchar * gtk_print_settings_get_default_source (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_dither;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"const gchar * gtk_print_settings_get_dither (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_double;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gdouble gtk_print_settings_get_double (GtkPrintSettings *settings, const gchar *key);"
gtk;gtk_print_settings_get_double_with_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gdouble gtk_print_settings_get_double_with_default (GtkPrintSettings *settings, const gchar *key, gdouble def);"
gtk;gtk_print_settings_get_duplex;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"GtkPrintDuplex gtk_print_settings_get_duplex (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_finishings;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"const gchar * gtk_print_settings_get_finishings (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_int;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gint gtk_print_settings_get_int (GtkPrintSettings *settings, const gchar *key);"
gtk;gtk_print_settings_get_int_with_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gint gtk_print_settings_get_int_with_default (GtkPrintSettings *settings, const gchar *key, gint def);"
gtk;gtk_print_settings_get_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gdouble gtk_print_settings_get_length (GtkPrintSettings *settings, const gchar *key, GtkUnit unit);"
gtk;gtk_print_settings_get_media_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"const gchar * gtk_print_settings_get_media_type (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_n_copies;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gint gtk_print_settings_get_n_copies (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_number_up;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gint gtk_print_settings_get_number_up (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_number_up_layout;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"GtkNumberUpLayout gtk_print_settings_get_number_up_layout (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"GtkPageOrientation gtk_print_settings_get_orientation (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_output_bin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"const gchar * gtk_print_settings_get_output_bin (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_page_ranges;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"GtkPageRange * gtk_print_settings_get_page_ranges (GtkPrintSettings *settings, gint *num_ranges);"
gtk;gtk_print_settings_get_page_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"GtkPageSet gtk_print_settings_get_page_set (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_paper_height;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gdouble gtk_print_settings_get_paper_height (GtkPrintSettings *settings, GtkUnit unit);"
gtk;gtk_print_settings_get_paper_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"GtkPaperSize * gtk_print_settings_get_paper_size (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_paper_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gdouble gtk_print_settings_get_paper_width (GtkPrintSettings *settings, GtkUnit unit);"
gtk;gtk_print_settings_get_print_pages;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"GtkPrintPages gtk_print_settings_get_print_pages (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_printer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;" const gchar *gtk_print_settings_get_printer (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_printer_lpi;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gdouble gtk_print_settings_get_printer_lpi (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_quality;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"GtkPrintQuality gtk_print_settings_get_quality (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_resolution;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gint gtk_print_settings_get_resolution (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_resolution_x;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gint gtk_print_settings_get_resolution_x (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_resolution_y;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gint gtk_print_settings_get_resolution_y (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_reverse;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gboolean gtk_print_settings_get_reverse (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_scale;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gdouble gtk_print_settings_get_scale (GtkPrintSettings *settings);"
gtk;gtk_print_settings_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"  GType gtk_print_settings_get_type (void) G_GNUC_CONST;"
gtk;gtk_print_settings_get_use_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gboolean gtk_print_settings_get_use_color (GtkPrintSettings *settings);"
gtk;gtk_print_settings_has_key;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gboolean gtk_print_settings_has_key (GtkPrintSettings *settings, const gchar *key);"
gtk;gtk_print_settings_load_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gboolean gtk_print_settings_load_file (GtkPrintSettings *settings, const gchar *file_name, GError **error);"
gtk;gtk_print_settings_load_key_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gboolean gtk_print_settings_load_key_file (GtkPrintSettings *settings, GKeyFile *key_file, const gchar *group_name, GError **error);"
gtk;gtk_print_settings_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"GtkPrintSettings *gtk_print_settings_new (void);"
gtk;gtk_print_settings_new_from_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;" GtkPrintSettings *gtk_print_settings_new_from_file (const gchar *file_name, GError **error);"
gtk;gtk_print_settings_new_from_key_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"GtkPrintSettings *gtk_print_settings_new_from_key_file (GKeyFile *key_file, const gchar *group_name, GError **error);"
gtk;gtk_print_settings_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set (GtkPrintSettings *settings, const gchar *key, const gchar *value);"
gtk;gtk_print_settings_set_bool;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_bool (GtkPrintSettings *settings, const gchar *key, gboolean value);"
gtk;gtk_print_settings_set_collate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_collate (GtkPrintSettings *settings, gboolean collate);"
gtk;gtk_print_settings_set_default_source;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_default_source (GtkPrintSettings *settings, const gchar *default_source);"
gtk;gtk_print_settings_set_dither;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_dither (GtkPrintSettings *settings, const gchar *dither);"
gtk;gtk_print_settings_set_double;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_double (GtkPrintSettings *settings, const gchar *key, gdouble value);"
gtk;gtk_print_settings_set_duplex;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_duplex (GtkPrintSettings *settings, GtkPrintDuplex duplex);"
gtk;gtk_print_settings_set_finishings;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_finishings (GtkPrintSettings *settings, const gchar *finishings);"
gtk;gtk_print_settings_set_int;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_int (GtkPrintSettings *settings, const gchar *key, gint value);"
gtk;gtk_print_settings_set_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_length (GtkPrintSettings *settings, const gchar *key, gdouble value, GtkUnit unit);"
gtk;gtk_print_settings_set_media_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_media_type (GtkPrintSettings *settings, const gchar *media_type);"
gtk;gtk_print_settings_set_n_copies;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_n_copies (GtkPrintSettings *settings, gint num_copies);"
gtk;gtk_print_settings_set_number_up;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_number_up (GtkPrintSettings *settings, gint number_up);"
gtk;gtk_print_settings_set_number_up_layout;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_number_up_layout (GtkPrintSettings *settings, GtkNumberUpLayout number_up_layout);"
gtk;gtk_print_settings_set_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_orientation (GtkPrintSettings *settings, GtkPageOrientation orientation);"
gtk;gtk_print_settings_set_output_bin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_output_bin (GtkPrintSettings *settings, const gchar *output_bin);"
gtk;gtk_print_settings_set_page_ranges;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_page_ranges (GtkPrintSettings *settings, GtkPageRange *page_ranges, gint num_ranges);"
gtk;gtk_print_settings_set_page_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_page_set (GtkPrintSettings *settings, GtkPageSet page_set);"
gtk;gtk_print_settings_set_paper_height;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_paper_height (GtkPrintSettings *settings, gdouble height, GtkUnit unit);"
gtk;gtk_print_settings_set_paper_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_paper_size (GtkPrintSettings *settings, GtkPaperSize *paper_size);"
gtk;gtk_print_settings_set_paper_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_paper_width (GtkPrintSettings *settings, gdouble width, GtkUnit unit);"
gtk;gtk_print_settings_set_print_pages;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_print_pages (GtkPrintSettings *settings, GtkPrintPages pages);"
gtk;gtk_print_settings_set_printer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_printer (GtkPrintSettings *settings, const gchar *printer);"
gtk;gtk_print_settings_set_printer_lpi;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_printer_lpi (GtkPrintSettings *settings, gdouble lpi);"
gtk;gtk_print_settings_set_quality;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_quality (GtkPrintSettings *settings, GtkPrintQuality quality);"
gtk;gtk_print_settings_set_resolution;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_resolution (GtkPrintSettings *settings, gint resolution);"
gtk;gtk_print_settings_set_resolution_xy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_resolution_xy (GtkPrintSettings *settings, gint resolution_x, gint resolution_y);"
gtk;gtk_print_settings_set_reverse;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_reverse (GtkPrintSettings *settings, gboolean reverse);"
gtk;gtk_print_settings_set_scale;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_scale (GtkPrintSettings *settings, gdouble scale);"
gtk;gtk_print_settings_set_use_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_set_use_color (GtkPrintSettings *settings, gboolean use_color);"
gtk;gtk_print_settings_to_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"gboolean gtk_print_settings_to_file (GtkPrintSettings *settings, const gchar *file_name, GError **error);"
gtk;gtk_print_settings_to_key_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_to_key_file (GtkPrintSettings *settings, GKeyFile *key_file, const gchar *group_name);"
gtk;gtk_print_settings_unset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprintsettings.h;"void gtk_print_settings_unset (GtkPrintSettings *settings, const gchar *key);"
gtk;gtk_print_status_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_print_status_get_type (void) G_GNUC_CONST;"
gtk;gtk_private_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_private_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_progress_bar_get_ellipsize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"PangoEllipsizeMode gtk_progress_bar_get_ellipsize (GtkProgressBar *pbar);"
gtk;gtk_progress_bar_get_fraction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"gdouble gtk_progress_bar_get_fraction (GtkProgressBar *pbar);"
gtk;gtk_progress_bar_get_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;" GtkProgressBarOrientation gtk_progress_bar_get_orientation (GtkProgressBar *pbar);"
gtk;gtk_progress_bar_get_pulse_step;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"gdouble gtk_progress_bar_get_pulse_step (GtkProgressBar *pbar);"
gtk;gtk_progress_bar_get_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;" const gchar* gtk_progress_bar_get_text (GtkProgressBar *pbar);"
gtk;gtk_progress_bar_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"  GType gtk_progress_bar_get_type (void) G_GNUC_CONST;"
gtk;gtk_progress_bar_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"GtkWidget* gtk_progress_bar_new (void);"
gtk;gtk_progress_bar_new_with_adjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;" GtkWidget* gtk_progress_bar_new_with_adjustment (GtkAdjustment *adjustment);"
gtk;gtk_progress_bar_orientation_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_progress_bar_orientation_get_type (void) G_GNUC_CONST;"
gtk;gtk_progress_bar_pulse;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;" void gtk_progress_bar_pulse (GtkProgressBar *pbar);"
gtk;gtk_progress_bar_set_activity_blocks;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"void gtk_progress_bar_set_activity_blocks (GtkProgressBar *pbar, guint blocks);"
gtk;gtk_progress_bar_set_activity_step;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;" void gtk_progress_bar_set_activity_step (GtkProgressBar *pbar, guint step);"
gtk;gtk_progress_bar_set_bar_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"void gtk_progress_bar_set_bar_style (GtkProgressBar *pbar, GtkProgressBarStyle style);"
gtk;gtk_progress_bar_set_discrete_blocks;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"void gtk_progress_bar_set_discrete_blocks (GtkProgressBar *pbar, guint blocks);"
gtk;gtk_progress_bar_set_ellipsize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"void gtk_progress_bar_set_ellipsize (GtkProgressBar *pbar, PangoEllipsizeMode mode);"
gtk;gtk_progress_bar_set_fraction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"void gtk_progress_bar_set_fraction (GtkProgressBar *pbar, gdouble fraction);"
gtk;gtk_progress_bar_set_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"void gtk_progress_bar_set_orientation (GtkProgressBar *pbar, GtkProgressBarOrientation orientation);"
gtk;gtk_progress_bar_set_pulse_step;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;" void gtk_progress_bar_set_pulse_step (GtkProgressBar *pbar, gdouble fraction);"
gtk;gtk_progress_bar_set_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"void gtk_progress_bar_set_text (GtkProgressBar *pbar, const gchar *text);"
gtk;gtk_progress_bar_style_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_progress_bar_style_get_type (void) G_GNUC_CONST;"
gtk;gtk_progress_bar_update;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogressbar.h;"void gtk_progress_bar_update (GtkProgressBar *pbar, gdouble percentage);"
gtk;gtk_progress_configure;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"void gtk_progress_configure (GtkProgress *progress, gdouble value, gdouble min, gdouble max);"
gtk;gtk_progress_get_current_percentage;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"gdouble gtk_progress_get_current_percentage (GtkProgress *progress);"
gtk;gtk_progress_get_current_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"gchar* gtk_progress_get_current_text (GtkProgress *progress);"
gtk;gtk_progress_get_percentage_from_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"gdouble gtk_progress_get_percentage_from_value (GtkProgress *progress, gdouble value);"
gtk;gtk_progress_get_text_from_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"gchar* gtk_progress_get_text_from_value (GtkProgress *progress, gdouble value);"
gtk;gtk_progress_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"  GType gtk_progress_get_type (void) G_GNUC_CONST;"
gtk;gtk_progress_get_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"gdouble gtk_progress_get_value (GtkProgress *progress);"
gtk;gtk_progress_set_activity_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"void gtk_progress_set_activity_mode (GtkProgress *progress, gboolean activity_mode);"
gtk;gtk_progress_set_adjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"void gtk_progress_set_adjustment (GtkProgress *progress, GtkAdjustment *adjustment);"
gtk;gtk_progress_set_format_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"void gtk_progress_set_format_string (GtkProgress *progress, const gchar *format);"
gtk;gtk_progress_set_percentage;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"void gtk_progress_set_percentage (GtkProgress *progress, gdouble percentage);"
gtk;gtk_progress_set_show_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"void gtk_progress_set_show_text (GtkProgress *progress, gboolean show_text);"
gtk;gtk_progress_set_text_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"void gtk_progress_set_text_alignment (GtkProgress *progress, gfloat x_align, gfloat y_align);"
gtk;gtk_progress_set_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkprogress.h;"void gtk_progress_set_value (GtkProgress *progress, gdouble value);"
gtk;gtk_propagate_event;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" void gtk_propagate_event (GtkWidget *widget, GdkEvent *event);"
gtk;gtk_quit_add;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"guint gtk_quit_add (guint main_level, GtkFunction function, gpointer data);"
gtk;gtk_quit_add_destroy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"void gtk_quit_add_destroy (guint main_level, GtkObject *object);"
gtk;gtk_quit_add_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"guint gtk_quit_add_full (guint main_level, GtkFunction function, GtkCallbackMarshal marshal, gpointer data, GDestroyNotify destroy);"
gtk;gtk_quit_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"void gtk_quit_remove (guint quit_handler_id);"
gtk;gtk_quit_remove_by_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"void gtk_quit_remove_by_data (gpointer data);"
gtk;gtk_radio_action_get_current_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradioaction.h;"gint gtk_radio_action_get_current_value (GtkRadioAction *action);"
gtk;gtk_radio_action_get_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradioaction.h;"GSList *gtk_radio_action_get_group (GtkRadioAction *action);"
gtk;gtk_radio_action_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradioaction.h;"  GType gtk_radio_action_get_type (void) G_GNUC_CONST;"
gtk;gtk_radio_action_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradioaction.h;"GtkRadioAction *gtk_radio_action_new (const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id, gint value);"
gtk;gtk_radio_action_set_current_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradioaction.h;"void gtk_radio_action_set_current_value (GtkRadioAction *action, gint current_value);"
gtk;gtk_radio_action_set_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradioaction.h;"void gtk_radio_action_set_group (GtkRadioAction *action, GSList *group);"
gtk;gtk_radio_button_get_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiobutton.h;"GSList* gtk_radio_button_get_group (GtkRadioButton *radio_button);"
gtk;gtk_radio_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiobutton.h;"  GType gtk_radio_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_radio_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiobutton.h;" GtkWidget* gtk_radio_button_new (GSList *group);"
gtk;gtk_radio_button_new_from_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiobutton.h;"GtkWidget* gtk_radio_button_new_from_widget (GtkRadioButton *radio_group_member);"
gtk;gtk_radio_button_new_with_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiobutton.h;"GtkWidget* gtk_radio_button_new_with_label (GSList *group, const gchar *label);"
gtk;gtk_radio_button_new_with_label_from_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiobutton.h;"GtkWidget* gtk_radio_button_new_with_label_from_widget (GtkRadioButton *radio_group_member, const gchar *label);"
gtk;gtk_radio_button_new_with_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiobutton.h;"GtkWidget* gtk_radio_button_new_with_mnemonic (GSList *group, const gchar *label);"
gtk;gtk_radio_button_new_with_mnemonic_from_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiobutton.h;"GtkWidget* gtk_radio_button_new_with_mnemonic_from_widget (GtkRadioButton *radio_group_member, const gchar *label);"
gtk;gtk_radio_button_set_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiobutton.h;"void gtk_radio_button_set_group (GtkRadioButton *radio_button, GSList *group);"
gtk;gtk_radio_menu_item_get_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h;"GSList* gtk_radio_menu_item_get_group (GtkRadioMenuItem *radio_menu_item);"
gtk;gtk_radio_menu_item_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h;"  GType gtk_radio_menu_item_get_type (void) G_GNUC_CONST;"
gtk;gtk_radio_menu_item_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h;" GtkWidget* gtk_radio_menu_item_new (GSList *group);"
gtk;gtk_radio_menu_item_new_from_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h;"GtkWidget* gtk_radio_menu_item_new_from_widget (GtkRadioMenuItem *group);"
gtk;gtk_radio_menu_item_new_with_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h;"GtkWidget* gtk_radio_menu_item_new_with_label (GSList *group, const gchar *label);"
gtk;gtk_radio_menu_item_new_with_label_from_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h;"GtkWidget *gtk_radio_menu_item_new_with_label_from_widget (GtkRadioMenuItem *group, const gchar *label);"
gtk;gtk_radio_menu_item_new_with_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h;"GtkWidget* gtk_radio_menu_item_new_with_mnemonic (GSList *group, const gchar *label);"
gtk;gtk_radio_menu_item_new_with_mnemonic_from_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h;"GtkWidget *gtk_radio_menu_item_new_with_mnemonic_from_widget (GtkRadioMenuItem *group, const gchar *label);"
gtk;gtk_radio_menu_item_set_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h;"void gtk_radio_menu_item_set_group (GtkRadioMenuItem *radio_menu_item, GSList *group);"
gtk;gtk_radio_tool_button_get_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiotoolbutton.h;"GSList * gtk_radio_tool_button_get_group (GtkRadioToolButton *button);"
gtk;gtk_radio_tool_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiotoolbutton.h;"  GType gtk_radio_tool_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_radio_tool_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiotoolbutton.h;" GtkToolItem *gtk_radio_tool_button_new (GSList *group);"
gtk;gtk_radio_tool_button_new_from_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiotoolbutton.h;"GtkToolItem *gtk_radio_tool_button_new_from_stock (GSList *group, const gchar *stock_id);"
gtk;gtk_radio_tool_button_new_from_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiotoolbutton.h;"GtkToolItem *gtk_radio_tool_button_new_from_widget (GtkRadioToolButton *group);"
gtk;gtk_radio_tool_button_new_with_stock_from_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiotoolbutton.h;"GtkToolItem *gtk_radio_tool_button_new_with_stock_from_widget (GtkRadioToolButton *group, const gchar *stock_id);"
gtk;gtk_radio_tool_button_set_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkradiotoolbutton.h;"void gtk_radio_tool_button_set_group (GtkRadioToolButton *button, GSList *group);"
gtk;gtk_range_get_adjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"GtkAdjustment* gtk_range_get_adjustment (GtkRange *range);"
gtk;gtk_range_get_fill_level;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"gdouble gtk_range_get_fill_level (GtkRange *range);"
gtk;gtk_range_get_flippable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"gboolean gtk_range_get_flippable (GtkRange *range);"
gtk;gtk_range_get_inverted;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"gboolean gtk_range_get_inverted (GtkRange *range);"
gtk;gtk_range_get_lower_stepper_sensitivity;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"GtkSensitivityType gtk_range_get_lower_stepper_sensitivity (GtkRange *range);"
gtk;gtk_range_get_min_slider_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"gint gtk_range_get_min_slider_size (GtkRange *range);"
gtk;gtk_range_get_range_rect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;" void gtk_range_get_range_rect (GtkRange *range, GdkRectangle *range_rect);"
gtk;gtk_range_get_restrict_to_fill_level;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"gboolean gtk_range_get_restrict_to_fill_level (GtkRange *range);"
gtk;gtk_range_get_round_digits;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"gint gtk_range_get_round_digits (GtkRange *range);"
gtk;gtk_range_get_show_fill_level;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"gboolean gtk_range_get_show_fill_level (GtkRange *range);"
gtk;gtk_range_get_slider_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"void gtk_range_get_slider_range (GtkRange *range, gint *slider_start, gint *slider_end);"
gtk;gtk_range_get_slider_size_fixed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"gboolean gtk_range_get_slider_size_fixed (GtkRange *range);"
gtk;gtk_range_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"  GType gtk_range_get_type (void) G_GNUC_CONST;"
gtk;gtk_range_get_update_policy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"GtkUpdateType gtk_range_get_update_policy (GtkRange *range);"
gtk;gtk_range_get_upper_stepper_sensitivity;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"GtkSensitivityType gtk_range_get_upper_stepper_sensitivity (GtkRange *range);"
gtk;gtk_range_get_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"gdouble gtk_range_get_value (GtkRange *range);"
gtk;gtk_range_set_adjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;" void gtk_range_set_adjustment (GtkRange *range, GtkAdjustment *adjustment);"
gtk;gtk_range_set_fill_level;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"void gtk_range_set_fill_level (GtkRange *range, gdouble fill_level);"
gtk;gtk_range_set_flippable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;" void gtk_range_set_flippable (GtkRange *range, gboolean flippable);"
gtk;gtk_range_set_increments;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;" void gtk_range_set_increments (GtkRange *range, gdouble step, gdouble page);"
gtk;gtk_range_set_inverted;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;" void gtk_range_set_inverted (GtkRange *range, gboolean setting);"
gtk;gtk_range_set_lower_stepper_sensitivity;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;" void gtk_range_set_lower_stepper_sensitivity (GtkRange *range, GtkSensitivityType sensitivity);"
gtk;gtk_range_set_min_slider_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;" void gtk_range_set_min_slider_size (GtkRange *range, gboolean min_size);"
gtk;gtk_range_set_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"void gtk_range_set_range (GtkRange *range, gdouble min, gdouble max);"
gtk;gtk_range_set_restrict_to_fill_level;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"void gtk_range_set_restrict_to_fill_level (GtkRange *range, gboolean restrict_to_fill_level);"
gtk;gtk_range_set_round_digits;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"void gtk_range_set_round_digits (GtkRange *range, gint round_digits);"
gtk;gtk_range_set_show_fill_level;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;" void gtk_range_set_show_fill_level (GtkRange *range, gboolean show_fill_level);"
gtk;gtk_range_set_slider_size_fixed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;" void gtk_range_set_slider_size_fixed (GtkRange *range, gboolean size_fixed);"
gtk;gtk_range_set_update_policy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;" void gtk_range_set_update_policy (GtkRange *range, GtkUpdateType policy);"
gtk;gtk_range_set_upper_stepper_sensitivity;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"void gtk_range_set_upper_stepper_sensitivity (GtkRange *range, GtkSensitivityType sensitivity);"
gtk;gtk_range_set_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrange.h;"void gtk_range_set_value (GtkRange *range, gdouble value);"
gtk;gtk_rc_add_class_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"void gtk_rc_add_class_style (GtkRcStyle *rc_style, const gchar *pattern);"
gtk;gtk_rc_add_widget_class_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"void gtk_rc_add_widget_class_style (GtkRcStyle *rc_style, const gchar *pattern);"
gtk;gtk_rc_add_widget_name_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;" void gtk_rc_add_widget_name_style (GtkRcStyle *rc_style, const gchar *pattern);"
gtk;gtk_rc_find_module_in_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;" gchar* gtk_rc_find_module_in_path (const gchar *module_file);"
gtk;gtk_rc_find_pixmap_in_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;" gchar* gtk_rc_find_pixmap_in_path (GtkSettings *settings, GScanner *scanner, const gchar *pixmap_file);"
gtk;gtk_rc_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_rc_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_rc_get_default_files;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"gchar** gtk_rc_get_default_files (void);"
gtk;gtk_rc_get_im_module_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"gchar* gtk_rc_get_im_module_file (void);"
gtk;gtk_rc_get_im_module_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"gchar* gtk_rc_get_im_module_path (void);"
gtk;gtk_rc_get_module_dir;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"gchar* gtk_rc_get_module_dir (void);"
gtk;gtk_rc_get_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"GtkStyle* gtk_rc_get_style (GtkWidget *widget);"
gtk;gtk_rc_get_style_by_paths;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"GtkStyle* gtk_rc_get_style_by_paths (GtkSettings *settings, const char *widget_path, const char *class_path, GType type);"
gtk;gtk_rc_get_theme_dir;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"gchar* gtk_rc_get_theme_dir (void);"
gtk;gtk_rc_parse_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"guint gtk_rc_parse_color (GScanner *scanner, GdkColor *color);"
gtk;gtk_rc_parse_color_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"guint gtk_rc_parse_color_full (GScanner *scanner, GtkRcStyle *style, GdkColor *color);"
gtk;gtk_rc_parse_priority;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"guint gtk_rc_parse_priority (GScanner *scanner, GtkPathPriorityType *priority);"
gtk;gtk_rc_parse_state;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"guint gtk_rc_parse_state (GScanner *scanner, GtkStateType *state);"
gtk;gtk_rc_parse_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"void gtk_rc_parse_string (const gchar *rc_string);"
gtk;gtk_rc_property_parse_border;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;"gboolean gtk_rc_property_parse_border (const GParamSpec *pspec, const GString *gstring, GValue *property_value);"
gtk;gtk_rc_property_parse_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;" gboolean gtk_rc_property_parse_color (const GParamSpec *pspec, const GString *gstring, GValue *property_value);"
gtk;gtk_rc_property_parse_enum;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;"gboolean gtk_rc_property_parse_enum (const GParamSpec *pspec, const GString *gstring, GValue *property_value);"
gtk;gtk_rc_property_parse_flags;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;"gboolean gtk_rc_property_parse_flags (const GParamSpec *pspec, const GString *gstring, GValue *property_value);"
gtk;gtk_rc_property_parse_requisition;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;"gboolean gtk_rc_property_parse_requisition (const GParamSpec *pspec, const GString *gstring, GValue *property_value);"
gtk;gtk_rc_reparse_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"gboolean gtk_rc_reparse_all (void);"
gtk;gtk_rc_reparse_all_for_settings;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;" gboolean gtk_rc_reparse_all_for_settings (GtkSettings *settings, gboolean force_load);"
gtk;gtk_rc_reset_styles;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"void gtk_rc_reset_styles (GtkSettings *settings);"
gtk;gtk_rc_scanner_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;" GScanner* gtk_rc_scanner_new (void);"
gtk;gtk_rc_style_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"GtkRcStyle* gtk_rc_style_copy (GtkRcStyle *orig);"
gtk;gtk_rc_style_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;" GType gtk_rc_style_get_type (void) G_GNUC_CONST;"
gtk;gtk_rc_style_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"GtkRcStyle* gtk_rc_style_new (void);"
gtk;gtk_rc_style_ref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;" void gtk_rc_style_ref (GtkRcStyle *rc_style);"
gtk;gtk_rc_style_unref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"void gtk_rc_style_unref (GtkRcStyle *rc_style);"
gtk;gtk_rc_token_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_rc_token_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_recent_action_get_show_numbers;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentaction.h;"gboolean gtk_recent_action_get_show_numbers (GtkRecentAction *action);"
gtk;gtk_recent_action_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentaction.h;"  GType gtk_recent_action_get_type (void) G_GNUC_CONST;"
gtk;gtk_recent_action_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentaction.h;"GtkAction *gtk_recent_action_new (const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id);"
gtk;gtk_recent_action_new_for_manager;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentaction.h;"GtkAction *gtk_recent_action_new_for_manager (const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id, GtkRecentManager *manager);"
gtk;gtk_recent_action_set_show_numbers;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentaction.h;"void gtk_recent_action_set_show_numbers (GtkRecentAction *action, gboolean show_numbers);"
gtk;gtk_recent_chooser_add_filter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;" void gtk_recent_chooser_add_filter (GtkRecentChooser *chooser, GtkRecentFilter *filter);"
gtk;gtk_recent_chooser_dialog_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooserdialog.h;"  GType gtk_recent_chooser_dialog_get_type (void) G_GNUC_CONST;"
gtk;gtk_recent_chooser_error_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_recent_chooser_error_get_type (void) G_GNUC_CONST;"
gtk;gtk_recent_chooser_error_quark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"  GQuark gtk_recent_chooser_error_quark (void);"
gtk;gtk_recent_chooser_get_current_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"GtkRecentInfo *gtk_recent_chooser_get_current_item (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_current_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"gchar * gtk_recent_chooser_get_current_uri (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_filter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"GtkRecentFilter *gtk_recent_chooser_get_filter (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"GList * gtk_recent_chooser_get_items (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_limit;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"gint gtk_recent_chooser_get_limit (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_local_only;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"gboolean gtk_recent_chooser_get_local_only (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_select_multiple;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"gboolean gtk_recent_chooser_get_select_multiple (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_show_icons;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"gboolean gtk_recent_chooser_get_show_icons (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_show_not_found;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"gboolean gtk_recent_chooser_get_show_not_found (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_show_numbers;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"gboolean gtk_recent_chooser_get_show_numbers (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_show_private;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"gboolean gtk_recent_chooser_get_show_private (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_show_tips;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"gboolean gtk_recent_chooser_get_show_tips (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_sort_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"GtkRecentSortType gtk_recent_chooser_get_sort_type (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;" GType gtk_recent_chooser_get_type (void) G_GNUC_CONST;"
gtk;gtk_recent_chooser_get_uris;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"gchar ** gtk_recent_chooser_get_uris (GtkRecentChooser *chooser, gsize *length);"
gtk;gtk_recent_chooser_list_filters;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"GSList * gtk_recent_chooser_list_filters (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_menu_get_show_numbers;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchoosermenu.h;" gboolean gtk_recent_chooser_menu_get_show_numbers (GtkRecentChooserMenu *menu);"
gtk;gtk_recent_chooser_menu_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchoosermenu.h;"  GType gtk_recent_chooser_menu_get_type (void) G_GNUC_CONST;"
gtk;gtk_recent_chooser_menu_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchoosermenu.h;" GtkWidget *gtk_recent_chooser_menu_new (void);"
gtk;gtk_recent_chooser_menu_new_for_manager;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchoosermenu.h;"GtkWidget *gtk_recent_chooser_menu_new_for_manager (GtkRecentManager *manager);"
gtk;gtk_recent_chooser_menu_set_show_numbers;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchoosermenu.h;"void gtk_recent_chooser_menu_set_show_numbers (GtkRecentChooserMenu *menu, gboolean show_numbers);"
gtk;gtk_recent_chooser_remove_filter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"void gtk_recent_chooser_remove_filter (GtkRecentChooser *chooser, GtkRecentFilter *filter);"
gtk;gtk_recent_chooser_select_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"void gtk_recent_chooser_select_all (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_select_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"gboolean gtk_recent_chooser_select_uri (GtkRecentChooser *chooser, const gchar *uri, GError **error);"
gtk;gtk_recent_chooser_set_current_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;" gboolean gtk_recent_chooser_set_current_uri (GtkRecentChooser *chooser, const gchar *uri, GError **error);"
gtk;gtk_recent_chooser_set_filter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"void gtk_recent_chooser_set_filter (GtkRecentChooser *chooser, GtkRecentFilter *filter);"
gtk;gtk_recent_chooser_set_limit;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"void gtk_recent_chooser_set_limit (GtkRecentChooser *chooser, gint limit);"
gtk;gtk_recent_chooser_set_local_only;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"void gtk_recent_chooser_set_local_only (GtkRecentChooser *chooser, gboolean local_only);"
gtk;gtk_recent_chooser_set_select_multiple;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"void gtk_recent_chooser_set_select_multiple (GtkRecentChooser *chooser, gboolean select_multiple);"
gtk;gtk_recent_chooser_set_show_icons;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;" void gtk_recent_chooser_set_show_icons (GtkRecentChooser *chooser, gboolean show_icons);"
gtk;gtk_recent_chooser_set_show_not_found;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"void gtk_recent_chooser_set_show_not_found (GtkRecentChooser *chooser, gboolean show_not_found);"
gtk;gtk_recent_chooser_set_show_numbers;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;" void gtk_recent_chooser_set_show_numbers (GtkRecentChooser *chooser, gboolean show_numbers);"
gtk;gtk_recent_chooser_set_show_private;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;" void gtk_recent_chooser_set_show_private (GtkRecentChooser *chooser, gboolean show_private);"
gtk;gtk_recent_chooser_set_show_tips;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"void gtk_recent_chooser_set_show_tips (GtkRecentChooser *chooser, gboolean show_tips);"
gtk;gtk_recent_chooser_set_sort_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"void gtk_recent_chooser_set_sort_func (GtkRecentChooser *chooser, GtkRecentSortFunc sort_func, gpointer sort_data, GDestroyNotify data_destroy);"
gtk;gtk_recent_chooser_set_sort_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"void gtk_recent_chooser_set_sort_type (GtkRecentChooser *chooser, GtkRecentSortType sort_type);"
gtk;gtk_recent_chooser_unselect_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"void gtk_recent_chooser_unselect_all (GtkRecentChooser *chooser);"
gtk;gtk_recent_chooser_unselect_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooser.h;"void gtk_recent_chooser_unselect_uri (GtkRecentChooser *chooser, const gchar *uri);"
gtk;gtk_recent_chooser_widget_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooserwidget.h;"  GType gtk_recent_chooser_widget_get_type (void) G_GNUC_CONST;"
gtk;gtk_recent_chooser_widget_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooserwidget.h;"GtkWidget *gtk_recent_chooser_widget_new (void);"
gtk;gtk_recent_chooser_widget_new_for_manager;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentchooserwidget.h;"GtkWidget *gtk_recent_chooser_widget_new_for_manager (GtkRecentManager *manager);"
gtk;gtk_recent_filter_add_age;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;"void gtk_recent_filter_add_age (GtkRecentFilter *filter, gint days);"
gtk;gtk_recent_filter_add_application;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;"void gtk_recent_filter_add_application (GtkRecentFilter *filter, const gchar *application);"
gtk;gtk_recent_filter_add_custom;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;"void gtk_recent_filter_add_custom (GtkRecentFilter *filter, GtkRecentFilterFlags needed, GtkRecentFilterFunc func, gpointer data, GDestroyNotify data_destroy);"
gtk;gtk_recent_filter_add_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;"void gtk_recent_filter_add_group (GtkRecentFilter *filter, const gchar *group);"
gtk;gtk_recent_filter_add_mime_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;" void gtk_recent_filter_add_mime_type (GtkRecentFilter *filter, const gchar *mime_type);"
gtk;gtk_recent_filter_add_pattern;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;"void gtk_recent_filter_add_pattern (GtkRecentFilter *filter, const gchar *pattern);"
gtk;gtk_recent_filter_add_pixbuf_formats;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;"void gtk_recent_filter_add_pixbuf_formats (GtkRecentFilter *filter);"
gtk;gtk_recent_filter_filter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;"gboolean gtk_recent_filter_filter (GtkRecentFilter *filter, const GtkRecentFilterInfo *filter_info);"
gtk;gtk_recent_filter_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_recent_filter_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_recent_filter_get_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;"const gchar * gtk_recent_filter_get_name (GtkRecentFilter *filter);"
gtk;gtk_recent_filter_get_needed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;" GtkRecentFilterFlags gtk_recent_filter_get_needed (GtkRecentFilter *filter);"
gtk;gtk_recent_filter_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;"  GType gtk_recent_filter_get_type (void) G_GNUC_CONST;"
gtk;gtk_recent_filter_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;" GtkRecentFilter * gtk_recent_filter_new (void);"
gtk;gtk_recent_filter_set_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentfilter.h;"void gtk_recent_filter_set_name (GtkRecentFilter *filter, const gchar *name);"
gtk;gtk_recent_info_exists;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gboolean gtk_recent_info_exists (GtkRecentInfo *info);"
gtk;gtk_recent_info_get_added;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"time_t gtk_recent_info_get_added (GtkRecentInfo *info);"
gtk;gtk_recent_info_get_age;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gint gtk_recent_info_get_age (GtkRecentInfo *info);"
gtk;gtk_recent_info_get_application_info;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gboolean gtk_recent_info_get_application_info (GtkRecentInfo *info, const gchar *app_name, const gchar **app_exec, guint *count, time_t *time_);"
gtk;gtk_recent_info_get_applications;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gchar ** gtk_recent_info_get_applications (GtkRecentInfo *info, gsize *length) G_GNUC_MALLOC;"
gtk;gtk_recent_info_get_description;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"const gchar * gtk_recent_info_get_description (GtkRecentInfo *info);"
gtk;gtk_recent_info_get_display_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"const gchar * gtk_recent_info_get_display_name (GtkRecentInfo *info);"
gtk;gtk_recent_info_get_groups;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gchar ** gtk_recent_info_get_groups (GtkRecentInfo *info, gsize *length) G_GNUC_MALLOC;"
gtk;gtk_recent_info_get_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"GdkPixbuf * gtk_recent_info_get_icon (GtkRecentInfo *info, gint size);"
gtk;gtk_recent_info_get_mime_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"const gchar * gtk_recent_info_get_mime_type (GtkRecentInfo *info);"
gtk;gtk_recent_info_get_modified;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"time_t gtk_recent_info_get_modified (GtkRecentInfo *info);"
gtk;gtk_recent_info_get_private_hint;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gboolean gtk_recent_info_get_private_hint (GtkRecentInfo *info);"
gtk;gtk_recent_info_get_short_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gchar * gtk_recent_info_get_short_name (GtkRecentInfo *info) G_GNUC_MALLOC;"
gtk;gtk_recent_info_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;" GType gtk_recent_info_get_type (void) G_GNUC_CONST;"
gtk;gtk_recent_info_get_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;" const gchar * gtk_recent_info_get_uri (GtkRecentInfo *info);"
gtk;gtk_recent_info_get_uri_display;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gchar * gtk_recent_info_get_uri_display (GtkRecentInfo *info) G_GNUC_MALLOC;"
gtk;gtk_recent_info_get_visited;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"time_t gtk_recent_info_get_visited (GtkRecentInfo *info);"
gtk;gtk_recent_info_has_application;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gboolean gtk_recent_info_has_application (GtkRecentInfo *info, const gchar *app_name);"
gtk;gtk_recent_info_has_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gboolean gtk_recent_info_has_group (GtkRecentInfo *info, const gchar *group_name);"
gtk;gtk_recent_info_is_local;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gboolean gtk_recent_info_is_local (GtkRecentInfo *info);"
gtk;gtk_recent_info_last_application;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gchar * gtk_recent_info_last_application (GtkRecentInfo *info) G_GNUC_MALLOC;"
gtk;gtk_recent_info_match;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gboolean gtk_recent_info_match (GtkRecentInfo *info_a, GtkRecentInfo *info_b);"
gtk;gtk_recent_info_ref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;" GtkRecentInfo * gtk_recent_info_ref (GtkRecentInfo *info);"
gtk;gtk_recent_info_unref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"void gtk_recent_info_unref (GtkRecentInfo *info);"
gtk;gtk_recent_manager_add_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gboolean gtk_recent_manager_add_full (GtkRecentManager *manager, const gchar *uri, const GtkRecentData *recent_data);"
gtk;gtk_recent_manager_add_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;" gboolean gtk_recent_manager_add_item (GtkRecentManager *manager, const gchar *uri);"
gtk;gtk_recent_manager_error_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_recent_manager_error_get_type (void) G_GNUC_CONST;"
gtk;gtk_recent_manager_error_quark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"  GQuark gtk_recent_manager_error_quark (void);"
gtk;gtk_recent_manager_get_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"GtkRecentManager *gtk_recent_manager_get_default (void);"
gtk;gtk_recent_manager_get_for_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;" GtkRecentManager *gtk_recent_manager_get_for_screen (GdkScreen *screen);"
gtk;gtk_recent_manager_get_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"GList * gtk_recent_manager_get_items (GtkRecentManager *manager);"
gtk;gtk_recent_manager_get_limit;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gint gtk_recent_manager_get_limit (GtkRecentManager *manager);"
gtk;gtk_recent_manager_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;" GType gtk_recent_manager_get_type (void) G_GNUC_CONST;"
gtk;gtk_recent_manager_has_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gboolean gtk_recent_manager_has_item (GtkRecentManager *manager, const gchar *uri);"
gtk;gtk_recent_manager_lookup_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"GtkRecentInfo * gtk_recent_manager_lookup_item (GtkRecentManager *manager, const gchar *uri, GError **error);"
gtk;gtk_recent_manager_move_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gboolean gtk_recent_manager_move_item (GtkRecentManager *manager, const gchar *uri, const gchar *new_uri, GError **error);"
gtk;gtk_recent_manager_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;" GtkRecentManager *gtk_recent_manager_new (void);"
gtk;gtk_recent_manager_purge_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gint gtk_recent_manager_purge_items (GtkRecentManager *manager, GError **error);"
gtk;gtk_recent_manager_remove_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"gboolean gtk_recent_manager_remove_item (GtkRecentManager *manager, const gchar *uri, GError **error);"
gtk;gtk_recent_manager_set_limit;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"void gtk_recent_manager_set_limit (GtkRecentManager *manager, gint limit);"
gtk;gtk_recent_manager_set_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkrecentmanager.h;"void gtk_recent_manager_set_screen (GtkRecentManager *manager, GdkScreen *screen);"
gtk;gtk_recent_sort_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_recent_sort_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_relief_style_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_relief_style_get_type (void) G_GNUC_CONST;"
gtk;gtk_requisition_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkRequisition *gtk_requisition_copy (const GtkRequisition *requisition);"
gtk;gtk_requisition_free;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_requisition_free (GtkRequisition *requisition);"
gtk;gtk_requisition_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" GType gtk_requisition_get_type (void) G_GNUC_CONST;"
gtk;gtk_resize_mode_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_resize_mode_get_type (void) G_GNUC_CONST;"
gtk;gtk_response_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_response_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_rgb_to_hsv;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkhsv.h;"void gtk_rgb_to_hsv (gdouble r, gdouble g, gdouble b, gdouble *h, gdouble *s, gdouble *v);"
gtk;gtk_ruler_draw_pos;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkruler.h;"void gtk_ruler_draw_pos (GtkRuler *ruler);"
gtk;gtk_ruler_draw_ticks;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkruler.h;" void gtk_ruler_draw_ticks (GtkRuler *ruler);"
gtk;gtk_ruler_get_metric;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkruler.h;"GtkMetricType gtk_ruler_get_metric (GtkRuler *ruler);"
gtk;gtk_ruler_get_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkruler.h;"void gtk_ruler_get_range (GtkRuler *ruler, gdouble *lower, gdouble *upper, gdouble *position, gdouble *max_size);"
gtk;gtk_ruler_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkruler.h;"  GType gtk_ruler_get_type (void) G_GNUC_CONST;"
gtk;gtk_ruler_set_metric;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkruler.h;"void gtk_ruler_set_metric (GtkRuler *ruler, GtkMetricType metric);"
gtk;gtk_ruler_set_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkruler.h;"void gtk_ruler_set_range (GtkRuler *ruler, gdouble lower, gdouble upper, gdouble position, gdouble max_size);"
gtk;gtk_scale_add_mark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscale.h;" void gtk_scale_add_mark (GtkScale *scale, gdouble value, GtkPositionType position, const gchar *markup);"
gtk;gtk_scale_button_get_adjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscalebutton.h;"GtkAdjustment * gtk_scale_button_get_adjustment (GtkScaleButton *button);"
gtk;gtk_scale_button_get_minus_button;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscalebutton.h;"GtkWidget * gtk_scale_button_get_minus_button (GtkScaleButton *button);"
gtk;gtk_scale_button_get_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscalebutton.h;" GtkOrientation gtk_scale_button_get_orientation (GtkScaleButton *button);"
gtk;gtk_scale_button_get_plus_button;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscalebutton.h;"GtkWidget * gtk_scale_button_get_plus_button (GtkScaleButton *button);"
gtk;gtk_scale_button_get_popup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscalebutton.h;"GtkWidget * gtk_scale_button_get_popup (GtkScaleButton *button);"
gtk;gtk_scale_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscalebutton.h;"  GType gtk_scale_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_scale_button_get_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscalebutton.h;"gdouble gtk_scale_button_get_value (GtkScaleButton *button);"
gtk;gtk_scale_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscalebutton.h;"GtkWidget * gtk_scale_button_new (GtkIconSize size, gdouble min, gdouble max, gdouble step, const gchar **icons);"
gtk;gtk_scale_button_set_adjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscalebutton.h;"void gtk_scale_button_set_adjustment (GtkScaleButton *button, GtkAdjustment *adjustment);"
gtk;gtk_scale_button_set_icons;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscalebutton.h;"void gtk_scale_button_set_icons (GtkScaleButton *button, const gchar **icons);"
gtk;gtk_scale_button_set_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscalebutton.h;"void gtk_scale_button_set_orientation (GtkScaleButton *button, GtkOrientation orientation);"
gtk;gtk_scale_button_set_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscalebutton.h;"void gtk_scale_button_set_value (GtkScaleButton *button, gdouble value);"
gtk;gtk_scale_clear_marks;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscale.h;"void gtk_scale_clear_marks (GtkScale *scale);"
gtk;gtk_scale_get_digits;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscale.h;"gint gtk_scale_get_digits (GtkScale *scale);"
gtk;gtk_scale_get_draw_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscale.h;"gboolean gtk_scale_get_draw_value (GtkScale *scale);"
gtk;gtk_scale_get_layout;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscale.h;" PangoLayout * gtk_scale_get_layout (GtkScale *scale);"
gtk;gtk_scale_get_layout_offsets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscale.h;"void gtk_scale_get_layout_offsets (GtkScale *scale, gint *x, gint *y);"
gtk;gtk_scale_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscale.h;"  GType gtk_scale_get_type (void) G_GNUC_CONST;"
gtk;gtk_scale_get_value_pos;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscale.h;"GtkPositionType gtk_scale_get_value_pos (GtkScale *scale);"
gtk;gtk_scale_set_digits;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscale.h;"void gtk_scale_set_digits (GtkScale *scale, gint digits);"
gtk;gtk_scale_set_draw_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscale.h;"void gtk_scale_set_draw_value (GtkScale *scale, gboolean draw_value);"
gtk;gtk_scale_set_value_pos;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscale.h;"void gtk_scale_set_value_pos (GtkScale *scale, GtkPositionType pos);"
gtk;gtk_scroll_step_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_scroll_step_get_type (void) G_GNUC_CONST;"
gtk;gtk_scroll_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_scroll_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_scrollbar_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrollbar.h;"  GType gtk_scrollbar_get_type (void) G_GNUC_CONST;"
gtk;gtk_scrolled_window_add_with_viewport;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"void gtk_scrolled_window_add_with_viewport (GtkScrolledWindow *scrolled_window, GtkWidget *child);"
gtk;gtk_scrolled_window_get_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"GtkAdjustment* gtk_scrolled_window_get_hadjustment (GtkScrolledWindow *scrolled_window);"
gtk;gtk_scrolled_window_get_hscrollbar;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"GtkWidget* gtk_scrolled_window_get_hscrollbar (GtkScrolledWindow *scrolled_window);"
gtk;gtk_scrolled_window_get_placement;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;" GtkCornerType gtk_scrolled_window_get_placement (GtkScrolledWindow *scrolled_window);"
gtk;gtk_scrolled_window_get_policy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"void gtk_scrolled_window_get_policy (GtkScrolledWindow *scrolled_window, GtkPolicyType *hscrollbar_policy, GtkPolicyType *vscrollbar_policy);"
gtk;gtk_scrolled_window_get_shadow_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"GtkShadowType gtk_scrolled_window_get_shadow_type (GtkScrolledWindow *scrolled_window);"
gtk;gtk_scrolled_window_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"  GType gtk_scrolled_window_get_type (void) G_GNUC_CONST;"
gtk;gtk_scrolled_window_get_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"GtkAdjustment* gtk_scrolled_window_get_vadjustment (GtkScrolledWindow *scrolled_window);"
gtk;gtk_scrolled_window_get_vscrollbar;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"GtkWidget* gtk_scrolled_window_get_vscrollbar (GtkScrolledWindow *scrolled_window);"
gtk;gtk_scrolled_window_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"GtkWidget* gtk_scrolled_window_new (GtkAdjustment *hadjustment, GtkAdjustment *vadjustment);"
gtk;gtk_scrolled_window_set_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"void gtk_scrolled_window_set_hadjustment (GtkScrolledWindow *scrolled_window, GtkAdjustment *hadjustment);"
gtk;gtk_scrolled_window_set_placement;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"void gtk_scrolled_window_set_placement (GtkScrolledWindow *scrolled_window, GtkCornerType window_placement);"
gtk;gtk_scrolled_window_set_policy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"void gtk_scrolled_window_set_policy (GtkScrolledWindow *scrolled_window, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy);"
gtk;gtk_scrolled_window_set_shadow_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"void gtk_scrolled_window_set_shadow_type (GtkScrolledWindow *scrolled_window, GtkShadowType type);"
gtk;gtk_scrolled_window_set_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"void gtk_scrolled_window_set_vadjustment (GtkScrolledWindow *scrolled_window, GtkAdjustment *vadjustment);"
gtk;gtk_scrolled_window_unset_placement;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h;"void gtk_scrolled_window_unset_placement (GtkScrolledWindow *scrolled_window);"
gtk;gtk_selection_add_target;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;" void gtk_selection_add_target (GtkWidget *widget, GdkAtom selection, GdkAtom target, guint info);"
gtk;gtk_selection_add_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"void gtk_selection_add_targets (GtkWidget *widget, GdkAtom selection, const GtkTargetEntry *targets, guint ntargets);"
gtk;gtk_selection_clear;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;" gboolean gtk_selection_clear (GtkWidget *widget, GdkEventSelection *event);"
gtk;gtk_selection_clear_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"void gtk_selection_clear_targets (GtkWidget *widget, GdkAtom selection);"
gtk;gtk_selection_convert;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_selection_convert (GtkWidget *widget, GdkAtom selection, GdkAtom target, guint32 time_);"
gtk;gtk_selection_data_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"GtkSelectionData *gtk_selection_data_copy (GtkSelectionData *data);"
gtk;gtk_selection_data_free;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"void gtk_selection_data_free (GtkSelectionData *data);"
gtk;gtk_selection_data_get_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"const guchar *gtk_selection_data_get_data (GtkSelectionData *selection_data);"
gtk;gtk_selection_data_get_data_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"GdkAtom gtk_selection_data_get_data_type (GtkSelectionData *selection_data);"
gtk;gtk_selection_data_get_display;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"GdkDisplay *gtk_selection_data_get_display (GtkSelectionData *selection_data);"
gtk;gtk_selection_data_get_format;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gint gtk_selection_data_get_format (GtkSelectionData *selection_data);"
gtk;gtk_selection_data_get_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gint gtk_selection_data_get_length (GtkSelectionData *selection_data);"
gtk;gtk_selection_data_get_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"GdkPixbuf *gtk_selection_data_get_pixbuf (GtkSelectionData *selection_data);"
gtk;gtk_selection_data_get_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;" GdkAtom gtk_selection_data_get_selection (GtkSelectionData *selection_data);"
gtk;gtk_selection_data_get_target;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"GdkAtom gtk_selection_data_get_target (GtkSelectionData *selection_data);"
gtk;gtk_selection_data_get_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;" gboolean gtk_selection_data_get_targets (GtkSelectionData *selection_data, GdkAtom **targets, gint *n_atoms);"
gtk;gtk_selection_data_get_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"guchar * gtk_selection_data_get_text (GtkSelectionData *selection_data);"
gtk;gtk_selection_data_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;" GType gtk_selection_data_get_type (void) G_GNUC_CONST;"
gtk;gtk_selection_data_get_uris;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gchar **gtk_selection_data_get_uris (GtkSelectionData *selection_data);"
gtk;gtk_selection_data_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;" void gtk_selection_data_set (GtkSelectionData *selection_data, GdkAtom type, gint format, const guchar *data, gint length);"
gtk;gtk_selection_data_set_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_selection_data_set_pixbuf (GtkSelectionData *selection_data, GdkPixbuf *pixbuf);"
gtk;gtk_selection_data_set_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_selection_data_set_text (GtkSelectionData *selection_data, const gchar *str, gint len);"
gtk;gtk_selection_data_set_uris;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_selection_data_set_uris (GtkSelectionData *selection_data, gchar **uris);"
gtk;gtk_selection_data_targets_include_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_selection_data_targets_include_image (GtkSelectionData *selection_data, gboolean writable);"
gtk;gtk_selection_data_targets_include_rich_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_selection_data_targets_include_rich_text (GtkSelectionData *selection_data, GtkTextBuffer *buffer);"
gtk;gtk_selection_data_targets_include_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_selection_data_targets_include_text (GtkSelectionData *selection_data);"
gtk;gtk_selection_data_targets_include_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_selection_data_targets_include_uri (GtkSelectionData *selection_data);"
gtk;gtk_selection_mode_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_selection_mode_get_type (void) G_GNUC_CONST;"
gtk;gtk_selection_owner_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;" gboolean gtk_selection_owner_set (GtkWidget *widget, GdkAtom selection, guint32 time_);"
gtk;gtk_selection_owner_set_for_display;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_selection_owner_set_for_display (GdkDisplay *display, GtkWidget *widget, GdkAtom selection, guint32 time_);"
gtk;gtk_selection_remove_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;" void gtk_selection_remove_all (GtkWidget *widget);"
gtk;gtk_sensitivity_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_sensitivity_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_separator_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkseparator.h;"  GType gtk_separator_get_type (void) G_GNUC_CONST;"
gtk;gtk_separator_menu_item_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkseparatormenuitem.h;"  GType gtk_separator_menu_item_get_type (void) G_GNUC_CONST;"
gtk;gtk_separator_menu_item_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkseparatormenuitem.h;"GtkWidget* gtk_separator_menu_item_new (void);"
gtk;gtk_separator_tool_item_get_draw;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkseparatortoolitem.h;" gboolean gtk_separator_tool_item_get_draw (GtkSeparatorToolItem *item);"
gtk;gtk_separator_tool_item_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkseparatortoolitem.h;"  GType gtk_separator_tool_item_get_type (void) G_GNUC_CONST;"
gtk;gtk_separator_tool_item_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkseparatortoolitem.h;"GtkToolItem *gtk_separator_tool_item_new (void);"
gtk;gtk_separator_tool_item_set_draw;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkseparatortoolitem.h;"void gtk_separator_tool_item_set_draw (GtkSeparatorToolItem *item, gboolean draw);"
gtk;gtk_set_locale;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"gchar * gtk_set_locale (void);"
gtk;gtk_settings_get_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;" GtkSettings* gtk_settings_get_default (void);"
gtk;gtk_settings_get_for_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;" GtkSettings* gtk_settings_get_for_screen (GdkScreen *screen);"
gtk;gtk_settings_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;"  GType gtk_settings_get_type (void) G_GNUC_CONST;"
gtk;gtk_settings_install_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;" void gtk_settings_install_property (GParamSpec *pspec);"
gtk;gtk_settings_install_property_parser;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;"void gtk_settings_install_property_parser (GParamSpec *pspec, GtkRcPropertyParser parser);"
gtk;gtk_settings_set_double_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;"void gtk_settings_set_double_property (GtkSettings *settings, const gchar *name, gdouble v_double, const gchar *origin);"
gtk;gtk_settings_set_long_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;"void gtk_settings_set_long_property (GtkSettings *settings, const gchar *name, glong v_long, const gchar *origin);"
gtk;gtk_settings_set_property_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;" void gtk_settings_set_property_value (GtkSettings *settings, const gchar *name, const GtkSettingsValue *svalue);"
gtk;gtk_settings_set_string_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksettings.h;"void gtk_settings_set_string_property (GtkSettings *settings, const gchar *name, const gchar *v_string, const gchar *origin);"
gtk;gtk_shadow_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_shadow_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_show_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkshow.h;"  gboolean gtk_show_uri (GdkScreen *screen, const gchar *uri, guint32 timestamp, GError **error);"
gtk;gtk_side_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_side_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_signal_compat_matched;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksignal.h;"void gtk_signal_compat_matched (GtkObject *object, GCallback func, gpointer data, GSignalMatchType match, guint action);"
gtk;gtk_signal_connect_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksignal.h;"gulong gtk_signal_connect_full (GtkObject *object, const gchar *name, GCallback func, GtkCallbackMarshal unsupported, gpointer data, GDestroyNotify destroy_func, gint object_signal, gint after);"
gtk;gtk_signal_connect_object_while_alive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksignal.h;"void gtk_signal_connect_object_while_alive (GtkObject *object, const gchar *name, GCallback func, GtkObject *alive_object);"
gtk;gtk_signal_connect_while_alive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksignal.h;"void gtk_signal_connect_while_alive (GtkObject *object, const gchar *name, GCallback func, gpointer func_data, GtkObject *alive_object);"
gtk;gtk_signal_emit_stop_by_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksignal.h;"void gtk_signal_emit_stop_by_name (GtkObject *object, const gchar *name);"
gtk;gtk_signal_emitv;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksignal.h;"void gtk_signal_emitv (GtkObject *object, guint signal_id, GtkArg *args);"
gtk;gtk_signal_emitv_by_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksignal.h;"void gtk_signal_emitv_by_name (GtkObject *object, const gchar *name, GtkArg *args);"
gtk;gtk_signal_newv;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksignal.h;"  guint gtk_signal_newv (const gchar *name, GtkSignalRunType signal_flags, GType object_type, guint function_offset, GSignalCMarshaller marshaller, GType return_val, guint n_args, GType *args);"
gtk;gtk_signal_run_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_signal_run_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_size_group_add_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksizegroup.h;"void gtk_size_group_add_widget (GtkSizeGroup *size_group, GtkWidget *widget);"
gtk;gtk_size_group_get_ignore_hidden;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksizegroup.h;"gboolean gtk_size_group_get_ignore_hidden (GtkSizeGroup *size_group);"
gtk;gtk_size_group_get_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksizegroup.h;"GtkSizeGroupMode gtk_size_group_get_mode (GtkSizeGroup *size_group);"
gtk;gtk_size_group_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksizegroup.h;"  GType gtk_size_group_get_type (void) G_GNUC_CONST;"
gtk;gtk_size_group_get_widgets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksizegroup.h;"GSList * gtk_size_group_get_widgets (GtkSizeGroup *size_group);"
gtk;gtk_size_group_mode_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_size_group_mode_get_type (void) G_GNUC_CONST;"
gtk;gtk_size_group_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksizegroup.h;" GtkSizeGroup * gtk_size_group_new (GtkSizeGroupMode mode);"
gtk;gtk_size_group_remove_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksizegroup.h;"void gtk_size_group_remove_widget (GtkSizeGroup *size_group, GtkWidget *widget);"
gtk;gtk_size_group_set_ignore_hidden;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksizegroup.h;"void gtk_size_group_set_ignore_hidden (GtkSizeGroup *size_group, gboolean ignore_hidden);"
gtk;gtk_size_group_set_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksizegroup.h;"void gtk_size_group_set_mode (GtkSizeGroup *size_group, GtkSizeGroupMode mode);"
gtk;gtk_socket_add_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksocket.h;" void gtk_socket_add_id (GtkSocket *socket_, GdkNativeWindow window_id);"
gtk;gtk_socket_get_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksocket.h;"GdkNativeWindow gtk_socket_get_id (GtkSocket *socket_);"
gtk;gtk_socket_get_plug_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksocket.h;"GdkWindow* gtk_socket_get_plug_window (GtkSocket *socket_);"
gtk;gtk_socket_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksocket.h;"  GType gtk_socket_get_type (void) G_GNUC_CONST;"
gtk;gtk_socket_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksocket.h;"GtkWidget* gtk_socket_new (void);"
gtk;gtk_socket_steal;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtksocket.h;" void gtk_socket_steal (GtkSocket *socket_, GdkNativeWindow wid);"
gtk;gtk_sort_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_sort_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_spin_button_configure;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" void gtk_spin_button_configure (GtkSpinButton *spin_button, GtkAdjustment *adjustment, gdouble climb_rate, guint digits);"
gtk;gtk_spin_button_get_adjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" GtkAdjustment* gtk_spin_button_get_adjustment (GtkSpinButton *spin_button);"
gtk;gtk_spin_button_get_digits;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;"guint gtk_spin_button_get_digits (GtkSpinButton *spin_button);"
gtk;gtk_spin_button_get_increments;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;"void gtk_spin_button_get_increments (GtkSpinButton *spin_button, gdouble *step, gdouble *page);"
gtk;gtk_spin_button_get_numeric;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;"gboolean gtk_spin_button_get_numeric (GtkSpinButton *spin_button);"
gtk;gtk_spin_button_get_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;"void gtk_spin_button_get_range (GtkSpinButton *spin_button, gdouble *min, gdouble *max);"
gtk;gtk_spin_button_get_snap_to_ticks;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;"gboolean gtk_spin_button_get_snap_to_ticks (GtkSpinButton *spin_button);"
gtk;gtk_spin_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;"  GType gtk_spin_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_spin_button_get_update_policy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;"GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy (GtkSpinButton *spin_button);"
gtk;gtk_spin_button_get_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" gdouble gtk_spin_button_get_value (GtkSpinButton *spin_button);"
gtk;gtk_spin_button_get_value_as_int;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" gint gtk_spin_button_get_value_as_int (GtkSpinButton *spin_button);"
gtk;gtk_spin_button_get_wrap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;"gboolean gtk_spin_button_get_wrap (GtkSpinButton *spin_button);"
gtk;gtk_spin_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" GtkWidget* gtk_spin_button_new (GtkAdjustment *adjustment, gdouble climb_rate, guint digits);"
gtk;gtk_spin_button_new_with_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" GtkWidget* gtk_spin_button_new_with_range (gdouble min, gdouble max, gdouble step);"
gtk;gtk_spin_button_set_adjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" void gtk_spin_button_set_adjustment (GtkSpinButton *spin_button, GtkAdjustment *adjustment);"
gtk;gtk_spin_button_set_digits;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" void gtk_spin_button_set_digits (GtkSpinButton *spin_button, guint digits);"
gtk;gtk_spin_button_set_increments;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" void gtk_spin_button_set_increments (GtkSpinButton *spin_button, gdouble step, gdouble page);"
gtk;gtk_spin_button_set_numeric;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" void gtk_spin_button_set_numeric (GtkSpinButton *spin_button, gboolean numeric);"
gtk;gtk_spin_button_set_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" void gtk_spin_button_set_range (GtkSpinButton *spin_button, gdouble min, gdouble max);"
gtk;gtk_spin_button_set_snap_to_ticks;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" void gtk_spin_button_set_snap_to_ticks (GtkSpinButton *spin_button, gboolean snap_to_ticks);"
gtk;gtk_spin_button_set_update_policy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" void gtk_spin_button_set_update_policy (GtkSpinButton *spin_button, GtkSpinButtonUpdatePolicy policy);"
gtk;gtk_spin_button_set_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" void gtk_spin_button_set_value (GtkSpinButton *spin_button, gdouble value);"
gtk;gtk_spin_button_set_wrap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" void gtk_spin_button_set_wrap (GtkSpinButton *spin_button, gboolean wrap);"
gtk;gtk_spin_button_spin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;" void gtk_spin_button_spin (GtkSpinButton *spin_button, GtkSpinType direction, gdouble increment);"
gtk;gtk_spin_button_update;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinbutton.h;"void gtk_spin_button_update (GtkSpinButton *spin_button);"
gtk;gtk_spin_button_update_policy_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_spin_button_update_policy_get_type (void) G_GNUC_CONST;"
gtk;gtk_spin_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_spin_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_spinner_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinner.h;"  GType gtk_spinner_get_type (void) G_GNUC_CONST;"
gtk;gtk_spinner_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinner.h;"GtkWidget *gtk_spinner_new (void);"
gtk;gtk_spinner_start;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinner.h;"void gtk_spinner_start (GtkSpinner *spinner);"
gtk;gtk_spinner_stop;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkspinner.h;"void gtk_spinner_stop (GtkSpinner *spinner);"
gtk;gtk_state_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_state_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_status_icon_get_blinking;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"gboolean gtk_status_icon_get_blinking (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_geometry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"gboolean gtk_status_icon_get_geometry (GtkStatusIcon *status_icon, GdkScreen **screen, GdkRectangle *area, GtkOrientation *orientation);"
gtk;gtk_status_icon_get_gicon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"GIcon *gtk_status_icon_get_gicon (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_has_tooltip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"gboolean gtk_status_icon_get_has_tooltip (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"const gchar * gtk_status_icon_get_icon_name (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;" GdkPixbuf *gtk_status_icon_get_pixbuf (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"GdkScreen *gtk_status_icon_get_screen (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;" gint gtk_status_icon_get_size (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"const gchar * gtk_status_icon_get_stock (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_storage_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;" GtkImageType gtk_status_icon_get_storage_type (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"const gchar * gtk_status_icon_get_title (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_tooltip_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"gchar *gtk_status_icon_get_tooltip_markup (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_tooltip_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"gchar *gtk_status_icon_get_tooltip_text (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"  GType gtk_status_icon_get_type (void) G_GNUC_CONST;"
gtk;gtk_status_icon_get_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"gboolean gtk_status_icon_get_visible (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_get_x11_window_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;" guint32 gtk_status_icon_get_x11_window_id (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_is_embedded;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;" gboolean gtk_status_icon_is_embedded (GtkStatusIcon *status_icon);"
gtk;gtk_status_icon_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;" GtkStatusIcon *gtk_status_icon_new (void);"
gtk;gtk_status_icon_new_from_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"GtkStatusIcon *gtk_status_icon_new_from_file (const gchar *filename);"
gtk;gtk_status_icon_new_from_gicon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"GtkStatusIcon *gtk_status_icon_new_from_gicon (GIcon *icon);"
gtk;gtk_status_icon_new_from_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"GtkStatusIcon *gtk_status_icon_new_from_icon_name (const gchar *icon_name);"
gtk;gtk_status_icon_new_from_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"GtkStatusIcon *gtk_status_icon_new_from_pixbuf (GdkPixbuf *pixbuf);"
gtk;gtk_status_icon_new_from_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"GtkStatusIcon *gtk_status_icon_new_from_stock (const gchar *stock_id);"
gtk;gtk_status_icon_position_menu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;" void gtk_status_icon_position_menu (GtkMenu *menu, gint *x, gint *y, gboolean *push_in, gpointer user_data);"
gtk;gtk_status_icon_set_blinking;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;" void gtk_status_icon_set_blinking (GtkStatusIcon *status_icon, gboolean blinking);"
gtk;gtk_status_icon_set_from_file;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"void gtk_status_icon_set_from_file (GtkStatusIcon *status_icon, const gchar *filename);"
gtk;gtk_status_icon_set_from_gicon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"void gtk_status_icon_set_from_gicon (GtkStatusIcon *status_icon, GIcon *icon);"
gtk;gtk_status_icon_set_from_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"void gtk_status_icon_set_from_icon_name (GtkStatusIcon *status_icon, const gchar *icon_name);"
gtk;gtk_status_icon_set_from_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;" void gtk_status_icon_set_from_pixbuf (GtkStatusIcon *status_icon, GdkPixbuf *pixbuf);"
gtk;gtk_status_icon_set_from_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"void gtk_status_icon_set_from_stock (GtkStatusIcon *status_icon, const gchar *stock_id);"
gtk;gtk_status_icon_set_has_tooltip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;" void gtk_status_icon_set_has_tooltip (GtkStatusIcon *status_icon, gboolean has_tooltip);"
gtk;gtk_status_icon_set_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"void gtk_status_icon_set_name (GtkStatusIcon *status_icon, const gchar *name);"
gtk;gtk_status_icon_set_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;" void gtk_status_icon_set_screen (GtkStatusIcon *status_icon, GdkScreen *screen);"
gtk;gtk_status_icon_set_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"void gtk_status_icon_set_title (GtkStatusIcon *status_icon, const gchar *title);"
gtk;gtk_status_icon_set_tooltip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;" void gtk_status_icon_set_tooltip (GtkStatusIcon *status_icon, const gchar *tooltip_text);"
gtk;gtk_status_icon_set_tooltip_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"void gtk_status_icon_set_tooltip_markup (GtkStatusIcon *status_icon, const gchar *markup);"
gtk;gtk_status_icon_set_tooltip_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"void gtk_status_icon_set_tooltip_text (GtkStatusIcon *status_icon, const gchar *text);"
gtk;gtk_status_icon_set_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusicon.h;"void gtk_status_icon_set_visible (GtkStatusIcon *status_icon, gboolean visible);"
gtk;gtk_statusbar_get_context_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusbar.h;" guint gtk_statusbar_get_context_id (GtkStatusbar *statusbar, const gchar *context_description);"
gtk;gtk_statusbar_get_has_resize_grip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusbar.h;"gboolean gtk_statusbar_get_has_resize_grip (GtkStatusbar *statusbar);"
gtk;gtk_statusbar_get_message_area;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusbar.h;" GtkWidget* gtk_statusbar_get_message_area (GtkStatusbar *statusbar);"
gtk;gtk_statusbar_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusbar.h;"  GType gtk_statusbar_get_type (void) G_GNUC_CONST;"
gtk;gtk_statusbar_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusbar.h;"GtkWidget* gtk_statusbar_new (void);"
gtk;gtk_statusbar_pop;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusbar.h;"void gtk_statusbar_pop (GtkStatusbar *statusbar, guint context_id);"
gtk;gtk_statusbar_push;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusbar.h;" guint gtk_statusbar_push (GtkStatusbar *statusbar, guint context_id, const gchar *text);"
gtk;gtk_statusbar_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusbar.h;"void gtk_statusbar_remove (GtkStatusbar *statusbar, guint context_id, guint message_id);"
gtk;gtk_statusbar_remove_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusbar.h;"void gtk_statusbar_remove_all (GtkStatusbar *statusbar, guint context_id);"
gtk;gtk_statusbar_set_has_resize_grip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstatusbar.h;"  void gtk_statusbar_set_has_resize_grip (GtkStatusbar *statusbar, gboolean setting);"
gtk;gtk_stock_add;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstock.h;"  void gtk_stock_add (const GtkStockItem *items, guint n_items);"
gtk;gtk_stock_add_static;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstock.h;"void gtk_stock_add_static (const GtkStockItem *items, guint n_items);"
gtk;gtk_stock_item_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstock.h;" GtkStockItem *gtk_stock_item_copy (const GtkStockItem *item);"
gtk;gtk_stock_item_free;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstock.h;"void gtk_stock_item_free (GtkStockItem *item);"
gtk;gtk_stock_list_ids;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstock.h;" GSList* gtk_stock_list_ids (void);"
gtk;gtk_stock_lookup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstock.h;"gboolean gtk_stock_lookup (const gchar *stock_id, GtkStockItem *item);"
gtk;gtk_stock_set_translate_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstock.h;" void gtk_stock_set_translate_func (const gchar *domain, GtkTranslateFunc func, gpointer data, GDestroyNotify notify);"
gtk;gtk_style_apply_default_background;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_style_apply_default_background (GtkStyle *style, GdkWindow *window, gboolean set_bg, GtkStateType state_type, const GdkRectangle *area, gint x, gint y, gint width, gint height);"
gtk;gtk_style_attach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"GtkStyle* gtk_style_attach (GtkStyle *style, GdkWindow *window) G_GNUC_WARN_UNUSED_RESULT;"
gtk;gtk_style_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"GtkStyle* gtk_style_copy (GtkStyle *style);"
gtk;gtk_style_detach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_style_detach (GtkStyle *style);"
gtk;gtk_style_get_font;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;" GdkFont * gtk_style_get_font (GtkStyle *style);"
gtk;gtk_style_get_style_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;" void gtk_style_get_style_property (GtkStyle *style, GType widget_type, const gchar *property_name, GValue *value);"
gtk;gtk_style_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"  GType gtk_style_get_type (void) G_GNUC_CONST;"
gtk;gtk_style_get_valist;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_style_get_valist (GtkStyle *style, GType widget_type, const gchar *first_property_name, va_list var_args);"
gtk;gtk_style_lookup_color;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"gboolean gtk_style_lookup_color (GtkStyle *style, const gchar *color_name, GdkColor *color);"
gtk;gtk_style_lookup_icon_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;" GtkIconSet* gtk_style_lookup_icon_set (GtkStyle *style, const gchar *stock_id);"
gtk;gtk_style_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"GtkStyle* gtk_style_new (void);"
gtk;gtk_style_ref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;" GtkStyle* gtk_style_ref (GtkStyle *style);"
gtk;gtk_style_render_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;" GdkPixbuf* gtk_style_render_icon (GtkStyle *style, const GtkIconSource *source, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget *widget, const gchar *detail);"
gtk;gtk_style_set_background;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;" void gtk_style_set_background (GtkStyle *style, GdkWindow *window, GtkStateType state_type);"
gtk;gtk_style_set_font;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_style_set_font (GtkStyle *style, GdkFont *font);"
gtk;gtk_style_unref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkstyle.h;"void gtk_style_unref (GtkStyle *style);"
gtk;gtk_submenu_direction_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_submenu_direction_get_type (void) G_GNUC_CONST;"
gtk;gtk_submenu_placement_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_submenu_placement_get_type (void) G_GNUC_CONST;"
gtk;gtk_table_attach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"void gtk_table_attach (GtkTable *table, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, guint xpadding, guint ypadding);"
gtk;gtk_table_attach_defaults;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"void gtk_table_attach_defaults (GtkTable *table, GtkWidget *widget, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach);"
gtk;gtk_table_get_col_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"guint gtk_table_get_col_spacing (GtkTable *table, guint column);"
gtk;gtk_table_get_default_col_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"guint gtk_table_get_default_col_spacing (GtkTable *table);"
gtk;gtk_table_get_default_row_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"guint gtk_table_get_default_row_spacing (GtkTable *table);"
gtk;gtk_table_get_homogeneous;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"gboolean gtk_table_get_homogeneous (GtkTable *table);"
gtk;gtk_table_get_row_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"guint gtk_table_get_row_spacing (GtkTable *table, guint row);"
gtk;gtk_table_get_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"void gtk_table_get_size (GtkTable *table, guint *rows, guint *columns);"
gtk;gtk_table_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"  GType gtk_table_get_type (void) G_GNUC_CONST;"
gtk;gtk_table_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"GtkWidget* gtk_table_new (guint rows, guint columns, gboolean homogeneous);"
gtk;gtk_table_resize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"void gtk_table_resize (GtkTable *table, guint rows, guint columns);"
gtk;gtk_table_set_col_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"void gtk_table_set_col_spacing (GtkTable *table, guint column, guint spacing);"
gtk;gtk_table_set_col_spacings;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"void gtk_table_set_col_spacings (GtkTable *table, guint spacing);"
gtk;gtk_table_set_homogeneous;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"void gtk_table_set_homogeneous (GtkTable *table, gboolean homogeneous);"
gtk;gtk_table_set_row_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"void gtk_table_set_row_spacing (GtkTable *table, guint row, guint spacing);"
gtk;gtk_table_set_row_spacings;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktable.h;"void gtk_table_set_row_spacings (GtkTable *table, guint spacing);"
gtk;gtk_target_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_target_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_target_list_add;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"void gtk_target_list_add (GtkTargetList *list, GdkAtom target, guint flags, guint info);"
gtk;gtk_target_list_add_image_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"void gtk_target_list_add_image_targets (GtkTargetList *list, guint info, gboolean writable);"
gtk;gtk_target_list_add_rich_text_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"void gtk_target_list_add_rich_text_targets (GtkTargetList *list, guint info, gboolean deserializable, GtkTextBuffer *buffer);"
gtk;gtk_target_list_add_table;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"void gtk_target_list_add_table (GtkTargetList *list, const GtkTargetEntry *targets, guint ntargets);"
gtk;gtk_target_list_add_text_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"void gtk_target_list_add_text_targets (GtkTargetList *list, guint info);"
gtk;gtk_target_list_add_uri_targets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"void gtk_target_list_add_uri_targets (GtkTargetList *list, guint info);"
gtk;gtk_target_list_find;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_target_list_find (GtkTargetList *list, GdkAtom target, guint *info);"
gtk;gtk_target_list_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;" GType gtk_target_list_get_type (void) G_GNUC_CONST;"
gtk;gtk_target_list_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"  GtkTargetList *gtk_target_list_new (const GtkTargetEntry *targets, guint ntargets);"
gtk;gtk_target_list_ref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"GtkTargetList *gtk_target_list_ref (GtkTargetList *list);"
gtk;gtk_target_list_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"void gtk_target_list_remove (GtkTargetList *list, GdkAtom target);"
gtk;gtk_target_list_unref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"void gtk_target_list_unref (GtkTargetList *list);"
gtk;gtk_target_table_free;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"void gtk_target_table_free (GtkTargetEntry *targets, gint n_targets);"
gtk;gtk_target_table_new_from_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;" GtkTargetEntry * gtk_target_table_new_from_list (GtkTargetList *list, gint *n_targets);"
gtk;gtk_targets_include_image;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_targets_include_image (GdkAtom *targets, gint n_targets, gboolean writable);"
gtk;gtk_targets_include_rich_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_targets_include_rich_text (GdkAtom *targets, gint n_targets, GtkTextBuffer *buffer);"
gtk;gtk_targets_include_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_targets_include_text (GdkAtom *targets, gint n_targets);"
gtk;gtk_targets_include_uri;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkselection.h;"gboolean gtk_targets_include_uri (GdkAtom *targets, gint n_targets);"
gtk;gtk_tearoff_menu_item_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktearoffmenuitem.h;"  GType gtk_tearoff_menu_item_get_type (void) G_GNUC_CONST;"
gtk;gtk_tearoff_menu_item_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktearoffmenuitem.h;"GtkWidget* gtk_tearoff_menu_item_new (void);"
gtk;gtk_test_create_simple_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;"GtkWidget* gtk_test_create_simple_window (const gchar *window_title, const gchar *dialog_text);"
gtk;gtk_test_find_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;"GtkWidget* gtk_test_find_label (GtkWidget *widget, const gchar *label_pattern);"
gtk;gtk_test_find_sibling;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;" GtkWidget* gtk_test_find_sibling (GtkWidget *base_widget, GType widget_type);"
gtk;gtk_test_find_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;"GtkWidget* gtk_test_find_widget (GtkWidget *widget, const gchar *label_pattern, GType widget_type);"
gtk;gtk_test_list_all_types;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;"const GType* gtk_test_list_all_types (guint *n_types);"
gtk;gtk_test_register_all_types;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;"void gtk_test_register_all_types (void);"
gtk;gtk_test_slider_get_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;"double gtk_test_slider_get_value (GtkWidget *widget);"
gtk;gtk_test_slider_set_perc;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;"void gtk_test_slider_set_perc (GtkWidget *widget, double percentage);"
gtk;gtk_test_spin_button_click;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;"gboolean gtk_test_spin_button_click (GtkSpinButton *spinner, guint button, gboolean upwards);"
gtk;gtk_test_text_get;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;"gchar* gtk_test_text_get (GtkWidget *widget);"
gtk;gtk_test_text_set;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;" void gtk_test_text_set (GtkWidget *widget, const gchar *string);"
gtk;gtk_test_widget_click;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;"gboolean gtk_test_widget_click (GtkWidget *widget, guint button, GdkModifierType modifiers);"
gtk;gtk_test_widget_send_key;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktestutils.h;"gboolean gtk_test_widget_send_key (GtkWidget *widget, guint keyval, GdkModifierType modifiers);"
gtk;gtk_text_anchored_child_set_layout;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" void gtk_text_anchored_child_set_layout (GtkWidget *child, GtkTextLayout *layout);"
gtk;gtk_text_attributes_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttag.h;"GtkTextAttributes* gtk_text_attributes_copy (GtkTextAttributes *src);"
gtk;gtk_text_attributes_copy_values;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttag.h;"void gtk_text_attributes_copy_values (GtkTextAttributes *src, GtkTextAttributes *dest);"
gtk;gtk_text_attributes_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttag.h;" GType gtk_text_attributes_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_attributes_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttag.h;" GtkTextAttributes* gtk_text_attributes_new (void);"
gtk;gtk_text_attributes_ref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttag.h;"GtkTextAttributes *gtk_text_attributes_ref (GtkTextAttributes *values);"
gtk;gtk_text_attributes_unref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttag.h;"void gtk_text_attributes_unref (GtkTextAttributes *values);"
gtk;gtk_text_backward_delete;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"gboolean gtk_text_backward_delete (GtkText *text, guint nchars);"
gtk;gtk_text_buffer_add_mark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_add_mark (GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where);"
gtk;gtk_text_buffer_add_selection_clipboard;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_add_selection_clipboard (GtkTextBuffer *buffer, GtkClipboard *clipboard);"
gtk;gtk_text_buffer_apply_tag;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_apply_tag (GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_buffer_apply_tag_by_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_apply_tag_by_name (GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_buffer_backspace;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"gboolean gtk_text_buffer_backspace (GtkTextBuffer *buffer, GtkTextIter *iter, gboolean interactive, gboolean default_editable);"
gtk;gtk_text_buffer_begin_user_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_begin_user_action (GtkTextBuffer *buffer);"
gtk;gtk_text_buffer_copy_clipboard;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_copy_clipboard (GtkTextBuffer *buffer, GtkClipboard *clipboard);"
gtk;gtk_text_buffer_create_child_anchor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" GtkTextChildAnchor *gtk_text_buffer_create_child_anchor (GtkTextBuffer *buffer, GtkTextIter *iter);"
gtk;gtk_text_buffer_create_mark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"GtkTextMark *gtk_text_buffer_create_mark (GtkTextBuffer *buffer, const gchar *mark_name, const GtkTextIter *where, gboolean left_gravity);"
gtk;gtk_text_buffer_cut_clipboard;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_cut_clipboard (GtkTextBuffer *buffer, GtkClipboard *clipboard, gboolean default_editable);"
gtk;gtk_text_buffer_delete;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_delete (GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);"
gtk;gtk_text_buffer_delete_interactive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"gboolean gtk_text_buffer_delete_interactive (GtkTextBuffer *buffer, GtkTextIter *start_iter, GtkTextIter *end_iter, gboolean default_editable);"
gtk;gtk_text_buffer_delete_mark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_delete_mark (GtkTextBuffer *buffer, GtkTextMark *mark);"
gtk;gtk_text_buffer_delete_mark_by_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_delete_mark_by_name (GtkTextBuffer *buffer, const gchar *name);"
gtk;gtk_text_buffer_delete_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"gboolean gtk_text_buffer_delete_selection (GtkTextBuffer *buffer, gboolean interactive, gboolean default_editable);"
gtk;gtk_text_buffer_deserialize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h;"gboolean gtk_text_buffer_deserialize (GtkTextBuffer *register_buffer, GtkTextBuffer *content_buffer, GdkAtom format, GtkTextIter *iter, const guint8 *data, gsize length, GError **error);"
gtk;gtk_text_buffer_deserialize_get_can_create_tags;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h;"gboolean gtk_text_buffer_deserialize_get_can_create_tags (GtkTextBuffer *buffer, GdkAtom format);"
gtk;gtk_text_buffer_deserialize_set_can_create_tags;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h;" void gtk_text_buffer_deserialize_set_can_create_tags (GtkTextBuffer *buffer, GdkAtom format, gboolean can_create_tags);"
gtk;gtk_text_buffer_end_user_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_end_user_action (GtkTextBuffer *buffer);"
gtk;gtk_text_buffer_get_bounds;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_get_bounds (GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);"
gtk;gtk_text_buffer_get_char_count;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"gint gtk_text_buffer_get_char_count (GtkTextBuffer *buffer);"
gtk;gtk_text_buffer_get_copy_target_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" GtkTargetList * gtk_text_buffer_get_copy_target_list (GtkTextBuffer *buffer);"
gtk;gtk_text_buffer_get_deserialize_formats;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h;"GdkAtom * gtk_text_buffer_get_deserialize_formats (GtkTextBuffer *buffer, gint *n_formats);"
gtk;gtk_text_buffer_get_end_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_get_end_iter (GtkTextBuffer *buffer, GtkTextIter *iter);"
gtk;gtk_text_buffer_get_has_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" gboolean gtk_text_buffer_get_has_selection (GtkTextBuffer *buffer);"
gtk;gtk_text_buffer_get_insert;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" GtkTextMark* gtk_text_buffer_get_insert (GtkTextBuffer *buffer);"
gtk;gtk_text_buffer_get_iter_at_child_anchor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_get_iter_at_child_anchor (GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor);"
gtk;gtk_text_buffer_get_iter_at_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_get_iter_at_line (GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number);"
gtk;gtk_text_buffer_get_iter_at_line_index;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_get_iter_at_line_index (GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number, gint byte_index);"
gtk;gtk_text_buffer_get_iter_at_line_offset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_get_iter_at_line_offset (GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number, gint char_offset);"
gtk;gtk_text_buffer_get_iter_at_mark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_get_iter_at_mark (GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextMark *mark);"
gtk;gtk_text_buffer_get_iter_at_offset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_get_iter_at_offset (GtkTextBuffer *buffer, GtkTextIter *iter, gint char_offset);"
gtk;gtk_text_buffer_get_line_count;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"gint gtk_text_buffer_get_line_count (GtkTextBuffer *buffer);"
gtk;gtk_text_buffer_get_mark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"GtkTextMark* gtk_text_buffer_get_mark (GtkTextBuffer *buffer, const gchar *name);"
gtk;gtk_text_buffer_get_modified;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" gboolean gtk_text_buffer_get_modified (GtkTextBuffer *buffer);"
gtk;gtk_text_buffer_get_paste_target_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"GtkTargetList * gtk_text_buffer_get_paste_target_list (GtkTextBuffer *buffer);"
gtk;gtk_text_buffer_get_selection_bound;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"GtkTextMark* gtk_text_buffer_get_selection_bound (GtkTextBuffer *buffer);"
gtk;gtk_text_buffer_get_selection_bounds;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" gboolean gtk_text_buffer_get_selection_bounds (GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);"
gtk;gtk_text_buffer_get_serialize_formats;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h;" GdkAtom * gtk_text_buffer_get_serialize_formats (GtkTextBuffer *buffer, gint *n_formats);"
gtk;gtk_text_buffer_get_slice;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" gchar *gtk_text_buffer_get_slice (GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars);"
gtk;gtk_text_buffer_get_start_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_get_start_iter (GtkTextBuffer *buffer, GtkTextIter *iter);"
gtk;gtk_text_buffer_get_tag_table;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" GtkTextTagTable* gtk_text_buffer_get_tag_table (GtkTextBuffer *buffer);"
gtk;gtk_text_buffer_get_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" gchar *gtk_text_buffer_get_text (GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars);"
gtk;gtk_text_buffer_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"  GType gtk_text_buffer_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_buffer_insert;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_insert (GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len);"
gtk;gtk_text_buffer_insert_at_cursor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_insert_at_cursor (GtkTextBuffer *buffer, const gchar *text, gint len);"
gtk;gtk_text_buffer_insert_child_anchor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_insert_child_anchor (GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor);"
gtk;gtk_text_buffer_insert_interactive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" gboolean gtk_text_buffer_insert_interactive (GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len, gboolean default_editable);"
gtk;gtk_text_buffer_insert_interactive_at_cursor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"gboolean gtk_text_buffer_insert_interactive_at_cursor (GtkTextBuffer *buffer, const gchar *text, gint len, gboolean default_editable);"
gtk;gtk_text_buffer_insert_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_insert_pixbuf (GtkTextBuffer *buffer, GtkTextIter *iter, GdkPixbuf *pixbuf);"
gtk;gtk_text_buffer_insert_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_insert_range (GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_buffer_insert_range_interactive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"gboolean gtk_text_buffer_insert_range_interactive (GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end, gboolean default_editable);"
gtk;gtk_text_buffer_move_mark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_move_mark (GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where);"
gtk;gtk_text_buffer_move_mark_by_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_move_mark_by_name (GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *where);"
gtk;gtk_text_buffer_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" GtkTextBuffer *gtk_text_buffer_new (GtkTextTagTable *table);"
gtk;gtk_text_buffer_paste_clipboard;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_paste_clipboard (GtkTextBuffer *buffer, GtkClipboard *clipboard, GtkTextIter *override_location, gboolean default_editable);"
gtk;gtk_text_buffer_place_cursor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_place_cursor (GtkTextBuffer *buffer, const GtkTextIter *where);"
gtk;gtk_text_buffer_register_deserialize_format;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h;" GdkAtom gtk_text_buffer_register_deserialize_format (GtkTextBuffer *buffer, const gchar *mime_type, GtkTextBufferDeserializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy);"
gtk;gtk_text_buffer_register_deserialize_tagset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h;"GdkAtom gtk_text_buffer_register_deserialize_tagset (GtkTextBuffer *buffer, const gchar *tagset_name);"
gtk;gtk_text_buffer_register_serialize_format;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h;"  GdkAtom gtk_text_buffer_register_serialize_format (GtkTextBuffer *buffer, const gchar *mime_type, GtkTextBufferSerializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy);"
gtk;gtk_text_buffer_register_serialize_tagset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h;"GdkAtom gtk_text_buffer_register_serialize_tagset (GtkTextBuffer *buffer, const gchar *tagset_name);"
gtk;gtk_text_buffer_remove_all_tags;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_remove_all_tags (GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_buffer_remove_selection_clipboard;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_remove_selection_clipboard (GtkTextBuffer *buffer, GtkClipboard *clipboard);"
gtk;gtk_text_buffer_remove_tag;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_remove_tag (GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_buffer_remove_tag_by_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_remove_tag_by_name (GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_buffer_select_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_select_range (GtkTextBuffer *buffer, const GtkTextIter *ins, const GtkTextIter *bound);"
gtk;gtk_text_buffer_serialize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h;" guint8 * gtk_text_buffer_serialize (GtkTextBuffer *register_buffer, GtkTextBuffer *content_buffer, GdkAtom format, const GtkTextIter *start, const GtkTextIter *end, gsize *length);"
gtk;gtk_text_buffer_set_modified;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;"void gtk_text_buffer_set_modified (GtkTextBuffer *buffer, gboolean setting);"
gtk;gtk_text_buffer_set_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbuffer.h;" void gtk_text_buffer_set_text (GtkTextBuffer *buffer, const gchar *text, gint len);"
gtk;gtk_text_buffer_target_info_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_text_buffer_target_info_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_buffer_unregister_deserialize_format;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h;"void gtk_text_buffer_unregister_deserialize_format (GtkTextBuffer *buffer, GdkAtom format);"
gtk;gtk_text_buffer_unregister_serialize_format;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h;" void gtk_text_buffer_unregister_serialize_format (GtkTextBuffer *buffer, GdkAtom format);"
gtk;gtk_text_child_anchor_get_deleted;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextchild.h;"gboolean gtk_text_child_anchor_get_deleted (GtkTextChildAnchor *anchor);"
gtk;gtk_text_child_anchor_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextchild.h;"  GType gtk_text_child_anchor_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_child_anchor_get_widgets;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextchild.h;" GList* gtk_text_child_anchor_get_widgets (GtkTextChildAnchor *anchor);"
gtk;gtk_text_child_anchor_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextchild.h;" GtkTextChildAnchor* gtk_text_child_anchor_new (void);"
gtk;gtk_text_child_anchor_queue_resize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" void gtk_text_child_anchor_queue_resize (GtkTextChildAnchor *anchor, GtkTextLayout *layout);"
gtk;gtk_text_child_anchor_register_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" void gtk_text_child_anchor_register_child (GtkTextChildAnchor *anchor, GtkWidget *child, GtkTextLayout *layout);"
gtk;gtk_text_child_anchor_unregister_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_child_anchor_unregister_child (GtkTextChildAnchor *anchor, GtkWidget *child);"
gtk;gtk_text_direction_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_text_direction_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_forward_delete;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"gboolean gtk_text_forward_delete (GtkText *text, guint nchars);"
gtk;gtk_text_freeze;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"void gtk_text_freeze (GtkText *text);"
gtk;gtk_text_get_length;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"guint gtk_text_get_length (GtkText *text);"
gtk;gtk_text_get_point;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"guint gtk_text_get_point (GtkText *text);"
gtk;gtk_text_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;" GType gtk_text_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_insert;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"void gtk_text_insert (GtkText *text, GdkFont *font, const GdkColor *fore, const GdkColor *back, const char *chars, gint length);"
gtk;gtk_text_iter_backward_char;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_char (GtkTextIter *iter);"
gtk;gtk_text_iter_backward_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_chars (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_backward_cursor_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_cursor_position (GtkTextIter *iter);"
gtk;gtk_text_iter_backward_cursor_positions;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_cursor_positions (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_backward_find_char;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_find_char (GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit);"
gtk;gtk_text_iter_backward_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_line (GtkTextIter *iter);"
gtk;gtk_text_iter_backward_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_lines (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_backward_search;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_backward_search (const GtkTextIter *iter, const gchar *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit);"
gtk;gtk_text_iter_backward_sentence_start;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_sentence_start (GtkTextIter *iter);"
gtk;gtk_text_iter_backward_sentence_starts;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_sentence_starts (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_backward_to_tag_toggle;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_backward_to_tag_toggle (GtkTextIter *iter, GtkTextTag *tag);"
gtk;gtk_text_iter_backward_visible_cursor_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_visible_cursor_position (GtkTextIter *iter);"
gtk;gtk_text_iter_backward_visible_cursor_positions;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_visible_cursor_positions (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_backward_visible_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_visible_line (GtkTextIter *iter);"
gtk;gtk_text_iter_backward_visible_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_visible_lines (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_backward_visible_word_start;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_visible_word_start (GtkTextIter *iter);"
gtk;gtk_text_iter_backward_visible_word_starts;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_visible_word_starts (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_backward_word_start;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_word_start (GtkTextIter *iter);"
gtk;gtk_text_iter_backward_word_starts;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_backward_word_starts (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_begins_tag;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_begins_tag (const GtkTextIter *iter, GtkTextTag *tag);"
gtk;gtk_text_iter_can_insert;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_can_insert (const GtkTextIter *iter, gboolean default_editability);"
gtk;gtk_text_iter_compare;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gint gtk_text_iter_compare (const GtkTextIter *lhs, const GtkTextIter *rhs);"
gtk;gtk_text_iter_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" GtkTextIter *gtk_text_iter_copy (const GtkTextIter *iter);"
gtk;gtk_text_iter_editable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_editable (const GtkTextIter *iter, gboolean default_setting);"
gtk;gtk_text_iter_ends_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_ends_line (const GtkTextIter *iter);"
gtk;gtk_text_iter_ends_sentence;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_ends_sentence (const GtkTextIter *iter);"
gtk;gtk_text_iter_ends_tag;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_ends_tag (const GtkTextIter *iter, GtkTextTag *tag);"
gtk;gtk_text_iter_ends_word;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_ends_word (const GtkTextIter *iter);"
gtk;gtk_text_iter_equal;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_equal (const GtkTextIter *lhs, const GtkTextIter *rhs);"
gtk;gtk_text_iter_forward_char;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_forward_char (GtkTextIter *iter);"
gtk;gtk_text_iter_forward_chars;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_forward_chars (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_forward_cursor_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_forward_cursor_position (GtkTextIter *iter);"
gtk;gtk_text_iter_forward_cursor_positions;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_forward_cursor_positions (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_forward_find_char;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_forward_find_char (GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit);"
gtk;gtk_text_iter_forward_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_forward_line (GtkTextIter *iter);"
gtk;gtk_text_iter_forward_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_forward_lines (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_forward_search;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_forward_search (const GtkTextIter *iter, const gchar *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit);"
gtk;gtk_text_iter_forward_sentence_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_forward_sentence_end (GtkTextIter *iter);"
gtk;gtk_text_iter_forward_sentence_ends;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_forward_sentence_ends (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_forward_to_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"void gtk_text_iter_forward_to_end (GtkTextIter *iter);"
gtk;gtk_text_iter_forward_to_line_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_forward_to_line_end (GtkTextIter *iter);"
gtk;gtk_text_iter_forward_to_tag_toggle;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_forward_to_tag_toggle (GtkTextIter *iter, GtkTextTag *tag);"
gtk;gtk_text_iter_forward_visible_cursor_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_forward_visible_cursor_position (GtkTextIter *iter);"
gtk;gtk_text_iter_forward_visible_cursor_positions;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_forward_visible_cursor_positions (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_forward_visible_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_forward_visible_line (GtkTextIter *iter);"
gtk;gtk_text_iter_forward_visible_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_forward_visible_lines (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_forward_visible_word_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_forward_visible_word_end (GtkTextIter *iter);"
gtk;gtk_text_iter_forward_visible_word_ends;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_forward_visible_word_ends (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_forward_word_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_forward_word_end (GtkTextIter *iter);"
gtk;gtk_text_iter_forward_word_ends;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_forward_word_ends (GtkTextIter *iter, gint count);"
gtk;gtk_text_iter_free;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"void gtk_text_iter_free (GtkTextIter *iter);"
gtk;gtk_text_iter_get_attributes;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_get_attributes (const GtkTextIter *iter, GtkTextAttributes *values);"
gtk;gtk_text_iter_get_buffer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"  GtkTextBuffer *gtk_text_iter_get_buffer (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_bytes_in_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gint gtk_text_iter_get_bytes_in_line (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_char;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gunichar gtk_text_iter_get_char (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_chars_in_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gint gtk_text_iter_get_chars_in_line (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_child_anchor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" GtkTextChildAnchor* gtk_text_iter_get_child_anchor (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_language;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"PangoLanguage* gtk_text_iter_get_language (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gint gtk_text_iter_get_line (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_line_index;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gint gtk_text_iter_get_line_index (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_line_offset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gint gtk_text_iter_get_line_offset (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_marks;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"GSList * gtk_text_iter_get_marks (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_offset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gint gtk_text_iter_get_offset (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_pixbuf;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" GdkPixbuf* gtk_text_iter_get_pixbuf (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_slice;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gchar *gtk_text_iter_get_slice (const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_iter_get_tags;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"GSList *gtk_text_iter_get_tags (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gchar *gtk_text_iter_get_text (const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_iter_get_toggled_tags;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" GSList *gtk_text_iter_get_toggled_tags (const GtkTextIter *iter, gboolean toggled_on);"
gtk;gtk_text_iter_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" GType gtk_text_iter_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_iter_get_visible_line_index;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gint gtk_text_iter_get_visible_line_index (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_visible_line_offset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gint gtk_text_iter_get_visible_line_offset (const GtkTextIter *iter);"
gtk;gtk_text_iter_get_visible_slice;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gchar *gtk_text_iter_get_visible_slice (const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_iter_get_visible_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gchar *gtk_text_iter_get_visible_text (const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_iter_has_tag;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_has_tag (const GtkTextIter *iter, GtkTextTag *tag);"
gtk;gtk_text_iter_in_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_in_range (const GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_iter_inside_sentence;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_inside_sentence (const GtkTextIter *iter);"
gtk;gtk_text_iter_inside_word;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_inside_word (const GtkTextIter *iter);"
gtk;gtk_text_iter_is_cursor_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_is_cursor_position (const GtkTextIter *iter);"
gtk;gtk_text_iter_is_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_is_end (const GtkTextIter *iter);"
gtk;gtk_text_iter_is_start;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_is_start (const GtkTextIter *iter);"
gtk;gtk_text_iter_order;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" void gtk_text_iter_order (GtkTextIter *first, GtkTextIter *second);"
gtk;gtk_text_iter_set_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"void gtk_text_iter_set_line (GtkTextIter *iter, gint line_number);"
gtk;gtk_text_iter_set_line_index;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"void gtk_text_iter_set_line_index (GtkTextIter *iter, gint byte_on_line);"
gtk;gtk_text_iter_set_line_offset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"void gtk_text_iter_set_line_offset (GtkTextIter *iter, gint char_on_line);"
gtk;gtk_text_iter_set_offset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" void gtk_text_iter_set_offset (GtkTextIter *iter, gint char_offset);"
gtk;gtk_text_iter_set_visible_line_index;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"void gtk_text_iter_set_visible_line_index (GtkTextIter *iter, gint byte_on_line);"
gtk;gtk_text_iter_set_visible_line_offset;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" void gtk_text_iter_set_visible_line_offset (GtkTextIter *iter, gint char_on_line);"
gtk;gtk_text_iter_starts_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_starts_line (const GtkTextIter *iter);"
gtk;gtk_text_iter_starts_sentence;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;"gboolean gtk_text_iter_starts_sentence (const GtkTextIter *iter);"
gtk;gtk_text_iter_starts_word;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_starts_word (const GtkTextIter *iter);"
gtk;gtk_text_iter_toggles_tag;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextiter.h;" gboolean gtk_text_iter_toggles_tag (const GtkTextIter *iter, GtkTextTag *tag);"
gtk;gtk_text_layout_changed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_changed (GtkTextLayout *layout, gint y, gint old_height, gint new_height);"
gtk;gtk_text_layout_clamp_iter_to_vrange;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"gboolean gtk_text_layout_clamp_iter_to_vrange (GtkTextLayout *layout, GtkTextIter *iter, gint top, gint bottom);"
gtk;gtk_text_layout_cursors_changed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_cursors_changed (GtkTextLayout *layout, gint y, gint old_height, gint new_height);"
gtk;gtk_text_layout_default_style_changed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_default_style_changed (GtkTextLayout *layout);"
gtk;gtk_text_layout_draw;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextdisplay.h;"  void gtk_text_layout_draw (GtkTextLayout *layout, GtkWidget *widget, GdkDrawable *drawable, GdkGC *cursor_gc, gint x_offset, gint y_offset, gint x, gint y, gint width, gint height, GList **widgets);"
gtk;gtk_text_layout_free_line_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_free_line_data (GtkTextLayout *layout, GtkTextLine *line, GtkTextLineData *line_data);"
gtk;gtk_text_layout_free_line_display;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_free_line_display (GtkTextLayout *layout, GtkTextLineDisplay *display);"
gtk;gtk_text_layout_get_buffer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"GtkTextBuffer *gtk_text_layout_get_buffer (GtkTextLayout *layout);"
gtk;gtk_text_layout_get_cursor_locations;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_get_cursor_locations (GtkTextLayout *layout, GtkTextIter *iter, GdkRectangle *strong_pos, GdkRectangle *weak_pos);"
gtk;gtk_text_layout_get_cursor_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"gboolean gtk_text_layout_get_cursor_visible (GtkTextLayout *layout);"
gtk;gtk_text_layout_get_iter_at_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" void gtk_text_layout_get_iter_at_line (GtkTextLayout *layout, GtkTextIter *iter, GtkTextLine *line, gint byte_offset);"
gtk;gtk_text_layout_get_iter_at_pixel;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_get_iter_at_pixel (GtkTextLayout *layout, GtkTextIter *iter, gint x, gint y);"
gtk;gtk_text_layout_get_iter_at_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_get_iter_at_position (GtkTextLayout *layout, GtkTextIter *iter, gint *trailing, gint x, gint y);"
gtk;gtk_text_layout_get_iter_location;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_get_iter_location (GtkTextLayout *layout, const GtkTextIter *iter, GdkRectangle *rect);"
gtk;gtk_text_layout_get_line_at_y;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" void gtk_text_layout_get_line_at_y (GtkTextLayout *layout, GtkTextIter *target_iter, gint y, gint *line_top);"
gtk;gtk_text_layout_get_line_display;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" GtkTextLineDisplay* gtk_text_layout_get_line_display (GtkTextLayout *layout, GtkTextLine *line, gboolean size_only);"
gtk;gtk_text_layout_get_line_yrange;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_get_line_yrange (GtkTextLayout *layout, const GtkTextIter *iter, gint *y, gint *height);"
gtk;gtk_text_layout_get_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"GSList* gtk_text_layout_get_lines (GtkTextLayout *layout,  gint top_y, gint bottom_y, gint *first_line_y);"
gtk;gtk_text_layout_get_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" void gtk_text_layout_get_size (GtkTextLayout *layout, gint *width, gint *height);"
gtk;gtk_text_layout_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" GType gtk_text_layout_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_layout_invalidate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_invalidate (GtkTextLayout *layout, const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_layout_invalidate_cursors;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_invalidate_cursors(GtkTextLayout *layout, const GtkTextIter *start, const GtkTextIter *end);"
gtk;gtk_text_layout_is_valid;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" gboolean gtk_text_layout_is_valid (GtkTextLayout *layout);"
gtk;gtk_text_layout_iter_starts_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" gboolean gtk_text_layout_iter_starts_line (GtkTextLayout *layout, const GtkTextIter *iter);"
gtk;gtk_text_layout_move_iter_to_line_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" gboolean gtk_text_layout_move_iter_to_line_end (GtkTextLayout *layout, GtkTextIter *iter, gint direction);"
gtk;gtk_text_layout_move_iter_to_next_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"gboolean gtk_text_layout_move_iter_to_next_line (GtkTextLayout *layout, GtkTextIter *iter);"
gtk;gtk_text_layout_move_iter_to_previous_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"gboolean gtk_text_layout_move_iter_to_previous_line (GtkTextLayout *layout, GtkTextIter *iter);"
gtk;gtk_text_layout_move_iter_to_x;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_move_iter_to_x (GtkTextLayout *layout, GtkTextIter *iter, gint x);"
gtk;gtk_text_layout_move_iter_visually;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"gboolean gtk_text_layout_move_iter_visually (GtkTextLayout *layout, GtkTextIter *iter, gint count);"
gtk;gtk_text_layout_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" GtkTextLayout* gtk_text_layout_new (void);"
gtk;gtk_text_layout_set_buffer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_set_buffer (GtkTextLayout *layout, GtkTextBuffer *buffer);"
gtk;gtk_text_layout_set_contexts;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_set_contexts (GtkTextLayout *layout, PangoContext *ltr_context, PangoContext *rtl_context);"
gtk;gtk_text_layout_set_cursor_direction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_set_cursor_direction (GtkTextLayout *layout, GtkTextDirection direction);"
gtk;gtk_text_layout_set_cursor_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" void gtk_text_layout_set_cursor_visible (GtkTextLayout *layout, gboolean cursor_visible);"
gtk;gtk_text_layout_set_default_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_set_default_style (GtkTextLayout *layout, GtkTextAttributes *values);"
gtk;gtk_text_layout_set_keyboard_direction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_set_keyboard_direction (GtkTextLayout *layout, GtkTextDirection keyboard_dir);"
gtk;gtk_text_layout_set_overwrite_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_set_overwrite_mode (GtkTextLayout *layout, gboolean overwrite);"
gtk;gtk_text_layout_set_preedit_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_set_preedit_string (GtkTextLayout *layout, const gchar *preedit_string, PangoAttrList *preedit_attrs, gint cursor_pos);"
gtk;gtk_text_layout_set_screen_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" void gtk_text_layout_set_screen_width (GtkTextLayout *layout, gint width);"
gtk;gtk_text_layout_spew;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" void gtk_text_layout_spew (GtkTextLayout *layout);"
gtk;gtk_text_layout_validate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_validate (GtkTextLayout *layout, gint max_pixels);"
gtk;gtk_text_layout_validate_yrange;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_validate_yrange (GtkTextLayout *layout, GtkTextIter *anchor_line, gint y0_, gint y1_);"
gtk;gtk_text_layout_wrap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" GtkTextLineData* gtk_text_layout_wrap (GtkTextLayout *layout, GtkTextLine *line, GtkTextLineData *line_data);"
gtk;gtk_text_layout_wrap_loop_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;"void gtk_text_layout_wrap_loop_end (GtkTextLayout *layout);"
gtk;gtk_text_layout_wrap_loop_start;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextlayout.h;" void gtk_text_layout_wrap_loop_start (GtkTextLayout *layout);"
gtk;gtk_text_mark_get_buffer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextmark.h;"GtkTextBuffer* gtk_text_mark_get_buffer (GtkTextMark *mark);"
gtk;gtk_text_mark_get_deleted;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextmark.h;"gboolean gtk_text_mark_get_deleted (GtkTextMark *mark);"
gtk;gtk_text_mark_get_left_gravity;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextmark.h;"gboolean gtk_text_mark_get_left_gravity (GtkTextMark *mark);"
gtk;gtk_text_mark_get_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextmark.h;"const gchar * gtk_text_mark_get_name (GtkTextMark *mark);"
gtk;gtk_text_mark_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextmark.h;"  GType gtk_text_mark_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_mark_get_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextmark.h;"gboolean gtk_text_mark_get_visible (GtkTextMark *mark);"
gtk;gtk_text_mark_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextmark.h;" GtkTextMark *gtk_text_mark_new (const gchar *name, gboolean left_gravity);"
gtk;gtk_text_mark_set_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextmark.h;" void gtk_text_mark_set_visible (GtkTextMark *mark, gboolean setting);"
gtk;gtk_text_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"GtkWidget* gtk_text_new (GtkAdjustment *hadj, GtkAdjustment *vadj);"
gtk;gtk_text_search_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_text_search_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_set_adjustments;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"void gtk_text_set_adjustments (GtkText *text, GtkAdjustment *hadj, GtkAdjustment *vadj);"
gtk;gtk_text_set_editable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"void gtk_text_set_editable (GtkText *text, gboolean editable);"
gtk;gtk_text_set_line_wrap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"void gtk_text_set_line_wrap (GtkText *text, gboolean line_wrap);"
gtk;gtk_text_set_point;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"void gtk_text_set_point (GtkText *text, guint index);"
gtk;gtk_text_set_word_wrap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"void gtk_text_set_word_wrap (GtkText *text, gboolean word_wrap);"
gtk;gtk_text_tag_event;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttag.h;"gboolean gtk_text_tag_event (GtkTextTag *tag, GObject *event_object, GdkEvent *event, const GtkTextIter *iter);"
gtk;gtk_text_tag_get_priority;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttag.h;"gint gtk_text_tag_get_priority (GtkTextTag *tag);"
gtk;gtk_text_tag_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttag.h;"  GType gtk_text_tag_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_tag_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttag.h;"GtkTextTag *gtk_text_tag_new (const gchar *name);"
gtk;gtk_text_tag_set_priority;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttag.h;"void gtk_text_tag_set_priority (GtkTextTag *tag, gint priority);"
gtk;gtk_text_tag_table_add;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttagtable.h;"void gtk_text_tag_table_add (GtkTextTagTable *table, GtkTextTag *tag);"
gtk;gtk_text_tag_table_foreach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttagtable.h;"void gtk_text_tag_table_foreach (GtkTextTagTable *table, GtkTextTagTableForeach func, gpointer data);"
gtk;gtk_text_tag_table_get_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttagtable.h;"gint gtk_text_tag_table_get_size (GtkTextTagTable *table);"
gtk;gtk_text_tag_table_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttagtable.h;"  GType gtk_text_tag_table_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_tag_table_lookup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttagtable.h;"GtkTextTag *gtk_text_tag_table_lookup (GtkTextTagTable *table, const gchar *name);"
gtk;gtk_text_tag_table_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttagtable.h;" GtkTextTagTable *gtk_text_tag_table_new (void);"
gtk;gtk_text_tag_table_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktexttagtable.h;"void gtk_text_tag_table_remove (GtkTextTagTable *table, GtkTextTag *tag);"
gtk;gtk_text_thaw;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktext.h;"void gtk_text_thaw (GtkText *text);"
gtk;gtk_text_view_add_child_at_anchor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" void gtk_text_view_add_child_at_anchor (GtkTextView *text_view, GtkWidget *child, GtkTextChildAnchor *anchor);"
gtk;gtk_text_view_add_child_in_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" void gtk_text_view_add_child_in_window (GtkTextView *text_view, GtkWidget *child, GtkTextWindowType which_window,  gint xpos, gint ypos);"
gtk;gtk_text_view_backward_display_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gboolean gtk_text_view_backward_display_line (GtkTextView *text_view, GtkTextIter *iter);"
gtk;gtk_text_view_backward_display_line_start;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gboolean gtk_text_view_backward_display_line_start (GtkTextView *text_view, GtkTextIter *iter);"
gtk;gtk_text_view_buffer_to_window_coords;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" void gtk_text_view_buffer_to_window_coords (GtkTextView *text_view, GtkTextWindowType win, gint buffer_x, gint buffer_y, gint *window_x, gint *window_y);"
gtk;gtk_text_view_forward_display_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" gboolean gtk_text_view_forward_display_line (GtkTextView *text_view, GtkTextIter *iter);"
gtk;gtk_text_view_forward_display_line_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gboolean gtk_text_view_forward_display_line_end (GtkTextView *text_view, GtkTextIter *iter);"
gtk;gtk_text_view_get_accepts_tab;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gboolean gtk_text_view_get_accepts_tab (GtkTextView *text_view);"
gtk;gtk_text_view_get_border_window_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gint gtk_text_view_get_border_window_size (GtkTextView *text_view, GtkTextWindowType type);"
gtk;gtk_text_view_get_buffer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"GtkTextBuffer *gtk_text_view_get_buffer (GtkTextView *text_view);"
gtk;gtk_text_view_get_cursor_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gboolean gtk_text_view_get_cursor_visible (GtkTextView *text_view);"
gtk;gtk_text_view_get_default_attributes;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" GtkTextAttributes* gtk_text_view_get_default_attributes (GtkTextView *text_view);"
gtk;gtk_text_view_get_editable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gboolean gtk_text_view_get_editable (GtkTextView *text_view);"
gtk;gtk_text_view_get_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" GtkAdjustment* gtk_text_view_get_hadjustment (GtkTextView *text_view);"
gtk;gtk_text_view_get_indent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gint gtk_text_view_get_indent (GtkTextView *text_view);"
gtk;gtk_text_view_get_iter_at_location;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_get_iter_at_location (GtkTextView *text_view, GtkTextIter *iter, gint x, gint y);"
gtk;gtk_text_view_get_iter_at_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_get_iter_at_position (GtkTextView *text_view, GtkTextIter *iter, gint *trailing, gint x, gint y);"
gtk;gtk_text_view_get_iter_location;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" void gtk_text_view_get_iter_location (GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *location);"
gtk;gtk_text_view_get_justification;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"GtkJustification gtk_text_view_get_justification (GtkTextView *text_view);"
gtk;gtk_text_view_get_left_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gint gtk_text_view_get_left_margin (GtkTextView *text_view);"
gtk;gtk_text_view_get_line_at_y;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" void gtk_text_view_get_line_at_y (GtkTextView *text_view, GtkTextIter *target_iter, gint y, gint *line_top);"
gtk;gtk_text_view_get_line_yrange;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_get_line_yrange (GtkTextView *text_view, const GtkTextIter *iter, gint *y, gint *height);"
gtk;gtk_text_view_get_overwrite;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gboolean gtk_text_view_get_overwrite (GtkTextView *text_view);"
gtk;gtk_text_view_get_pixels_above_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gint gtk_text_view_get_pixels_above_lines (GtkTextView *text_view);"
gtk;gtk_text_view_get_pixels_below_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gint gtk_text_view_get_pixels_below_lines (GtkTextView *text_view);"
gtk;gtk_text_view_get_pixels_inside_wrap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gint gtk_text_view_get_pixels_inside_wrap (GtkTextView *text_view);"
gtk;gtk_text_view_get_right_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gint gtk_text_view_get_right_margin (GtkTextView *text_view);"
gtk;gtk_text_view_get_tabs;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"PangoTabArray* gtk_text_view_get_tabs (GtkTextView *text_view);"
gtk;gtk_text_view_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"  GType gtk_text_view_get_type (void) G_GNUC_CONST;"
gtk;gtk_text_view_get_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"GtkAdjustment* gtk_text_view_get_vadjustment (GtkTextView *text_view);"
gtk;gtk_text_view_get_visible_rect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" void gtk_text_view_get_visible_rect (GtkTextView *text_view, GdkRectangle *visible_rect);"
gtk;gtk_text_view_get_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" GdkWindow* gtk_text_view_get_window (GtkTextView *text_view, GtkTextWindowType win);"
gtk;gtk_text_view_get_window_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"GtkTextWindowType gtk_text_view_get_window_type (GtkTextView *text_view, GdkWindow *window);"
gtk;gtk_text_view_get_wrap_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"GtkWrapMode gtk_text_view_get_wrap_mode (GtkTextView *text_view);"
gtk;gtk_text_view_im_context_filter_keypress;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" gboolean gtk_text_view_im_context_filter_keypress (GtkTextView *text_view, GdkEventKey *event);"
gtk;gtk_text_view_move_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" void gtk_text_view_move_child (GtkTextView *text_view, GtkWidget *child,  gint xpos, gint ypos);"
gtk;gtk_text_view_move_mark_onscreen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gboolean gtk_text_view_move_mark_onscreen (GtkTextView *text_view, GtkTextMark *mark);"
gtk;gtk_text_view_move_visually;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gboolean gtk_text_view_move_visually (GtkTextView *text_view, GtkTextIter *iter, gint count);"
gtk;gtk_text_view_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"GtkWidget * gtk_text_view_new (void);"
gtk;gtk_text_view_new_with_buffer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"GtkWidget * gtk_text_view_new_with_buffer (GtkTextBuffer *buffer);"
gtk;gtk_text_view_place_cursor_onscreen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gboolean gtk_text_view_place_cursor_onscreen (GtkTextView *text_view);"
gtk;gtk_text_view_reset_im_context;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_reset_im_context (GtkTextView *text_view);"
gtk;gtk_text_view_scroll_mark_onscreen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_scroll_mark_onscreen (GtkTextView *text_view, GtkTextMark *mark);"
gtk;gtk_text_view_scroll_to_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gboolean gtk_text_view_scroll_to_iter (GtkTextView *text_view, GtkTextIter *iter, gdouble within_margin, gboolean use_align, gdouble xalign, gdouble yalign);"
gtk;gtk_text_view_scroll_to_mark;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_scroll_to_mark (GtkTextView *text_view, GtkTextMark *mark, gdouble within_margin, gboolean use_align, gdouble xalign, gdouble yalign);"
gtk;gtk_text_view_set_accepts_tab;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_accepts_tab (GtkTextView *text_view, gboolean accepts_tab);"
gtk;gtk_text_view_set_border_window_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" void gtk_text_view_set_border_window_size (GtkTextView *text_view, GtkTextWindowType type, gint size);"
gtk;gtk_text_view_set_buffer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_buffer (GtkTextView *text_view, GtkTextBuffer *buffer);"
gtk;gtk_text_view_set_cursor_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_cursor_visible (GtkTextView *text_view, gboolean setting);"
gtk;gtk_text_view_set_editable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_editable (GtkTextView *text_view, gboolean setting);"
gtk;gtk_text_view_set_indent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_indent (GtkTextView *text_view, gint indent);"
gtk;gtk_text_view_set_justification;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_justification (GtkTextView *text_view, GtkJustification justification);"
gtk;gtk_text_view_set_left_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_left_margin (GtkTextView *text_view, gint left_margin);"
gtk;gtk_text_view_set_overwrite;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_overwrite (GtkTextView *text_view, gboolean overwrite);"
gtk;gtk_text_view_set_pixels_above_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_pixels_above_lines (GtkTextView *text_view, gint pixels_above_lines);"
gtk;gtk_text_view_set_pixels_below_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_pixels_below_lines (GtkTextView *text_view, gint pixels_below_lines);"
gtk;gtk_text_view_set_pixels_inside_wrap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_pixels_inside_wrap (GtkTextView *text_view, gint pixels_inside_wrap);"
gtk;gtk_text_view_set_right_margin;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_right_margin (GtkTextView *text_view, gint right_margin);"
gtk;gtk_text_view_set_tabs;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_set_tabs (GtkTextView *text_view, PangoTabArray *tabs);"
gtk;gtk_text_view_set_wrap_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;" void gtk_text_view_set_wrap_mode (GtkTextView *text_view, GtkWrapMode wrap_mode);"
gtk;gtk_text_view_starts_display_line;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"gboolean gtk_text_view_starts_display_line (GtkTextView *text_view, const GtkTextIter *iter);"
gtk;gtk_text_view_window_to_buffer_coords;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktextview.h;"void gtk_text_view_window_to_buffer_coords (GtkTextView *text_view, GtkTextWindowType win, gint window_x, gint window_y, gint *buffer_x, gint *buffer_y);"
gtk;gtk_text_window_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_text_window_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_timeout_add;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"guint gtk_timeout_add (guint32 interval, GtkFunction function, gpointer data);"
gtk;gtk_timeout_add_full;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"guint gtk_timeout_add_full (guint32 interval, GtkFunction function, GtkCallbackMarshal marshal, gpointer data, GDestroyNotify destroy);"
gtk;gtk_timeout_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;"void gtk_timeout_remove (guint timeout_handler_id);"
gtk;gtk_tips_query_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktipsquery.h;"  GType gtk_tips_query_get_type (void) G_GNUC_CONST;"
gtk;gtk_tips_query_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktipsquery.h;"GtkWidget* gtk_tips_query_new (void);"
gtk;gtk_tips_query_set_caller;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktipsquery.h;"void gtk_tips_query_set_caller (GtkTipsQuery *tips_query, GtkWidget *caller);"
gtk;gtk_tips_query_set_labels;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktipsquery.h;"void gtk_tips_query_set_labels (GtkTipsQuery *tips_query, const gchar *label_inactive, const gchar *label_no_tip);"
gtk;gtk_tips_query_start_query;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktipsquery.h;"void gtk_tips_query_start_query (GtkTipsQuery *tips_query);"
gtk;gtk_tips_query_stop_query;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktipsquery.h;"void gtk_tips_query_stop_query (GtkTipsQuery *tips_query);"
gtk;gtk_toggle_action_get_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoggleaction.h;"gboolean gtk_toggle_action_get_active (GtkToggleAction *action);"
gtk;gtk_toggle_action_get_draw_as_radio;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoggleaction.h;"gboolean gtk_toggle_action_get_draw_as_radio (GtkToggleAction *action);"
gtk;gtk_toggle_action_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoggleaction.h;"  GType gtk_toggle_action_get_type (void) G_GNUC_CONST;"
gtk;gtk_toggle_action_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoggleaction.h;"GtkToggleAction *gtk_toggle_action_new (const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id);"
gtk;gtk_toggle_action_set_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoggleaction.h;"void gtk_toggle_action_set_active (GtkToggleAction *action, gboolean is_active);"
gtk;gtk_toggle_action_set_draw_as_radio;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoggleaction.h;"void gtk_toggle_action_set_draw_as_radio (GtkToggleAction *action, gboolean draw_as_radio);"
gtk;gtk_toggle_action_toggled;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoggleaction.h;"void gtk_toggle_action_toggled (GtkToggleAction *action);"
gtk;gtk_toggle_button_get_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktogglebutton.h;"gboolean gtk_toggle_button_get_active (GtkToggleButton *toggle_button);"
gtk;gtk_toggle_button_get_inconsistent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktogglebutton.h;"gboolean gtk_toggle_button_get_inconsistent (GtkToggleButton *toggle_button);"
gtk;gtk_toggle_button_get_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktogglebutton.h;"gboolean gtk_toggle_button_get_mode (GtkToggleButton *toggle_button);"
gtk;gtk_toggle_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktogglebutton.h;"  GType gtk_toggle_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_toggle_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktogglebutton.h;" GtkWidget* gtk_toggle_button_new (void);"
gtk;gtk_toggle_button_new_with_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktogglebutton.h;"GtkWidget* gtk_toggle_button_new_with_label (const gchar *label);"
gtk;gtk_toggle_button_new_with_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktogglebutton.h;"GtkWidget* gtk_toggle_button_new_with_mnemonic (const gchar *label);"
gtk;gtk_toggle_button_set_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktogglebutton.h;"void gtk_toggle_button_set_active (GtkToggleButton *toggle_button, gboolean is_active);"
gtk;gtk_toggle_button_set_inconsistent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktogglebutton.h;"void gtk_toggle_button_set_inconsistent (GtkToggleButton *toggle_button, gboolean setting);"
gtk;gtk_toggle_button_set_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktogglebutton.h;"void gtk_toggle_button_set_mode (GtkToggleButton *toggle_button, gboolean draw_indicator);"
gtk;gtk_toggle_button_toggled;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktogglebutton.h;"void gtk_toggle_button_toggled (GtkToggleButton *toggle_button);"
gtk;gtk_toggle_tool_button_get_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoggletoolbutton.h;"gboolean gtk_toggle_tool_button_get_active (GtkToggleToolButton *button);"
gtk;gtk_toggle_tool_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoggletoolbutton.h;"  GType gtk_toggle_tool_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_toggle_tool_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoggletoolbutton.h;"GtkToolItem *gtk_toggle_tool_button_new (void);"
gtk;gtk_toggle_tool_button_new_from_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoggletoolbutton.h;"GtkToolItem *gtk_toggle_tool_button_new_from_stock (const gchar *stock_id);"
gtk;gtk_toggle_tool_button_set_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoggletoolbutton.h;" void gtk_toggle_tool_button_set_active (GtkToggleToolButton *button, gboolean is_active);"
gtk;gtk_tool_button_get_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"const gchar * gtk_tool_button_get_icon_name (GtkToolButton *button);"
gtk;gtk_tool_button_get_icon_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"GtkWidget * gtk_tool_button_get_icon_widget (GtkToolButton *button);"
gtk;gtk_tool_button_get_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"const gchar * gtk_tool_button_get_label (GtkToolButton *button);"
gtk;gtk_tool_button_get_label_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"GtkWidget * gtk_tool_button_get_label_widget (GtkToolButton *button);"
gtk;gtk_tool_button_get_stock_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"const gchar * gtk_tool_button_get_stock_id (GtkToolButton *button);"
gtk;gtk_tool_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"  GType gtk_tool_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_tool_button_get_use_underline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"gboolean gtk_tool_button_get_use_underline (GtkToolButton *button);"
gtk;gtk_tool_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"GtkToolItem *gtk_tool_button_new (GtkWidget *icon_widget, const gchar *label);"
gtk;gtk_tool_button_new_from_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"GtkToolItem *gtk_tool_button_new_from_stock (const gchar *stock_id);"
gtk;gtk_tool_button_set_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"void gtk_tool_button_set_icon_name (GtkToolButton *button, const gchar *icon_name);"
gtk;gtk_tool_button_set_icon_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"void gtk_tool_button_set_icon_widget (GtkToolButton *button, GtkWidget *icon_widget);"
gtk;gtk_tool_button_set_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;" void gtk_tool_button_set_label (GtkToolButton *button, const gchar *label);"
gtk;gtk_tool_button_set_label_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"void gtk_tool_button_set_label_widget (GtkToolButton *button, GtkWidget *label_widget);"
gtk;gtk_tool_button_set_stock_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"void gtk_tool_button_set_stock_id (GtkToolButton *button, const gchar *stock_id);"
gtk;gtk_tool_button_set_use_underline;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbutton.h;"void gtk_tool_button_set_use_underline (GtkToolButton *button, gboolean use_underline);"
gtk;gtk_tool_item_get_ellipsize_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;" PangoEllipsizeMode gtk_tool_item_get_ellipsize_mode (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_expand;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"gboolean gtk_tool_item_get_expand (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_homogeneous;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"gboolean gtk_tool_item_get_homogeneous (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_icon_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"GtkIconSize gtk_tool_item_get_icon_size (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_is_important;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;" gboolean gtk_tool_item_get_is_important (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"GtkOrientation gtk_tool_item_get_orientation (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_proxy_menu_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"GtkWidget * gtk_tool_item_get_proxy_menu_item (GtkToolItem *tool_item, const gchar *menu_item_id);"
gtk;gtk_tool_item_get_relief_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"GtkReliefStyle gtk_tool_item_get_relief_style (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_text_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"gfloat gtk_tool_item_get_text_alignment (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_text_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"GtkOrientation gtk_tool_item_get_text_orientation (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_text_size_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"GtkSizeGroup * gtk_tool_item_get_text_size_group (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_toolbar_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"GtkToolbarStyle gtk_tool_item_get_toolbar_style (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"  GType gtk_tool_item_get_type (void) G_GNUC_CONST;"
gtk;gtk_tool_item_get_use_drag_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"gboolean gtk_tool_item_get_use_drag_window (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_visible_horizontal;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"gboolean gtk_tool_item_get_visible_horizontal (GtkToolItem *tool_item);"
gtk;gtk_tool_item_get_visible_vertical;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"gboolean gtk_tool_item_get_visible_vertical (GtkToolItem *tool_item);"
gtk;gtk_tool_item_group_get_collapsed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"gboolean gtk_tool_item_group_get_collapsed (GtkToolItemGroup *group);"
gtk;gtk_tool_item_group_get_drop_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"GtkToolItem* gtk_tool_item_group_get_drop_item (GtkToolItemGroup *group, gint x, gint y);"
gtk;gtk_tool_item_group_get_ellipsize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"PangoEllipsizeMode gtk_tool_item_group_get_ellipsize (GtkToolItemGroup *group);"
gtk;gtk_tool_item_group_get_header_relief;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"GtkReliefStyle gtk_tool_item_group_get_header_relief (GtkToolItemGroup *group);"
gtk;gtk_tool_item_group_get_item_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"gint gtk_tool_item_group_get_item_position (GtkToolItemGroup *group, GtkToolItem *item);"
gtk;gtk_tool_item_group_get_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;" const gchar * gtk_tool_item_group_get_label (GtkToolItemGroup *group);"
gtk;gtk_tool_item_group_get_label_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"GtkWidget *gtk_tool_item_group_get_label_widget (GtkToolItemGroup *group);"
gtk;gtk_tool_item_group_get_n_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;" guint gtk_tool_item_group_get_n_items (GtkToolItemGroup *group);"
gtk;gtk_tool_item_group_get_nth_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"GtkToolItem* gtk_tool_item_group_get_nth_item (GtkToolItemGroup *group, guint index);"
gtk;gtk_tool_item_group_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"  GType gtk_tool_item_group_get_type (void) G_GNUC_CONST;"
gtk;gtk_tool_item_group_insert;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;" void gtk_tool_item_group_insert (GtkToolItemGroup *group, GtkToolItem *item, gint position);"
gtk;gtk_tool_item_group_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"GtkWidget* gtk_tool_item_group_new (const gchar *label);"
gtk;gtk_tool_item_group_set_collapsed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"void gtk_tool_item_group_set_collapsed (GtkToolItemGroup *group, gboolean collapsed);"
gtk;gtk_tool_item_group_set_ellipsize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"void gtk_tool_item_group_set_ellipsize (GtkToolItemGroup *group, PangoEllipsizeMode ellipsize);"
gtk;gtk_tool_item_group_set_header_relief;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"void gtk_tool_item_group_set_header_relief (GtkToolItemGroup *group, GtkReliefStyle style);"
gtk;gtk_tool_item_group_set_item_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"void gtk_tool_item_group_set_item_position (GtkToolItemGroup *group, GtkToolItem *item, gint position);"
gtk;gtk_tool_item_group_set_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;" void gtk_tool_item_group_set_label (GtkToolItemGroup *group, const gchar *label);"
gtk;gtk_tool_item_group_set_label_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitemgroup.h;"void gtk_tool_item_group_set_label_widget (GtkToolItemGroup *group, GtkWidget *label_widget);"
gtk;gtk_tool_item_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"GtkToolItem *gtk_tool_item_new (void);"
gtk;gtk_tool_item_rebuild_menu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"void gtk_tool_item_rebuild_menu (GtkToolItem *tool_item);"
gtk;gtk_tool_item_retrieve_proxy_menu_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;" GtkWidget * gtk_tool_item_retrieve_proxy_menu_item (GtkToolItem *tool_item);"
gtk;gtk_tool_item_set_expand;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;" void gtk_tool_item_set_expand (GtkToolItem *tool_item, gboolean expand);"
gtk;gtk_tool_item_set_homogeneous;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;" void gtk_tool_item_set_homogeneous (GtkToolItem *tool_item, gboolean homogeneous);"
gtk;gtk_tool_item_set_is_important;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"void gtk_tool_item_set_is_important (GtkToolItem *tool_item, gboolean is_important);"
gtk;gtk_tool_item_set_proxy_menu_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"void gtk_tool_item_set_proxy_menu_item (GtkToolItem *tool_item, const gchar *menu_item_id, GtkWidget *menu_item);"
gtk;gtk_tool_item_set_tooltip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;" void gtk_tool_item_set_tooltip (GtkToolItem *tool_item, GtkTooltips *tooltips, const gchar *tip_text, const gchar *tip_private);"
gtk;gtk_tool_item_set_tooltip_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;"void gtk_tool_item_set_tooltip_markup (GtkToolItem *tool_item, const gchar *markup);"
gtk;gtk_tool_item_set_tooltip_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;" void gtk_tool_item_set_tooltip_text (GtkToolItem *tool_item, const gchar *text);"
gtk;gtk_tool_item_set_use_drag_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;" void gtk_tool_item_set_use_drag_window (GtkToolItem *tool_item, gboolean use_drag_window);"
gtk;gtk_tool_item_set_visible_horizontal;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;" void gtk_tool_item_set_visible_horizontal (GtkToolItem *tool_item, gboolean visible_horizontal);"
gtk;gtk_tool_item_set_visible_vertical;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;" void gtk_tool_item_set_visible_vertical (GtkToolItem *tool_item, gboolean visible_vertical);"
gtk;gtk_tool_item_toolbar_reconfigured;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolitem.h;" void gtk_tool_item_toolbar_reconfigured (GtkToolItem *tool_item);"
gtk;gtk_tool_palette_add_drag_dest;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"void gtk_tool_palette_add_drag_dest (GtkToolPalette *palette, GtkWidget *widget, GtkDestDefaults flags, GtkToolPaletteDragTargets targets, GdkDragAction actions);"
gtk;gtk_tool_palette_drag_targets_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_tool_palette_drag_targets_get_type (void) G_GNUC_CONST;"
gtk;gtk_tool_palette_get_drag_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"GtkWidget* gtk_tool_palette_get_drag_item (GtkToolPalette *palette, const GtkSelectionData *selection);"
gtk;gtk_tool_palette_get_drag_target_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"const GtkTargetEntry * gtk_tool_palette_get_drag_target_group (void) G_GNUC_CONST;"
gtk;gtk_tool_palette_get_drag_target_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;" const GtkTargetEntry * gtk_tool_palette_get_drag_target_item (void) G_GNUC_CONST;"
gtk;gtk_tool_palette_get_drop_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"GtkToolItemGroup* gtk_tool_palette_get_drop_group (GtkToolPalette *palette, gint x, gint y);"
gtk;gtk_tool_palette_get_drop_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;" GtkToolItem* gtk_tool_palette_get_drop_item (GtkToolPalette *palette, gint x, gint y);"
gtk;gtk_tool_palette_get_exclusive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"gboolean gtk_tool_palette_get_exclusive (GtkToolPalette *palette, GtkToolItemGroup *group);"
gtk;gtk_tool_palette_get_expand;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"gboolean gtk_tool_palette_get_expand (GtkToolPalette *palette, GtkToolItemGroup *group);"
gtk;gtk_tool_palette_get_group_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;" gint gtk_tool_palette_get_group_position (GtkToolPalette *palette, GtkToolItemGroup *group);"
gtk;gtk_tool_palette_get_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;" GtkAdjustment* gtk_tool_palette_get_hadjustment (GtkToolPalette *palette);"
gtk;gtk_tool_palette_get_icon_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;" GtkIconSize gtk_tool_palette_get_icon_size (GtkToolPalette *palette);"
gtk;gtk_tool_palette_get_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"GtkToolbarStyle gtk_tool_palette_get_style (GtkToolPalette *palette);"
gtk;gtk_tool_palette_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"  GType gtk_tool_palette_get_type (void) G_GNUC_CONST;"
gtk;gtk_tool_palette_get_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"GtkAdjustment* gtk_tool_palette_get_vadjustment (GtkToolPalette *palette);"
gtk;gtk_tool_palette_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"GtkWidget* gtk_tool_palette_new (void);"
gtk;gtk_tool_palette_set_drag_source;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;" void gtk_tool_palette_set_drag_source (GtkToolPalette *palette, GtkToolPaletteDragTargets targets);"
gtk;gtk_tool_palette_set_exclusive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"void gtk_tool_palette_set_exclusive (GtkToolPalette *palette, GtkToolItemGroup *group, gboolean exclusive);"
gtk;gtk_tool_palette_set_expand;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"void gtk_tool_palette_set_expand (GtkToolPalette *palette, GtkToolItemGroup *group, gboolean expand);"
gtk;gtk_tool_palette_set_group_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;" void gtk_tool_palette_set_group_position (GtkToolPalette *palette, GtkToolItemGroup *group, gint position);"
gtk;gtk_tool_palette_set_icon_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;" void gtk_tool_palette_set_icon_size (GtkToolPalette *palette, GtkIconSize icon_size);"
gtk;gtk_tool_palette_set_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"void gtk_tool_palette_set_style (GtkToolPalette *palette, GtkToolbarStyle style);"
gtk;gtk_tool_palette_unset_icon_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"void gtk_tool_palette_unset_icon_size (GtkToolPalette *palette);"
gtk;gtk_tool_palette_unset_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolpalette.h;"void gtk_tool_palette_unset_style (GtkToolPalette *palette);"
gtk;gtk_tool_shell_get_ellipsize_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolshell.h;"PangoEllipsizeMode gtk_tool_shell_get_ellipsize_mode (GtkToolShell *shell);"
gtk;gtk_tool_shell_get_icon_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolshell.h;" GtkIconSize gtk_tool_shell_get_icon_size (GtkToolShell *shell);"
gtk;gtk_tool_shell_get_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolshell.h;"GtkOrientation gtk_tool_shell_get_orientation (GtkToolShell *shell);"
gtk;gtk_tool_shell_get_relief_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolshell.h;"GtkReliefStyle gtk_tool_shell_get_relief_style (GtkToolShell *shell);"
gtk;gtk_tool_shell_get_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolshell.h;"GtkToolbarStyle gtk_tool_shell_get_style (GtkToolShell *shell);"
gtk;gtk_tool_shell_get_text_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolshell.h;"gfloat gtk_tool_shell_get_text_alignment (GtkToolShell *shell);"
gtk;gtk_tool_shell_get_text_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolshell.h;"GtkOrientation gtk_tool_shell_get_text_orientation (GtkToolShell *shell);"
gtk;gtk_tool_shell_get_text_size_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolshell.h;"GtkSizeGroup * gtk_tool_shell_get_text_size_group (GtkToolShell *shell);"
gtk;gtk_tool_shell_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolshell.h;"  GType gtk_tool_shell_get_type (void) G_GNUC_CONST;"
gtk;gtk_tool_shell_rebuild_menu;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolshell.h;"void gtk_tool_shell_rebuild_menu (GtkToolShell *shell);"
gtk;gtk_toolbar_append_element;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" GtkWidget* gtk_toolbar_append_element (GtkToolbar *toolbar, GtkToolbarChildType type, GtkWidget *widget, const char *text, const char *tooltip_text, const char *tooltip_private_text, GtkWidget *icon, GCallback callback, gpointer user_data);"
gtk;gtk_toolbar_append_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" GtkWidget* gtk_toolbar_append_item (GtkToolbar *toolbar, const char *text, const char *tooltip_text, const char *tooltip_private_text, GtkWidget *icon, GCallback callback, gpointer user_data);"
gtk;gtk_toolbar_append_space;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" void gtk_toolbar_append_space (GtkToolbar *toolbar);"
gtk;gtk_toolbar_append_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" void gtk_toolbar_append_widget (GtkToolbar *toolbar, GtkWidget *widget, const char *tooltip_text, const char *tooltip_private_text);"
gtk;gtk_toolbar_child_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_toolbar_child_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_toolbar_get_drop_index;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"gint gtk_toolbar_get_drop_index (GtkToolbar *toolbar, gint x, gint y);"
gtk;gtk_toolbar_get_icon_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" GtkIconSize gtk_toolbar_get_icon_size (GtkToolbar *toolbar);"
gtk;gtk_toolbar_get_item_index;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" gint gtk_toolbar_get_item_index (GtkToolbar *toolbar, GtkToolItem *item);"
gtk;gtk_toolbar_get_n_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"gint gtk_toolbar_get_n_items (GtkToolbar *toolbar);"
gtk;gtk_toolbar_get_nth_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"GtkToolItem * gtk_toolbar_get_nth_item (GtkToolbar *toolbar, gint n);"
gtk;gtk_toolbar_get_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" GtkOrientation gtk_toolbar_get_orientation (GtkToolbar *toolbar);"
gtk;gtk_toolbar_get_relief_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" GtkReliefStyle gtk_toolbar_get_relief_style (GtkToolbar *toolbar);"
gtk;gtk_toolbar_get_show_arrow;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" gboolean gtk_toolbar_get_show_arrow (GtkToolbar *toolbar);"
gtk;gtk_toolbar_get_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" GtkToolbarStyle gtk_toolbar_get_style (GtkToolbar *toolbar);"
gtk;gtk_toolbar_get_tooltips;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"gboolean gtk_toolbar_get_tooltips (GtkToolbar *toolbar);"
gtk;gtk_toolbar_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"  GType gtk_toolbar_get_type (void) G_GNUC_CONST;"
gtk;gtk_toolbar_insert;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" void gtk_toolbar_insert (GtkToolbar *toolbar, GtkToolItem *item, gint pos);"
gtk;gtk_toolbar_insert_element;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" GtkWidget* gtk_toolbar_insert_element (GtkToolbar *toolbar, GtkToolbarChildType type, GtkWidget *widget, const char *text, const char *tooltip_text, const char *tooltip_private_text, GtkWidget *icon, GCallback callback, gpointer user_data, gint position);"
gtk;gtk_toolbar_insert_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"GtkWidget* gtk_toolbar_insert_item (GtkToolbar *toolbar, const char *text, const char *tooltip_text, const char *tooltip_private_text, GtkWidget *icon, GCallback callback, gpointer user_data, gint position);"
gtk;gtk_toolbar_insert_space;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_insert_space (GtkToolbar *toolbar, gint position);"
gtk;gtk_toolbar_insert_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" GtkWidget* gtk_toolbar_insert_stock (GtkToolbar *toolbar, const gchar *stock_id, const char *tooltip_text, const char *tooltip_private_text, GCallback callback, gpointer user_data, gint position);"
gtk;gtk_toolbar_insert_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_insert_widget (GtkToolbar *toolbar, GtkWidget *widget, const char *tooltip_text, const char *tooltip_private_text, gint position);"
gtk;gtk_toolbar_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"GtkWidget * gtk_toolbar_new (void);"
gtk;gtk_toolbar_prepend_element;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;" GtkWidget* gtk_toolbar_prepend_element (GtkToolbar *toolbar, GtkToolbarChildType type, GtkWidget *widget, const char *text, const char *tooltip_text, const char *tooltip_private_text, GtkWidget *icon, GCallback callback, gpointer user_data);"
gtk;gtk_toolbar_prepend_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"GtkWidget* gtk_toolbar_prepend_item (GtkToolbar *toolbar, const char *text, const char *tooltip_text, const char *tooltip_private_text, GtkWidget *icon, GCallback callback, gpointer user_data);"
gtk;gtk_toolbar_prepend_space;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_prepend_space (GtkToolbar *toolbar);"
gtk;gtk_toolbar_prepend_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_prepend_widget (GtkToolbar *toolbar, GtkWidget *widget, const char *tooltip_text, const char *tooltip_private_text);"
gtk;gtk_toolbar_remove_space;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_remove_space (GtkToolbar *toolbar, gint position);"
gtk;gtk_toolbar_set_drop_highlight_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_set_drop_highlight_item (GtkToolbar *toolbar, GtkToolItem *tool_item, gint index_);"
gtk;gtk_toolbar_set_icon_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_set_icon_size (GtkToolbar *toolbar, GtkIconSize icon_size);"
gtk;gtk_toolbar_set_orientation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_set_orientation (GtkToolbar *toolbar, GtkOrientation orientation);"
gtk;gtk_toolbar_set_show_arrow;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_set_show_arrow (GtkToolbar *toolbar, gboolean show_arrow);"
gtk;gtk_toolbar_set_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_set_style (GtkToolbar *toolbar, GtkToolbarStyle style);"
gtk;gtk_toolbar_set_tooltips;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_set_tooltips (GtkToolbar *toolbar, gboolean enable);"
gtk;gtk_toolbar_space_style_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_toolbar_space_style_get_type (void) G_GNUC_CONST;"
gtk;gtk_toolbar_style_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_toolbar_style_get_type (void) G_GNUC_CONST;"
gtk;gtk_toolbar_unset_icon_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_unset_icon_size (GtkToolbar *toolbar);"
gtk;gtk_toolbar_unset_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktoolbar.h;"void gtk_toolbar_unset_style (GtkToolbar *toolbar);"
gtk;gtk_tooltip_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltip.h;"  GType gtk_tooltip_get_type (void);"
gtk;gtk_tooltip_set_custom;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltip.h;"void gtk_tooltip_set_custom (GtkTooltip *tooltip, GtkWidget *custom_widget);"
gtk;gtk_tooltip_set_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltip.h;"void gtk_tooltip_set_icon (GtkTooltip *tooltip, GdkPixbuf *pixbuf);"
gtk;gtk_tooltip_set_icon_from_gicon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltip.h;"void gtk_tooltip_set_icon_from_gicon (GtkTooltip *tooltip, GIcon *gicon, GtkIconSize size);"
gtk;gtk_tooltip_set_icon_from_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltip.h;"void gtk_tooltip_set_icon_from_icon_name (GtkTooltip *tooltip, const gchar *icon_name, GtkIconSize size);"
gtk;gtk_tooltip_set_icon_from_stock;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltip.h;"void gtk_tooltip_set_icon_from_stock (GtkTooltip *tooltip, const gchar *stock_id, GtkIconSize size);"
gtk;gtk_tooltip_set_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltip.h;" void gtk_tooltip_set_markup (GtkTooltip *tooltip, const gchar *markup);"
gtk;gtk_tooltip_set_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltip.h;"void gtk_tooltip_set_text (GtkTooltip *tooltip, const gchar *text);"
gtk;gtk_tooltip_set_tip_area;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltip.h;" void gtk_tooltip_set_tip_area (GtkTooltip *tooltip, const GdkRectangle *rect);"
gtk;gtk_tooltip_trigger_tooltip_query;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltip.h;" void gtk_tooltip_trigger_tooltip_query (GdkDisplay *display);"
gtk;gtk_tooltips_data_get;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltips.h;"GtkTooltipsData* gtk_tooltips_data_get (GtkWidget *widget);"
gtk;gtk_tooltips_disable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltips.h;"void gtk_tooltips_disable (GtkTooltips *tooltips);"
gtk;gtk_tooltips_enable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltips.h;" void gtk_tooltips_enable (GtkTooltips *tooltips);"
gtk;gtk_tooltips_force_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltips.h;"void gtk_tooltips_force_window (GtkTooltips *tooltips);"
gtk;gtk_tooltips_get_info_from_tip_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltips.h;" gboolean gtk_tooltips_get_info_from_tip_window (GtkWindow *tip_window, GtkTooltips **tooltips, GtkWidget **current_widget);"
gtk;gtk_tooltips_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltips.h;"  GType gtk_tooltips_get_type (void) G_GNUC_CONST;"
gtk;gtk_tooltips_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltips.h;"GtkTooltips* gtk_tooltips_new (void);"
gtk;gtk_tooltips_set_delay;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltips.h;"void gtk_tooltips_set_delay (GtkTooltips *tooltips, guint delay);"
gtk;gtk_tooltips_set_tip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktooltips.h;"void gtk_tooltips_set_tip (GtkTooltips *tooltips, GtkWidget *widget, const gchar *tip_text, const gchar *tip_private);"
gtk;gtk_tree_append;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"void gtk_tree_append (GtkTree *tree, GtkWidget *tree_item);"
gtk;gtk_tree_child_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"gint gtk_tree_child_position (GtkTree *tree, GtkWidget *child);"
gtk;gtk_tree_clear_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"void gtk_tree_clear_items (GtkTree *tree, gint start, gint end);"
gtk;gtk_tree_drag_dest_drag_data_received;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreednd.h;" gboolean gtk_tree_drag_dest_drag_data_received (GtkTreeDragDest *drag_dest, GtkTreePath *dest, GtkSelectionData *selection_data);"
gtk;gtk_tree_drag_dest_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreednd.h;" GType gtk_tree_drag_dest_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_drag_dest_row_drop_possible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreednd.h;" gboolean gtk_tree_drag_dest_row_drop_possible (GtkTreeDragDest *drag_dest, GtkTreePath *dest_path, GtkSelectionData *selection_data);"
gtk;gtk_tree_drag_source_drag_data_delete;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreednd.h;" gboolean gtk_tree_drag_source_drag_data_delete (GtkTreeDragSource *drag_source, GtkTreePath *path);"
gtk;gtk_tree_drag_source_drag_data_get;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreednd.h;" gboolean gtk_tree_drag_source_drag_data_get (GtkTreeDragSource *drag_source, GtkTreePath *path, GtkSelectionData *selection_data);"
gtk;gtk_tree_drag_source_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreednd.h;"  GType gtk_tree_drag_source_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_drag_source_row_draggable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreednd.h;" gboolean gtk_tree_drag_source_row_draggable (GtkTreeDragSource *drag_source, GtkTreePath *path);"
gtk;gtk_tree_get_row_drag_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreednd.h;"gboolean gtk_tree_get_row_drag_data (GtkSelectionData *selection_data, GtkTreeModel **tree_model, GtkTreePath **path);"
gtk;gtk_tree_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"  GType gtk_tree_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_insert;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"void gtk_tree_insert (GtkTree *tree, GtkWidget *tree_item, gint position);"
gtk;gtk_tree_item_collapse;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeitem.h;"void gtk_tree_item_collapse (GtkTreeItem *tree_item);"
gtk;gtk_tree_item_deselect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeitem.h;"void gtk_tree_item_deselect (GtkTreeItem *tree_item);"
gtk;gtk_tree_item_expand;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeitem.h;"void gtk_tree_item_expand (GtkTreeItem *tree_item);"
gtk;gtk_tree_item_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeitem.h;"  GType gtk_tree_item_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_item_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeitem.h;"GtkWidget* gtk_tree_item_new (void);"
gtk;gtk_tree_item_new_with_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeitem.h;"GtkWidget* gtk_tree_item_new_with_label (const gchar *label);"
gtk;gtk_tree_item_remove_subtree;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeitem.h;"void gtk_tree_item_remove_subtree (GtkTreeItem *tree_item);"
gtk;gtk_tree_item_select;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeitem.h;"void gtk_tree_item_select (GtkTreeItem *tree_item);"
gtk;gtk_tree_item_set_subtree;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeitem.h;"void gtk_tree_item_set_subtree (GtkTreeItem *tree_item, GtkWidget *subtree);"
gtk;gtk_tree_iter_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;" GtkTreeIter * gtk_tree_iter_copy (GtkTreeIter *iter);"
gtk;gtk_tree_iter_free;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_iter_free (GtkTreeIter *iter);"
gtk;gtk_tree_iter_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GType gtk_tree_iter_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_model_filter_clear_cache;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h;"void gtk_tree_model_filter_clear_cache (GtkTreeModelFilter *filter);"
gtk;gtk_tree_model_filter_convert_child_iter_to_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h;" gboolean gtk_tree_model_filter_convert_child_iter_to_iter (GtkTreeModelFilter *filter, GtkTreeIter *filter_iter, GtkTreeIter *child_iter);"
gtk;gtk_tree_model_filter_convert_child_path_to_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h;"GtkTreePath *gtk_tree_model_filter_convert_child_path_to_path (GtkTreeModelFilter *filter, GtkTreePath *child_path);"
gtk;gtk_tree_model_filter_convert_iter_to_child_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h;"void gtk_tree_model_filter_convert_iter_to_child_iter (GtkTreeModelFilter *filter, GtkTreeIter *child_iter, GtkTreeIter *filter_iter);"
gtk;gtk_tree_model_filter_convert_path_to_child_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h;"GtkTreePath *gtk_tree_model_filter_convert_path_to_child_path (GtkTreeModelFilter *filter, GtkTreePath *filter_path);"
gtk;gtk_tree_model_filter_get_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h;" GtkTreeModel *gtk_tree_model_filter_get_model (GtkTreeModelFilter *filter);"
gtk;gtk_tree_model_filter_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h;"  GType gtk_tree_model_filter_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_model_filter_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h;"GtkTreeModel *gtk_tree_model_filter_new (GtkTreeModel *child_model, GtkTreePath *root);"
gtk;gtk_tree_model_filter_refilter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h;" void gtk_tree_model_filter_refilter (GtkTreeModelFilter *filter);"
gtk;gtk_tree_model_filter_set_modify_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h;"void gtk_tree_model_filter_set_modify_func (GtkTreeModelFilter *filter, gint n_columns, GType *types, GtkTreeModelFilterModifyFunc func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_tree_model_filter_set_visible_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h;"void gtk_tree_model_filter_set_visible_column (GtkTreeModelFilter *filter, gint column);"
gtk;gtk_tree_model_filter_set_visible_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h;"void gtk_tree_model_filter_set_visible_func (GtkTreeModelFilter *filter, GtkTreeModelFilterVisibleFunc func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_tree_model_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_tree_model_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_model_foreach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;" void gtk_tree_model_foreach (GtkTreeModel *model, GtkTreeModelForeachFunc func, gpointer user_data);"
gtk;gtk_tree_model_get_column_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GType gtk_tree_model_get_column_type (GtkTreeModel *tree_model, gint index_);"
gtk;gtk_tree_model_get_flags;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GtkTreeModelFlags gtk_tree_model_get_flags (GtkTreeModel *tree_model);"
gtk;gtk_tree_model_get_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;" gboolean gtk_tree_model_get_iter (GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreePath *path);"
gtk;gtk_tree_model_get_iter_first;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gboolean gtk_tree_model_get_iter_first (GtkTreeModel *tree_model, GtkTreeIter *iter);"
gtk;gtk_tree_model_get_iter_from_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gboolean gtk_tree_model_get_iter_from_string (GtkTreeModel *tree_model, GtkTreeIter *iter, const gchar *path_string);"
gtk;gtk_tree_model_get_n_columns;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gint gtk_tree_model_get_n_columns (GtkTreeModel *tree_model);"
gtk;gtk_tree_model_get_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GtkTreePath * gtk_tree_model_get_path (GtkTreeModel *tree_model, GtkTreeIter *iter);"
gtk;gtk_tree_model_get_string_from_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gchar * gtk_tree_model_get_string_from_iter (GtkTreeModel *tree_model, GtkTreeIter *iter);"
gtk;gtk_tree_model_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;" GType gtk_tree_model_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_model_get_valist;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_model_get_valist (GtkTreeModel *tree_model, GtkTreeIter *iter, va_list var_args);"
gtk;gtk_tree_model_get_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_model_get_value (GtkTreeModel *tree_model, GtkTreeIter *iter, gint column, GValue *value);"
gtk;gtk_tree_model_iter_children;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gboolean gtk_tree_model_iter_children (GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent);"
gtk;gtk_tree_model_iter_has_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gboolean gtk_tree_model_iter_has_child (GtkTreeModel *tree_model, GtkTreeIter *iter);"
gtk;gtk_tree_model_iter_n_children;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gint gtk_tree_model_iter_n_children (GtkTreeModel *tree_model, GtkTreeIter *iter);"
gtk;gtk_tree_model_iter_next;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gboolean gtk_tree_model_iter_next (GtkTreeModel *tree_model, GtkTreeIter *iter);"
gtk;gtk_tree_model_iter_nth_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gboolean gtk_tree_model_iter_nth_child (GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent, gint n);"
gtk;gtk_tree_model_iter_parent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gboolean gtk_tree_model_iter_parent (GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *child);"
gtk;gtk_tree_model_ref_node;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_model_ref_node (GtkTreeModel *tree_model, GtkTreeIter *iter);"
gtk;gtk_tree_model_row_changed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;" void gtk_tree_model_row_changed (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter);"
gtk;gtk_tree_model_row_deleted;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_model_row_deleted (GtkTreeModel *tree_model, GtkTreePath *path);"
gtk;gtk_tree_model_row_has_child_toggled;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_model_row_has_child_toggled (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter);"
gtk;gtk_tree_model_row_inserted;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_model_row_inserted (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter);"
gtk;gtk_tree_model_rows_reordered;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_model_rows_reordered (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter, gint *new_order);"
gtk;gtk_tree_model_sort_clear_cache;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelsort.h;"void gtk_tree_model_sort_clear_cache (GtkTreeModelSort *tree_model_sort);"
gtk;gtk_tree_model_sort_convert_child_iter_to_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelsort.h;"gboolean gtk_tree_model_sort_convert_child_iter_to_iter (GtkTreeModelSort *tree_model_sort, GtkTreeIter *sort_iter, GtkTreeIter *child_iter);"
gtk;gtk_tree_model_sort_convert_child_path_to_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelsort.h;"GtkTreePath *gtk_tree_model_sort_convert_child_path_to_path (GtkTreeModelSort *tree_model_sort, GtkTreePath *child_path);"
gtk;gtk_tree_model_sort_convert_iter_to_child_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelsort.h;"void gtk_tree_model_sort_convert_iter_to_child_iter (GtkTreeModelSort *tree_model_sort, GtkTreeIter *child_iter, GtkTreeIter *sorted_iter);"
gtk;gtk_tree_model_sort_convert_path_to_child_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelsort.h;"GtkTreePath *gtk_tree_model_sort_convert_path_to_child_path (GtkTreeModelSort *tree_model_sort, GtkTreePath *sorted_path);"
gtk;gtk_tree_model_sort_get_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelsort.h;" GtkTreeModel *gtk_tree_model_sort_get_model (GtkTreeModelSort *tree_model);"
gtk;gtk_tree_model_sort_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelsort.h;"  GType gtk_tree_model_sort_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_model_sort_iter_is_valid;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelsort.h;"gboolean gtk_tree_model_sort_iter_is_valid (GtkTreeModelSort *tree_model_sort, GtkTreeIter *iter);"
gtk;gtk_tree_model_sort_new_with_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelsort.h;"GtkTreeModel *gtk_tree_model_sort_new_with_model (GtkTreeModel *child_model);"
gtk;gtk_tree_model_sort_reset_default_sort_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodelsort.h;"void gtk_tree_model_sort_reset_default_sort_func (GtkTreeModelSort *tree_model_sort);"
gtk;gtk_tree_model_unref_node;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_model_unref_node (GtkTreeModel *tree_model, GtkTreeIter *iter);"
gtk;gtk_tree_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"GtkWidget* gtk_tree_new (void);"
gtk;gtk_tree_path_append_index;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_path_append_index (GtkTreePath *path, gint index_);"
gtk;gtk_tree_path_compare;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gint gtk_tree_path_compare (const GtkTreePath *a, const GtkTreePath *b);"
gtk;gtk_tree_path_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GtkTreePath *gtk_tree_path_copy (const GtkTreePath *path);"
gtk;gtk_tree_path_down;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_path_down (GtkTreePath *path);"
gtk;gtk_tree_path_free;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_path_free (GtkTreePath *path);"
gtk;gtk_tree_path_get_depth;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gint gtk_tree_path_get_depth (GtkTreePath *path);"
gtk;gtk_tree_path_get_indices;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gint *gtk_tree_path_get_indices (GtkTreePath *path);"
gtk;gtk_tree_path_get_indices_with_depth;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gint *gtk_tree_path_get_indices_with_depth (GtkTreePath *path, gint *depth);"
gtk;gtk_tree_path_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GType gtk_tree_path_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_path_is_ancestor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;" gboolean gtk_tree_path_is_ancestor (GtkTreePath *path, GtkTreePath *descendant);"
gtk;gtk_tree_path_is_descendant;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gboolean gtk_tree_path_is_descendant (GtkTreePath *path, GtkTreePath *ancestor);"
gtk;gtk_tree_path_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"  GtkTreePath *gtk_tree_path_new (void);"
gtk;gtk_tree_path_new_first;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GtkTreePath *gtk_tree_path_new_first (void);"
gtk;gtk_tree_path_new_from_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GtkTreePath *gtk_tree_path_new_from_string (const gchar *path);"
gtk;gtk_tree_path_next;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_path_next (GtkTreePath *path);"
gtk;gtk_tree_path_prepend_index;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_path_prepend_index (GtkTreePath *path, gint index_);"
gtk;gtk_tree_path_prev;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gboolean gtk_tree_path_prev (GtkTreePath *path);"
gtk;gtk_tree_path_to_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gchar *gtk_tree_path_to_string (GtkTreePath *path);"
gtk;gtk_tree_path_up;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gboolean gtk_tree_path_up (GtkTreePath *path);"
gtk;gtk_tree_prepend;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"void gtk_tree_prepend (GtkTree *tree, GtkWidget *tree_item);"
gtk;gtk_tree_remove_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;" void gtk_tree_remove_item (GtkTree *tree, GtkWidget *child);"
gtk;gtk_tree_remove_items;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"void gtk_tree_remove_items (GtkTree *tree, GList *items);"
gtk;gtk_tree_row_reference_copy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GtkTreeRowReference *gtk_tree_row_reference_copy (GtkTreeRowReference *reference);"
gtk;gtk_tree_row_reference_deleted;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_row_reference_deleted (GObject *proxy, GtkTreePath *path);"
gtk;gtk_tree_row_reference_free;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_row_reference_free (GtkTreeRowReference *reference);"
gtk;gtk_tree_row_reference_get_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GtkTreeModel *gtk_tree_row_reference_get_model (GtkTreeRowReference *reference);"
gtk;gtk_tree_row_reference_get_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GtkTreePath *gtk_tree_row_reference_get_path (GtkTreeRowReference *reference);"
gtk;gtk_tree_row_reference_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;" GType gtk_tree_row_reference_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_row_reference_inserted;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;" void gtk_tree_row_reference_inserted (GObject *proxy, GtkTreePath *path);"
gtk;gtk_tree_row_reference_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GtkTreeRowReference *gtk_tree_row_reference_new (GtkTreeModel *model, GtkTreePath *path);"
gtk;gtk_tree_row_reference_new_proxy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"GtkTreeRowReference *gtk_tree_row_reference_new_proxy (GObject *proxy, GtkTreeModel *model, GtkTreePath *path);"
gtk;gtk_tree_row_reference_reordered;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"void gtk_tree_row_reference_reordered (GObject *proxy, GtkTreePath *path, GtkTreeIter *iter, gint *new_order);"
gtk;gtk_tree_row_reference_valid;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreemodel.h;"gboolean gtk_tree_row_reference_valid (GtkTreeRowReference *reference);"
gtk;gtk_tree_select_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"void gtk_tree_select_child (GtkTree *tree, GtkWidget *tree_item);"
gtk;gtk_tree_select_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"void gtk_tree_select_item (GtkTree *tree, gint item);"
gtk;gtk_tree_selection_count_selected_rows;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"gint gtk_tree_selection_count_selected_rows (GtkTreeSelection *selection);"
gtk;gtk_tree_selection_get_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"GtkSelectionMode gtk_tree_selection_get_mode (GtkTreeSelection *selection);"
gtk;gtk_tree_selection_get_select_function;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;" GtkTreeSelectionFunc gtk_tree_selection_get_select_function (GtkTreeSelection *selection);"
gtk;gtk_tree_selection_get_selected;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;" gboolean gtk_tree_selection_get_selected (GtkTreeSelection *selection, GtkTreeModel **model, GtkTreeIter *iter);"
gtk;gtk_tree_selection_get_selected_rows;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"GList * gtk_tree_selection_get_selected_rows (GtkTreeSelection *selection, GtkTreeModel **model);"
gtk;gtk_tree_selection_get_tree_view;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"GtkTreeView* gtk_tree_selection_get_tree_view (GtkTreeSelection *selection);"
gtk;gtk_tree_selection_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"  GType gtk_tree_selection_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_selection_get_user_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"gpointer gtk_tree_selection_get_user_data (GtkTreeSelection *selection);"
gtk;gtk_tree_selection_iter_is_selected;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"gboolean gtk_tree_selection_iter_is_selected (GtkTreeSelection *selection, GtkTreeIter *iter);"
gtk;gtk_tree_selection_path_is_selected;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"gboolean gtk_tree_selection_path_is_selected (GtkTreeSelection *selection, GtkTreePath *path);"
gtk;gtk_tree_selection_select_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"void gtk_tree_selection_select_all (GtkTreeSelection *selection);"
gtk;gtk_tree_selection_select_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"void gtk_tree_selection_select_iter (GtkTreeSelection *selection, GtkTreeIter *iter);"
gtk;gtk_tree_selection_select_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"void gtk_tree_selection_select_path (GtkTreeSelection *selection, GtkTreePath *path);"
gtk;gtk_tree_selection_select_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"void gtk_tree_selection_select_range (GtkTreeSelection *selection, GtkTreePath *start_path, GtkTreePath *end_path);"
gtk;gtk_tree_selection_selected_foreach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"void gtk_tree_selection_selected_foreach (GtkTreeSelection *selection, GtkTreeSelectionForeachFunc func, gpointer data);"
gtk;gtk_tree_selection_set_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;" void gtk_tree_selection_set_mode (GtkTreeSelection *selection, GtkSelectionMode type);"
gtk;gtk_tree_selection_set_select_function;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"void gtk_tree_selection_set_select_function (GtkTreeSelection *selection, GtkTreeSelectionFunc func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_tree_selection_unselect_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"void gtk_tree_selection_unselect_all (GtkTreeSelection *selection);"
gtk;gtk_tree_selection_unselect_iter;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"void gtk_tree_selection_unselect_iter (GtkTreeSelection *selection, GtkTreeIter *iter);"
gtk;gtk_tree_selection_unselect_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"void gtk_tree_selection_unselect_path (GtkTreeSelection *selection, GtkTreePath *path);"
gtk;gtk_tree_selection_unselect_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeselection.h;"void gtk_tree_selection_unselect_range (GtkTreeSelection *selection, GtkTreePath *start_path, GtkTreePath *end_path);"
gtk;gtk_tree_set_row_drag_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreednd.h;" gboolean gtk_tree_set_row_drag_data (GtkSelectionData *selection_data, GtkTreeModel *tree_model, GtkTreePath *path);"
gtk;gtk_tree_set_selection_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"void gtk_tree_set_selection_mode (GtkTree *tree, GtkSelectionMode mode);"
gtk;gtk_tree_set_view_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"void gtk_tree_set_view_lines (GtkTree *tree, gboolean flag);"
gtk;gtk_tree_set_view_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"void gtk_tree_set_view_mode (GtkTree *tree, GtkTreeViewMode mode);"
gtk;gtk_tree_sortable_get_sort_column_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreesortable.h;"gboolean gtk_tree_sortable_get_sort_column_id (GtkTreeSortable *sortable, gint *sort_column_id, GtkSortType *order);"
gtk;gtk_tree_sortable_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreesortable.h;"  GType gtk_tree_sortable_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_sortable_has_default_sort_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreesortable.h;"gboolean gtk_tree_sortable_has_default_sort_func (GtkTreeSortable *sortable);"
gtk;gtk_tree_sortable_set_default_sort_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreesortable.h;"void gtk_tree_sortable_set_default_sort_func (GtkTreeSortable *sortable, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy);"
gtk;gtk_tree_sortable_set_sort_column_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreesortable.h;"void gtk_tree_sortable_set_sort_column_id (GtkTreeSortable *sortable, gint sort_column_id, GtkSortType order);"
gtk;gtk_tree_sortable_set_sort_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreesortable.h;"void gtk_tree_sortable_set_sort_func (GtkTreeSortable *sortable, gint sort_column_id, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy);"
gtk;gtk_tree_sortable_sort_column_changed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreesortable.h;" void gtk_tree_sortable_sort_column_changed (GtkTreeSortable *sortable);"
gtk;gtk_tree_store_append;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_append (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent);"
gtk;gtk_tree_store_clear;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_clear (GtkTreeStore *tree_store);"
gtk;gtk_tree_store_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"  GType gtk_tree_store_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_store_insert;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_insert (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position);"
gtk;gtk_tree_store_insert_after;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_insert_after (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, GtkTreeIter *sibling);"
gtk;gtk_tree_store_insert_before;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_insert_before (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, GtkTreeIter *sibling);"
gtk;gtk_tree_store_insert_with_valuesv;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_insert_with_valuesv (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position, gint *columns, GValue *values, gint n_values);"
gtk;gtk_tree_store_is_ancestor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"gboolean gtk_tree_store_is_ancestor (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *descendant);"
gtk;gtk_tree_store_iter_depth;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"gint gtk_tree_store_iter_depth (GtkTreeStore *tree_store, GtkTreeIter *iter);"
gtk;gtk_tree_store_iter_is_valid;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"gboolean gtk_tree_store_iter_is_valid (GtkTreeStore *tree_store, GtkTreeIter *iter);"
gtk;gtk_tree_store_move_after;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_move_after (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *position);"
gtk;gtk_tree_store_move_before;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_move_before (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *position);"
gtk;gtk_tree_store_newv;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"GtkTreeStore *gtk_tree_store_newv (gint n_columns, GType *types);"
gtk;gtk_tree_store_prepend;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_prepend (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent);"
gtk;gtk_tree_store_remove;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"gboolean gtk_tree_store_remove (GtkTreeStore *tree_store, GtkTreeIter *iter);"
gtk;gtk_tree_store_reorder;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_reorder (GtkTreeStore *tree_store, GtkTreeIter *parent, gint *new_order);"
gtk;gtk_tree_store_set_column_types;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_set_column_types (GtkTreeStore *tree_store, gint n_columns, GType *types);"
gtk;gtk_tree_store_set_valist;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_set_valist (GtkTreeStore *tree_store, GtkTreeIter *iter, va_list var_args);"
gtk;gtk_tree_store_set_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;" void gtk_tree_store_set_value (GtkTreeStore *tree_store, GtkTreeIter *iter, gint column, GValue *value);"
gtk;gtk_tree_store_set_valuesv;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_set_valuesv (GtkTreeStore *tree_store, GtkTreeIter *iter, gint *columns, GValue *values, gint n_values);"
gtk;gtk_tree_store_swap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreestore.h;"void gtk_tree_store_swap (GtkTreeStore *tree_store, GtkTreeIter *a, GtkTreeIter *b);"
gtk;gtk_tree_unselect_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"void gtk_tree_unselect_child (GtkTree *tree, GtkWidget *tree_item);"
gtk;gtk_tree_unselect_item;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktree.h;"void gtk_tree_unselect_item (GtkTree *tree, gint item);"
gtk;gtk_tree_view_append_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" gint gtk_tree_view_append_column (GtkTreeView *tree_view, GtkTreeViewColumn *column);"
gtk;gtk_tree_view_collapse_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_collapse_all (GtkTreeView *tree_view);"
gtk;gtk_tree_view_collapse_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_collapse_row (GtkTreeView *tree_view, GtkTreePath *path);"
gtk;gtk_tree_view_column_add_attribute;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;" void gtk_tree_view_column_add_attribute (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, const gchar *attribute, gint column);"
gtk;gtk_tree_view_column_cell_get_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gboolean gtk_tree_view_column_cell_get_position (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, gint *start_pos, gint *width);"
gtk;gtk_tree_view_column_cell_get_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_cell_get_size (GtkTreeViewColumn *tree_column, const GdkRectangle *cell_area, gint *x_offset, gint *y_offset, gint *width, gint *height);"
gtk;gtk_tree_view_column_cell_is_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gboolean gtk_tree_view_column_cell_is_visible (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_cell_set_cell_data;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;" void gtk_tree_view_column_cell_set_cell_data (GtkTreeViewColumn *tree_column, GtkTreeModel *tree_model, GtkTreeIter *iter, gboolean is_expander, gboolean is_expanded);"
gtk;gtk_tree_view_column_clear;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_clear (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_clear_attributes;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_clear_attributes (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer);"
gtk;gtk_tree_view_column_clicked;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_clicked (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_focus_cell;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_focus_cell (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell);"
gtk;gtk_tree_view_column_get_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gfloat gtk_tree_view_column_get_alignment (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_cell_renderers;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;" GList *gtk_tree_view_column_get_cell_renderers (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_clickable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gboolean gtk_tree_view_column_get_clickable (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_expand;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gboolean gtk_tree_view_column_get_expand (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_fixed_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gint gtk_tree_view_column_get_fixed_width (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_max_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gint gtk_tree_view_column_get_max_width (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_min_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gint gtk_tree_view_column_get_min_width (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_reorderable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gboolean gtk_tree_view_column_get_reorderable (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_resizable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gboolean gtk_tree_view_column_get_resizable (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_sizing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_sort_column_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gint gtk_tree_view_column_get_sort_column_id (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_sort_indicator;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gboolean gtk_tree_view_column_get_sort_indicator (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_sort_order;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"GtkSortType gtk_tree_view_column_get_sort_order (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gint gtk_tree_view_column_get_spacing (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"const gchar * gtk_tree_view_column_get_title (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_tree_view;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"GtkWidget *gtk_tree_view_column_get_tree_view (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"  GType gtk_tree_view_column_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_view_column_get_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gboolean gtk_tree_view_column_get_visible (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"GtkWidget *gtk_tree_view_column_get_widget (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_get_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"gint gtk_tree_view_column_get_width (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"GtkTreeViewColumn *gtk_tree_view_column_new (void);"
gtk;gtk_tree_view_column_pack_end;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_pack_end (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, gboolean expand);"
gtk;gtk_tree_view_column_pack_start;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_pack_start (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, gboolean expand);"
gtk;gtk_tree_view_column_queue_resize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_queue_resize (GtkTreeViewColumn *tree_column);"
gtk;gtk_tree_view_column_set_alignment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_alignment (GtkTreeViewColumn *tree_column, gfloat xalign);"
gtk;gtk_tree_view_column_set_cell_data_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_cell_data_func (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, GtkTreeCellDataFunc func, gpointer func_data, GDestroyNotify destroy);"
gtk;gtk_tree_view_column_set_clickable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_clickable (GtkTreeViewColumn *tree_column, gboolean clickable);"
gtk;gtk_tree_view_column_set_expand;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_expand (GtkTreeViewColumn *tree_column, gboolean expand);"
gtk;gtk_tree_view_column_set_fixed_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_fixed_width (GtkTreeViewColumn *tree_column, gint fixed_width);"
gtk;gtk_tree_view_column_set_max_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_max_width (GtkTreeViewColumn *tree_column, gint max_width);"
gtk;gtk_tree_view_column_set_min_width;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_min_width (GtkTreeViewColumn *tree_column, gint min_width);"
gtk;gtk_tree_view_column_set_reorderable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_reorderable (GtkTreeViewColumn *tree_column, gboolean reorderable);"
gtk;gtk_tree_view_column_set_resizable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_resizable (GtkTreeViewColumn *tree_column, gboolean resizable);"
gtk;gtk_tree_view_column_set_sizing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_sizing (GtkTreeViewColumn *tree_column, GtkTreeViewColumnSizing type);"
gtk;gtk_tree_view_column_set_sort_column_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;" void gtk_tree_view_column_set_sort_column_id (GtkTreeViewColumn *tree_column, gint sort_column_id);"
gtk;gtk_tree_view_column_set_sort_indicator;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_sort_indicator (GtkTreeViewColumn *tree_column, gboolean setting);"
gtk;gtk_tree_view_column_set_sort_order;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_sort_order (GtkTreeViewColumn *tree_column, GtkSortType order);"
gtk;gtk_tree_view_column_set_spacing;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_spacing (GtkTreeViewColumn *tree_column, gint spacing);"
gtk;gtk_tree_view_column_set_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;" void gtk_tree_view_column_set_title (GtkTreeViewColumn *tree_column, const gchar *title);"
gtk;gtk_tree_view_column_set_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_visible (GtkTreeViewColumn *tree_column, gboolean visible);"
gtk;gtk_tree_view_column_set_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h;"void gtk_tree_view_column_set_widget (GtkTreeViewColumn *tree_column, GtkWidget *widget);"
gtk;gtk_tree_view_column_sizing_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_tree_view_column_sizing_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_view_columns_autosize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_columns_autosize (GtkTreeView *tree_view);"
gtk;gtk_tree_view_convert_bin_window_to_tree_coords;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_convert_bin_window_to_tree_coords (GtkTreeView *tree_view, gint bx, gint by, gint *tx, gint *ty);"
gtk;gtk_tree_view_convert_bin_window_to_widget_coords;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_convert_bin_window_to_widget_coords (GtkTreeView *tree_view, gint bx, gint by, gint *wx, gint *wy);"
gtk;gtk_tree_view_convert_tree_to_bin_window_coords;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_convert_tree_to_bin_window_coords (GtkTreeView *tree_view, gint tx, gint ty, gint *bx, gint *by);"
gtk;gtk_tree_view_convert_tree_to_widget_coords;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_convert_tree_to_widget_coords (GtkTreeView *tree_view, gint tx, gint ty, gint *wx, gint *wy);"
gtk;gtk_tree_view_convert_widget_to_bin_window_coords;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_convert_widget_to_bin_window_coords (GtkTreeView *tree_view, gint wx, gint wy, gint *bx, gint *by);"
gtk;gtk_tree_view_convert_widget_to_tree_coords;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" void gtk_tree_view_convert_widget_to_tree_coords (GtkTreeView *tree_view, gint wx, gint wy, gint *tx, gint *ty);"
gtk;gtk_tree_view_create_row_drag_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"GdkPixmap *gtk_tree_view_create_row_drag_icon (GtkTreeView *tree_view, GtkTreePath *path);"
gtk;gtk_tree_view_drop_position_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_tree_view_drop_position_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_view_enable_model_drag_dest;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_enable_model_drag_dest (GtkTreeView *tree_view, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions);"
gtk;gtk_tree_view_enable_model_drag_source;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" void gtk_tree_view_enable_model_drag_source (GtkTreeView *tree_view, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions);"
gtk;gtk_tree_view_expand_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_expand_all (GtkTreeView *tree_view);"
gtk;gtk_tree_view_expand_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_expand_row (GtkTreeView *tree_view, GtkTreePath *path, gboolean open_all);"
gtk;gtk_tree_view_expand_to_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_expand_to_path (GtkTreeView *tree_view, GtkTreePath *path);"
gtk;gtk_tree_view_get_background_area;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_get_background_area (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, GdkRectangle *rect);"
gtk;gtk_tree_view_get_bin_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" GdkWindow *gtk_tree_view_get_bin_window (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_cell_area;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_get_cell_area (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, GdkRectangle *rect);"
gtk;gtk_tree_view_get_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"GtkTreeViewColumn *gtk_tree_view_get_column (GtkTreeView *tree_view, gint n);"
gtk;gtk_tree_view_get_columns;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"GList *gtk_tree_view_get_columns (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_cursor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_get_cursor (GtkTreeView *tree_view, GtkTreePath **path, GtkTreeViewColumn **focus_column);"
gtk;gtk_tree_view_get_dest_row_at_pos;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_dest_row_at_pos (GtkTreeView *tree_view, gint drag_x, gint drag_y, GtkTreePath **path, GtkTreeViewDropPosition *pos);"
gtk;gtk_tree_view_get_drag_dest_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_get_drag_dest_row (GtkTreeView *tree_view, GtkTreePath **path, GtkTreeViewDropPosition *pos);"
gtk;gtk_tree_view_get_enable_search;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_enable_search (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_enable_tree_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_enable_tree_lines (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_expander_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"GtkTreeViewColumn *gtk_tree_view_get_expander_column (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_fixed_height_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_fixed_height_mode (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_grid_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" GtkTreeViewGridLines gtk_tree_view_get_grid_lines (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"GtkAdjustment *gtk_tree_view_get_hadjustment (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_headers_clickable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_headers_clickable (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_headers_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_headers_visible (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_hover_expand;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_hover_expand (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_hover_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_hover_selection (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_level_indentation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gint gtk_tree_view_get_level_indentation (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" GtkTreeModel *gtk_tree_view_get_model (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_path_at_pos;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_path_at_pos (GtkTreeView *tree_view, gint x, gint y, GtkTreePath **path, GtkTreeViewColumn **column, gint *cell_x, gint *cell_y);"
gtk;gtk_tree_view_get_reorderable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_reorderable (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_row_separator_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" GtkTreeViewRowSeparatorFunc gtk_tree_view_get_row_separator_func (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_rubber_banding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_rubber_banding (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_rules_hint;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_rules_hint (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_search_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gint gtk_tree_view_get_search_column (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_search_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" GtkEntry *gtk_tree_view_get_search_entry (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_search_equal_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_search_position_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"GtkTreeViewSearchPositionFunc gtk_tree_view_get_search_position_func (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"GtkTreeSelection *gtk_tree_view_get_selection (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_show_expanders;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_show_expanders (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_tooltip_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gint gtk_tree_view_get_tooltip_column (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_tooltip_context;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_get_tooltip_context(GtkTreeView *tree_view, gint *x, gint *y, gboolean keyboard_tip, GtkTreeModel **model, GtkTreePath **path, GtkTreeIter *iter);"
gtk;gtk_tree_view_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"  GType gtk_tree_view_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_view_get_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"GtkAdjustment *gtk_tree_view_get_vadjustment (GtkTreeView *tree_view);"
gtk;gtk_tree_view_get_visible_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" gboolean gtk_tree_view_get_visible_range (GtkTreeView *tree_view, GtkTreePath **start_path, GtkTreePath **end_path);"
gtk;gtk_tree_view_get_visible_rect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_get_visible_rect (GtkTreeView *tree_view, GdkRectangle *visible_rect);"
gtk;gtk_tree_view_grid_lines_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_tree_view_grid_lines_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_view_insert_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gint gtk_tree_view_insert_column (GtkTreeView *tree_view, GtkTreeViewColumn *column, gint position);"
gtk;gtk_tree_view_insert_column_with_data_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gint gtk_tree_view_insert_column_with_data_func (GtkTreeView *tree_view, gint position, const gchar *title, GtkCellRenderer *cell, GtkTreeCellDataFunc func, gpointer data, GDestroyNotify dnotify);"
gtk;gtk_tree_view_is_rubber_banding_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" gboolean gtk_tree_view_is_rubber_banding_active (GtkTreeView *tree_view);"
gtk;gtk_tree_view_map_expanded_rows;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_map_expanded_rows (GtkTreeView *tree_view, GtkTreeViewMappingFunc func, gpointer data);"
gtk;gtk_tree_view_mode_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_tree_view_mode_get_type (void) G_GNUC_CONST;"
gtk;gtk_tree_view_move_column_after;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_move_column_after (GtkTreeView *tree_view, GtkTreeViewColumn *column, GtkTreeViewColumn *base_column);"
gtk;gtk_tree_view_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"GtkWidget *gtk_tree_view_new (void);"
gtk;gtk_tree_view_new_with_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"GtkWidget *gtk_tree_view_new_with_model (GtkTreeModel *model);"
gtk;gtk_tree_view_remove_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gint gtk_tree_view_remove_column (GtkTreeView *tree_view, GtkTreeViewColumn *column);"
gtk;gtk_tree_view_row_activated;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_row_activated (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column);"
gtk;gtk_tree_view_row_expanded;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"gboolean gtk_tree_view_row_expanded (GtkTreeView *tree_view, GtkTreePath *path);"
gtk;gtk_tree_view_scroll_to_cell;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_scroll_to_cell (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, gboolean use_align, gfloat row_align, gfloat col_align);"
gtk;gtk_tree_view_scroll_to_point;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" void gtk_tree_view_scroll_to_point (GtkTreeView *tree_view, gint tree_x, gint tree_y);"
gtk;gtk_tree_view_set_column_drag_function;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_column_drag_function (GtkTreeView *tree_view, GtkTreeViewColumnDropFunc func, gpointer user_data, GDestroyNotify destroy);"
gtk;gtk_tree_view_set_cursor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_cursor (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *focus_column, gboolean start_editing);"
gtk;gtk_tree_view_set_cursor_on_cell;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_cursor_on_cell (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *focus_column, GtkCellRenderer *focus_cell, gboolean start_editing);"
gtk;gtk_tree_view_set_destroy_count_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" void gtk_tree_view_set_destroy_count_func (GtkTreeView *tree_view, GtkTreeDestroyCountFunc func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_tree_view_set_drag_dest_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" void gtk_tree_view_set_drag_dest_row (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewDropPosition pos);"
gtk;gtk_tree_view_set_enable_search;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" void gtk_tree_view_set_enable_search (GtkTreeView *tree_view, gboolean enable_search);"
gtk;gtk_tree_view_set_enable_tree_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_enable_tree_lines (GtkTreeView *tree_view, gboolean enabled);"
gtk;gtk_tree_view_set_expander_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_expander_column (GtkTreeView *tree_view, GtkTreeViewColumn *column);"
gtk;gtk_tree_view_set_fixed_height_mode;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" void gtk_tree_view_set_fixed_height_mode (GtkTreeView *tree_view, gboolean enable);"
gtk;gtk_tree_view_set_grid_lines;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_grid_lines (GtkTreeView *tree_view, GtkTreeViewGridLines grid_lines);"
gtk;gtk_tree_view_set_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_hadjustment (GtkTreeView *tree_view, GtkAdjustment *adjustment);"
gtk;gtk_tree_view_set_headers_clickable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_headers_clickable (GtkTreeView *tree_view, gboolean setting);"
gtk;gtk_tree_view_set_headers_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_headers_visible (GtkTreeView *tree_view, gboolean headers_visible);"
gtk;gtk_tree_view_set_hover_expand;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_hover_expand (GtkTreeView *tree_view, gboolean expand);"
gtk;gtk_tree_view_set_hover_selection;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_hover_selection (GtkTreeView *tree_view, gboolean hover);"
gtk;gtk_tree_view_set_level_indentation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_level_indentation (GtkTreeView *tree_view, gint indentation);"
gtk;gtk_tree_view_set_model;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_model (GtkTreeView *tree_view, GtkTreeModel *model);"
gtk;gtk_tree_view_set_reorderable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_reorderable (GtkTreeView *tree_view, gboolean reorderable);"
gtk;gtk_tree_view_set_row_separator_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_row_separator_func (GtkTreeView *tree_view, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_tree_view_set_rubber_banding;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_rubber_banding (GtkTreeView *tree_view, gboolean enable);"
gtk;gtk_tree_view_set_rules_hint;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_rules_hint (GtkTreeView *tree_view, gboolean setting);"
gtk;gtk_tree_view_set_search_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_search_column (GtkTreeView *tree_view, gint column);"
gtk;gtk_tree_view_set_search_entry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_search_entry (GtkTreeView *tree_view, GtkEntry *entry);"
gtk;gtk_tree_view_set_search_equal_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_search_equal_func (GtkTreeView *tree_view, GtkTreeViewSearchEqualFunc search_equal_func, gpointer search_user_data, GDestroyNotify search_destroy);"
gtk;gtk_tree_view_set_search_position_func;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_search_position_func (GtkTreeView *tree_view, GtkTreeViewSearchPositionFunc func, gpointer data, GDestroyNotify destroy);"
gtk;gtk_tree_view_set_show_expanders;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_show_expanders (GtkTreeView *tree_view, gboolean enabled);"
gtk;gtk_tree_view_set_tooltip_cell;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_tooltip_cell (GtkTreeView *tree_view, GtkTooltip *tooltip, GtkTreePath *path, GtkTreeViewColumn *column, GtkCellRenderer *cell);"
gtk;gtk_tree_view_set_tooltip_column;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_tooltip_column (GtkTreeView *tree_view, gint column);"
gtk;gtk_tree_view_set_tooltip_row;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" void gtk_tree_view_set_tooltip_row (GtkTreeView *tree_view, GtkTooltip *tooltip, GtkTreePath *path);"
gtk;gtk_tree_view_set_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_set_vadjustment (GtkTreeView *tree_view, GtkAdjustment *adjustment);"
gtk;gtk_tree_view_tree_to_widget_coords;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_tree_to_widget_coords (GtkTreeView *tree_view, gint tx, gint ty, gint *wx, gint *wy);"
gtk;gtk_tree_view_unset_rows_drag_dest;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_unset_rows_drag_dest (GtkTreeView *tree_view);"
gtk;gtk_tree_view_unset_rows_drag_source;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;"void gtk_tree_view_unset_rows_drag_source (GtkTreeView *tree_view);"
gtk;gtk_tree_view_widget_to_tree_coords;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktreeview.h;" void gtk_tree_view_widget_to_tree_coords (GtkTreeView *tree_view, gint wx, gint wy, gint *tx, gint *ty);"
gtk;gtk_true;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkmain.h;" gboolean gtk_true (void) G_GNUC_CONST;"
gtk;gtk_type_class;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypeutils.h;"gpointer gtk_type_class (GtkType type);"
gtk;gtk_type_enum_find_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypeutils.h;"GtkEnumValue* gtk_type_enum_find_value (GtkType enum_type, const gchar *value_name);"
gtk;gtk_type_enum_get_values;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypeutils.h;" GtkEnumValue* gtk_type_enum_get_values (GtkType enum_type);"
gtk;gtk_type_flags_find_value;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypeutils.h;"GtkFlagValue* gtk_type_flags_find_value (GtkType flags_type, const gchar *value_name);"
gtk;gtk_type_flags_get_values;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypeutils.h;"GtkFlagValue* gtk_type_flags_get_values (GtkType flags_type);"
gtk;gtk_type_init;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypeutils.h;" void gtk_type_init (GTypeDebugFlags debug_flags);"
gtk;gtk_type_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypeutils.h;"gpointer gtk_type_new (GtkType type);"
gtk;gtk_type_unique;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypeutils.h;"GtkType gtk_type_unique (GtkType parent_type, const GtkTypeInfo *gtkinfo);"
gtk;gtk_ui_manager_add_ui;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"void gtk_ui_manager_add_ui (GtkUIManager *self, guint merge_id, const gchar *path, const gchar *name, const gchar *action, GtkUIManagerItemType type, gboolean top);"
gtk;gtk_ui_manager_add_ui_from_string;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"guint gtk_ui_manager_add_ui_from_string (GtkUIManager *self, const gchar *buffer, gssize length, GError **error);"
gtk;gtk_ui_manager_ensure_update;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"void gtk_ui_manager_ensure_update (GtkUIManager *self);"
gtk;gtk_ui_manager_get_accel_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"GtkAccelGroup *gtk_ui_manager_get_accel_group (GtkUIManager *self);"
gtk;gtk_ui_manager_get_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"GtkAction *gtk_ui_manager_get_action (GtkUIManager *self, const gchar *path);"
gtk;gtk_ui_manager_get_action_groups;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"GList *gtk_ui_manager_get_action_groups (GtkUIManager *self);"
gtk;gtk_ui_manager_get_add_tearoffs;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"gboolean gtk_ui_manager_get_add_tearoffs (GtkUIManager *self);"
gtk;gtk_ui_manager_get_toplevels;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"GSList *gtk_ui_manager_get_toplevels (GtkUIManager *self, GtkUIManagerItemType types);"
gtk;gtk_ui_manager_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"  GType gtk_ui_manager_get_type (void) G_GNUC_CONST;"
gtk;gtk_ui_manager_get_ui;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"gchar *gtk_ui_manager_get_ui (GtkUIManager *self);"
gtk;gtk_ui_manager_get_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"GtkWidget *gtk_ui_manager_get_widget (GtkUIManager *self, const gchar *path);"
gtk;gtk_ui_manager_insert_action_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"void gtk_ui_manager_insert_action_group (GtkUIManager *self, GtkActionGroup *action_group, gint pos);"
gtk;gtk_ui_manager_item_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_ui_manager_item_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_ui_manager_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"GtkUIManager *gtk_ui_manager_new (void);"
gtk;gtk_ui_manager_new_merge_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"guint gtk_ui_manager_new_merge_id (GtkUIManager *self);"
gtk;gtk_ui_manager_remove_action_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"void gtk_ui_manager_remove_action_group (GtkUIManager *self, GtkActionGroup *action_group);"
gtk;gtk_ui_manager_remove_ui;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"void gtk_ui_manager_remove_ui (GtkUIManager *self, guint merge_id);"
gtk;gtk_ui_manager_set_add_tearoffs;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"void gtk_ui_manager_set_add_tearoffs (GtkUIManager *self, gboolean add_tearoffs);"
gtk;gtk_unit_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_unit_get_type (void) G_GNUC_CONST;"
gtk;gtk_update_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_update_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_vbox_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvbox.h;"  GType gtk_vbox_get_type (void) G_GNUC_CONST;"
gtk;gtk_vbox_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvbox.h;"GtkWidget * gtk_vbox_new (gboolean homogeneous, gint spacing);"
gtk;gtk_vbutton_box_get_layout_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvbbox.h;" GtkButtonBoxStyle gtk_vbutton_box_get_layout_default (void);"
gtk;gtk_vbutton_box_get_spacing_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvbbox.h;" gint gtk_vbutton_box_get_spacing_default (void);"
gtk;gtk_vbutton_box_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvbbox.h;"  GType gtk_vbutton_box_get_type (void) G_GNUC_CONST;"
gtk;gtk_vbutton_box_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvbbox.h;"GtkWidget *gtk_vbutton_box_new (void);"
gtk;gtk_vbutton_box_set_layout_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvbbox.h;"void gtk_vbutton_box_set_layout_default (GtkButtonBoxStyle layout);"
gtk;gtk_vbutton_box_set_spacing_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvbbox.h;"void gtk_vbutton_box_set_spacing_default (gint spacing);"
gtk;gtk_viewport_get_bin_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkviewport.h;"GdkWindow* gtk_viewport_get_bin_window (GtkViewport *viewport);"
gtk;gtk_viewport_get_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkviewport.h;"GtkAdjustment* gtk_viewport_get_hadjustment (GtkViewport *viewport);"
gtk;gtk_viewport_get_shadow_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkviewport.h;"GtkShadowType gtk_viewport_get_shadow_type (GtkViewport *viewport);"
gtk;gtk_viewport_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkviewport.h;"  GType gtk_viewport_get_type (void) G_GNUC_CONST;"
gtk;gtk_viewport_get_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkviewport.h;"GtkAdjustment* gtk_viewport_get_vadjustment (GtkViewport *viewport);"
gtk;gtk_viewport_get_view_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkviewport.h;"GdkWindow* gtk_viewport_get_view_window (GtkViewport *viewport);"
gtk;gtk_viewport_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkviewport.h;"GtkWidget* gtk_viewport_new (GtkAdjustment *hadjustment, GtkAdjustment *vadjustment);"
gtk;gtk_viewport_set_hadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkviewport.h;"void gtk_viewport_set_hadjustment (GtkViewport *viewport, GtkAdjustment *adjustment);"
gtk;gtk_viewport_set_shadow_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkviewport.h;"void gtk_viewport_set_shadow_type (GtkViewport *viewport, GtkShadowType type);"
gtk;gtk_viewport_set_vadjustment;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkviewport.h;"void gtk_viewport_set_vadjustment (GtkViewport *viewport, GtkAdjustment *adjustment);"
gtk;gtk_visibility_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_visibility_get_type (void) G_GNUC_CONST;"
gtk;gtk_volume_button_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvolumebutton.h;"  GType gtk_volume_button_get_type (void) G_GNUC_CONST;"
gtk;gtk_volume_button_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvolumebutton.h;"GtkWidget* gtk_volume_button_new (void);"
gtk;gtk_vpaned_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvpaned.h;"  GType gtk_vpaned_get_type (void) G_GNUC_CONST;"
gtk;gtk_vpaned_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvpaned.h;"GtkWidget * gtk_vpaned_new (void);"
gtk;gtk_vruler_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvruler.h;"  GType gtk_vruler_get_type (void) G_GNUC_CONST;"
gtk;gtk_vruler_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvruler.h;"GtkWidget* gtk_vruler_new (void);"
gtk;gtk_vscale_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvscale.h;"  GType gtk_vscale_get_type (void) G_GNUC_CONST;"
gtk;gtk_vscale_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvscale.h;"GtkWidget* gtk_vscale_new (GtkAdjustment *adjustment);"
gtk;gtk_vscale_new_with_range;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvscale.h;"GtkWidget* gtk_vscale_new_with_range (gdouble min, gdouble max, gdouble step);"
gtk;gtk_vscrollbar_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvscrollbar.h;"  GType gtk_vscrollbar_get_type (void) G_GNUC_CONST;"
gtk;gtk_vscrollbar_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvscrollbar.h;"GtkWidget* gtk_vscrollbar_new (GtkAdjustment *adjustment);"
gtk;gtk_vseparator_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvseparator.h;"  GType gtk_vseparator_get_type (void) G_GNUC_CONST;"
gtk;gtk_vseparator_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkvseparator.h;"GtkWidget* gtk_vseparator_new (void);"
gtk;gtk_widget_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" gboolean gtk_widget_activate (GtkWidget *widget);"
gtk;gtk_widget_add_accelerator;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_add_accelerator (GtkWidget *widget, const gchar *accel_signal, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags);"
gtk;gtk_widget_add_events;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_add_events (GtkWidget *widget, gint events);"
gtk;gtk_widget_add_mnemonic_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_add_mnemonic_label (GtkWidget *widget, GtkWidget *label);"
gtk;gtk_widget_can_activate_accel;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_can_activate_accel (GtkWidget *widget, guint signal_id);"
gtk;gtk_widget_child_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" gboolean gtk_widget_child_focus (GtkWidget *widget, GtkDirectionType direction);"
gtk;gtk_widget_child_notify;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_child_notify (GtkWidget *widget, const gchar *child_property);"
gtk;gtk_widget_class_find_style_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GParamSpec* gtk_widget_class_find_style_property (GtkWidgetClass *klass, const gchar *property_name);"
gtk;gtk_widget_class_install_style_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_class_install_style_property (GtkWidgetClass *klass, GParamSpec *pspec);"
gtk;gtk_widget_class_install_style_property_parser;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_class_install_style_property_parser (GtkWidgetClass *klass, GParamSpec *pspec, GtkRcPropertyParser parser);"
gtk;gtk_widget_class_list_style_properties;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GParamSpec** gtk_widget_class_list_style_properties (GtkWidgetClass *klass, guint *n_properties);"
gtk;gtk_widget_class_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_class_path (GtkWidget *widget, guint *path_length, gchar **path, gchar **path_reversed);"
gtk;gtk_widget_create_pango_context;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" PangoContext *gtk_widget_create_pango_context (GtkWidget *widget);"
gtk;gtk_widget_create_pango_layout;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"PangoLayout *gtk_widget_create_pango_layout (GtkWidget *widget, const gchar *text);"
gtk;gtk_widget_destroy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_destroy (GtkWidget *widget);"
gtk;gtk_widget_destroyed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_destroyed (GtkWidget *widget, GtkWidget **widget_pointer);"
gtk;gtk_widget_draw;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_draw (GtkWidget *widget, const GdkRectangle *area);"
gtk;gtk_widget_ensure_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_ensure_style (GtkWidget *widget);"
gtk;gtk_widget_error_bell;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_error_bell (GtkWidget *widget);"
gtk;gtk_widget_event;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_event (GtkWidget *widget, GdkEvent *event);"
gtk;gtk_widget_flags_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_widget_flags_get_type (void) G_GNUC_CONST;"
gtk;gtk_widget_freeze_child_notify;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_freeze_child_notify (GtkWidget *widget);"
gtk;gtk_widget_get_accessible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" AtkObject* gtk_widget_get_accessible (GtkWidget *widget);"
gtk;gtk_widget_get_action;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkaction.h;" GtkAction *gtk_widget_get_action (GtkWidget *widget);"
gtk;gtk_widget_get_allocation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_get_allocation (GtkWidget *widget, GtkAllocation *allocation);"
gtk;gtk_widget_get_ancestor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkWidget* gtk_widget_get_ancestor (GtkWidget *widget, GType widget_type);"
gtk;gtk_widget_get_app_paintable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_app_paintable (GtkWidget *widget);"
gtk;gtk_widget_get_can_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_can_default (GtkWidget *widget);"
gtk;gtk_widget_get_can_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_can_focus (GtkWidget *widget);"
gtk;gtk_widget_get_child_requisition;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_get_child_requisition (GtkWidget *widget, GtkRequisition *requisition);"
gtk;gtk_widget_get_child_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_child_visible (GtkWidget *widget);"
gtk;gtk_widget_get_clipboard;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkClipboard *gtk_widget_get_clipboard (GtkWidget *widget, GdkAtom selection);"
gtk;gtk_widget_get_colormap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GdkColormap* gtk_widget_get_colormap (GtkWidget *widget);"
gtk;gtk_widget_get_composite_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gchar* gtk_widget_get_composite_name (GtkWidget *widget);"
gtk;gtk_widget_get_default_colormap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" GdkColormap* gtk_widget_get_default_colormap (void);"
gtk;gtk_widget_get_default_direction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkTextDirection gtk_widget_get_default_direction (void);"
gtk;gtk_widget_get_default_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkStyle* gtk_widget_get_default_style (void);"
gtk;gtk_widget_get_default_visual;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GdkVisual* gtk_widget_get_default_visual (void);"
gtk;gtk_widget_get_direction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkTextDirection gtk_widget_get_direction (GtkWidget *widget);"
gtk;gtk_widget_get_display;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GdkDisplay * gtk_widget_get_display (GtkWidget *widget);"
gtk;gtk_widget_get_double_buffered;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_double_buffered (GtkWidget *widget);"
gtk;gtk_widget_get_events;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" gint gtk_widget_get_events (GtkWidget *widget);"
gtk;gtk_widget_get_extension_events;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" GdkExtensionMode gtk_widget_get_extension_events (GtkWidget *widget);"
gtk;gtk_widget_get_has_tooltip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_has_tooltip (GtkWidget *widget);"
gtk;gtk_widget_get_has_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_has_window (GtkWidget *widget);"
gtk;gtk_widget_get_mapped;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_mapped (GtkWidget *widget);"
gtk;gtk_widget_get_modifier_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkRcStyle *gtk_widget_get_modifier_style (GtkWidget *widget);"
gtk;gtk_widget_get_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"const gchar* gtk_widget_get_name (GtkWidget *widget);"
gtk;gtk_widget_get_no_show_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_no_show_all (GtkWidget *widget);"
gtk;gtk_widget_get_pango_context;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"PangoContext *gtk_widget_get_pango_context (GtkWidget *widget);"
gtk;gtk_widget_get_parent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkWidget * gtk_widget_get_parent (GtkWidget *widget);"
gtk;gtk_widget_get_parent_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GdkWindow * gtk_widget_get_parent_window (GtkWidget *widget);"
gtk;gtk_widget_get_pointer;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_get_pointer (GtkWidget *widget, gint *x, gint *y);"
gtk;gtk_widget_get_realized;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_realized (GtkWidget *widget);"
gtk;gtk_widget_get_receives_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_receives_default (GtkWidget *widget);"
gtk;gtk_widget_get_requisition;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_get_requisition (GtkWidget *widget, GtkRequisition *requisition);"
gtk;gtk_widget_get_root_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GdkWindow * gtk_widget_get_root_window (GtkWidget *widget);"
gtk;gtk_widget_get_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" GdkScreen * gtk_widget_get_screen (GtkWidget *widget);"
gtk;gtk_widget_get_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_sensitive (GtkWidget *widget);"
gtk;gtk_widget_get_settings;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkSettings* gtk_widget_get_settings (GtkWidget *widget);"
gtk;gtk_widget_get_size_request;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_get_size_request (GtkWidget *widget, gint *width, gint *height);"
gtk;gtk_widget_get_snapshot;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GdkPixmap * gtk_widget_get_snapshot (GtkWidget *widget, GdkRectangle *clip_rect);"
gtk;gtk_widget_get_state;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkStateType gtk_widget_get_state (GtkWidget *widget);"
gtk;gtk_widget_get_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkStyle * gtk_widget_get_style (GtkWidget *widget);"
gtk;gtk_widget_get_tooltip_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gchar * gtk_widget_get_tooltip_markup (GtkWidget *widget);"
gtk;gtk_widget_get_tooltip_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gchar * gtk_widget_get_tooltip_text (GtkWidget *widget);"
gtk;gtk_widget_get_tooltip_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkWindow *gtk_widget_get_tooltip_window (GtkWidget *widget);"
gtk;gtk_widget_get_toplevel;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GtkWidget* gtk_widget_get_toplevel (GtkWidget *widget);"
gtk;gtk_widget_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"  GType gtk_widget_get_type (void) G_GNUC_CONST;"
gtk;gtk_widget_get_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_get_visible (GtkWidget *widget);"
gtk;gtk_widget_get_visual;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GdkVisual* gtk_widget_get_visual (GtkWidget *widget);"
gtk;gtk_widget_get_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GdkWindow * gtk_widget_get_window (GtkWidget *widget);"
gtk;gtk_widget_grab_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_grab_default (GtkWidget *widget);"
gtk;gtk_widget_grab_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_grab_focus (GtkWidget *widget);"
gtk;gtk_widget_has_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_has_default (GtkWidget *widget);"
gtk;gtk_widget_has_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_has_focus (GtkWidget *widget);"
gtk;gtk_widget_has_grab;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" gboolean gtk_widget_has_grab (GtkWidget *widget);"
gtk;gtk_widget_has_rc_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" gboolean gtk_widget_has_rc_style (GtkWidget *widget);"
gtk;gtk_widget_has_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_has_screen (GtkWidget *widget);"
gtk;gtk_widget_help_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_widget_help_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_widget_hide;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_hide (GtkWidget *widget);"
gtk;gtk_widget_hide_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_hide_all (GtkWidget *widget);"
gtk;gtk_widget_hide_on_delete;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" gboolean gtk_widget_hide_on_delete (GtkWidget *widget);"
gtk;gtk_widget_input_shape_combine_mask;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_input_shape_combine_mask (GtkWidget *widget, GdkBitmap *shape_mask, gint offset_x, gint offset_y);"
gtk;gtk_widget_intersect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_intersect (GtkWidget *widget, const GdkRectangle *area, GdkRectangle *intersection);"
gtk;gtk_widget_is_ancestor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" gboolean gtk_widget_is_ancestor (GtkWidget *widget, GtkWidget *ancestor);"
gtk;gtk_widget_is_composited;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" gboolean gtk_widget_is_composited (GtkWidget *widget);"
gtk;gtk_widget_is_drawable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_is_drawable (GtkWidget *widget);"
gtk;gtk_widget_is_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_is_focus (GtkWidget *widget);"
gtk;gtk_widget_is_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_is_sensitive (GtkWidget *widget);"
gtk;gtk_widget_is_toplevel;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" gboolean gtk_widget_is_toplevel (GtkWidget *widget);"
gtk;gtk_widget_keynav_failed;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_keynav_failed (GtkWidget *widget, GtkDirectionType direction);"
gtk;gtk_widget_list_accel_closures;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GList* gtk_widget_list_accel_closures (GtkWidget *widget);"
gtk;gtk_widget_list_mnemonic_labels;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" GList* gtk_widget_list_mnemonic_labels (GtkWidget *widget);"
gtk;gtk_widget_map;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_map (GtkWidget *widget);"
gtk;gtk_widget_mnemonic_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_mnemonic_activate (GtkWidget *widget, gboolean group_cycling);"
gtk;gtk_widget_modify_base;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_modify_base (GtkWidget *widget, GtkStateType state, const GdkColor *color);"
gtk;gtk_widget_modify_bg;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_modify_bg (GtkWidget *widget, GtkStateType state, const GdkColor *color);"
gtk;gtk_widget_modify_cursor;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_modify_cursor (GtkWidget *widget, const GdkColor *primary, const GdkColor *secondary);"
gtk;gtk_widget_modify_fg;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_modify_fg (GtkWidget *widget, GtkStateType state, const GdkColor *color);"
gtk;gtk_widget_modify_font;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_modify_font (GtkWidget *widget, PangoFontDescription *font_desc);"
gtk;gtk_widget_modify_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_modify_style (GtkWidget *widget, GtkRcStyle *style);"
gtk;gtk_widget_modify_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_modify_text (GtkWidget *widget, GtkStateType state, const GdkColor *color);"
gtk;gtk_widget_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_path (GtkWidget *widget, guint *path_length, gchar **path, gchar **path_reversed);"
gtk;gtk_widget_pop_colormap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_pop_colormap (void);"
gtk;gtk_widget_pop_composite_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_pop_composite_child (void);"
gtk;gtk_widget_push_colormap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_push_colormap (GdkColormap *cmap);"
gtk;gtk_widget_push_composite_child;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_push_composite_child (void);"
gtk;gtk_widget_queue_clear;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_queue_clear (GtkWidget *widget);"
gtk;gtk_widget_queue_clear_area;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_queue_clear_area (GtkWidget *widget, gint x, gint y, gint width, gint height);"
gtk;gtk_widget_queue_draw;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_queue_draw (GtkWidget *widget);"
gtk;gtk_widget_queue_draw_area;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_queue_draw_area (GtkWidget *widget, gint x, gint y, gint width, gint height);"
gtk;gtk_widget_queue_resize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_queue_resize (GtkWidget *widget);"
gtk;gtk_widget_queue_resize_no_redraw;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_queue_resize_no_redraw (GtkWidget *widget);"
gtk;gtk_widget_realize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_realize (GtkWidget *widget);"
gtk;gtk_widget_ref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" GtkWidget* gtk_widget_ref (GtkWidget *widget);"
gtk;gtk_widget_region_intersect;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"GdkRegion *gtk_widget_region_intersect (GtkWidget *widget, const GdkRegion *region);"
gtk;gtk_widget_remove_accelerator;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_remove_accelerator (GtkWidget *widget, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods);"
gtk;gtk_widget_remove_mnemonic_label;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_remove_mnemonic_label (GtkWidget *widget, GtkWidget *label);"
gtk;gtk_widget_render_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" GdkPixbuf *gtk_widget_render_icon (GtkWidget *widget, const gchar *stock_id, GtkIconSize size, const gchar *detail);"
gtk;gtk_widget_reparent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_reparent (GtkWidget *widget, GtkWidget *new_parent);"
gtk;gtk_widget_reset_rc_styles;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"  void gtk_widget_reset_rc_styles (GtkWidget *widget);"
gtk;gtk_widget_reset_shapes;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_reset_shapes (GtkWidget *widget);"
gtk;gtk_widget_send_expose;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gint gtk_widget_send_expose (GtkWidget *widget, GdkEvent *event);"
gtk;gtk_widget_send_focus_change;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_send_focus_change (GtkWidget *widget, GdkEvent *event);"
gtk;gtk_widget_set_accel_path;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_set_accel_path (GtkWidget *widget, const gchar *accel_path, GtkAccelGroup *accel_group);"
gtk;gtk_widget_set_allocation;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_set_allocation (GtkWidget *widget, const GtkAllocation *allocation);"
gtk;gtk_widget_set_app_paintable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_app_paintable (GtkWidget *widget, gboolean app_paintable);"
gtk;gtk_widget_set_can_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_can_default (GtkWidget *widget, gboolean can_default);"
gtk;gtk_widget_set_can_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_can_focus (GtkWidget *widget, gboolean can_focus);"
gtk;gtk_widget_set_child_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_child_visible (GtkWidget *widget, gboolean is_visible);"
gtk;gtk_widget_set_colormap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_colormap (GtkWidget *widget, GdkColormap *colormap);"
gtk;gtk_widget_set_composite_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_composite_name (GtkWidget *widget, const gchar *name);"
gtk;gtk_widget_set_default_colormap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_default_colormap (GdkColormap *colormap);"
gtk;gtk_widget_set_default_direction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_default_direction (GtkTextDirection dir);"
gtk;gtk_widget_set_direction;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_direction (GtkWidget *widget, GtkTextDirection dir);"
gtk;gtk_widget_set_double_buffered;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_double_buffered (GtkWidget *widget, gboolean double_buffered);"
gtk;gtk_widget_set_events;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_events (GtkWidget *widget, gint events);"
gtk;gtk_widget_set_extension_events;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_set_extension_events (GtkWidget *widget, GdkExtensionMode mode);"
gtk;gtk_widget_set_has_tooltip;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_set_has_tooltip (GtkWidget *widget, gboolean has_tooltip);"
gtk;gtk_widget_set_has_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_has_window (GtkWidget *widget, gboolean has_window);"
gtk;gtk_widget_set_mapped;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_set_mapped (GtkWidget *widget, gboolean mapped);"
gtk;gtk_widget_set_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_name (GtkWidget *widget, const gchar *name);"
gtk;gtk_widget_set_no_show_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_set_no_show_all (GtkWidget *widget, gboolean no_show_all);"
gtk;gtk_widget_set_parent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_parent (GtkWidget *widget, GtkWidget *parent);"
gtk;gtk_widget_set_parent_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_parent_window (GtkWidget *widget, GdkWindow *parent_window);"
gtk;gtk_widget_set_realized;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_set_realized (GtkWidget *widget, gboolean realized);"
gtk;gtk_widget_set_receives_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_receives_default (GtkWidget *widget, gboolean receives_default);"
gtk;gtk_widget_set_redraw_on_allocate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_redraw_on_allocate (GtkWidget *widget, gboolean redraw_on_allocate);"
gtk;gtk_widget_set_scroll_adjustments;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"gboolean gtk_widget_set_scroll_adjustments (GtkWidget *widget, GtkAdjustment *hadjustment, GtkAdjustment *vadjustment);"
gtk;gtk_widget_set_sensitive;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_sensitive (GtkWidget *widget, gboolean sensitive);"
gtk;gtk_widget_set_size_request;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_size_request (GtkWidget *widget, gint width, gint height);"
gtk;gtk_widget_set_state;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_state (GtkWidget *widget, GtkStateType state);"
gtk;gtk_widget_set_style;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_set_style (GtkWidget *widget, GtkStyle *style);"
gtk;gtk_widget_set_tooltip_markup;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_set_tooltip_markup (GtkWidget *widget, const gchar *markup);"
gtk;gtk_widget_set_tooltip_text;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_set_tooltip_text (GtkWidget *widget, const gchar *text);"
gtk;gtk_widget_set_tooltip_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_tooltip_window (GtkWidget *widget, GtkWindow *custom_window);"
gtk;gtk_widget_set_uposition;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_uposition (GtkWidget *widget, gint x, gint y);"
gtk;gtk_widget_set_usize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_set_usize (GtkWidget *widget, gint width, gint height);"
gtk;gtk_widget_set_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_visible (GtkWidget *widget, gboolean visible);"
gtk;gtk_widget_set_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_set_window (GtkWidget *widget, GdkWindow *window);"
gtk;gtk_widget_shape_combine_mask;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_shape_combine_mask (GtkWidget *widget, GdkBitmap *shape_mask, gint offset_x, gint offset_y);"
gtk;gtk_widget_show;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_show (GtkWidget *widget);"
gtk;gtk_widget_show_all;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_show_all (GtkWidget *widget);"
gtk;gtk_widget_show_now;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_show_now (GtkWidget *widget);"
gtk;gtk_widget_size_allocate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_size_allocate (GtkWidget *widget, GtkAllocation *allocation);"
gtk;gtk_widget_size_request;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_size_request (GtkWidget *widget, GtkRequisition *requisition);"
gtk;gtk_widget_style_attach;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_style_attach (GtkWidget *style);"
gtk;gtk_widget_style_get_property;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_style_get_property (GtkWidget *widget, const gchar *property_name, GValue *value);"
gtk;gtk_widget_style_get_valist;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_style_get_valist (GtkWidget *widget, const gchar *first_property_name, va_list var_args);"
gtk;gtk_widget_thaw_child_notify;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_thaw_child_notify (GtkWidget *widget);"
gtk;gtk_widget_translate_coordinates;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" gboolean gtk_widget_translate_coordinates (GtkWidget *src_widget, GtkWidget *dest_widget, gint src_x, gint src_y, gint *dest_x, gint *dest_y);"
gtk;gtk_widget_trigger_tooltip_query;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_trigger_tooltip_query (GtkWidget *widget);"
gtk;gtk_widget_unmap;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_unmap (GtkWidget *widget);"
gtk;gtk_widget_unparent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void gtk_widget_unparent (GtkWidget *widget);"
gtk;gtk_widget_unrealize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_unrealize (GtkWidget *widget);"
gtk;gtk_widget_unref;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;"void gtk_widget_unref (GtkWidget *widget);"
gtk;gtk_window_activate_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_activate_default (GtkWindow *window);"
gtk;gtk_window_activate_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_activate_focus (GtkWindow *window);"
gtk;gtk_window_activate_key;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" gboolean gtk_window_activate_key (GtkWindow *window, GdkEventKey *event);"
gtk;gtk_window_add_accel_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_add_accel_group (GtkWindow *window, GtkAccelGroup *accel_group);"
gtk;gtk_window_add_embedded_xid;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_add_embedded_xid (GtkWindow *window, GdkNativeWindow xid);"
gtk;gtk_window_add_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_add_mnemonic (GtkWindow *window, guint keyval, GtkWidget *target);"
gtk;gtk_window_begin_move_drag;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_begin_move_drag (GtkWindow *window, gint button, gint root_x, gint root_y, guint32 timestamp);"
gtk;gtk_window_begin_resize_drag;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_begin_resize_drag (GtkWindow *window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp);"
gtk;gtk_window_deiconify;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_deiconify (GtkWindow *window);"
gtk;gtk_window_fullscreen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_fullscreen (GtkWindow *window);"
gtk;gtk_window_get_accept_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_get_accept_focus (GtkWindow *window);"
gtk;gtk_window_get_decorated;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_get_decorated (GtkWindow *window);"
gtk;gtk_window_get_default_icon_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GList* gtk_window_get_default_icon_list (void);"
gtk;gtk_window_get_default_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"const gchar * gtk_window_get_default_icon_name (void);"
gtk;gtk_window_get_default_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_get_default_size (GtkWindow *window, gint *width, gint *height);"
gtk;gtk_window_get_default_widget;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GtkWidget *gtk_window_get_default_widget (GtkWindow *window);"
gtk;gtk_window_get_deletable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_get_deletable (GtkWindow *window);"
gtk;gtk_window_get_destroy_with_parent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_get_destroy_with_parent (GtkWindow *window);"
gtk;gtk_window_get_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GtkWidget *gtk_window_get_focus (GtkWindow *window);"
gtk;gtk_window_get_focus_on_map;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_get_focus_on_map (GtkWindow *window);"
gtk;gtk_window_get_frame_dimensions;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_get_frame_dimensions (GtkWindow *window, gint *left, gint *top, gint *right, gint *bottom);"
gtk;gtk_window_get_gravity;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GdkGravity gtk_window_get_gravity (GtkWindow *window);"
gtk;gtk_window_get_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GtkWindowGroup *gtk_window_get_group (GtkWindow *window);"
gtk;gtk_window_get_has_frame;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_get_has_frame (GtkWindow *window);"
gtk;gtk_window_get_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GdkPixbuf* gtk_window_get_icon (GtkWindow *window);"
gtk;gtk_window_get_icon_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GList* gtk_window_get_icon_list (GtkWindow *window);"
gtk;gtk_window_get_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"const gchar * gtk_window_get_icon_name (GtkWindow *window);"
gtk;gtk_window_get_mnemonic_modifier;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GdkModifierType gtk_window_get_mnemonic_modifier (GtkWindow *window);"
gtk;gtk_window_get_mnemonics_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_get_mnemonics_visible (GtkWindow *window);"
gtk;gtk_window_get_modal;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_get_modal (GtkWindow *window);"
gtk;gtk_window_get_opacity;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gdouble gtk_window_get_opacity (GtkWindow *window);"
gtk;gtk_window_get_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_get_position (GtkWindow *window, gint *root_x, gint *root_y);"
gtk;gtk_window_get_resizable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_get_resizable (GtkWindow *window);"
gtk;gtk_window_get_role;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"const gchar *gtk_window_get_role (GtkWindow *window);"
gtk;gtk_window_get_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GdkScreen* gtk_window_get_screen (GtkWindow *window);"
gtk;gtk_window_get_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_get_size (GtkWindow *window, gint *width, gint *height);"
gtk;gtk_window_get_skip_pager_hint;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_get_skip_pager_hint (GtkWindow *window);"
gtk;gtk_window_get_skip_taskbar_hint;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_get_skip_taskbar_hint (GtkWindow *window);"
gtk;gtk_window_get_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"const gchar *gtk_window_get_title (GtkWindow *window);"
gtk;gtk_window_get_transient_for;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GtkWindow *gtk_window_get_transient_for (GtkWindow *window);"
gtk;gtk_window_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"  GType gtk_window_get_type (void) G_GNUC_CONST;"
gtk;gtk_window_get_type_hint;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GdkWindowTypeHint gtk_window_get_type_hint (GtkWindow *window);"
gtk;gtk_window_get_urgency_hint;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_get_urgency_hint (GtkWindow *window);"
gtk;gtk_window_get_window_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" GtkWindowType gtk_window_get_window_type (GtkWindow *window);"
gtk;gtk_window_group_add_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_group_add_window (GtkWindowGroup *window_group, GtkWindow *window);"
gtk;gtk_window_group_get_current_grab;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GtkWidget *gtk_window_group_get_current_grab (GtkWindowGroup *window_group);"
gtk;gtk_window_group_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" GType gtk_window_group_get_type (void) G_GNUC_CONST;"
gtk;gtk_window_group_list_windows;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GList * gtk_window_group_list_windows (GtkWindowGroup *window_group);"
gtk;gtk_window_group_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" GtkWindowGroup * gtk_window_group_new (void);"
gtk;gtk_window_group_remove_window;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_group_remove_window (GtkWindowGroup *window_group, GtkWindow *window);"
gtk;gtk_window_has_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_has_group (GtkWindow *window);"
gtk;gtk_window_has_toplevel_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_has_toplevel_focus (GtkWindow *window);"
gtk;gtk_window_iconify;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_iconify (GtkWindow *window);"
gtk;gtk_window_is_active;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" gboolean gtk_window_is_active (GtkWindow *window);"
gtk;gtk_window_list_toplevels;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GList* gtk_window_list_toplevels (void);"
gtk;gtk_window_maximize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_maximize (GtkWindow *window);"
gtk;gtk_window_mnemonic_activate;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_mnemonic_activate (GtkWindow *window, guint keyval, GdkModifierType modifier);"
gtk;gtk_window_move;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_move (GtkWindow *window, gint x, gint y);"
gtk;gtk_window_new;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"GtkWidget* gtk_window_new (GtkWindowType type);"
gtk;gtk_window_parse_geometry;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_parse_geometry (GtkWindow *window, const gchar *geometry);"
gtk;gtk_window_position_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_window_position_get_type (void) G_GNUC_CONST;"
gtk;gtk_window_present;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_present (GtkWindow *window);"
gtk;gtk_window_present_with_time;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_present_with_time (GtkWindow *window, guint32 timestamp);"
gtk;gtk_window_propagate_key_event;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_propagate_key_event (GtkWindow *window, GdkEventKey *event);"
gtk;gtk_window_remove_accel_group;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_remove_accel_group (GtkWindow *window, GtkAccelGroup *accel_group);"
gtk;gtk_window_remove_embedded_xid;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_remove_embedded_xid (GtkWindow *window, GdkNativeWindow xid);"
gtk;gtk_window_remove_mnemonic;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_remove_mnemonic (GtkWindow *window, guint keyval, GtkWidget *target);"
gtk;gtk_window_reshow_with_initial_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_reshow_with_initial_size (GtkWindow *window);"
gtk;gtk_window_resize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_resize (GtkWindow *window, gint width, gint height);"
gtk;gtk_window_set_accept_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_accept_focus (GtkWindow *window, gboolean setting);"
gtk;gtk_window_set_auto_startup_notification;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_set_auto_startup_notification (gboolean setting);"
gtk;gtk_window_set_decorated;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_set_decorated (GtkWindow *window, gboolean setting);"
gtk;gtk_window_set_default;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_default (GtkWindow *window, GtkWidget *default_widget);"
gtk;gtk_window_set_default_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_default_icon (GdkPixbuf *icon);"
gtk;gtk_window_set_default_icon_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_default_icon_list (GList *list);"
gtk;gtk_window_set_default_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_default_icon_name (const gchar *name);"
gtk;gtk_window_set_default_size;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_set_default_size (GtkWindow *window, gint width, gint height);"
gtk;gtk_window_set_deletable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_deletable (GtkWindow *window, gboolean setting);"
gtk;gtk_window_set_destroy_with_parent;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_destroy_with_parent (GtkWindow *window, gboolean setting);"
gtk;gtk_window_set_focus;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_focus (GtkWindow *window, GtkWidget *focus);"
gtk;gtk_window_set_focus_on_map;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_focus_on_map (GtkWindow *window, gboolean setting);"
gtk;gtk_window_set_frame_dimensions;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_frame_dimensions (GtkWindow *window, gint left, gint top, gint right, gint bottom);"
gtk;gtk_window_set_geometry_hints;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_set_geometry_hints (GtkWindow *window, GtkWidget *geometry_widget, GdkGeometry *geometry, GdkWindowHints geom_mask);"
gtk;gtk_window_set_gravity;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_set_gravity (GtkWindow *window, GdkGravity gravity);"
gtk;gtk_window_set_has_frame;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_set_has_frame (GtkWindow *window, gboolean setting);"
gtk;gtk_window_set_icon;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_icon (GtkWindow *window, GdkPixbuf *icon);"
gtk;gtk_window_set_icon_list;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_set_icon_list (GtkWindow *window, GList *list);"
gtk;gtk_window_set_icon_name;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_icon_name (GtkWindow *window, const gchar *name);"
gtk;gtk_window_set_keep_above;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_keep_above (GtkWindow *window, gboolean setting);"
gtk;gtk_window_set_keep_below;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_keep_below (GtkWindow *window, gboolean setting);"
gtk;gtk_window_set_mnemonic_modifier;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_mnemonic_modifier (GtkWindow *window, GdkModifierType modifier);"
gtk;gtk_window_set_mnemonics_visible;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_mnemonics_visible (GtkWindow *window, gboolean setting);"
gtk;gtk_window_set_modal;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_set_modal (GtkWindow *window, gboolean modal);"
gtk;gtk_window_set_opacity;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_opacity (GtkWindow *window, gdouble opacity);"
gtk;gtk_window_set_policy;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_set_policy (GtkWindow *window, gint allow_shrink, gint allow_grow, gint auto_shrink);"
gtk;gtk_window_set_position;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_position (GtkWindow *window, GtkWindowPosition position);"
gtk;gtk_window_set_resizable;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_set_resizable (GtkWindow *window, gboolean resizable);"
gtk;gtk_window_set_role;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_role (GtkWindow *window, const gchar *role);"
gtk;gtk_window_set_screen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_set_screen (GtkWindow *window, GdkScreen *screen);"
gtk;gtk_window_set_skip_pager_hint;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_skip_pager_hint (GtkWindow *window, gboolean setting);"
gtk;gtk_window_set_skip_taskbar_hint;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_skip_taskbar_hint (GtkWindow *window, gboolean setting);"
gtk;gtk_window_set_startup_id;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_startup_id (GtkWindow *window, const gchar *startup_id);"
gtk;gtk_window_set_title;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_title (GtkWindow *window, const gchar *title);"
gtk;gtk_window_set_transient_for;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;" void gtk_window_set_transient_for (GtkWindow *window, GtkWindow *parent);"
gtk;gtk_window_set_type_hint;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_type_hint (GtkWindow *window, GdkWindowTypeHint hint);"
gtk;gtk_window_set_urgency_hint;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_urgency_hint (GtkWindow *window, gboolean setting);"
gtk;gtk_window_set_wmclass;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_set_wmclass (GtkWindow *window, const gchar *wmclass_name, const gchar *wmclass_class);"
gtk;gtk_window_stick;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_stick (GtkWindow *window);"
gtk;gtk_window_type_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_window_type_get_type (void) G_GNUC_CONST;"
gtk;gtk_window_unfullscreen;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_unfullscreen (GtkWindow *window);"
gtk;gtk_window_unmaximize;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_unmaximize (GtkWindow *window);"
gtk;gtk_window_unstick;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"void gtk_window_unstick (GtkWindow *window);"
gtk;gtk_wrap_mode_get_type;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtktypebuiltins.h;" GType gtk_wrap_mode_get_type (void) G_GNUC_CONST;"
gtk;ubuntu_gtk_widget_set_has_grab;gtk-auto.f90;/usr/include/gtk-2.0/gtk/gtkwidget.h;" void ubuntu_gtk_widget_set_has_grab (GtkWidget *widget, gboolean has_grab);"
gtk_os_dependent;g_dir_open;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gdir.h;"  GDir * g_dir_open (const gchar *path, guint flags, GError **error);"
gtk_os_dependent;g_dir_read_name;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gdir.h;" const gchar * g_dir_read_name (GDir *dir);"
gtk_os_dependent;g_file_get_contents;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gboolean g_file_get_contents (const gchar *filename, gchar **contents, gsize *length, GError **error);"
gtk_os_dependent;g_file_open_tmp;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gint g_file_open_tmp (const gchar *tmpl, gchar **name_used, GError **error);"
gtk_os_dependent;g_file_test;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gboolean g_file_test (const gchar *filename, GFileTest test);"
gtk_os_dependent;g_filename_from_uri;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar *g_filename_from_uri (const gchar *uri, gchar **hostname, GError **error) G_GNUC_MALLOC;"
gtk_os_dependent;g_filename_from_utf8;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar* g_filename_from_utf8 (const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error) G_GNUC_MALLOC;"
gtk_os_dependent;g_filename_to_uri;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;"  gchar *g_filename_to_uri (const gchar *filename, const gchar *hostname, GError **error) G_GNUC_MALLOC;"
gtk_os_dependent;g_filename_to_utf8;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gconvert.h;" gchar* g_filename_to_utf8 (const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error) G_GNUC_MALLOC;"
gtk_os_dependent;g_get_current_dir;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gchar *g_get_current_dir (void);"
gtk_os_dependent;g_getenv;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/genviron.h;"  const gchar * g_getenv (const gchar *variable);"
gtk_os_dependent;g_mkstemp;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gfileutils.h;" gint g_mkstemp (gchar *tmpl);"
gtk_os_dependent;g_module_name;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/gmodule.h;" const gchar * g_module_name (GModule *module);"
gtk_os_dependent;g_module_open;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/gmodule.h;" GModule* g_module_open (const gchar *file_name, GModuleFlags flags);"
gtk_os_dependent;g_setenv;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/genviron.h;" gboolean g_setenv (const gchar *variable, const gchar *value, gboolean overwrite);"
gtk_os_dependent;g_spawn_async;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" gboolean g_spawn_async (const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, GError **error);"
gtk_os_dependent;g_spawn_async_with_pipes;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" gboolean g_spawn_async_with_pipes (const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint *standard_input, gint *standard_output, gint *standard_error, GError **error);"
gtk_os_dependent;g_spawn_command_line_async;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" gboolean g_spawn_command_line_async (const gchar *command_line, GError **error);"
gtk_os_dependent;g_spawn_command_line_sync;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" gboolean g_spawn_command_line_sync (const gchar *command_line, gchar **standard_output, gchar **standard_error, gint *exit_status, GError **error);"
gtk_os_dependent;g_spawn_sync;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gspawn.h;" gboolean g_spawn_sync (const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gchar **standard_output, gchar **standard_error, gint *exit_status, GError **error);"
gtk_os_dependent;g_unsetenv;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/genviron.h;" void g_unsetenv (const gchar *variable);"
gtk_os_dependent;g_win32_get_package_installation_directory;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gwin32.h;" gchar* g_win32_get_package_installation_directory (const gchar *package, const gchar *dll_name);"
gtk_os_dependent;g_win32_get_package_installation_subdirectory;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/glib-2.0/glib/gwin32.h;" gchar* g_win32_get_package_installation_subdirectory (const gchar *package, const gchar *dll_name, const gchar *subdir);"
gtk_os_dependent;gdk_pixbuf_animation_new_from_file;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h;" GdkPixbufAnimation *gdk_pixbuf_animation_new_from_file (const char *filename, GError **error);"
gtk_os_dependent;gdk_pixbuf_new_from_file;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" GdkPixbuf *gdk_pixbuf_new_from_file (const char *filename, GError **error);"
gtk_os_dependent;gdk_pixbuf_new_from_file_at_scale;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"GdkPixbuf *gdk_pixbuf_new_from_file_at_scale (const char *filename, int width, int height, gboolean preserve_aspect_ratio, GError **error);"
gtk_os_dependent;gdk_pixbuf_new_from_file_at_size;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;"GdkPixbuf *gdk_pixbuf_new_from_file_at_size (const char *filename, int width, int height, GError **error);"
gtk_os_dependent;gdk_pixbuf_savev;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h;" gboolean gdk_pixbuf_savev (GdkPixbuf *pixbuf, const char *filename, const char *type, char **option_keys, char **option_values, GError **error);"
gtk_os_dependent;gtk_accel_map_load;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;"void gtk_accel_map_load (const gchar *file_name);"
gtk_os_dependent;gtk_accel_map_save;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkaccelmap.h;"void gtk_accel_map_save (const gchar *file_name);"
gtk_os_dependent;gtk_file_chooser_add_shortcut_folder;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" gboolean gtk_file_chooser_add_shortcut_folder (GtkFileChooser *chooser, const char *folder, GError **error);"
gtk_os_dependent;gtk_file_chooser_get_current_folder;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gchar * gtk_file_chooser_get_current_folder (GtkFileChooser *chooser);"
gtk_os_dependent;gtk_file_chooser_get_filename;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" gchar * gtk_file_chooser_get_filename (GtkFileChooser *chooser);"
gtk_os_dependent;gtk_file_chooser_get_filenames;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"GSList * gtk_file_chooser_get_filenames (GtkFileChooser *chooser);"
gtk_os_dependent;gtk_file_chooser_get_preview_filename;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;" char *gtk_file_chooser_get_preview_filename (GtkFileChooser *chooser);"
gtk_os_dependent;gtk_file_chooser_list_shortcut_folders;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"GSList *gtk_file_chooser_list_shortcut_folders (GtkFileChooser *chooser);"
gtk_os_dependent;gtk_file_chooser_remove_shortcut_folder;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_remove_shortcut_folder (GtkFileChooser *chooser, const char *folder, GError **error);"
gtk_os_dependent;gtk_file_chooser_select_filename;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_select_filename (GtkFileChooser *chooser, const char *filename);"
gtk_os_dependent;gtk_file_chooser_set_current_folder;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_set_current_folder (GtkFileChooser *chooser, const gchar *filename);"
gtk_os_dependent;gtk_file_chooser_set_filename;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"gboolean gtk_file_chooser_set_filename (GtkFileChooser *chooser, const char *filename);"
gtk_os_dependent;gtk_file_chooser_unselect_filename;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilechooser.h;"void gtk_file_chooser_unselect_filename (GtkFileChooser *chooser, const char *filename);"
gtk_os_dependent;gtk_file_selection_get_filename;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilesel.h;"const gchar* gtk_file_selection_get_filename (GtkFileSelection *filesel);"
gtk_os_dependent;gtk_file_selection_get_selections;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilesel.h;" gchar** gtk_file_selection_get_selections (GtkFileSelection *filesel);"
gtk_os_dependent;gtk_file_selection_set_filename;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkfilesel.h;"void gtk_file_selection_set_filename (GtkFileSelection *filesel, const gchar *filename);"
gtk_os_dependent;gtk_icon_info_get_filename;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"const gchar * gtk_icon_info_get_filename (GtkIconInfo *icon_info);"
gtk_os_dependent;gtk_icon_source_get_filename;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" const gchar* gtk_icon_source_get_filename (const GtkIconSource *source);"
gtk_os_dependent;gtk_icon_source_set_filename;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkiconfactory.h;" void gtk_icon_source_set_filename (GtkIconSource *source, const gchar *filename);"
gtk_os_dependent;gtk_icon_theme_append_search_path;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"void gtk_icon_theme_append_search_path (GtkIconTheme *icon_theme, const gchar *path);"
gtk_os_dependent;gtk_icon_theme_get_search_path;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"void gtk_icon_theme_get_search_path (GtkIconTheme *icon_theme, gchar **path[], gint *n_elements);"
gtk_os_dependent;gtk_icon_theme_prepend_search_path;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;"void gtk_icon_theme_prepend_search_path (GtkIconTheme *icon_theme, const gchar *path);"
gtk_os_dependent;gtk_icon_theme_set_search_path;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkicontheme.h;" void gtk_icon_theme_set_search_path (GtkIconTheme *icon_theme, const gchar *path[], gint n_elements);"
gtk_os_dependent;gtk_image_new_from_file;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"GtkWidget* gtk_image_new_from_file (const gchar *filename);"
gtk_os_dependent;gtk_image_set_from_file;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkimage.h;"void gtk_image_set_from_file (GtkImage *image, const gchar *filename);"
gtk_os_dependent;gtk_rc_add_default_file;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;" void gtk_rc_add_default_file (const gchar *filename);"
gtk_os_dependent;gtk_rc_parse;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;" void gtk_rc_parse (const gchar *filename);"
gtk_os_dependent;gtk_rc_set_default_files;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkrc.h;"void gtk_rc_set_default_files (gchar **filenames);"
gtk_os_dependent;gtk_ui_manager_add_ui_from_file;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkuimanager.h;"guint gtk_ui_manager_add_ui_from_file (GtkUIManager *self, const gchar *filename, GError **error);"
gtk_os_dependent;gtk_window_set_default_icon_from_file;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_set_default_icon_from_file (const gchar *filename, GError **err);"
gtk_os_dependent;gtk_window_set_icon_from_file;unixonly-auto.f90/mswinwdowsonly-auto.f90;/usr/include/gtk-2.0/gtk/gtkwindow.h;"gboolean gtk_window_set_icon_from_file (GtkWindow *window, const gchar *filename, GError **err);"
pango;pango_alignment_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_alignment_get_type (void) G_GNUC_CONST;"
pango;pango_attr_background_alpha_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_background_alpha_new (guint16 alpha);"
pango;pango_attr_background_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_background_new (guint16 red, guint16 green, guint16 blue);"
pango;pango_attr_fallback_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_fallback_new (gboolean enable_fallback);"
pango;pango_attr_family_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_family_new (const char *family);"
pango;pango_attr_font_desc_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_font_desc_new (const PangoFontDescription *desc);"
pango;pango_attr_font_features_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_font_features_new (const gchar *features);"
pango;pango_attr_foreground_alpha_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_foreground_alpha_new (guint16 alpha);"
pango;pango_attr_foreground_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_foreground_new (guint16 red, guint16 green, guint16 blue);"
pango;pango_attr_gravity_hint_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_gravity_hint_new (PangoGravityHint hint);"
pango;pango_attr_gravity_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" PangoAttribute *pango_attr_gravity_new (PangoGravity gravity);"
pango;pango_attr_iterator_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttrIterator *pango_attr_iterator_copy (PangoAttrIterator *iterator);"
pango;pango_attr_iterator_destroy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"void pango_attr_iterator_destroy (PangoAttrIterator *iterator);"
pango;pango_attr_iterator_get;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute * pango_attr_iterator_get (PangoAttrIterator *iterator, PangoAttrType type);"
pango;pango_attr_iterator_get_attrs;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"GSList * pango_attr_iterator_get_attrs (PangoAttrIterator *iterator);"
pango;pango_attr_iterator_get_font;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"void pango_attr_iterator_get_font (PangoAttrIterator *iterator, PangoFontDescription *desc, PangoLanguage **language, GSList **extra_attrs);"
pango;pango_attr_iterator_next;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"gboolean pango_attr_iterator_next (PangoAttrIterator *iterator);"
pango;pango_attr_iterator_range;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" void pango_attr_iterator_range (PangoAttrIterator *iterator, gint *start, gint *end);"
pango;pango_attr_language_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" PangoAttribute *pango_attr_language_new (PangoLanguage *language);"
pango;pango_attr_letter_spacing_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_letter_spacing_new (int letter_spacing);"
pango;pango_attr_list_change;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"void pango_attr_list_change (PangoAttrList *list, PangoAttribute *attr);"
pango;pango_attr_list_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttrList * pango_attr_list_copy (PangoAttrList *list);"
pango;pango_attr_list_filter;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" PangoAttrList *pango_attr_list_filter (PangoAttrList *list, PangoAttrFilterFunc func, gpointer data);"
pango;pango_attr_list_get_iterator;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" PangoAttrIterator *pango_attr_list_get_iterator (PangoAttrList *list);"
pango;pango_attr_list_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" GType pango_attr_list_get_type (void) G_GNUC_CONST;"
pango;pango_attr_list_insert;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"void pango_attr_list_insert (PangoAttrList *list, PangoAttribute *attr);"
pango;pango_attr_list_insert_before;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"void pango_attr_list_insert_before (PangoAttrList *list, PangoAttribute *attr);"
pango;pango_attr_list_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttrList * pango_attr_list_new (void);"
pango;pango_attr_list_ref;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttrList * pango_attr_list_ref (PangoAttrList *list);"
pango;pango_attr_list_splice;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"void pango_attr_list_splice (PangoAttrList *list, PangoAttrList *other, gint pos, gint len);"
pango;pango_attr_list_unref;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"void pango_attr_list_unref (PangoAttrList *list);"
pango;pango_attr_rise_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" PangoAttribute *pango_attr_rise_new (int rise);"
pango;pango_attr_scale_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_scale_new (double scale_factor);"
pango;pango_attr_shape_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" PangoAttribute *pango_attr_shape_new (const PangoRectangle *ink_rect, const PangoRectangle *logical_rect);"
pango;pango_attr_shape_new_with_data;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_shape_new_with_data (const PangoRectangle *ink_rect, const PangoRectangle *logical_rect, gpointer data, PangoAttrDataCopyFunc copy_func, GDestroyNotify destroy_func);"
pango;pango_attr_size_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_size_new (int size);"
pango;pango_attr_size_new_absolute;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_size_new_absolute (int size);"
pango;pango_attr_stretch_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_stretch_new (PangoStretch stretch);"
pango;pango_attr_strikethrough_color_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_strikethrough_color_new (guint16 red, guint16 green, guint16 blue);"
pango;pango_attr_strikethrough_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_strikethrough_new (gboolean strikethrough);"
pango;pango_attr_style_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_style_new (PangoStyle style);"
pango;pango_attr_type_get_name;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"const char * pango_attr_type_get_name (PangoAttrType type) G_GNUC_CONST;"
pango;pango_attr_type_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;"  GType pango_attr_type_get_type (void) G_GNUC_CONST;"
pango;pango_attr_type_register;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" PangoAttrType pango_attr_type_register (const gchar *name);"
pango;pango_attr_underline_color_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_underline_color_new (guint16 red, guint16 green, guint16 blue);"
pango;pango_attr_underline_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" PangoAttribute *pango_attr_underline_new (PangoUnderline underline);"
pango;pango_attr_variant_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_variant_new (PangoVariant variant);"
pango;pango_attr_weight_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute *pango_attr_weight_new (PangoWeight weight);"
pango;pango_attribute_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"PangoAttribute * pango_attribute_copy (const PangoAttribute *attr);"
pango;pango_attribute_destroy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"void pango_attribute_destroy (PangoAttribute *attr);"
pango;pango_attribute_equal;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"gboolean pango_attribute_equal (const PangoAttribute *attr1, const PangoAttribute *attr2) G_GNUC_PURE;"
pango;pango_attribute_init;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" void pango_attribute_init (PangoAttribute *attr, const PangoAttrClass *klass);"
pango;pango_bidi_type_for_unichar;pango-auto.f90;/usr/include/pango-1.0/pango/pango-bidi-type.h;"  PangoBidiType pango_bidi_type_for_unichar (gunichar ch) G_GNUC_CONST;"
pango;pango_bidi_type_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_bidi_type_get_type (void) G_GNUC_CONST;"
pango;pango_break;pango-auto.f90;/usr/include/pango-1.0/pango/pango-break.h;"  void pango_break (const gchar *text, int length, PangoAnalysis *analysis, PangoLogAttr *attrs, int attrs_len);"
pango;pango_cairo_context_get_font_options;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"const cairo_font_options_t *pango_cairo_context_get_font_options (PangoContext *context);"
pango;pango_cairo_context_get_resolution;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"double pango_cairo_context_get_resolution (PangoContext *context);"
pango;pango_cairo_context_get_shape_renderer;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"PangoCairoShapeRendererFunc pango_cairo_context_get_shape_renderer (PangoContext *context, gpointer *data);"
pango;pango_cairo_context_set_font_options;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" void pango_cairo_context_set_font_options (PangoContext *context, const cairo_font_options_t *options);"
pango;pango_cairo_context_set_resolution;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" void pango_cairo_context_set_resolution (PangoContext *context, double dpi);"
pango;pango_cairo_context_set_shape_renderer;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" void pango_cairo_context_set_shape_renderer (PangoContext *context, PangoCairoShapeRendererFunc func, gpointer data, GDestroyNotify dnotify);"
pango;pango_cairo_create_context;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" PangoContext *pango_cairo_create_context (cairo_t *cr);"
pango;pango_cairo_create_layout;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"PangoLayout *pango_cairo_create_layout (cairo_t *cr);"
pango;pango_cairo_error_underline_path;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" void pango_cairo_error_underline_path (cairo_t *cr, double x, double y, double width, double height);"
pango;pango_cairo_font_get_scaled_font;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" cairo_scaled_font_t *pango_cairo_font_get_scaled_font (PangoCairoFont *font);"
pango;pango_cairo_font_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" GType pango_cairo_font_get_type (void) G_GNUC_CONST;"
pango;pango_cairo_font_map_create_context;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" PangoContext *pango_cairo_font_map_create_context (PangoCairoFontMap *fontmap);"
pango;pango_cairo_font_map_get_default;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"PangoFontMap *pango_cairo_font_map_get_default (void);"
pango;pango_cairo_font_map_get_font_type;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"cairo_font_type_t pango_cairo_font_map_get_font_type (PangoCairoFontMap *fontmap);"
pango;pango_cairo_font_map_get_resolution;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"double pango_cairo_font_map_get_resolution (PangoCairoFontMap *fontmap);"
pango;pango_cairo_font_map_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"  GType pango_cairo_font_map_get_type (void) G_GNUC_CONST;"
pango;pango_cairo_font_map_new;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" PangoFontMap *pango_cairo_font_map_new (void);"
pango;pango_cairo_font_map_new_for_font_type;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"PangoFontMap *pango_cairo_font_map_new_for_font_type (cairo_font_type_t fonttype);"
pango;pango_cairo_font_map_set_default;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"void pango_cairo_font_map_set_default (PangoCairoFontMap *fontmap);"
pango;pango_cairo_font_map_set_resolution;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" void pango_cairo_font_map_set_resolution (PangoCairoFontMap *fontmap, double dpi);"
pango;pango_cairo_glyph_string_path;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" void pango_cairo_glyph_string_path (cairo_t *cr, PangoFont *font, PangoGlyphString *glyphs);"
pango;pango_cairo_layout_line_path;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"void pango_cairo_layout_line_path (cairo_t *cr, PangoLayoutLine *line);"
pango;pango_cairo_layout_path;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"void pango_cairo_layout_path (cairo_t *cr, PangoLayout *layout);"
pango;pango_cairo_show_error_underline;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" void pango_cairo_show_error_underline (cairo_t *cr, double x, double y, double width, double height);"
pango;pango_cairo_show_glyph_item;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"void pango_cairo_show_glyph_item (cairo_t *cr, const char *text, PangoGlyphItem *glyph_item);"
pango;pango_cairo_show_glyph_string;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" void pango_cairo_show_glyph_string (cairo_t *cr, PangoFont *font, PangoGlyphString *glyphs);"
pango;pango_cairo_show_layout;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"void pango_cairo_show_layout (cairo_t *cr, PangoLayout *layout);"
pango;pango_cairo_show_layout_line;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"void pango_cairo_show_layout_line (cairo_t *cr, PangoLayoutLine *line);"
pango;pango_cairo_update_context;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;" void pango_cairo_update_context (cairo_t *cr, PangoContext *context);"
pango;pango_cairo_update_layout;pango-auto.f90;/usr/include/pango-1.0/pango/pangocairo.h;"void pango_cairo_update_layout (cairo_t *cr, PangoLayout *layout);"
pango;pango_color_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" PangoColor *pango_color_copy (const PangoColor *src);"
pango;pango_color_free;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"void pango_color_free (PangoColor *color);"
pango;pango_color_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"  GType pango_color_get_type (void) G_GNUC_CONST;"
pango;pango_color_parse;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"gboolean pango_color_parse (PangoColor *color, const char *spec);"
pango;pango_color_to_string;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"gchar *pango_color_to_string(const PangoColor *color);"
pango;pango_config_key_get;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" char * pango_config_key_get (const char *key);"
pango;pango_config_key_get_system;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" char * pango_config_key_get_system (const char *key);"
pango;pango_context_changed;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"void pango_context_changed (PangoContext *context);"
pango;pango_context_get_base_dir;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"PangoDirection pango_context_get_base_dir (PangoContext *context);"
pango;pango_context_get_base_gravity;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"PangoGravity pango_context_get_base_gravity (PangoContext *context);"
pango;pango_context_get_font_description;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"PangoFontDescription * pango_context_get_font_description (PangoContext *context);"
pango;pango_context_get_font_map;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"PangoFontMap *pango_context_get_font_map (PangoContext *context);"
pango;pango_context_get_gravity;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"PangoGravity pango_context_get_gravity (PangoContext *context);"
pango;pango_context_get_gravity_hint;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"PangoGravityHint pango_context_get_gravity_hint (PangoContext *context);"
pango;pango_context_get_language;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"PangoLanguage *pango_context_get_language (PangoContext *context);"
pango;pango_context_get_matrix;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"const PangoMatrix * pango_context_get_matrix (PangoContext *context);"
pango;pango_context_get_metrics;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;" PangoFontMetrics *pango_context_get_metrics (PangoContext *context, const PangoFontDescription *desc, PangoLanguage *language);"
pango;pango_context_get_serial;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"guint pango_context_get_serial (PangoContext *context);"
pango;pango_context_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"  GType pango_context_get_type (void) G_GNUC_CONST;"
pango;pango_context_list_families;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"void pango_context_list_families (PangoContext *context, PangoFontFamily ***families, int *n_families);"
pango;pango_context_load_font;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"PangoFont * pango_context_load_font (PangoContext *context, const PangoFontDescription *desc);"
pango;pango_context_load_fontset;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"PangoFontset *pango_context_load_fontset (PangoContext *context, const PangoFontDescription *desc, PangoLanguage *language);"
pango;pango_context_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;" PangoContext *pango_context_new (void);"
pango;pango_context_set_base_dir;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"void pango_context_set_base_dir (PangoContext *context, PangoDirection direction);"
pango;pango_context_set_base_gravity;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"void pango_context_set_base_gravity (PangoContext *context, PangoGravity gravity);"
pango;pango_context_set_font_description;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;" void pango_context_set_font_description (PangoContext *context, const PangoFontDescription *desc);"
pango;pango_context_set_font_map;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"void pango_context_set_font_map (PangoContext *context, PangoFontMap *font_map);"
pango;pango_context_set_gravity_hint;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"void pango_context_set_gravity_hint (PangoContext *context, PangoGravityHint hint);"
pango;pango_context_set_language;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"void pango_context_set_language (PangoContext *context, PangoLanguage *language);"
pango;pango_context_set_matrix;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;" void pango_context_set_matrix (PangoContext *context, const PangoMatrix *matrix);"
pango;pango_coverage_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-coverage.h;"PangoCoverage * pango_coverage_copy (PangoCoverage *coverage);"
pango;pango_coverage_from_bytes;pango-auto.f90;/usr/include/pango-1.0/pango/pango-coverage.h;"PangoCoverage *pango_coverage_from_bytes (guchar *bytes, int n_bytes);"
pango;pango_coverage_get;pango-auto.f90;/usr/include/pango-1.0/pango/pango-coverage.h;"PangoCoverageLevel pango_coverage_get (PangoCoverage *coverage, int index_);"
pango;pango_coverage_level_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_coverage_level_get_type (void) G_GNUC_CONST;"
pango;pango_coverage_max;pango-auto.f90;/usr/include/pango-1.0/pango/pango-coverage.h;"void pango_coverage_max (PangoCoverage *coverage, PangoCoverage *other);"
pango;pango_coverage_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-coverage.h;"  PangoCoverage * pango_coverage_new (void);"
pango;pango_coverage_ref;pango-auto.f90;/usr/include/pango-1.0/pango/pango-coverage.h;"PangoCoverage * pango_coverage_ref (PangoCoverage *coverage);"
pango;pango_coverage_set;pango-auto.f90;/usr/include/pango-1.0/pango/pango-coverage.h;"void pango_coverage_set (PangoCoverage *coverage, int index_, PangoCoverageLevel level);"
pango;pango_coverage_to_bytes;pango-auto.f90;/usr/include/pango-1.0/pango/pango-coverage.h;" void pango_coverage_to_bytes (PangoCoverage *coverage, guchar **bytes, int *n_bytes);"
pango;pango_coverage_unref;pango-auto.f90;/usr/include/pango-1.0/pango/pango-coverage.h;"void pango_coverage_unref (PangoCoverage *coverage);"
pango;pango_default_break;pango-auto.f90;/usr/include/pango-1.0/pango/pango-break.h;" void pango_default_break (const gchar *text, int length, PangoAnalysis *analysis, PangoLogAttr *attrs, int attrs_len);"
pango;pango_direction_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_direction_get_type (void) G_GNUC_CONST;"
pango;pango_ellipsize_mode_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_ellipsize_mode_get_type (void) G_GNUC_CONST;"
pango;pango_engine_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-engine.h;"  GType pango_engine_get_type (void) G_GNUC_CONST;"
pango;pango_engine_lang_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-engine.h;" GType pango_engine_lang_get_type (void) G_GNUC_CONST;"
pango;pango_engine_shape_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-engine.h;" GType pango_engine_shape_get_type (void) G_GNUC_CONST;"
pango;pango_extents_to_pixels;pango-auto.f90;/usr/include/pango-1.0/pango/pango-types.h;" void pango_extents_to_pixels (PangoRectangle *inclusive, PangoRectangle *nearest);"
pango;pango_fc_decoder_get_charset;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-decoder.h;" FcCharSet *pango_fc_decoder_get_charset (PangoFcDecoder *decoder, PangoFcFont *fcfont);"
pango;pango_fc_decoder_get_glyph;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-decoder.h;" PangoGlyph pango_fc_decoder_get_glyph (PangoFcDecoder *decoder, PangoFcFont *fcfont, guint32 wc);"
pango;pango_fc_decoder_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-decoder.h;"  GType pango_fc_decoder_get_type (void) G_GNUC_CONST;"
pango;pango_fc_font_description_from_pattern;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;" PangoFontDescription *pango_fc_font_description_from_pattern (FcPattern *pattern, gboolean include_size);"
pango;pango_fc_font_get_glyph;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-font.h;"guint pango_fc_font_get_glyph (PangoFcFont *font, gunichar wc);"
pango;pango_fc_font_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-font.h;" GType pango_fc_font_get_type (void) G_GNUC_CONST;"
pango;pango_fc_font_get_unknown_glyph;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-font.h;" PangoGlyph pango_fc_font_get_unknown_glyph (PangoFcFont *font, gunichar wc);"
pango;pango_fc_font_has_char;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-font.h;"  gboolean pango_fc_font_has_char (PangoFcFont *font, gunichar wc);"
pango;pango_fc_font_kern_glyphs;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-font.h;" void pango_fc_font_kern_glyphs (PangoFcFont *font, PangoGlyphString *glyphs);"
pango;pango_fc_font_key_get_context_key;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;"gpointer pango_fc_font_key_get_context_key (const PangoFcFontKey *key);"
pango;pango_fc_font_key_get_matrix;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;"const PangoMatrix *pango_fc_font_key_get_matrix (const PangoFcFontKey *key);"
pango;pango_fc_font_key_get_pattern;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;" const FcPattern *pango_fc_font_key_get_pattern (const PangoFcFontKey *key);"
pango;pango_fc_font_lock_face;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-font.h;" FT_Face pango_fc_font_lock_face (PangoFcFont *font);"
pango;pango_fc_font_map_add_decoder_find_func;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;" void pango_fc_font_map_add_decoder_find_func (PangoFcFontMap *fcfontmap, PangoFcDecoderFindFunc findfunc, gpointer user_data, GDestroyNotify dnotify);"
pango;pango_fc_font_map_cache_clear;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;" void pango_fc_font_map_cache_clear (PangoFcFontMap *fcfontmap);"
pango;pango_fc_font_map_config_changed;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;" void pango_fc_font_map_config_changed (PangoFcFontMap *fcfontmap);"
pango;pango_fc_font_map_create_context;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;" PangoContext * pango_fc_font_map_create_context (PangoFcFontMap *fcfontmap);"
pango;pango_fc_font_map_find_decoder;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;"PangoFcDecoder *pango_fc_font_map_find_decoder (PangoFcFontMap *fcfontmap, FcPattern *pattern);"
pango;pango_fc_font_map_get_config;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;"FcConfig * pango_fc_font_map_get_config (PangoFcFontMap *fcfontmap);"
pango;pango_fc_font_map_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;" GType pango_fc_font_map_get_type (void) G_GNUC_CONST;"
pango;pango_fc_font_map_set_config;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;" void pango_fc_font_map_set_config (PangoFcFontMap *fcfontmap, FcConfig *fcconfig);"
pango;pango_fc_font_map_shutdown;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;" void pango_fc_font_map_shutdown (PangoFcFontMap *fcfontmap);"
pango;pango_fc_font_unlock_face;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-font.h;"void pango_fc_font_unlock_face (PangoFcFont *font);"
pango;pango_fc_fontset_key_get_absolute_size;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;"double pango_fc_fontset_key_get_absolute_size (const PangoFcFontsetKey *key);"
pango;pango_fc_fontset_key_get_context_key;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;"gpointer pango_fc_fontset_key_get_context_key (const PangoFcFontsetKey *key);"
pango;pango_fc_fontset_key_get_description;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;"const PangoFontDescription *pango_fc_fontset_key_get_description (const PangoFcFontsetKey *key);"
pango;pango_fc_fontset_key_get_language;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;"  PangoLanguage *pango_fc_fontset_key_get_language (const PangoFcFontsetKey *key);"
pango;pango_fc_fontset_key_get_matrix;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;"const PangoMatrix *pango_fc_fontset_key_get_matrix (const PangoFcFontsetKey *key);"
pango;pango_fc_fontset_key_get_resolution;pango-auto.f90;/usr/include/pango-1.0/pango/pangofc-fontmap.h;"double pango_fc_fontset_key_get_resolution (const PangoFcFontsetKey *key);"
pango;pango_find_base_dir;pango-auto.f90;/usr/include/pango-1.0/pango/pango-bidi-type.h;"PangoDirection pango_find_base_dir (const gchar *text, gint length);"
pango;pango_find_map;pango-auto.f90;/usr/include/pango-1.0/pango/pango-modules.h;"  PangoMap * pango_find_map (PangoLanguage *language, guint engine_type_id, guint render_type_id);"
pango;pango_find_paragraph_boundary;pango-auto.f90;/usr/include/pango-1.0/pango/pango-break.h;" void pango_find_paragraph_boundary (const gchar *text, gint length, gint *paragraph_delimiter_index, gint *next_paragraph_start);"
pango;pango_font_describe;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" PangoFontDescription *pango_font_describe (PangoFont *font);"
pango;pango_font_describe_with_absolute_size;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoFontDescription *pango_font_describe_with_absolute_size (PangoFont *font);"
pango;pango_font_description_better_match;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" gboolean pango_font_description_better_match (const PangoFontDescription *desc, const PangoFontDescription *old_match, const PangoFontDescription *new_match) G_GNUC_PURE;"
pango;pango_font_description_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoFontDescription *pango_font_description_copy (const PangoFontDescription *desc);"
pango;pango_font_description_copy_static;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoFontDescription *pango_font_description_copy_static (const PangoFontDescription *desc);"
pango;pango_font_description_equal;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"gboolean pango_font_description_equal (const PangoFontDescription *desc1, const PangoFontDescription *desc2) G_GNUC_PURE;"
pango;pango_font_description_free;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_description_free (PangoFontDescription *desc);"
pango;pango_font_description_from_string;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" PangoFontDescription *pango_font_description_from_string (const char *str);"
pango;pango_font_description_get_family;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"const char *pango_font_description_get_family (const PangoFontDescription *desc) G_GNUC_PURE;"
pango;pango_font_description_get_gravity;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoGravity pango_font_description_get_gravity (const PangoFontDescription *desc) G_GNUC_PURE;"
pango;pango_font_description_get_set_fields;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" PangoFontMask pango_font_description_get_set_fields (const PangoFontDescription *desc) G_GNUC_PURE;"
pango;pango_font_description_get_size;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"gint pango_font_description_get_size (const PangoFontDescription *desc) G_GNUC_PURE;"
pango;pango_font_description_get_size_is_absolute;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"gboolean pango_font_description_get_size_is_absolute (const PangoFontDescription *desc) G_GNUC_PURE;"
pango;pango_font_description_get_stretch;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoStretch pango_font_description_get_stretch (const PangoFontDescription *desc) G_GNUC_PURE;"
pango;pango_font_description_get_style;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoStyle pango_font_description_get_style (const PangoFontDescription *desc) G_GNUC_PURE;"
pango;pango_font_description_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"  GType pango_font_description_get_type (void) G_GNUC_CONST;"
pango;pango_font_description_get_variant;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoVariant pango_font_description_get_variant (const PangoFontDescription *desc) G_GNUC_PURE;"
pango;pango_font_description_get_weight;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoWeight pango_font_description_get_weight (const PangoFontDescription *desc) G_GNUC_PURE;"
pango;pango_font_description_hash;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"guint pango_font_description_hash (const PangoFontDescription *desc) G_GNUC_PURE;"
pango;pango_font_description_merge;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" void pango_font_description_merge (PangoFontDescription *desc, const PangoFontDescription *desc_to_merge, gboolean replace_existing);"
pango;pango_font_description_merge_static;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_description_merge_static (PangoFontDescription *desc, const PangoFontDescription *desc_to_merge, gboolean replace_existing);"
pango;pango_font_description_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoFontDescription *pango_font_description_new (void);"
pango;pango_font_description_set_absolute_size;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_description_set_absolute_size (PangoFontDescription *desc, double size);"
pango;pango_font_description_set_family;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" void pango_font_description_set_family (PangoFontDescription *desc, const char *family);"
pango;pango_font_description_set_family_static;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_description_set_family_static (PangoFontDescription *desc, const char *family);"
pango;pango_font_description_set_gravity;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_description_set_gravity (PangoFontDescription *desc, PangoGravity gravity);"
pango;pango_font_description_set_size;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_description_set_size (PangoFontDescription *desc, gint size);"
pango;pango_font_description_set_stretch;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_description_set_stretch (PangoFontDescription *desc, PangoStretch stretch);"
pango;pango_font_description_set_style;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_description_set_style (PangoFontDescription *desc, PangoStyle style);"
pango;pango_font_description_set_variant;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_description_set_variant (PangoFontDescription *desc, PangoVariant variant);"
pango;pango_font_description_set_weight;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_description_set_weight (PangoFontDescription *desc, PangoWeight weight);"
pango;pango_font_description_to_filename;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"char * pango_font_description_to_filename (const PangoFontDescription *desc);"
pango;pango_font_description_to_string;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"char * pango_font_description_to_string (const PangoFontDescription *desc);"
pango;pango_font_description_unset_fields;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_description_unset_fields (PangoFontDescription *desc, PangoFontMask to_unset);"
pango;pango_font_descriptions_free;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_descriptions_free (PangoFontDescription **descs, int n_descs);"
pango;pango_font_face_describe;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" PangoFontDescription *pango_font_face_describe (PangoFontFace *face);"
pango;pango_font_face_get_face_name;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"const char *pango_font_face_get_face_name (PangoFontFace *face) G_GNUC_PURE;"
pango;pango_font_face_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" GType pango_font_face_get_type (void) G_GNUC_CONST;"
pango;pango_font_face_is_synthesized;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"gboolean pango_font_face_is_synthesized (PangoFontFace *face) G_GNUC_PURE;"
pango;pango_font_face_list_sizes;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_face_list_sizes (PangoFontFace *face, int **sizes, int *n_sizes);"
pango;pango_font_family_get_name;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"const char *pango_font_family_get_name (PangoFontFamily *family) G_GNUC_PURE;"
pango;pango_font_family_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" GType pango_font_family_get_type (void) G_GNUC_CONST;"
pango;pango_font_family_is_monospace;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"gboolean pango_font_family_is_monospace (PangoFontFamily *family) G_GNUC_PURE;"
pango;pango_font_family_list_faces;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" void pango_font_family_list_faces (PangoFontFamily *family, PangoFontFace ***faces, int *n_faces);"
pango;pango_font_find_shaper;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoEngineShape * pango_font_find_shaper (PangoFont *font, PangoLanguage *language, guint32 ch);"
pango;pango_font_get_coverage;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoCoverage * pango_font_get_coverage (PangoFont *font, PangoLanguage *language);"
pango;pango_font_get_font_map;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoFontMap *pango_font_get_font_map (PangoFont *font);"
pango;pango_font_get_glyph_extents;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_get_glyph_extents (PangoFont *font, PangoGlyph glyph, PangoRectangle *ink_rect, PangoRectangle *logical_rect);"
pango;pango_font_get_metrics;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoFontMetrics * pango_font_get_metrics (PangoFont *font, PangoLanguage *language);"
pango;pango_font_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" GType pango_font_get_type (void) G_GNUC_CONST;"
pango;pango_font_map_changed;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontmap.h;"void pango_font_map_changed (PangoFontMap *fontmap);"
pango;pango_font_map_create_context;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontmap.h;"PangoContext * pango_font_map_create_context (PangoFontMap *fontmap);"
pango;pango_font_map_get_serial;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontmap.h;"guint pango_font_map_get_serial (PangoFontMap *fontmap);"
pango;pango_font_map_get_shape_engine_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontmap.h;" const char *pango_font_map_get_shape_engine_type (PangoFontMap *fontmap);"
pango;pango_font_map_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontmap.h;"  GType pango_font_map_get_type (void) G_GNUC_CONST;"
pango;pango_font_map_list_families;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontmap.h;"void pango_font_map_list_families (PangoFontMap *fontmap, PangoFontFamily ***families, int *n_families);"
pango;pango_font_map_load_font;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontmap.h;"PangoFont * pango_font_map_load_font (PangoFontMap *fontmap, PangoContext *context, const PangoFontDescription *desc);"
pango;pango_font_map_load_fontset;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontmap.h;"PangoFontset *pango_font_map_load_fontset (PangoFontMap *fontmap, PangoContext *context, const PangoFontDescription *desc, PangoLanguage *language);"
pango;pango_font_mask_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_font_mask_get_type (void) G_GNUC_CONST;"
pango;pango_font_metrics_get_approximate_char_width;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"int pango_font_metrics_get_approximate_char_width (PangoFontMetrics *metrics) G_GNUC_PURE;"
pango;pango_font_metrics_get_approximate_digit_width;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"int pango_font_metrics_get_approximate_digit_width (PangoFontMetrics *metrics) G_GNUC_PURE;"
pango;pango_font_metrics_get_ascent;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"int pango_font_metrics_get_ascent (PangoFontMetrics *metrics) G_GNUC_PURE;"
pango;pango_font_metrics_get_descent;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"int pango_font_metrics_get_descent (PangoFontMetrics *metrics) G_GNUC_PURE;"
pango;pango_font_metrics_get_strikethrough_position;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"int pango_font_metrics_get_strikethrough_position (PangoFontMetrics *metrics) G_GNUC_PURE;"
pango;pango_font_metrics_get_strikethrough_thickness;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"int pango_font_metrics_get_strikethrough_thickness (PangoFontMetrics *metrics) G_GNUC_PURE;"
pango;pango_font_metrics_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" GType pango_font_metrics_get_type (void) G_GNUC_CONST;"
pango;pango_font_metrics_get_underline_position;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"int pango_font_metrics_get_underline_position (PangoFontMetrics *metrics) G_GNUC_PURE;"
pango;pango_font_metrics_get_underline_thickness;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"int pango_font_metrics_get_underline_thickness (PangoFontMetrics *metrics) G_GNUC_PURE;"
pango;pango_font_metrics_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;" PangoFontMetrics *pango_font_metrics_new (void);"
pango;pango_font_metrics_ref;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"PangoFontMetrics *pango_font_metrics_ref (PangoFontMetrics *metrics);"
pango;pango_font_metrics_unref;pango-auto.f90;/usr/include/pango-1.0/pango/pango-font.h;"void pango_font_metrics_unref (PangoFontMetrics *metrics);"
pango;pango_fontset_foreach;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontset.h;"void pango_fontset_foreach (PangoFontset *fontset, PangoFontsetForeachFunc func, gpointer data);"
pango;pango_fontset_get_font;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontset.h;" PangoFont * pango_fontset_get_font (PangoFontset *fontset, guint wc);"
pango;pango_fontset_get_metrics;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontset.h;"PangoFontMetrics *pango_fontset_get_metrics (PangoFontset *fontset);"
pango;pango_fontset_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontset.h;"  GType pango_fontset_get_type (void) G_GNUC_CONST;"
pango;pango_fontset_simple_append;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontset.h;"void pango_fontset_simple_append (PangoFontsetSimple *fontset, PangoFont *font);"
pango;pango_fontset_simple_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontset.h;" GType pango_fontset_simple_get_type (void) G_GNUC_CONST;"
pango;pango_fontset_simple_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontset.h;" PangoFontsetSimple * pango_fontset_simple_new (PangoLanguage *language);"
pango;pango_fontset_simple_size;pango-auto.f90;/usr/include/pango-1.0/pango/pango-fontset.h;"int pango_fontset_simple_size (PangoFontsetSimple *fontset);"
pango;pango_ft2_font_get_coverage;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;" PangoCoverage *pango_ft2_font_get_coverage (PangoFont *font, PangoLanguage *language);"
pango;pango_ft2_font_get_face;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;" FT_Face pango_ft2_font_get_face (PangoFont *font);"
pango;pango_ft2_font_get_kerning;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;" int pango_ft2_font_get_kerning (PangoFont *font, PangoGlyph left, PangoGlyph right);"
pango;pango_ft2_font_map_create_context;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;" PangoContext *pango_ft2_font_map_create_context (PangoFT2FontMap *fontmap);"
pango;pango_ft2_font_map_for_display;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;" PangoFontMap *pango_ft2_font_map_for_display (void);"
pango;pango_ft2_font_map_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;" GType pango_ft2_font_map_get_type (void) G_GNUC_CONST;"
pango;pango_ft2_font_map_new;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;" PangoFontMap *pango_ft2_font_map_new (void);"
pango;pango_ft2_font_map_set_default_substitute;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;"void pango_ft2_font_map_set_default_substitute (PangoFT2FontMap *fontmap, PangoFT2SubstituteFunc func, gpointer data, GDestroyNotify notify);"
pango;pango_ft2_font_map_set_resolution;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;"void pango_ft2_font_map_set_resolution (PangoFT2FontMap *fontmap, double dpi_x, double dpi_y);"
pango;pango_ft2_font_map_substitute_changed;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;"void pango_ft2_font_map_substitute_changed (PangoFT2FontMap *fontmap);"
pango;pango_ft2_get_context;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;" PangoContext *pango_ft2_get_context (double dpi_x, double dpi_y);"
pango;pango_ft2_get_unknown_glyph;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;" PangoGlyph pango_ft2_get_unknown_glyph (PangoFont *font);"
pango;pango_ft2_render;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;"  void pango_ft2_render (FT_Bitmap *bitmap, PangoFont *font, PangoGlyphString *glyphs, gint x, gint y);"
pango;pango_ft2_render_layout;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;"void pango_ft2_render_layout (FT_Bitmap *bitmap, PangoLayout *layout, int x, int y);"
pango;pango_ft2_render_layout_line;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;" void pango_ft2_render_layout_line (FT_Bitmap *bitmap, PangoLayoutLine *line, int x, int y);"
pango;pango_ft2_render_layout_line_subpixel;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;"void pango_ft2_render_layout_line_subpixel (FT_Bitmap *bitmap, PangoLayoutLine *line, int x, int y);"
pango;pango_ft2_render_layout_subpixel;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;"void pango_ft2_render_layout_subpixel (FT_Bitmap *bitmap, PangoLayout *layout, int x, int y);"
pango;pango_ft2_render_transformed;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;"void pango_ft2_render_transformed (FT_Bitmap *bitmap, const PangoMatrix *matrix, PangoFont *font, PangoGlyphString *glyphs, int x, int y);"
pango;pango_ft2_shutdown_display;pango-auto.f90;/usr/include/pango-1.0/pango/pangoft2.h;" void pango_ft2_shutdown_display (void);"
pango;pango_get_lib_subdirectory;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" const char * pango_get_lib_subdirectory (void) G_GNUC_PURE;"
pango;pango_get_log_attrs;pango-auto.f90;/usr/include/pango-1.0/pango/pango-break.h;" void pango_get_log_attrs (const char *text, int length, int level, PangoLanguage *language, PangoLogAttr *log_attrs, int attrs_len);"
pango;pango_get_mirror_char;pango-auto.f90;/usr/include/pango-1.0/pango/pango-bidi-type.h;" gboolean pango_get_mirror_char (gunichar ch, gunichar *mirrored_ch);"
pango;pango_get_sysconf_subdirectory;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" const char * pango_get_sysconf_subdirectory (void) G_GNUC_PURE;"
pango;pango_glyph_item_apply_attrs;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;"GSList * pango_glyph_item_apply_attrs (PangoGlyphItem *glyph_item, const char *text, PangoAttrList *list);"
pango;pango_glyph_item_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;"PangoGlyphItem *pango_glyph_item_copy (PangoGlyphItem *orig);"
pango;pango_glyph_item_free;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;"void pango_glyph_item_free (PangoGlyphItem *glyph_item);"
pango;pango_glyph_item_get_logical_widths;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;"void pango_glyph_item_get_logical_widths (PangoGlyphItem *glyph_item, const char *text, int *logical_widths);"
pango;pango_glyph_item_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;"  GType pango_glyph_item_get_type (void) G_GNUC_CONST;"
pango;pango_glyph_item_iter_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;"PangoGlyphItemIter *pango_glyph_item_iter_copy (PangoGlyphItemIter *orig);"
pango;pango_glyph_item_iter_free;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;"void pango_glyph_item_iter_free (PangoGlyphItemIter *iter);"
pango;pango_glyph_item_iter_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;" GType pango_glyph_item_iter_get_type (void) G_GNUC_CONST;"
pango;pango_glyph_item_iter_init_end;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;"gboolean pango_glyph_item_iter_init_end (PangoGlyphItemIter *iter, PangoGlyphItem *glyph_item, const char *text);"
pango;pango_glyph_item_iter_init_start;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;" gboolean pango_glyph_item_iter_init_start (PangoGlyphItemIter *iter, PangoGlyphItem *glyph_item, const char *text);"
pango;pango_glyph_item_iter_next_cluster;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;"gboolean pango_glyph_item_iter_next_cluster (PangoGlyphItemIter *iter);"
pango;pango_glyph_item_iter_prev_cluster;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;"gboolean pango_glyph_item_iter_prev_cluster (PangoGlyphItemIter *iter);"
pango;pango_glyph_item_letter_space;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;"void pango_glyph_item_letter_space (PangoGlyphItem *glyph_item, const char *text, PangoLogAttr *log_attrs, int letter_spacing);"
pango;pango_glyph_item_split;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph-item.h;" PangoGlyphItem *pango_glyph_item_split (PangoGlyphItem *orig, const char *text, int split_index);"
pango;pango_glyph_string_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;"PangoGlyphString *pango_glyph_string_copy (PangoGlyphString *string);"
pango;pango_glyph_string_extents;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;"void pango_glyph_string_extents (PangoGlyphString *glyphs, PangoFont *font, PangoRectangle *ink_rect, PangoRectangle *logical_rect);"
pango;pango_glyph_string_extents_range;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;" void pango_glyph_string_extents_range (PangoGlyphString *glyphs, int start, int end, PangoFont *font, PangoRectangle *ink_rect, PangoRectangle *logical_rect);"
pango;pango_glyph_string_free;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;"void pango_glyph_string_free (PangoGlyphString *string);"
pango;pango_glyph_string_get_logical_widths;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;" void pango_glyph_string_get_logical_widths (PangoGlyphString *glyphs, const char *text, int length, int embedding_level, int *logical_widths);"
pango;pango_glyph_string_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;"GType pango_glyph_string_get_type (void) G_GNUC_CONST;"
pango;pango_glyph_string_get_width;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;"int pango_glyph_string_get_width(PangoGlyphString *glyphs);"
pango;pango_glyph_string_index_to_x;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;" void pango_glyph_string_index_to_x (PangoGlyphString *glyphs, char *text, int length, PangoAnalysis *analysis, int index_, gboolean trailing, int *x_pos);"
pango;pango_glyph_string_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;"  PangoGlyphString *pango_glyph_string_new (void);"
pango;pango_glyph_string_set_size;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;"void pango_glyph_string_set_size (PangoGlyphString *string, gint new_len);"
pango;pango_glyph_string_x_to_index;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;"void pango_glyph_string_x_to_index (PangoGlyphString *glyphs, char *text, int length, PangoAnalysis *analysis, int x_pos, int *index_, int *trailing);"
pango;pango_gravity_get_for_matrix;pango-auto.f90;/usr/include/pango-1.0/pango/pango-gravity.h;"PangoGravity pango_gravity_get_for_matrix (const PangoMatrix *matrix) G_GNUC_PURE;"
pango;pango_gravity_get_for_script;pango-auto.f90;/usr/include/pango-1.0/pango/pango-gravity.h;"PangoGravity pango_gravity_get_for_script (PangoScript script, PangoGravity base_gravity, PangoGravityHint hint) G_GNUC_CONST;"
pango;pango_gravity_get_for_script_and_width;pango-auto.f90;/usr/include/pango-1.0/pango/pango-gravity.h;"PangoGravity pango_gravity_get_for_script_and_width (PangoScript script, gboolean wide, PangoGravity base_gravity, PangoGravityHint hint) G_GNUC_CONST;"
pango;pango_gravity_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_gravity_get_type (void) G_GNUC_CONST;"
pango;pango_gravity_hint_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_gravity_hint_get_type (void) G_GNUC_CONST;"
pango;pango_gravity_to_rotation;pango-auto.f90;/usr/include/pango-1.0/pango/pango-gravity.h;"  double pango_gravity_to_rotation (PangoGravity gravity) G_GNUC_CONST;"
pango;pango_is_zero_width;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" gboolean pango_is_zero_width (gunichar ch) G_GNUC_CONST;"
pango;pango_item_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-item.h;"PangoItem *pango_item_copy (PangoItem *item);"
pango;pango_item_free;pango-auto.f90;/usr/include/pango-1.0/pango/pango-item.h;"void pango_item_free (PangoItem *item);"
pango;pango_item_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-item.h;"  GType pango_item_get_type (void) G_GNUC_CONST;"
pango;pango_item_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-item.h;" PangoItem *pango_item_new (void);"
pango;pango_item_split;pango-auto.f90;/usr/include/pango-1.0/pango/pango-item.h;"PangoItem *pango_item_split (PangoItem *orig, int split_index, int split_offset);"
pango;pango_itemize;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;" GList *pango_itemize (PangoContext *context, const char *text, int start_index, int length, PangoAttrList *attrs, PangoAttrIterator *cached_iter);"
pango;pango_itemize_with_base_dir;pango-auto.f90;/usr/include/pango-1.0/pango/pango-context.h;"GList *pango_itemize_with_base_dir (PangoContext *context, PangoDirection base_dir, const char *text, int start_index, int length, PangoAttrList *attrs, PangoAttrIterator *cached_iter);"
pango;pango_language_from_string;pango-auto.f90;/usr/include/pango-1.0/pango/pango-language.h;"PangoLanguage *pango_language_from_string (const char *language);"
pango;pango_language_get_default;pango-auto.f90;/usr/include/pango-1.0/pango/pango-language.h;"PangoLanguage *pango_language_get_default (void) G_GNUC_CONST;"
pango;pango_language_get_sample_string;pango-auto.f90;/usr/include/pango-1.0/pango/pango-language.h;" const char *pango_language_get_sample_string (PangoLanguage *language) G_GNUC_CONST;"
pango;pango_language_get_scripts;pango-auto.f90;/usr/include/pango-1.0/pango/pango-language.h;"const PangoScript *pango_language_get_scripts (PangoLanguage *language, int *num_scripts);"
pango;pango_language_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-language.h;"  GType pango_language_get_type (void) G_GNUC_CONST;"
pango;pango_language_includes_script;pango-auto.f90;/usr/include/pango-1.0/pango/pango-language.h;" gboolean pango_language_includes_script (PangoLanguage *language, PangoScript script) G_GNUC_PURE;"
pango;pango_language_matches;pango-auto.f90;/usr/include/pango-1.0/pango/pango-language.h;" gboolean pango_language_matches (PangoLanguage *language, const char *range_list) G_GNUC_PURE;"
pango;pango_language_to_string;pango-auto.f90;/usr/include/pango-1.0/pango/pango-language.h;" const char *pango_language_to_string (PangoLanguage *language) G_GNUC_CONST;"
pango;pango_layout_context_changed;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_context_changed (PangoLayout *layout);"
pango;pango_layout_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoLayout *pango_layout_copy (PangoLayout *src);"
pango;pango_layout_get_alignment;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoAlignment pango_layout_get_alignment (PangoLayout *layout);"
pango;pango_layout_get_attributes;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoAttrList *pango_layout_get_attributes (PangoLayout *layout);"
pango;pango_layout_get_auto_dir;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"gboolean pango_layout_get_auto_dir (PangoLayout *layout);"
pango;pango_layout_get_baseline;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"int pango_layout_get_baseline (PangoLayout *layout);"
pango;pango_layout_get_character_count;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" gint pango_layout_get_character_count (PangoLayout *layout);"
pango;pango_layout_get_context;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" PangoContext *pango_layout_get_context (PangoLayout *layout);"
pango;pango_layout_get_cursor_pos;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_get_cursor_pos (PangoLayout *layout, int index_, PangoRectangle *strong_pos, PangoRectangle *weak_pos);"
pango;pango_layout_get_ellipsize;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoEllipsizeMode pango_layout_get_ellipsize (PangoLayout *layout);"
pango;pango_layout_get_extents;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_get_extents (PangoLayout *layout, PangoRectangle *ink_rect, PangoRectangle *logical_rect);"
pango;pango_layout_get_font_description;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" const PangoFontDescription *pango_layout_get_font_description (PangoLayout *layout);"
pango;pango_layout_get_height;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"int pango_layout_get_height (PangoLayout *layout);"
pango;pango_layout_get_indent;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"int pango_layout_get_indent (PangoLayout *layout);"
pango;pango_layout_get_iter;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" PangoLayoutIter *pango_layout_get_iter (PangoLayout *layout);"
pango;pango_layout_get_justify;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"gboolean pango_layout_get_justify (PangoLayout *layout);"
pango;pango_layout_get_line;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoLayoutLine *pango_layout_get_line (PangoLayout *layout, int line);"
pango;pango_layout_get_line_count;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" int pango_layout_get_line_count (PangoLayout *layout);"
pango;pango_layout_get_line_readonly;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoLayoutLine *pango_layout_get_line_readonly (PangoLayout *layout, int line);"
pango;pango_layout_get_lines;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"GSList * pango_layout_get_lines (PangoLayout *layout);"
pango;pango_layout_get_lines_readonly;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"GSList * pango_layout_get_lines_readonly (PangoLayout *layout);"
pango;pango_layout_get_log_attrs;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_get_log_attrs (PangoLayout *layout, PangoLogAttr **attrs, gint *n_attrs);"
pango;pango_layout_get_log_attrs_readonly;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" const PangoLogAttr *pango_layout_get_log_attrs_readonly (PangoLayout *layout, gint *n_attrs);"
pango;pango_layout_get_pixel_extents;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_get_pixel_extents (PangoLayout *layout, PangoRectangle *ink_rect, PangoRectangle *logical_rect);"
pango;pango_layout_get_pixel_size;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_get_pixel_size (PangoLayout *layout, int *width, int *height);"
pango;pango_layout_get_serial;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"guint pango_layout_get_serial (PangoLayout *layout);"
pango;pango_layout_get_single_paragraph_mode;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"gboolean pango_layout_get_single_paragraph_mode (PangoLayout *layout);"
pango;pango_layout_get_size;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_get_size (PangoLayout *layout, int *width, int *height);"
pango;pango_layout_get_spacing;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"int pango_layout_get_spacing (PangoLayout *layout);"
pango;pango_layout_get_tabs;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" PangoTabArray* pango_layout_get_tabs (PangoLayout *layout);"
pango;pango_layout_get_text;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"const char *pango_layout_get_text (PangoLayout *layout);"
pango;pango_layout_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"  GType pango_layout_get_type (void) G_GNUC_CONST;"
pango;pango_layout_get_unknown_glyphs_count;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" int pango_layout_get_unknown_glyphs_count (PangoLayout *layout);"
pango;pango_layout_get_width;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"int pango_layout_get_width (PangoLayout *layout);"
pango;pango_layout_get_wrap;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoWrapMode pango_layout_get_wrap (PangoLayout *layout);"
pango;pango_layout_index_to_line_x;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_index_to_line_x (PangoLayout *layout, int index_, gboolean trailing, int *line, int *x_pos);"
pango;pango_layout_index_to_pos;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_index_to_pos (PangoLayout *layout, int index_, PangoRectangle *pos);"
pango;pango_layout_is_ellipsized;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"gboolean pango_layout_is_ellipsized (PangoLayout *layout);"
pango;pango_layout_is_wrapped;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"gboolean pango_layout_is_wrapped (PangoLayout *layout);"
pango;pango_layout_iter_at_last_line;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"gboolean pango_layout_iter_at_last_line (PangoLayoutIter *iter);"
pango;pango_layout_iter_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoLayoutIter *pango_layout_iter_copy (PangoLayoutIter *iter);"
pango;pango_layout_iter_free;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_iter_free (PangoLayoutIter *iter);"
pango;pango_layout_iter_get_baseline;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"int pango_layout_iter_get_baseline (PangoLayoutIter *iter);"
pango;pango_layout_iter_get_char_extents;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_iter_get_char_extents (PangoLayoutIter *iter, PangoRectangle *logical_rect);"
pango;pango_layout_iter_get_cluster_extents;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_iter_get_cluster_extents (PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect);"
pango;pango_layout_iter_get_index;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" int pango_layout_iter_get_index (PangoLayoutIter *iter);"
pango;pango_layout_iter_get_layout;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoLayout *pango_layout_iter_get_layout (PangoLayoutIter *iter);"
pango;pango_layout_iter_get_layout_extents;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_iter_get_layout_extents (PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect);"
pango;pango_layout_iter_get_line;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoLayoutLine *pango_layout_iter_get_line (PangoLayoutIter *iter);"
pango;pango_layout_iter_get_line_extents;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_iter_get_line_extents (PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect);"
pango;pango_layout_iter_get_line_readonly;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoLayoutLine *pango_layout_iter_get_line_readonly (PangoLayoutIter *iter);"
pango;pango_layout_iter_get_line_yrange;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_iter_get_line_yrange (PangoLayoutIter *iter, int *y0_, int *y1_);"
pango;pango_layout_iter_get_run;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoLayoutRun *pango_layout_iter_get_run (PangoLayoutIter *iter);"
pango;pango_layout_iter_get_run_extents;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_iter_get_run_extents (PangoLayoutIter *iter, PangoRectangle *ink_rect, PangoRectangle *logical_rect);"
pango;pango_layout_iter_get_run_readonly;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoLayoutRun *pango_layout_iter_get_run_readonly (PangoLayoutIter *iter);"
pango;pango_layout_iter_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" GType pango_layout_iter_get_type (void) G_GNUC_CONST;"
pango;pango_layout_iter_next_char;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" gboolean pango_layout_iter_next_char (PangoLayoutIter *iter);"
pango;pango_layout_iter_next_cluster;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"gboolean pango_layout_iter_next_cluster (PangoLayoutIter *iter);"
pango;pango_layout_iter_next_line;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"gboolean pango_layout_iter_next_line (PangoLayoutIter *iter);"
pango;pango_layout_iter_next_run;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"gboolean pango_layout_iter_next_run (PangoLayoutIter *iter);"
pango;pango_layout_line_get_extents;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_line_get_extents (PangoLayoutLine *line, PangoRectangle *ink_rect, PangoRectangle *logical_rect);"
pango;pango_layout_line_get_pixel_extents;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_line_get_pixel_extents (PangoLayoutLine *layout_line, PangoRectangle *ink_rect, PangoRectangle *logical_rect);"
pango;pango_layout_line_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" GType pango_layout_line_get_type (void) G_GNUC_CONST;"
pango;pango_layout_line_get_x_ranges;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_line_get_x_ranges (PangoLayoutLine *line, int start_index, int end_index, int **ranges, int *n_ranges);"
pango;pango_layout_line_index_to_x;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_line_index_to_x (PangoLayoutLine *line, int index_, gboolean trailing, int *x_pos);"
pango;pango_layout_line_ref;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" PangoLayoutLine *pango_layout_line_ref (PangoLayoutLine *line);"
pango;pango_layout_line_unref;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_line_unref (PangoLayoutLine *line);"
pango;pango_layout_line_x_to_index;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" gboolean pango_layout_line_x_to_index (PangoLayoutLine *line, int x_pos, int *index_, int *trailing);"
pango;pango_layout_move_cursor_visually;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_move_cursor_visually (PangoLayout *layout, gboolean strong, int old_index, int old_trailing, int direction, int *new_index, int *new_trailing);"
pango;pango_layout_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"PangoLayout *pango_layout_new (PangoContext *context);"
pango;pango_layout_set_alignment;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_set_alignment (PangoLayout *layout, PangoAlignment alignment);"
pango;pango_layout_set_attributes;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_set_attributes (PangoLayout *layout, PangoAttrList *attrs);"
pango;pango_layout_set_auto_dir;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_set_auto_dir (PangoLayout *layout, gboolean auto_dir);"
pango;pango_layout_set_ellipsize;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_set_ellipsize (PangoLayout *layout, PangoEllipsizeMode ellipsize);"
pango;pango_layout_set_font_description;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_set_font_description (PangoLayout *layout, const PangoFontDescription *desc);"
pango;pango_layout_set_height;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_set_height (PangoLayout *layout, int height);"
pango;pango_layout_set_indent;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_set_indent (PangoLayout *layout, int indent);"
pango;pango_layout_set_justify;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_set_justify (PangoLayout *layout, gboolean justify);"
pango;pango_layout_set_markup;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_set_markup (PangoLayout *layout, const char *markup, int length);"
pango;pango_layout_set_markup_with_accel;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_set_markup_with_accel (PangoLayout *layout, const char *markup, int length, gunichar accel_marker, gunichar *accel_char);"
pango;pango_layout_set_single_paragraph_mode;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_set_single_paragraph_mode (PangoLayout *layout, gboolean setting);"
pango;pango_layout_set_spacing;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_set_spacing (PangoLayout *layout, int spacing);"
pango;pango_layout_set_tabs;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_set_tabs (PangoLayout *layout, PangoTabArray *tabs);"
pango;pango_layout_set_text;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_set_text (PangoLayout *layout, const char *text, int length);"
pango;pango_layout_set_width;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;" void pango_layout_set_width (PangoLayout *layout, int width);"
pango;pango_layout_set_wrap;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"void pango_layout_set_wrap (PangoLayout *layout, PangoWrapMode wrap);"
pango;pango_layout_xy_to_index;pango-auto.f90;/usr/include/pango-1.0/pango/pango-layout.h;"gboolean pango_layout_xy_to_index (PangoLayout *layout, int x, int y, int *index_, int *trailing);"
pango;pango_log2vis_get_embedding_levels;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" guint8 * pango_log2vis_get_embedding_levels (const gchar *text, int length, PangoDirection *pbase_dir);"
pango;pango_lookup_aliases;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" void pango_lookup_aliases (const char *fontname, char ***families, int *n_families);"
pango;pango_map_get_engine;pango-auto.f90;/usr/include/pango-1.0/pango/pango-modules.h;" PangoEngine * pango_map_get_engine (PangoMap *map, PangoScript script);"
pango;pango_map_get_engines;pango-auto.f90;/usr/include/pango-1.0/pango/pango-modules.h;" void pango_map_get_engines (PangoMap *map, PangoScript script, GSList **exact_engines, GSList **fallback_engines);"
pango;pango_markup_parser_finish;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;"gboolean pango_markup_parser_finish (GMarkupParseContext *context, PangoAttrList **attr_list, char **text, gunichar *accel_char, GError **error);"
pango;pango_markup_parser_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" GMarkupParseContext * pango_markup_parser_new (gunichar accel_marker);"
pango;pango_matrix_concat;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;"void pango_matrix_concat (PangoMatrix *matrix, const PangoMatrix *new_matrix);"
pango;pango_matrix_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;" PangoMatrix *pango_matrix_copy (const PangoMatrix *matrix);"
pango;pango_matrix_free;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;"void pango_matrix_free (PangoMatrix *matrix);"
pango;pango_matrix_get_font_scale_factor;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;"double pango_matrix_get_font_scale_factor (const PangoMatrix *matrix) G_GNUC_PURE;"
pango;pango_matrix_get_font_scale_factors;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;"void pango_matrix_get_font_scale_factors (const PangoMatrix *matrix, double *xscale, double *yscale);"
pango;pango_matrix_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;"  GType pango_matrix_get_type (void) G_GNUC_CONST;"
pango;pango_matrix_rotate;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;"void pango_matrix_rotate (PangoMatrix *matrix, double degrees);"
pango;pango_matrix_scale;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;"void pango_matrix_scale (PangoMatrix *matrix, double scale_x, double scale_y);"
pango;pango_matrix_transform_distance;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;"void pango_matrix_transform_distance (const PangoMatrix *matrix, double *dx, double *dy);"
pango;pango_matrix_transform_pixel_rectangle;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;"void pango_matrix_transform_pixel_rectangle (const PangoMatrix *matrix, PangoRectangle *rect);"
pango;pango_matrix_transform_point;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;"void pango_matrix_transform_point (const PangoMatrix *matrix, double *x, double *y);"
pango;pango_matrix_transform_rectangle;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;"void pango_matrix_transform_rectangle (const PangoMatrix *matrix, PangoRectangle *rect);"
pango;pango_matrix_translate;pango-auto.f90;/usr/include/pango-1.0/pango/pango-matrix.h;" void pango_matrix_translate (PangoMatrix *matrix, double tx, double ty);"
pango;pango_module_register;pango-auto.f90;/usr/include/pango-1.0/pango/pango-modules.h;" void pango_module_register (PangoIncludedModule *module);"
pango;pango_ot_buffer_add_glyph;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" void pango_ot_buffer_add_glyph (PangoOTBuffer *buffer, guint glyph, guint properties, guint cluster);"
pango;pango_ot_buffer_clear;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" void pango_ot_buffer_clear (PangoOTBuffer *buffer);"
pango;pango_ot_buffer_destroy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" void pango_ot_buffer_destroy (PangoOTBuffer *buffer);"
pango;pango_ot_buffer_get_glyphs;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" void pango_ot_buffer_get_glyphs (const PangoOTBuffer *buffer, PangoOTGlyph **glyphs, int *n_glyphs);"
pango;pango_ot_buffer_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoOTBuffer *pango_ot_buffer_new (PangoFcFont *font);"
pango;pango_ot_buffer_output;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" void pango_ot_buffer_output (const PangoOTBuffer *buffer, PangoGlyphString *glyphs);"
pango;pango_ot_buffer_set_rtl;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" void pango_ot_buffer_set_rtl (PangoOTBuffer *buffer, gboolean rtl);"
pango;pango_ot_buffer_set_zero_width_marks;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" void pango_ot_buffer_set_zero_width_marks (PangoOTBuffer *buffer, gboolean zero_width_marks);"
pango;pango_ot_info_find_feature;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" gboolean pango_ot_info_find_feature (PangoOTInfo *info, PangoOTTableType table_type, PangoOTTag feature_tag, guint script_index, guint language_index, guint *feature_index);"
pango;pango_ot_info_find_language;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" gboolean pango_ot_info_find_language (PangoOTInfo *info, PangoOTTableType table_type, guint script_index, PangoOTTag language_tag, guint *language_index, guint *required_feature_index);"
pango;pango_ot_info_find_script;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" gboolean pango_ot_info_find_script (PangoOTInfo *info, PangoOTTableType table_type, PangoOTTag script_tag, guint *script_index);"
pango;pango_ot_info_get;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoOTInfo *pango_ot_info_get (FT_Face face);"
pango;pango_ot_info_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;"  GType pango_ot_info_get_type (void) G_GNUC_CONST;"
pango;pango_ot_info_list_features;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoOTTag *pango_ot_info_list_features (PangoOTInfo *info, PangoOTTableType table_type, PangoOTTag tag, guint script_index, guint language_index);"
pango;pango_ot_info_list_languages;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoOTTag *pango_ot_info_list_languages (PangoOTInfo *info, PangoOTTableType table_type, guint script_index, PangoOTTag language_tag);"
pango;pango_ot_info_list_scripts;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoOTTag *pango_ot_info_list_scripts (PangoOTInfo *info, PangoOTTableType table_type);"
pango;pango_ot_ruleset_add_feature;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" void pango_ot_ruleset_add_feature (PangoOTRuleset *ruleset, PangoOTTableType table_type, guint feature_index, gulong property_bit);"
pango;pango_ot_ruleset_description_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoOTRulesetDescription *pango_ot_ruleset_description_copy (const PangoOTRulesetDescription *desc);"
pango;pango_ot_ruleset_description_equal;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" gboolean pango_ot_ruleset_description_equal (const PangoOTRulesetDescription *desc1, const PangoOTRulesetDescription *desc2) G_GNUC_PURE;"
pango;pango_ot_ruleset_description_free;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" void pango_ot_ruleset_description_free (PangoOTRulesetDescription *desc);"
pango;pango_ot_ruleset_description_hash;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" guint pango_ot_ruleset_description_hash (const PangoOTRulesetDescription *desc) G_GNUC_PURE;"
pango;pango_ot_ruleset_get_feature_count;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" guint pango_ot_ruleset_get_feature_count (const PangoOTRuleset *ruleset, guint *n_gsub_features, guint *n_gpos_features);"
pango;pango_ot_ruleset_get_for_description;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" const PangoOTRuleset *pango_ot_ruleset_get_for_description (PangoOTInfo *info, const PangoOTRulesetDescription *desc);"
pango;pango_ot_ruleset_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" GType pango_ot_ruleset_get_type (void) G_GNUC_CONST;"
pango;pango_ot_ruleset_maybe_add_feature;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" gboolean pango_ot_ruleset_maybe_add_feature (PangoOTRuleset *ruleset, PangoOTTableType table_type, PangoOTTag feature_tag, gulong property_bit);"
pango;pango_ot_ruleset_maybe_add_features;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" guint pango_ot_ruleset_maybe_add_features (PangoOTRuleset *ruleset, PangoOTTableType table_type, const PangoOTFeatureMap *features, guint n_features);"
pango;pango_ot_ruleset_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoOTRuleset *pango_ot_ruleset_new (PangoOTInfo *info);"
pango;pango_ot_ruleset_new_for;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoOTRuleset *pango_ot_ruleset_new_for (PangoOTInfo *info, PangoScript script, PangoLanguage *language);"
pango;pango_ot_ruleset_new_from_description;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoOTRuleset *pango_ot_ruleset_new_from_description (PangoOTInfo *info, const PangoOTRulesetDescription *desc);"
pango;pango_ot_ruleset_position;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" void pango_ot_ruleset_position (const PangoOTRuleset *ruleset, PangoOTBuffer *buffer);"
pango;pango_ot_ruleset_substitute;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" void pango_ot_ruleset_substitute (const PangoOTRuleset *ruleset, PangoOTBuffer *buffer);"
pango;pango_ot_tag_from_language;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoOTTag pango_ot_tag_from_language (PangoLanguage *language) G_GNUC_CONST;"
pango;pango_ot_tag_from_script;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoOTTag pango_ot_tag_from_script (PangoScript script) G_GNUC_CONST;"
pango;pango_ot_tag_to_language;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoLanguage *pango_ot_tag_to_language (PangoOTTag language_tag) G_GNUC_CONST;"
pango;pango_ot_tag_to_script;pango-auto.f90;/usr/include/pango-1.0/pango/pango-ot.h;" PangoScript pango_ot_tag_to_script (PangoOTTag script_tag) G_GNUC_CONST;"
pango;pango_parse_enum;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" gboolean pango_parse_enum (GType type, const char *str, int *value, gboolean warn, char **possible_values);"
pango;pango_parse_markup;pango-auto.f90;/usr/include/pango-1.0/pango/pango-attributes.h;" gboolean pango_parse_markup (const char *markup_text, int length, gunichar accel_marker, PangoAttrList **attr_list, char **text, gunichar *accel_char, GError **error);"
pango;pango_parse_stretch;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;"gboolean pango_parse_stretch (const char *str, PangoStretch *stretch, gboolean warn);"
pango;pango_parse_style;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" gboolean pango_parse_style (const char *str, PangoStyle *style, gboolean warn);"
pango;pango_parse_variant;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;"gboolean pango_parse_variant (const char *str, PangoVariant *variant, gboolean warn);"
pango;pango_parse_weight;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;"gboolean pango_parse_weight (const char *str, PangoWeight *weight, gboolean warn);"
pango;pango_quantize_line_geometry;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" void pango_quantize_line_geometry (int *thickness, int *position);"
pango;pango_read_line;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" gint pango_read_line (FILE *stream, GString *str);"
pango;pango_render_part_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_render_part_get_type (void) G_GNUC_CONST;"
pango;pango_renderer_activate;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;" void pango_renderer_activate (PangoRenderer *renderer);"
pango;pango_renderer_deactivate;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"void pango_renderer_deactivate (PangoRenderer *renderer);"
pango;pango_renderer_draw_error_underline;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"void pango_renderer_draw_error_underline (PangoRenderer *renderer, int x, int y, int width, int height);"
pango;pango_renderer_draw_glyph;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"void pango_renderer_draw_glyph (PangoRenderer *renderer, PangoFont *font, PangoGlyph glyph, double x, double y);"
pango;pango_renderer_draw_glyph_item;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"void pango_renderer_draw_glyph_item (PangoRenderer *renderer, const char *text, PangoGlyphItem *glyph_item, int x, int y);"
pango;pango_renderer_draw_glyphs;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"void pango_renderer_draw_glyphs (PangoRenderer *renderer, PangoFont *font, PangoGlyphString *glyphs, int x, int y);"
pango;pango_renderer_draw_layout;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;" void pango_renderer_draw_layout (PangoRenderer *renderer, PangoLayout *layout, int x, int y);"
pango;pango_renderer_draw_layout_line;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"void pango_renderer_draw_layout_line (PangoRenderer *renderer, PangoLayoutLine *line, int x, int y);"
pango;pango_renderer_draw_rectangle;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"void pango_renderer_draw_rectangle (PangoRenderer *renderer, PangoRenderPart part, int x, int y, int width, int height);"
pango;pango_renderer_draw_trapezoid;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"void pango_renderer_draw_trapezoid (PangoRenderer *renderer, PangoRenderPart part, double y1_, double x11, double x21, double y2, double x12, double x22);"
pango;pango_renderer_get_alpha;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"guint16 pango_renderer_get_alpha (PangoRenderer *renderer, PangoRenderPart part);"
pango;pango_renderer_get_color;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"PangoColor *pango_renderer_get_color (PangoRenderer *renderer, PangoRenderPart part);"
pango;pango_renderer_get_layout;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;" PangoLayout *pango_renderer_get_layout (PangoRenderer *renderer);"
pango;pango_renderer_get_layout_line;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"PangoLayoutLine *pango_renderer_get_layout_line (PangoRenderer *renderer);"
pango;pango_renderer_get_matrix;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"const PangoMatrix *pango_renderer_get_matrix (PangoRenderer *renderer);"
pango;pango_renderer_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;"  GType pango_renderer_get_type (void) G_GNUC_CONST;"
pango;pango_renderer_part_changed;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;" void pango_renderer_part_changed (PangoRenderer *renderer, PangoRenderPart part);"
pango;pango_renderer_set_alpha;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;" void pango_renderer_set_alpha (PangoRenderer *renderer, PangoRenderPart part, guint16 alpha);"
pango;pango_renderer_set_color;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;" void pango_renderer_set_color (PangoRenderer *renderer, PangoRenderPart part, const PangoColor *color);"
pango;pango_renderer_set_matrix;pango-auto.f90;/usr/include/pango-1.0/pango/pango-renderer.h;" void pango_renderer_set_matrix (PangoRenderer *renderer, const PangoMatrix *matrix);"
pango;pango_reorder_items;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;" GList *pango_reorder_items (GList *logical_items);"
pango;pango_scan_int;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" gboolean pango_scan_int (const char **pos, int *out);"
pango;pango_scan_string;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" gboolean pango_scan_string (const char **pos, GString *out);"
pango;pango_scan_word;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" gboolean pango_scan_word (const char **pos, GString *out);"
pango;pango_script_for_unichar;pango-auto.f90;/usr/include/pango-1.0/pango/pango-script.h;"  PangoScript pango_script_for_unichar (gunichar ch) G_GNUC_CONST;"
pango;pango_script_get_sample_language;pango-auto.f90;/usr/include/pango-1.0/pango/pango-script.h;" PangoLanguage *pango_script_get_sample_language (PangoScript script) G_GNUC_PURE;"
pango;pango_script_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_script_get_type (void) G_GNUC_CONST;"
pango;pango_script_iter_free;pango-auto.f90;/usr/include/pango-1.0/pango/pango-script.h;"void pango_script_iter_free (PangoScriptIter *iter);"
pango;pango_script_iter_get_range;pango-auto.f90;/usr/include/pango-1.0/pango/pango-script.h;"void pango_script_iter_get_range (PangoScriptIter *iter, const char **start, const char **end, PangoScript *script);"
pango;pango_script_iter_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-script.h;" PangoScriptIter *pango_script_iter_new (const char *text, int length);"
pango;pango_script_iter_next;pango-auto.f90;/usr/include/pango-1.0/pango/pango-script.h;"gboolean pango_script_iter_next (PangoScriptIter *iter);"
pango;pango_shape;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;" void pango_shape (const gchar *text, gint length, const PangoAnalysis *analysis, PangoGlyphString *glyphs);"
pango;pango_shape_full;pango-auto.f90;/usr/include/pango-1.0/pango/pango-glyph.h;" void pango_shape_full (const gchar *item_text, gint item_length, const gchar *paragraph_text, gint paragraph_length, const PangoAnalysis *analysis, PangoGlyphString *glyphs);"
pango;pango_skip_space;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" gboolean pango_skip_space (const char **pos);"
pango;pango_split_file_list;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;"  char ** pango_split_file_list (const char *str);"
pango;pango_stretch_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_stretch_get_type (void) G_GNUC_CONST;"
pango;pango_style_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_style_get_type (void) G_GNUC_CONST;"
pango;pango_tab_align_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_tab_align_get_type (void) G_GNUC_CONST;"
pango;pango_tab_array_copy;pango-auto.f90;/usr/include/pango-1.0/pango/pango-tabs.h;"PangoTabArray *pango_tab_array_copy (PangoTabArray *src);"
pango;pango_tab_array_free;pango-auto.f90;/usr/include/pango-1.0/pango/pango-tabs.h;"void pango_tab_array_free (PangoTabArray *tab_array);"
pango;pango_tab_array_get_positions_in_pixels;pango-auto.f90;/usr/include/pango-1.0/pango/pango-tabs.h;" gboolean pango_tab_array_get_positions_in_pixels (PangoTabArray *tab_array);"
pango;pango_tab_array_get_size;pango-auto.f90;/usr/include/pango-1.0/pango/pango-tabs.h;"gint pango_tab_array_get_size (PangoTabArray *tab_array);"
pango;pango_tab_array_get_tab;pango-auto.f90;/usr/include/pango-1.0/pango/pango-tabs.h;"void pango_tab_array_get_tab (PangoTabArray *tab_array, gint tab_index, PangoTabAlign *alignment, gint *location);"
pango;pango_tab_array_get_tabs;pango-auto.f90;/usr/include/pango-1.0/pango/pango-tabs.h;"void pango_tab_array_get_tabs (PangoTabArray *tab_array, PangoTabAlign **alignments, gint **locations);"
pango;pango_tab_array_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-tabs.h;"GType pango_tab_array_get_type (void) G_GNUC_CONST;"
pango;pango_tab_array_new;pango-auto.f90;/usr/include/pango-1.0/pango/pango-tabs.h;"  PangoTabArray *pango_tab_array_new (gint initial_size, gboolean positions_in_pixels);"
pango;pango_tab_array_resize;pango-auto.f90;/usr/include/pango-1.0/pango/pango-tabs.h;"void pango_tab_array_resize (PangoTabArray *tab_array, gint new_size);"
pango;pango_tab_array_set_tab;pango-auto.f90;/usr/include/pango-1.0/pango/pango-tabs.h;"void pango_tab_array_set_tab (PangoTabArray *tab_array, gint tab_index, PangoTabAlign alignment, gint location);"
pango;pango_trim_string;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" char *pango_trim_string (const char *str);"
pango;pango_underline_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_underline_get_type (void) G_GNUC_CONST;"
pango;pango_unichar_direction;pango-auto.f90;/usr/include/pango-1.0/pango/pango-bidi-type.h;" PangoDirection pango_unichar_direction (gunichar ch) G_GNUC_CONST;"
pango;pango_units_from_double;pango-auto.f90;/usr/include/pango-1.0/pango/pango-types.h;"  int pango_units_from_double (double d) G_GNUC_CONST;"
pango;pango_units_to_double;pango-auto.f90;/usr/include/pango-1.0/pango/pango-types.h;"double pango_units_to_double (int i) G_GNUC_CONST;"
pango;pango_variant_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_variant_get_type (void) G_GNUC_CONST;"
pango;pango_version;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" int pango_version (void) G_GNUC_CONST;"
pango;pango_version_check;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" const char * pango_version_check (int required_major, int required_minor, int required_micro) G_GNUC_CONST;"
pango;pango_version_string;pango-auto.f90;/usr/include/pango-1.0/pango/pango-utils.h;" const char * pango_version_string (void) G_GNUC_CONST;"
pango;pango_weight_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_weight_get_type (void) G_GNUC_CONST;"
pango;pango_wrap_mode_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pango-enum-types.h;" GType pango_wrap_mode_get_type (void) G_GNUC_CONST;"
pango;pango_xft_font_get_display;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;"Display * pango_xft_font_get_display (PangoFont *font);"
pango;pango_xft_font_get_font;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;" XftFont * pango_xft_font_get_font (PangoFont *font);"
pango;pango_xft_font_get_glyph;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;" guint pango_xft_font_get_glyph (PangoFont *font, gunichar wc);"
pango;pango_xft_font_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;" GType pango_xft_font_get_type (void) G_GNUC_CONST;"
pango;pango_xft_font_get_unknown_glyph;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;" PangoGlyph pango_xft_font_get_unknown_glyph (PangoFont *font, gunichar wc);"
pango;pango_xft_font_has_char;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;" gboolean pango_xft_font_has_char (PangoFont *font, gunichar wc);"
pango;pango_xft_font_lock_face;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;" FT_Face pango_xft_font_lock_face (PangoFont *font);"
pango;pango_xft_font_map_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;" GType pango_xft_font_map_get_type (void) G_GNUC_CONST;"
pango;pango_xft_font_unlock_face;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;" void pango_xft_font_unlock_face (PangoFont *font);"
pango;pango_xft_get_context;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;" PangoContext *pango_xft_get_context (Display *display, int screen);"
pango;pango_xft_get_font_map;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;"  PangoFontMap *pango_xft_get_font_map (Display *display, int screen);"
pango;pango_xft_picture_render;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft-render.h;"void pango_xft_picture_render (Display *display, Picture src_picture, Picture dest_picture, PangoFont *font, PangoGlyphString *glyphs, gint x, gint y);"
pango;pango_xft_render;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft-render.h;" void pango_xft_render (XftDraw *draw, XftColor *color, PangoFont *font, PangoGlyphString *glyphs, gint x, gint y);"
pango;pango_xft_render_layout;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft-render.h;"void pango_xft_render_layout (XftDraw *draw, XftColor *color, PangoLayout *layout, int x, int y);"
pango;pango_xft_render_layout_line;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft-render.h;"void pango_xft_render_layout_line (XftDraw *draw, XftColor *color, PangoLayoutLine *line, int x, int y);"
pango;pango_xft_render_transformed;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft-render.h;"void pango_xft_render_transformed (XftDraw *draw, XftColor *color, PangoMatrix *matrix, PangoFont *font, PangoGlyphString *glyphs, int x, int y);"
pango;pango_xft_renderer_get_type;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft-render.h;"  GType pango_xft_renderer_get_type (void) G_GNUC_CONST;"
pango;pango_xft_renderer_new;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft-render.h;" PangoRenderer *pango_xft_renderer_new (Display *display, int screen);"
pango;pango_xft_renderer_set_default_color;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft-render.h;"void pango_xft_renderer_set_default_color (PangoXftRenderer *xftrenderer, PangoColor *default_color);"
pango;pango_xft_renderer_set_draw;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft-render.h;"void pango_xft_renderer_set_draw (PangoXftRenderer *xftrenderer, XftDraw *draw);"
pango;pango_xft_set_default_substitute;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;" void pango_xft_set_default_substitute (Display *display, int screen, PangoXftSubstituteFunc func, gpointer data, GDestroyNotify notify);"
pango;pango_xft_shutdown_display;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;" void pango_xft_shutdown_display (Display *display, int screen);"
pango;pango_xft_substitute_changed;pango-auto.f90;/usr/include/pango-1.0/pango/pangoxft.h;"void pango_xft_substitute_changed (Display *display, int screen);"
pango;script_engine_create;pango-auto.f90;/usr/include/pango-1.0/pango/pango-engine.h;" PangoEngine *script_engine_create (const char *id);"
pango;script_engine_exit;pango-auto.f90;/usr/include/pango-1.0/pango/pango-engine.h;" void script_engine_exit (void);"
pango;script_engine_init;pango-auto.f90;/usr/include/pango-1.0/pango/pango-engine.h;" void script_engine_init (GTypeModule *module);"
pango;script_engine_list;pango-auto.f90;/usr/include/pango-1.0/pango/pango-engine.h;" void script_engine_list (PangoEngineInfo **engines, int *n_engines);"
